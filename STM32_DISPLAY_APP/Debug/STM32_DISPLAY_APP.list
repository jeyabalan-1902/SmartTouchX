
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010068  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002258  08018238  08018238  00011238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a490  0801a490  000141f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a490  0801a490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a498  0801a498  000141f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a498  0801a498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a49c  0801a49c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0801a4a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013204  200001f8  0801a698  000141f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200133fc  0801a698  000143fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7f9  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004378  00000000  00000000  00030a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  00034da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001541  00000000  00000000  000368a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256b1  00000000  00000000  00037de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f32c  00000000  00000000  0005d492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e15dc  00000000  00000000  0007c7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dd9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088c8  00000000  00000000  0015dde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001666a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	200001f8 	.word	0x200001f8
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08018220 	.word	0x08018220

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	200001fc 	.word	0x200001fc
 800820c:	08018220 	.word	0x08018220

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr

08008224 <strlen>:
 8008224:	4603      	mov	r3, r0
 8008226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822a:	2a00      	cmp	r2, #0
 800822c:	d1fb      	bne.n	8008226 <strlen+0x2>
 800822e:	1a18      	subs	r0, r3, r0
 8008230:	3801      	subs	r0, #1
 8008232:	4770      	bx	lr
	...

08008240 <memchr>:
 8008240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008244:	2a10      	cmp	r2, #16
 8008246:	db2b      	blt.n	80082a0 <memchr+0x60>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	d008      	beq.n	8008260 <memchr+0x20>
 800824e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008252:	3a01      	subs	r2, #1
 8008254:	428b      	cmp	r3, r1
 8008256:	d02d      	beq.n	80082b4 <memchr+0x74>
 8008258:	f010 0f07 	tst.w	r0, #7
 800825c:	b342      	cbz	r2, 80082b0 <memchr+0x70>
 800825e:	d1f6      	bne.n	800824e <memchr+0xe>
 8008260:	b4f0      	push	{r4, r5, r6, r7}
 8008262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800826a:	f022 0407 	bic.w	r4, r2, #7
 800826e:	f07f 0700 	mvns.w	r7, #0
 8008272:	2300      	movs	r3, #0
 8008274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008278:	3c08      	subs	r4, #8
 800827a:	ea85 0501 	eor.w	r5, r5, r1
 800827e:	ea86 0601 	eor.w	r6, r6, r1
 8008282:	fa85 f547 	uadd8	r5, r5, r7
 8008286:	faa3 f587 	sel	r5, r3, r7
 800828a:	fa86 f647 	uadd8	r6, r6, r7
 800828e:	faa5 f687 	sel	r6, r5, r7
 8008292:	b98e      	cbnz	r6, 80082b8 <memchr+0x78>
 8008294:	d1ee      	bne.n	8008274 <memchr+0x34>
 8008296:	bcf0      	pop	{r4, r5, r6, r7}
 8008298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800829c:	f002 0207 	and.w	r2, r2, #7
 80082a0:	b132      	cbz	r2, 80082b0 <memchr+0x70>
 80082a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082a6:	3a01      	subs	r2, #1
 80082a8:	ea83 0301 	eor.w	r3, r3, r1
 80082ac:	b113      	cbz	r3, 80082b4 <memchr+0x74>
 80082ae:	d1f8      	bne.n	80082a2 <memchr+0x62>
 80082b0:	2000      	movs	r0, #0
 80082b2:	4770      	bx	lr
 80082b4:	3801      	subs	r0, #1
 80082b6:	4770      	bx	lr
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	bf06      	itte	eq
 80082bc:	4635      	moveq	r5, r6
 80082be:	3803      	subeq	r0, #3
 80082c0:	3807      	subne	r0, #7
 80082c2:	f015 0f01 	tst.w	r5, #1
 80082c6:	d107      	bne.n	80082d8 <memchr+0x98>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082ce:	bf02      	ittt	eq
 80082d0:	3001      	addeq	r0, #1
 80082d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082d6:	3001      	addeq	r0, #1
 80082d8:	bcf0      	pop	{r4, r5, r6, r7}
 80082da:	3801      	subs	r0, #1
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	80fb      	strh	r3, [r7, #6]
 8008fea:	460b      	mov	r3, r1
 8008fec:	80bb      	strh	r3, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	88b9      	ldrh	r1, [r7, #4]
 8008ff6:	887a      	ldrh	r2, [r7, #2]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fe23 	bl	8009c44 <ST7735_DrawPixel>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b085      	sub	sp, #20
 800900a:	af02      	add	r7, sp, #8
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4623      	mov	r3, r4
 8009016:	80fb      	strh	r3, [r7, #6]
 8009018:	4603      	mov	r3, r0
 800901a:	80bb      	strh	r3, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	807b      	strh	r3, [r7, #2]
 8009020:	4613      	mov	r3, r2
 8009022:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8009024:	88f8      	ldrh	r0, [r7, #6]
 8009026:	88b9      	ldrh	r1, [r7, #4]
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	883c      	ldrh	r4, [r7, #0]
 800902c:	8b3b      	ldrh	r3, [r7, #24]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4623      	mov	r3, r4
 8009032:	f000 ff11 	bl	8009e58 <ST7735_FillRectangle>
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	bd90      	pop	{r4, r7, pc}

0800903e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	4603      	mov	r3, r0
 8009046:	80fb      	strh	r3, [r7, #6]
 8009048:	460b      	mov	r3, r1
 800904a:	80bb      	strh	r3, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffc0 	bl	8008fe0 <drawPixel>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4623      	mov	r3, r4
 8009078:	80fb      	strh	r3, [r7, #6]
 800907a:	4603      	mov	r3, r0
 800907c:	80bb      	strh	r3, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	807b      	strh	r3, [r7, #2]
 8009082:	4613      	mov	r3, r2
 8009084:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8009086:	f9b7 2000 	ldrsh.w	r2, [r7]
 800908a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009094:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009098:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800909c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090a0:	1acb      	subs	r3, r1, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	425b      	neglt	r3, r3
 80090a8:	429a      	cmp	r2, r3
 80090aa:	bfcc      	ite	gt
 80090ac:	2301      	movgt	r3, #1
 80090ae:	2300      	movle	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80090b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	833b      	strh	r3, [r7, #24]
 80090c0:	88bb      	ldrh	r3, [r7, #4]
 80090c2:	80fb      	strh	r3, [r7, #6]
 80090c4:	8b3b      	ldrh	r3, [r7, #24]
 80090c6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80090c8:	887b      	ldrh	r3, [r7, #2]
 80090ca:	82fb      	strh	r3, [r7, #22]
 80090cc:	883b      	ldrh	r3, [r7, #0]
 80090ce:	807b      	strh	r3, [r7, #2]
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80090d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090dc:	429a      	cmp	r2, r3
 80090de:	dd0b      	ble.n	80090f8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	82bb      	strh	r3, [r7, #20]
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	80fb      	strh	r3, [r7, #6]
 80090e8:	8abb      	ldrh	r3, [r7, #20]
 80090ea:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80090ec:	88bb      	ldrh	r3, [r7, #4]
 80090ee:	827b      	strh	r3, [r7, #18]
 80090f0:	883b      	ldrh	r3, [r7, #0]
 80090f2:	80bb      	strh	r3, [r7, #4]
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80090f8:	887a      	ldrh	r2, [r7, #2]
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29b      	uxth	r3, r3
 8009100:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8009102:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb8      	it	lt
 8009110:	425b      	neglt	r3, r3
 8009112:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8009114:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009118:	0fda      	lsrs	r2, r3, #31
 800911a:	4413      	add	r3, r2
 800911c:	105b      	asrs	r3, r3, #1
 800911e:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8009120:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009124:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009128:	429a      	cmp	r2, r3
 800912a:	da02      	bge.n	8009132 <writeLine+0xca>
        ystep = 1;
 800912c:	2301      	movs	r3, #1
 800912e:	83bb      	strh	r3, [r7, #28]
 8009130:	e031      	b.n	8009196 <writeLine+0x12e>
    } else {
        ystep = -1;
 8009132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009136:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8009138:	e02d      	b.n	8009196 <writeLine+0x12e>
        if (steep) {
 800913a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <writeLine+0xec>
            writePixel(y0, x0, color);
 8009142:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009144:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009148:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff76 	bl	800903e <writePixel>
 8009152:	e007      	b.n	8009164 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8009154:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009156:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800915a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ff6d 	bl	800903e <writePixel>
        }
        err -= dy;
 8009164:	8bfa      	ldrh	r2, [r7, #30]
 8009166:	89fb      	ldrh	r3, [r7, #14]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800916e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da09      	bge.n	800918a <writeLine+0x122>
            y0 += ystep;
 8009176:	88ba      	ldrh	r2, [r7, #4]
 8009178:	8bbb      	ldrh	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	b29b      	uxth	r3, r3
 800917e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8009180:	8bfa      	ldrh	r2, [r7, #30]
 8009182:	8a3b      	ldrh	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800918a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800918e:	b29b      	uxth	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	80fb      	strh	r3, [r7, #6]
 8009196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800919a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800919e:	429a      	cmp	r2, r3
 80091a0:	ddcb      	ble.n	800913a <writeLine+0xd2>
        }
    }
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3724      	adds	r7, #36	@ 0x24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}

080091ac <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4623      	mov	r3, r4
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4603      	mov	r3, r0
 80091c0:	80bb      	strh	r3, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]
 80091c6:	4613      	mov	r3, r2
 80091c8:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80091ca:	88ba      	ldrh	r2, [r7, #4]
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	4413      	add	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b21c      	sxth	r4, r3
 80091d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80091e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80091e4:	883b      	ldrh	r3, [r7, #0]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4623      	mov	r3, r4
 80091ea:	f7ff ff3d 	bl	8009068 <writeLine>
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd90      	pop	{r4, r7, pc}

080091f6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80091f6:	b590      	push	{r4, r7, lr}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af02      	add	r7, sp, #8
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	461a      	mov	r2, r3
 8009204:	4623      	mov	r3, r4
 8009206:	80fb      	strh	r3, [r7, #6]
 8009208:	4603      	mov	r3, r0
 800920a:	80bb      	strh	r3, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
 8009210:	4613      	mov	r3, r2
 8009212:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	4413      	add	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	b21a      	sxth	r2, r3
 8009222:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8009226:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800922a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800922e:	883b      	ldrh	r3, [r7, #0]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4623      	mov	r3, r4
 8009234:	f7ff ff18 	bl	8009068 <writeLine>
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b087      	sub	sp, #28
 8009244:	af02      	add	r7, sp, #8
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4623      	mov	r3, r4
 8009250:	80fb      	strh	r3, [r7, #6]
 8009252:	4603      	mov	r3, r0
 8009254:	80bb      	strh	r3, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	4613      	mov	r3, r2
 800925c:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800925e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009266:	429a      	cmp	r2, r3
 8009268:	d11a      	bne.n	80092a0 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800926a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800926e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009272:	429a      	cmp	r2, r3
 8009274:	dd05      	ble.n	8009282 <drawLine+0x42>
 8009276:	88bb      	ldrh	r3, [r7, #4]
 8009278:	81bb      	strh	r3, [r7, #12]
 800927a:	883b      	ldrh	r3, [r7, #0]
 800927c:	80bb      	strh	r3, [r7, #4]
 800927e:	89bb      	ldrh	r3, [r7, #12]
 8009280:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8009282:	883a      	ldrh	r2, [r7, #0]
 8009284:	88bb      	ldrh	r3, [r7, #4]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	3301      	adds	r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	b21a      	sxth	r2, r3
 8009290:	8c3b      	ldrh	r3, [r7, #32]
 8009292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800929a:	f7ff ff87 	bl	80091ac <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800929e:	e02d      	b.n	80092fc <drawLine+0xbc>
    } else if(y0 == y1){
 80092a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80092a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d11a      	bne.n	80092e2 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80092ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	dd05      	ble.n	80092c4 <drawLine+0x84>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	81fb      	strh	r3, [r7, #14]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	80fb      	strh	r3, [r7, #6]
 80092c0:	89fb      	ldrh	r3, [r7, #14]
 80092c2:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3301      	adds	r3, #1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	b21a      	sxth	r2, r3
 80092d2:	8c3b      	ldrh	r3, [r7, #32]
 80092d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092dc:	f7ff ff8b 	bl	80091f6 <drawFastHLine>
}
 80092e0:	e00c      	b.n	80092fc <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80092e2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80092e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80092ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092f2:	8c3b      	ldrh	r3, [r7, #32]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4623      	mov	r3, r4
 80092f8:	f7ff feb6 	bl	8009068 <writeLine>
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}

08009304 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4623      	mov	r3, r4
 8009314:	80fb      	strh	r3, [r7, #6]
 8009316:	4603      	mov	r3, r0
 8009318:	80bb      	strh	r3, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	807b      	strh	r3, [r7, #2]
 800931e:	4613      	mov	r3, r2
 8009320:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8009322:	887b      	ldrh	r3, [r7, #2]
 8009324:	f1c3 0301 	rsb	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	461a      	mov	r2, r3
 8009334:	03d2      	lsls	r2, r2, #15
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8009346:	e0a5      	b.n	8009494 <drawCircleHelper+0x190>
        if (f >= 0) {
 8009348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800934c:	2b00      	cmp	r3, #0
 800934e:	db0e      	blt.n	800936e <drawCircleHelper+0x6a>
            y--;
 8009350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800935c:	8a7b      	ldrh	r3, [r7, #18]
 800935e:	3302      	adds	r3, #2
 8009360:	b29b      	uxth	r3, r3
 8009362:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8009364:	8afa      	ldrh	r2, [r7, #22]
 8009366:	8a7b      	ldrh	r3, [r7, #18]
 8009368:	4413      	add	r3, r2
 800936a:	b29b      	uxth	r3, r3
 800936c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800936e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009372:	b29b      	uxth	r3, r3
 8009374:	3301      	adds	r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800937a:	8abb      	ldrh	r3, [r7, #20]
 800937c:	3302      	adds	r3, #2
 800937e:	b29b      	uxth	r3, r3
 8009380:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8009382:	8afa      	ldrh	r2, [r7, #22]
 8009384:	8abb      	ldrh	r3, [r7, #20]
 8009386:	4413      	add	r3, r2
 8009388:	b29b      	uxth	r3, r3
 800938a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800938c:	787b      	ldrb	r3, [r7, #1]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01b      	beq.n	80093ce <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	8a3b      	ldrh	r3, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	b29b      	uxth	r3, r3
 800939e:	b218      	sxth	r0, r3
 80093a0:	88ba      	ldrh	r2, [r7, #4]
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	4413      	add	r3, r2
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	b21b      	sxth	r3, r3
 80093aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7ff fe46 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 + x, color);
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	4413      	add	r3, r2
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	b218      	sxth	r0, r3
 80093bc:	88ba      	ldrh	r2, [r7, #4]
 80093be:	8a3b      	ldrh	r3, [r7, #16]
 80093c0:	4413      	add	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	b21b      	sxth	r3, r3
 80093c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7ff fe38 	bl	800903e <writePixel>
        }
        if (cornername & 0x2) {
 80093ce:	787b      	ldrb	r3, [r7, #1]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01b      	beq.n	8009410 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80093d8:	88fa      	ldrh	r2, [r7, #6]
 80093da:	8a3b      	ldrh	r3, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	b29b      	uxth	r3, r3
 80093e0:	b218      	sxth	r0, r3
 80093e2:	88ba      	ldrh	r2, [r7, #4]
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	b21b      	sxth	r3, r3
 80093ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ee:	4619      	mov	r1, r3
 80093f0:	f7ff fe25 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 - x, color);
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	4413      	add	r3, r2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	b218      	sxth	r0, r3
 80093fe:	88ba      	ldrh	r2, [r7, #4]
 8009400:	8a3b      	ldrh	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	b29b      	uxth	r3, r3
 8009406:	b21b      	sxth	r3, r3
 8009408:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800940a:	4619      	mov	r1, r3
 800940c:	f7ff fe17 	bl	800903e <writePixel>
        }
        if (cornername & 0x8) {
 8009410:	787b      	ldrb	r3, [r7, #1]
 8009412:	f003 0308 	and.w	r3, r3, #8
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01b      	beq.n	8009452 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	89fb      	ldrh	r3, [r7, #14]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	b29b      	uxth	r3, r3
 8009422:	b218      	sxth	r0, r3
 8009424:	88ba      	ldrh	r2, [r7, #4]
 8009426:	8a3b      	ldrh	r3, [r7, #16]
 8009428:	4413      	add	r3, r2
 800942a:	b29b      	uxth	r3, r3
 800942c:	b21b      	sxth	r3, r3
 800942e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009430:	4619      	mov	r1, r3
 8009432:	f7ff fe04 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	8a3b      	ldrh	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	b29b      	uxth	r3, r3
 800943e:	b218      	sxth	r0, r3
 8009440:	88ba      	ldrh	r2, [r7, #4]
 8009442:	89fb      	ldrh	r3, [r7, #14]
 8009444:	4413      	add	r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	b21b      	sxth	r3, r3
 800944a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800944c:	4619      	mov	r1, r3
 800944e:	f7ff fdf6 	bl	800903e <writePixel>
        }
        if (cornername & 0x1) {
 8009452:	787b      	ldrb	r3, [r7, #1]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01b      	beq.n	8009494 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800945c:	88fa      	ldrh	r2, [r7, #6]
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	b218      	sxth	r0, r3
 8009466:	88ba      	ldrh	r2, [r7, #4]
 8009468:	8a3b      	ldrh	r3, [r7, #16]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	b29b      	uxth	r3, r3
 800946e:	b21b      	sxth	r3, r3
 8009470:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009472:	4619      	mov	r1, r3
 8009474:	f7ff fde3 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	8a3b      	ldrh	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	b29b      	uxth	r3, r3
 8009480:	b218      	sxth	r0, r3
 8009482:	88ba      	ldrh	r2, [r7, #4]
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	b29b      	uxth	r3, r3
 800948a:	b21b      	sxth	r3, r3
 800948c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800948e:	4619      	mov	r1, r3
 8009490:	f7ff fdd5 	bl	800903e <writePixel>
    while (x<y) {
 8009494:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800949c:	429a      	cmp	r2, r3
 800949e:	f6ff af53 	blt.w	8009348 <drawCircleHelper+0x44>
        }
    }
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd90      	pop	{r4, r7, pc}

080094ac <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	80fb      	strh	r3, [r7, #6]
 80094be:	4603      	mov	r3, r0
 80094c0:	80bb      	strh	r3, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	807b      	strh	r3, [r7, #2]
 80094c6:	4613      	mov	r3, r2
 80094c8:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80094ca:	887b      	ldrh	r3, [r7, #2]
 80094cc:	f1c3 0301 	rsb	r3, r3, #1
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80094d4:	2301      	movs	r3, #1
 80094d6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80094d8:	887b      	ldrh	r3, [r7, #2]
 80094da:	461a      	mov	r2, r3
 80094dc:	03d2      	lsls	r2, r2, #15
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80094ea:	887b      	ldrh	r3, [r7, #2]
 80094ec:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80094ee:	8a3b      	ldrh	r3, [r7, #16]
 80094f0:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80094f2:	89fb      	ldrh	r3, [r7, #14]
 80094f4:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80094f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3301      	adds	r3, #1
 80094fe:	b29b      	uxth	r3, r3
 8009500:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8009502:	e095      	b.n	8009630 <fillCircleHelper+0x184>
        if (f >= 0) {
 8009504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009508:	2b00      	cmp	r3, #0
 800950a:	db0e      	blt.n	800952a <fillCircleHelper+0x7e>
            y--;
 800950c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29b      	uxth	r3, r3
 8009516:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8009518:	8a7b      	ldrh	r3, [r7, #18]
 800951a:	3302      	adds	r3, #2
 800951c:	b29b      	uxth	r3, r3
 800951e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8009520:	8afa      	ldrh	r2, [r7, #22]
 8009522:	8a7b      	ldrh	r3, [r7, #18]
 8009524:	4413      	add	r3, r2
 8009526:	b29b      	uxth	r3, r3
 8009528:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800952a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800952e:	b29b      	uxth	r3, r3
 8009530:	3301      	adds	r3, #1
 8009532:	b29b      	uxth	r3, r3
 8009534:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8009536:	8abb      	ldrh	r3, [r7, #20]
 8009538:	3302      	adds	r3, #2
 800953a:	b29b      	uxth	r3, r3
 800953c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800953e:	8afa      	ldrh	r2, [r7, #22]
 8009540:	8abb      	ldrh	r3, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	b29b      	uxth	r3, r3
 8009546:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8009548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800954c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009550:	429a      	cmp	r2, r3
 8009552:	db31      	blt.n	80095b8 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8009554:	787b      	ldrb	r3, [r7, #1]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d013      	beq.n	8009586 <fillCircleHelper+0xda>
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	8a3b      	ldrh	r3, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	b29b      	uxth	r3, r3
 8009566:	b218      	sxth	r0, r3
 8009568:	88ba      	ldrh	r2, [r7, #4]
 800956a:	89fb      	ldrh	r3, [r7, #14]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	b219      	sxth	r1, r3
 8009572:	89fb      	ldrh	r3, [r7, #14]
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800957a:	4413      	add	r3, r2
 800957c:	b29b      	uxth	r3, r3
 800957e:	b21a      	sxth	r2, r3
 8009580:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009582:	f7ff fe13 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8009586:	787b      	ldrb	r3, [r7, #1]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <fillCircleHelper+0x10c>
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	8a3b      	ldrh	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	b29b      	uxth	r3, r3
 8009598:	b218      	sxth	r0, r3
 800959a:	88ba      	ldrh	r2, [r7, #4]
 800959c:	89fb      	ldrh	r3, [r7, #14]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	b219      	sxth	r1, r3
 80095a4:	89fb      	ldrh	r3, [r7, #14]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ac:	4413      	add	r3, r2
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095b4:	f7ff fdfa 	bl	80091ac <drawFastVLine>
        }
        if(y != py) {
 80095b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80095bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d033      	beq.n	800962c <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d013      	beq.n	80095f6 <fillCircleHelper+0x14a>
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	897b      	ldrh	r3, [r7, #10]
 80095d2:	4413      	add	r3, r2
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b218      	sxth	r0, r3
 80095d8:	88ba      	ldrh	r2, [r7, #4]
 80095da:	89bb      	ldrh	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	b219      	sxth	r1, r3
 80095e2:	89bb      	ldrh	r3, [r7, #12]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ea:	4413      	add	r3, r2
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	b21a      	sxth	r2, r3
 80095f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095f2:	f7ff fddb 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80095f6:	787b      	ldrb	r3, [r7, #1]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d013      	beq.n	8009628 <fillCircleHelper+0x17c>
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	897b      	ldrh	r3, [r7, #10]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b29b      	uxth	r3, r3
 8009608:	b218      	sxth	r0, r3
 800960a:	88ba      	ldrh	r2, [r7, #4]
 800960c:	89bb      	ldrh	r3, [r7, #12]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29b      	uxth	r3, r3
 8009612:	b219      	sxth	r1, r3
 8009614:	89bb      	ldrh	r3, [r7, #12]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800961c:	4413      	add	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	b21a      	sxth	r2, r3
 8009622:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009624:	f7ff fdc2 	bl	80091ac <drawFastVLine>
            py = y;
 8009628:	89fb      	ldrh	r3, [r7, #14]
 800962a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800962c:	8a3b      	ldrh	r3, [r7, #16]
 800962e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8009630:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009634:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009638:	429a      	cmp	r2, r3
 800963a:	f6ff af63 	blt.w	8009504 <fillCircleHelper+0x58>
    }
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	bd90      	pop	{r4, r7, pc}

08009648 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b087      	sub	sp, #28
 800964c:	af02      	add	r7, sp, #8
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	461a      	mov	r2, r3
 8009656:	4623      	mov	r3, r4
 8009658:	80fb      	strh	r3, [r7, #6]
 800965a:	4603      	mov	r3, r0
 800965c:	80bb      	strh	r3, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	807b      	strh	r3, [r7, #2]
 8009662:	4613      	mov	r3, r2
 8009664:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009666:	f9b7 2000 	ldrsh.w	r2, [r7]
 800966a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800966e:	4293      	cmp	r3, r2
 8009670:	bfa8      	it	ge
 8009672:	4613      	movge	r3, r2
 8009674:	b21b      	sxth	r3, r3
 8009676:	0fda      	lsrs	r2, r3, #31
 8009678:	4413      	add	r3, r2
 800967a:	105b      	asrs	r3, r3, #1
 800967c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800967e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009686:	429a      	cmp	r2, r3
 8009688:	dd01      	ble.n	800968e <drawRoundRect+0x46>
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800968e:	88fa      	ldrh	r2, [r7, #6]
 8009690:	8c3b      	ldrh	r3, [r7, #32]
 8009692:	4413      	add	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	b218      	sxth	r0, r3
 8009698:	887a      	ldrh	r2, [r7, #2]
 800969a:	8c3b      	ldrh	r3, [r7, #32]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	b29b      	uxth	r3, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21a      	sxth	r2, r3
 80096a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80096ac:	f7ff fda3 	bl	80091f6 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	8c3b      	ldrh	r3, [r7, #32]
 80096b4:	4413      	add	r3, r2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b218      	sxth	r0, r3
 80096ba:	88ba      	ldrh	r2, [r7, #4]
 80096bc:	883b      	ldrh	r3, [r7, #0]
 80096be:	4413      	add	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	b219      	sxth	r1, r3
 80096c8:	887a      	ldrh	r2, [r7, #2]
 80096ca:	8c3b      	ldrh	r3, [r7, #32]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	b21a      	sxth	r2, r3
 80096d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096d8:	f7ff fd8d 	bl	80091f6 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 80096dc:	88ba      	ldrh	r2, [r7, #4]
 80096de:	8c3b      	ldrh	r3, [r7, #32]
 80096e0:	4413      	add	r3, r2
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	b219      	sxth	r1, r3
 80096e6:	883a      	ldrh	r2, [r7, #0]
 80096e8:	8c3b      	ldrh	r3, [r7, #32]
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	b21a      	sxth	r2, r3
 80096f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80096fa:	f7ff fd57 	bl	80091ac <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80096fe:	88fa      	ldrh	r2, [r7, #6]
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	4413      	add	r3, r2
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	b29b      	uxth	r3, r3
 800970a:	b218      	sxth	r0, r3
 800970c:	88ba      	ldrh	r2, [r7, #4]
 800970e:	8c3b      	ldrh	r3, [r7, #32]
 8009710:	4413      	add	r3, r2
 8009712:	b29b      	uxth	r3, r3
 8009714:	b219      	sxth	r1, r3
 8009716:	883a      	ldrh	r2, [r7, #0]
 8009718:	8c3b      	ldrh	r3, [r7, #32]
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	b29b      	uxth	r3, r3
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	b29b      	uxth	r3, r3
 8009722:	b21a      	sxth	r2, r3
 8009724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009726:	f7ff fd41 	bl	80091ac <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	8c3b      	ldrh	r3, [r7, #32]
 800972e:	4413      	add	r3, r2
 8009730:	b29b      	uxth	r3, r3
 8009732:	b218      	sxth	r0, r3
 8009734:	88ba      	ldrh	r2, [r7, #4]
 8009736:	8c3b      	ldrh	r3, [r7, #32]
 8009738:	4413      	add	r3, r2
 800973a:	b29b      	uxth	r3, r3
 800973c:	b219      	sxth	r1, r3
 800973e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	2301      	movs	r3, #1
 8009748:	f7ff fddc 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	887b      	ldrh	r3, [r7, #2]
 8009750:	4413      	add	r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	8c3b      	ldrh	r3, [r7, #32]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	b218      	sxth	r0, r3
 8009760:	88ba      	ldrh	r2, [r7, #4]
 8009762:	8c3b      	ldrh	r3, [r7, #32]
 8009764:	4413      	add	r3, r2
 8009766:	b29b      	uxth	r3, r3
 8009768:	b219      	sxth	r1, r3
 800976a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800976e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	2302      	movs	r3, #2
 8009774:	f7ff fdc6 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	887b      	ldrh	r3, [r7, #2]
 800977c:	4413      	add	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	8c3b      	ldrh	r3, [r7, #32]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	b218      	sxth	r0, r3
 800978c:	88ba      	ldrh	r2, [r7, #4]
 800978e:	883b      	ldrh	r3, [r7, #0]
 8009790:	4413      	add	r3, r2
 8009792:	b29a      	uxth	r2, r3
 8009794:	8c3b      	ldrh	r3, [r7, #32]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	b219      	sxth	r1, r3
 80097a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80097a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2304      	movs	r3, #4
 80097aa:	f7ff fdab 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	8c3b      	ldrh	r3, [r7, #32]
 80097b2:	4413      	add	r3, r2
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b218      	sxth	r0, r3
 80097b8:	88ba      	ldrh	r2, [r7, #4]
 80097ba:	883b      	ldrh	r3, [r7, #0]
 80097bc:	4413      	add	r3, r2
 80097be:	b29a      	uxth	r2, r3
 80097c0:	8c3b      	ldrh	r3, [r7, #32]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	b219      	sxth	r1, r3
 80097cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80097d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2308      	movs	r3, #8
 80097d6:	f7ff fd95 	bl	8009304 <drawCircleHelper>
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd90      	pop	{r4, r7, pc}

080097e2 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80097e2:	b590      	push	{r4, r7, lr}
 80097e4:	b087      	sub	sp, #28
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	4604      	mov	r4, r0
 80097ea:	4608      	mov	r0, r1
 80097ec:	4611      	mov	r1, r2
 80097ee:	461a      	mov	r2, r3
 80097f0:	4623      	mov	r3, r4
 80097f2:	80fb      	strh	r3, [r7, #6]
 80097f4:	4603      	mov	r3, r0
 80097f6:	80bb      	strh	r3, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
 80097fc:	4613      	mov	r3, r2
 80097fe:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009800:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009808:	4293      	cmp	r3, r2
 800980a:	bfa8      	it	ge
 800980c:	4613      	movge	r3, r2
 800980e:	b21b      	sxth	r3, r3
 8009810:	0fda      	lsrs	r2, r3, #31
 8009812:	4413      	add	r3, r2
 8009814:	105b      	asrs	r3, r3, #1
 8009816:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8009818:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800981c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009820:	429a      	cmp	r2, r3
 8009822:	dd01      	ble.n	8009828 <fillRoundRect+0x46>
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	8c3b      	ldrh	r3, [r7, #32]
 800982c:	4413      	add	r3, r2
 800982e:	b29b      	uxth	r3, r3
 8009830:	b218      	sxth	r0, r3
 8009832:	887a      	ldrh	r2, [r7, #2]
 8009834:	8c3b      	ldrh	r3, [r7, #32]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	b21a      	sxth	r2, r3
 8009840:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009844:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4623      	mov	r3, r4
 800984e:	f7ff fbda 	bl	8009006 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	4413      	add	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	8c3b      	ldrh	r3, [r7, #32]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	b218      	sxth	r0, r3
 8009866:	88ba      	ldrh	r2, [r7, #4]
 8009868:	8c3b      	ldrh	r3, [r7, #32]
 800986a:	4413      	add	r3, r2
 800986c:	b29b      	uxth	r3, r3
 800986e:	b219      	sxth	r1, r3
 8009870:	883a      	ldrh	r2, [r7, #0]
 8009872:	8c3b      	ldrh	r3, [r7, #32]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b29b      	uxth	r3, r3
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	b29b      	uxth	r3, r3
 8009880:	b21b      	sxth	r3, r3
 8009882:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009888:	9201      	str	r2, [sp, #4]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2301      	movs	r3, #1
 800988e:	4622      	mov	r2, r4
 8009890:	f7ff fe0c 	bl	80094ac <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	8c3b      	ldrh	r3, [r7, #32]
 8009898:	4413      	add	r3, r2
 800989a:	b29b      	uxth	r3, r3
 800989c:	b218      	sxth	r0, r3
 800989e:	88ba      	ldrh	r2, [r7, #4]
 80098a0:	8c3b      	ldrh	r3, [r7, #32]
 80098a2:	4413      	add	r3, r2
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	b219      	sxth	r1, r3
 80098a8:	883a      	ldrh	r2, [r7, #0]
 80098aa:	8c3b      	ldrh	r3, [r7, #32]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80098be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2302      	movs	r3, #2
 80098c6:	4622      	mov	r2, r4
 80098c8:	f7ff fdf0 	bl	80094ac <fillCircleHelper>
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd90      	pop	{r4, r7, pc}

080098d4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af02      	add	r7, sp, #8
 80098da:	4603      	mov	r3, r0
 80098dc:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80098de:	4b08      	ldr	r3, [pc, #32]	@ (8009900 <fillScreen+0x2c>)
 80098e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098e4:	4b07      	ldr	r3, [pc, #28]	@ (8009904 <fillScreen+0x30>)
 80098e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80098ea:	88fb      	ldrh	r3, [r7, #6]
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	460b      	mov	r3, r1
 80098f0:	2100      	movs	r1, #0
 80098f2:	2000      	movs	r0, #0
 80098f4:	f7ff fb87 	bl	8009006 <fillRect>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000214 	.word	0x20000214
 8009904:	20000216 	.word	0x20000216

08009908 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800990c:	2200      	movs	r2, #0
 800990e:	2102      	movs	r1, #2
 8009910:	4802      	ldr	r0, [pc, #8]	@ (800991c <ST7735_Select+0x14>)
 8009912:	f005 f8e7 	bl	800eae4 <HAL_GPIO_WritePin>
}
 8009916:	bf00      	nop
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40020000 	.word	0x40020000

08009920 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8009924:	2201      	movs	r2, #1
 8009926:	2102      	movs	r1, #2
 8009928:	4802      	ldr	r0, [pc, #8]	@ (8009934 <ST7735_Unselect+0x14>)
 800992a:	f005 f8db 	bl	800eae4 <HAL_GPIO_WritePin>
}
 800992e:	bf00      	nop
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	40020000 	.word	0x40020000

08009938 <ST7735_Reset>:

void ST7735_Reset()
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800993c:	2200      	movs	r2, #0
 800993e:	2110      	movs	r1, #16
 8009940:	4806      	ldr	r0, [pc, #24]	@ (800995c <ST7735_Reset+0x24>)
 8009942:	f005 f8cf 	bl	800eae4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8009946:	2005      	movs	r0, #5
 8009948:	f004 fd88 	bl	800e45c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800994c:	2201      	movs	r2, #1
 800994e:	2110      	movs	r1, #16
 8009950:	4802      	ldr	r0, [pc, #8]	@ (800995c <ST7735_Reset+0x24>)
 8009952:	f005 f8c7 	bl	800eae4 <HAL_GPIO_WritePin>
}
 8009956:	bf00      	nop
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	40020000 	.word	0x40020000

08009960 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800996a:	2200      	movs	r2, #0
 800996c:	2110      	movs	r1, #16
 800996e:	4807      	ldr	r0, [pc, #28]	@ (800998c <ST7735_WriteCommand+0x2c>)
 8009970:	f005 f8b8 	bl	800eae4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8009974:	1df9      	adds	r1, r7, #7
 8009976:	f04f 33ff 	mov.w	r3, #4294967295
 800997a:	2201      	movs	r2, #1
 800997c:	4804      	ldr	r0, [pc, #16]	@ (8009990 <ST7735_WriteCommand+0x30>)
 800997e:	f005 ff6a 	bl	800f856 <HAL_SPI_Transmit>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	40020800 	.word	0x40020800
 8009990:	20000260 	.word	0x20000260

08009994 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800999e:	2201      	movs	r2, #1
 80099a0:	2110      	movs	r1, #16
 80099a2:	4807      	ldr	r0, [pc, #28]	@ (80099c0 <ST7735_WriteData+0x2c>)
 80099a4:	f005 f89e 	bl	800eae4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	f04f 33ff 	mov.w	r3, #4294967295
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4804      	ldr	r0, [pc, #16]	@ (80099c4 <ST7735_WriteData+0x30>)
 80099b4:	f005 ff4f 	bl	800f856 <HAL_SPI_Transmit>
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	40020800 	.word	0x40020800
 80099c4:	20000260 	.word	0x20000260

080099c8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	607a      	str	r2, [r7, #4]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80099da:	e034      	b.n	8009a46 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ffb9 	bl	8009960 <ST7735_WriteCommand>

        numArgs = *addr++;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80099f8:	7abb      	ldrb	r3, [r7, #10]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a00:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8009a02:	7abb      	ldrb	r3, [r7, #10]
 8009a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a08:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8009a0a:	7abb      	ldrb	r3, [r7, #10]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8009a10:	7abb      	ldrb	r3, [r7, #10]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ffbd 	bl	8009994 <ST7735_WriteData>
            addr += numArgs;
 8009a1a:	7abb      	ldrb	r3, [r7, #10]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8009a22:	89bb      	ldrh	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <DisplayInit+0x7e>
            ms = *addr++;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8009a32:	89bb      	ldrh	r3, [r7, #12]
 8009a34:	2bff      	cmp	r3, #255	@ 0xff
 8009a36:	d102      	bne.n	8009a3e <DisplayInit+0x76>
 8009a38:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009a3c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8009a3e:	89bb      	ldrh	r3, [r7, #12]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f004 fd0b 	bl	800e45c <HAL_Delay>
    while(numCommands--) {
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	1e5a      	subs	r2, r3, #1
 8009a4a:	73fa      	strb	r2, [r7, #15]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1c5      	bne.n	80099dc <DisplayInit+0x14>
        }
    }
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8009a5c:	b590      	push	{r4, r7, lr}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4623      	mov	r3, r4
 8009a6c:	71fb      	strb	r3, [r7, #7]
 8009a6e:	4603      	mov	r3, r0
 8009a70:	71bb      	strb	r3, [r7, #6]
 8009a72:	460b      	mov	r3, r1
 8009a74:	717b      	strb	r3, [r7, #5]
 8009a76:	4613      	mov	r3, r2
 8009a78:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8009a7a:	202a      	movs	r0, #42	@ 0x2a
 8009a7c:	f7ff ff70 	bl	8009960 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8009a80:	2300      	movs	r3, #0
 8009a82:	733b      	strb	r3, [r7, #12]
 8009a84:	4b17      	ldr	r3, [pc, #92]	@ (8009ae4 <ST7735_SetAddressWindow+0x88>)
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	737b      	strb	r3, [r7, #13]
 8009a90:	2300      	movs	r3, #0
 8009a92:	73bb      	strb	r3, [r7, #14]
 8009a94:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <ST7735_SetAddressWindow+0x88>)
 8009a96:	781a      	ldrb	r2, [r3, #0]
 8009a98:	797b      	ldrb	r3, [r7, #5]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	2104      	movs	r1, #4
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff ff74 	bl	8009994 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8009aac:	202b      	movs	r0, #43	@ 0x2b
 8009aae:	f7ff ff57 	bl	8009960 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae8 <ST7735_SetAddressWindow+0x8c>)
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	79bb      	ldrb	r3, [r7, #6]
 8009ab8:	4413      	add	r3, r2
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8009abe:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae8 <ST7735_SetAddressWindow+0x8c>)
 8009ac0:	781a      	ldrb	r2, [r3, #0]
 8009ac2:	793b      	ldrb	r3, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8009aca:	f107 030c 	add.w	r3, r7, #12
 8009ace:	2104      	movs	r1, #4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff ff5f 	bl	8009994 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8009ad6:	202c      	movs	r0, #44	@ 0x2c
 8009ad8:	f7ff ff42 	bl	8009960 <ST7735_WriteCommand>
}
 8009adc:	bf00      	nop
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd90      	pop	{r4, r7, pc}
 8009ae4:	2000021b 	.word	0x2000021b
 8009ae8:	2000021c 	.word	0x2000021c

08009aec <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8009af6:	f7ff ff07 	bl	8009908 <ST7735_Select>
    ST7735_Reset();
 8009afa:	f7ff ff1d 	bl	8009938 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8009afe:	480c      	ldr	r0, [pc, #48]	@ (8009b30 <ST7735_Init+0x44>)
 8009b00:	f7ff ff62 	bl	80099c8 <DisplayInit>
    DisplayInit(init_cmds2);
 8009b04:	480b      	ldr	r0, [pc, #44]	@ (8009b34 <ST7735_Init+0x48>)
 8009b06:	f7ff ff5f 	bl	80099c8 <DisplayInit>
    DisplayInit(init_cmds3);
 8009b0a:	480b      	ldr	r0, [pc, #44]	@ (8009b38 <ST7735_Init+0x4c>)
 8009b0c:	f7ff ff5c 	bl	80099c8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8009b10:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <ST7735_Init+0x50>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8009b16:	4b0a      	ldr	r3, [pc, #40]	@ (8009b40 <ST7735_Init+0x54>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f810 	bl	8009b44 <ST7735_SetRotation>
    ST7735_Unselect();
 8009b24:	f7ff fefc 	bl	8009920 <ST7735_Unselect>

}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	08018570 	.word	0x08018570
 8009b34:	080185a8 	.word	0x080185a8
 8009b38:	080185b8 	.word	0x080185b8
 8009b3c:	20000219 	.word	0x20000219
 8009b40:	2000021a 	.word	0x2000021a

08009b44 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	4b33      	ldr	r3, [pc, #204]	@ (8009c28 <ST7735_SetRotation+0xe4>)
 8009b5c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8009b5e:	4b32      	ldr	r3, [pc, #200]	@ (8009c28 <ST7735_SetRotation+0xe4>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d84e      	bhi.n	8009c04 <ST7735_SetRotation+0xc0>
 8009b66:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <ST7735_SetRotation+0x28>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009b7d 	.word	0x08009b7d
 8009b70:	08009b9f 	.word	0x08009b9f
 8009b74:	08009bc1 	.word	0x08009bc1
 8009b78:	08009be3 	.word	0x08009be3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8009b7c:	23c0      	movs	r3, #192	@ 0xc0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8009b80:	4b2a      	ldr	r3, [pc, #168]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009b82:	22a0      	movs	r2, #160	@ 0xa0
 8009b84:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8009b86:	4b2a      	ldr	r3, [pc, #168]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009b88:	2280      	movs	r2, #128	@ 0x80
 8009b8a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8009b8c:	4b29      	ldr	r3, [pc, #164]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	4b29      	ldr	r3, [pc, #164]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009b92:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8009b94:	4b29      	ldr	r3, [pc, #164]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	4b29      	ldr	r3, [pc, #164]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009b9a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009b9c:	e032      	b.n	8009c04 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8009b9e:	23a0      	movs	r3, #160	@ 0xa0
 8009ba0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8009ba2:	4b23      	ldr	r3, [pc, #140]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009ba4:	22a0      	movs	r2, #160	@ 0xa0
 8009ba6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009ba8:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009baa:	2280      	movs	r2, #128	@ 0x80
 8009bac:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8009bae:	4b21      	ldr	r3, [pc, #132]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	4b23      	ldr	r3, [pc, #140]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009bb4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8009bb6:	4b21      	ldr	r3, [pc, #132]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009bb8:	781a      	ldrb	r2, [r3, #0]
 8009bba:	4b1f      	ldr	r3, [pc, #124]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009bbc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009bbe:	e021      	b.n	8009c04 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8009bc4:	4b19      	ldr	r3, [pc, #100]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009bc6:	22a0      	movs	r2, #160	@ 0xa0
 8009bc8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8009bca:	4b19      	ldr	r3, [pc, #100]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009bcc:	2280      	movs	r2, #128	@ 0x80
 8009bce:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8009bd0:	4b18      	ldr	r3, [pc, #96]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	4b18      	ldr	r3, [pc, #96]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009bd6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8009bd8:	4b18      	ldr	r3, [pc, #96]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009bda:	781a      	ldrb	r2, [r3, #0]
 8009bdc:	4b18      	ldr	r3, [pc, #96]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009bde:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009be0:	e010      	b.n	8009c04 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8009be2:	2360      	movs	r3, #96	@ 0x60
 8009be4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8009be6:	4b12      	ldr	r3, [pc, #72]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009be8:	22a0      	movs	r2, #160	@ 0xa0
 8009bea:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009bec:	4b0f      	ldr	r3, [pc, #60]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009bee:	2280      	movs	r2, #128	@ 0x80
 8009bf0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8009bf2:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009bf8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8009bfa:	4b10      	ldr	r3, [pc, #64]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009c00:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009c02:	bf00      	nop
  }
  ST7735_Select();
 8009c04:	f7ff fe80 	bl	8009908 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8009c08:	2036      	movs	r0, #54	@ 0x36
 8009c0a:	f7ff fea9 	bl	8009960 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8009c0e:	f107 030f 	add.w	r3, r7, #15
 8009c12:	2101      	movs	r1, #1
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff febd 	bl	8009994 <ST7735_WriteData>
  ST7735_Unselect();
 8009c1a:	f7ff fe81 	bl	8009920 <ST7735_Unselect>
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000218 	.word	0x20000218
 8009c2c:	20000216 	.word	0x20000216
 8009c30:	20000214 	.word	0x20000214
 8009c34:	20000219 	.word	0x20000219
 8009c38:	2000021b 	.word	0x2000021b
 8009c3c:	2000021a 	.word	0x2000021a
 8009c40:	2000021c 	.word	0x2000021c

08009c44 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	80fb      	strh	r3, [r7, #6]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	80bb      	strh	r3, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	4a17      	ldr	r2, [pc, #92]	@ (8009cb8 <ST7735_DrawPixel+0x74>)
 8009c5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	da26      	bge.n	8009cb0 <ST7735_DrawPixel+0x6c>
 8009c62:	88bb      	ldrh	r3, [r7, #4]
 8009c64:	4a15      	ldr	r2, [pc, #84]	@ (8009cbc <ST7735_DrawPixel+0x78>)
 8009c66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	da20      	bge.n	8009cb0 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8009c6e:	f7ff fe4b 	bl	8009908 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	b2d8      	uxtb	r0, r3
 8009c76:	88bb      	ldrh	r3, [r7, #4]
 8009c78:	b2d9      	uxtb	r1, r3
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	3301      	adds	r3, #1
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	88bb      	ldrh	r3, [r7, #4]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	3301      	adds	r3, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f7ff fee7 	bl	8009a5c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	0a1b      	lsrs	r3, r3, #8
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	733b      	strb	r3, [r7, #12]
 8009c98:	887b      	ldrh	r3, [r7, #2]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8009c9e:	f107 030c 	add.w	r3, r7, #12
 8009ca2:	2102      	movs	r1, #2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fe75 	bl	8009994 <ST7735_WriteData>

    ST7735_Unselect();
 8009caa:	f7ff fe39 	bl	8009920 <ST7735_Unselect>
 8009cae:	e000      	b.n	8009cb2 <ST7735_DrawPixel+0x6e>
        return;
 8009cb0:	bf00      	nop
}
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20000214 	.word	0x20000214
 8009cbc:	20000216 	.word	0x20000216

08009cc0 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	b590      	push	{r4, r7, lr}
 8009cc4:	b089      	sub	sp, #36	@ 0x24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cca:	4603      	mov	r3, r0
 8009ccc:	80fb      	strh	r3, [r7, #6]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	80bb      	strh	r3, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	b2d8      	uxtb	r0, r3
 8009cda:	88bb      	ldrh	r3, [r7, #4]
 8009cdc:	b2d9      	uxtb	r1, r3
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009ce6:	4413      	add	r3, r2
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b2dc      	uxtb	r4, r3
 8009cee:	88bb      	ldrh	r3, [r7, #4]
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009cf6:	4413      	add	r3, r2
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	4622      	mov	r2, r4
 8009d00:	f7ff feac 	bl	8009a5c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]
 8009d08:	e043      	b.n	8009d92 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8009d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	3b20      	subs	r3, #32
 8009d10:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8009d14:	fb01 f303 	mul.w	r3, r1, r3
 8009d18:	4619      	mov	r1, r3
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8009d26:	2300      	movs	r3, #0
 8009d28:	61bb      	str	r3, [r7, #24]
 8009d2a:	e029      	b.n	8009d80 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	fa02 f303 	lsl.w	r3, r2, r3
 8009d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00e      	beq.n	8009d5a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8009d3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	743b      	strb	r3, [r7, #16]
 8009d46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8009d4c:	f107 0310 	add.w	r3, r7, #16
 8009d50:	2102      	movs	r1, #2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff fe1e 	bl	8009994 <ST7735_WriteData>
 8009d58:	e00f      	b.n	8009d7a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8009d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	733b      	strb	r3, [r7, #12]
 8009d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8009d6e:	f107 030c 	add.w	r3, r7, #12
 8009d72:	2102      	movs	r1, #2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fe0d 	bl	8009994 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	61bb      	str	r3, [r7, #24]
 8009d80:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009d84:	461a      	mov	r2, r3
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d3cf      	bcc.n	8009d2c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009d96:	461a      	mov	r2, r3
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d3b5      	bcc.n	8009d0a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	3724      	adds	r7, #36	@ 0x24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009daa:	b002      	add	sp, #8
 8009dac:	4770      	bx	lr
	...

08009db0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009db0:	b082      	sub	sp, #8
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af04      	add	r7, sp, #16
 8009db8:	603a      	str	r2, [r7, #0]
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	80fb      	strh	r3, [r7, #6]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8009dc4:	f7ff fda0 	bl	8009908 <ST7735_Select>

    while(*str) {
 8009dc8:	e033      	b.n	8009e32 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	7d3a      	ldrb	r2, [r7, #20]
 8009dce:	4413      	add	r3, r2
 8009dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8009e50 <ST7735_WriteString+0xa0>)
 8009dd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	db16      	blt.n	8009e08 <ST7735_WriteString+0x58>
            x = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8009dde:	7d7b      	ldrb	r3, [r7, #21]
 8009de0:	461a      	mov	r2, r3
 8009de2:	88bb      	ldrh	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8009de8:	88bb      	ldrh	r3, [r7, #4]
 8009dea:	7d7a      	ldrb	r2, [r7, #21]
 8009dec:	4413      	add	r3, r2
 8009dee:	4a19      	ldr	r2, [pc, #100]	@ (8009e54 <ST7735_WriteString+0xa4>)
 8009df0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	da21      	bge.n	8009e3c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d103      	bne.n	8009e08 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	603b      	str	r3, [r7, #0]
                continue;
 8009e06:	e014      	b.n	8009e32 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	88b9      	ldrh	r1, [r7, #4]
 8009e0e:	88f8      	ldrh	r0, [r7, #6]
 8009e10:	8c3b      	ldrh	r3, [r7, #32]
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	8bbb      	ldrh	r3, [r7, #28]
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f7ff ff4f 	bl	8009cc0 <ST7735_WriteChar>
        x += font.width;
 8009e22:	7d3b      	ldrb	r3, [r7, #20]
 8009e24:	461a      	mov	r2, r3
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	4413      	add	r3, r2
 8009e2a:	80fb      	strh	r3, [r7, #6]
        str++;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	603b      	str	r3, [r7, #0]
    while(*str) {
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1c7      	bne.n	8009dca <ST7735_WriteString+0x1a>
 8009e3a:	e000      	b.n	8009e3e <ST7735_WriteString+0x8e>
                break;
 8009e3c:	bf00      	nop
    }

    ST7735_Unselect();
 8009e3e:	f7ff fd6f 	bl	8009920 <ST7735_Unselect>
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e4c:	b002      	add	sp, #8
 8009e4e:	4770      	bx	lr
 8009e50:	20000214 	.word	0x20000214
 8009e54:	20000216 	.word	0x20000216

08009e58 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	4623      	mov	r3, r4
 8009e68:	80fb      	strh	r3, [r7, #6]
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	80bb      	strh	r3, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	807b      	strh	r3, [r7, #2]
 8009e72:	4613      	mov	r3, r2
 8009e74:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8009e76:	88fb      	ldrh	r3, [r7, #6]
 8009e78:	4a37      	ldr	r2, [pc, #220]	@ (8009f58 <ST7735_FillRectangle+0x100>)
 8009e7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	da66      	bge.n	8009f50 <ST7735_FillRectangle+0xf8>
 8009e82:	88bb      	ldrh	r3, [r7, #4]
 8009e84:	4a35      	ldr	r2, [pc, #212]	@ (8009f5c <ST7735_FillRectangle+0x104>)
 8009e86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	da60      	bge.n	8009f50 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	887b      	ldrh	r3, [r7, #2]
 8009e92:	4413      	add	r3, r2
 8009e94:	4a30      	ldr	r2, [pc, #192]	@ (8009f58 <ST7735_FillRectangle+0x100>)
 8009e96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	dd06      	ble.n	8009eac <ST7735_FillRectangle+0x54>
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8009f58 <ST7735_FillRectangle+0x100>)
 8009ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8009eac:	88ba      	ldrh	r2, [r7, #4]
 8009eae:	883b      	ldrh	r3, [r7, #0]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8009f5c <ST7735_FillRectangle+0x104>)
 8009eb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	dd06      	ble.n	8009eca <ST7735_FillRectangle+0x72>
 8009ebc:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <ST7735_FillRectangle+0x104>)
 8009ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	88bb      	ldrh	r3, [r7, #4]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8009eca:	f7ff fd1d 	bl	8009908 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	b2d8      	uxtb	r0, r3
 8009ed2:	88bb      	ldrh	r3, [r7, #4]
 8009ed4:	b2d9      	uxtb	r1, r3
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	887b      	ldrh	r3, [r7, #2]
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	4413      	add	r3, r2
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b2dc      	uxtb	r4, r3
 8009ee6:	88bb      	ldrh	r3, [r7, #4]
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	883b      	ldrh	r3, [r7, #0]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	f7ff fdb0 	bl	8009a5c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8009efc:	8c3b      	ldrh	r3, [r7, #32]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	733b      	strb	r3, [r7, #12]
 8009f06:	8c3b      	ldrh	r3, [r7, #32]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2110      	movs	r1, #16
 8009f10:	4813      	ldr	r0, [pc, #76]	@ (8009f60 <ST7735_FillRectangle+0x108>)
 8009f12:	f004 fde7 	bl	800eae4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8009f16:	883b      	ldrh	r3, [r7, #0]
 8009f18:	80bb      	strh	r3, [r7, #4]
 8009f1a:	e013      	b.n	8009f44 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8009f1c:	887b      	ldrh	r3, [r7, #2]
 8009f1e:	80fb      	strh	r3, [r7, #6]
 8009f20:	e00a      	b.n	8009f38 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8009f22:	f107 010c 	add.w	r1, r7, #12
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	480d      	ldr	r0, [pc, #52]	@ (8009f64 <ST7735_FillRectangle+0x10c>)
 8009f2e:	f005 fc92 	bl	800f856 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8009f32:	88fb      	ldrh	r3, [r7, #6]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	80fb      	strh	r3, [r7, #6]
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f1      	bne.n	8009f22 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8009f3e:	88bb      	ldrh	r3, [r7, #4]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	80bb      	strh	r3, [r7, #4]
 8009f44:	88bb      	ldrh	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e8      	bne.n	8009f1c <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8009f4a:	f7ff fce9 	bl	8009920 <ST7735_Unselect>
 8009f4e:	e000      	b.n	8009f52 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8009f50:	bf00      	nop
}
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd90      	pop	{r4, r7, pc}
 8009f58:	20000214 	.word	0x20000214
 8009f5c:	20000216 	.word	0x20000216
 8009f60:	40020800 	.word	0x40020800
 8009f64:	20000260 	.word	0x20000260

08009f68 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <case_insensitive_strcmp+0x16>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e056      	b.n	800a030 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d10d      	bne.n	8009fa6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e050      	b.n	800a030 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e04a      	b.n	800a030 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	603b      	str	r3, [r7, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	4a22      	ldr	r2, [pc, #136]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 8009fb2:	4413      	add	r3, r2
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	f003 0303 	and.w	r3, r3, #3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d103      	bne.n	8009fc6 <case_insensitive_strcmp+0x5e>
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	f103 0220 	add.w	r2, r3, #32
 8009fc4:	e000      	b.n	8009fc8 <case_insensitive_strcmp+0x60>
 8009fc6:	7bfa      	ldrb	r2, [r7, #15]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	73bb      	strb	r3, [r7, #14]
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	491a      	ldr	r1, [pc, #104]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 8009fd4:	440b      	add	r3, r1
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d102      	bne.n	8009fe6 <case_insensitive_strcmp+0x7e>
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
 8009fe2:	3320      	adds	r3, #32
 8009fe4:	e000      	b.n	8009fe8 <case_insensitive_strcmp+0x80>
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d0d0      	beq.n	8009f8e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	737b      	strb	r3, [r7, #13]
 8009ff2:	7b7b      	ldrb	r3, [r7, #13]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	4a11      	ldr	r2, [pc, #68]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	f003 0303 	and.w	r3, r3, #3
 800a000:	2b01      	cmp	r3, #1
 800a002:	d103      	bne.n	800a00c <case_insensitive_strcmp+0xa4>
 800a004:	7b7b      	ldrb	r3, [r7, #13]
 800a006:	f103 0220 	add.w	r2, r3, #32
 800a00a:	e000      	b.n	800a00e <case_insensitive_strcmp+0xa6>
 800a00c:	7b7a      	ldrb	r2, [r7, #13]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	733b      	strb	r3, [r7, #12]
 800a014:	7b3b      	ldrb	r3, [r7, #12]
 800a016:	3301      	adds	r3, #1
 800a018:	4908      	ldr	r1, [pc, #32]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 800a01a:	440b      	add	r3, r1
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	2b01      	cmp	r3, #1
 800a024:	d102      	bne.n	800a02c <case_insensitive_strcmp+0xc4>
 800a026:	7b3b      	ldrb	r3, [r7, #12]
 800a028:	3320      	adds	r3, #32
 800a02a:	e000      	b.n	800a02e <case_insensitive_strcmp+0xc6>
 800a02c:	7b3b      	ldrb	r3, [r7, #12]
 800a02e:	1ad3      	subs	r3, r2, r3
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	0801a290 	.word	0x0801a290

0800a040 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <cJSON_strdup+0x1c>
    {
        return NULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	e015      	b.n	800a088 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fe f8e1 	bl	8008224 <strlen>
 800a062:	4603      	mov	r3, r0
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	4798      	blx	r3
 800a070:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <cJSON_strdup+0x3c>
    {
        return NULL;
 800a078:	2300      	movs	r3, #0
 800a07a:	e005      	b.n	800a088 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	68b8      	ldr	r0, [r7, #8]
 800a082:	f00b fdd6 	bl	8015c32 <memcpy>

    return copy;
 800a086:	68bb      	ldr	r3, [r7, #8]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2028      	movs	r0, #40	@ 0x28
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
    if (node)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800a0a8:	2228      	movs	r2, #40	@ 0x28
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f00b fd23 	bl	8015af8 <memset>
    }

    return node;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800a0c8:	e03d      	b.n	800a146 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d108      	bne.n	800a0ee <cJSON_Delete+0x32>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff ffe7 	bl	800a0bc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10c      	bne.n	800a114 <cJSON_Delete+0x58>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d008      	beq.n	800a114 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800a102:	4b15      	ldr	r3, [pc, #84]	@ (800a158 <cJSON_Delete+0x9c>)
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6912      	ldr	r2, [r2, #16]
 800a10a:	4610      	mov	r0, r2
 800a10c:	4798      	blx	r3
            item->valuestring = NULL;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10c      	bne.n	800a13a <cJSON_Delete+0x7e>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800a128:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <cJSON_Delete+0x9c>)
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6a12      	ldr	r2, [r2, #32]
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
            item->string = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800a13a:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <cJSON_Delete+0x9c>)
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
        item = next;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1be      	bne.n	800a0ca <cJSON_Delete+0xe>
    }
}
 800a14c:	bf00      	nop
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000000 	.word	0x20000000

0800a15c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800a160:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800a162:	4618      	mov	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	0000      	movs	r0, r0
	...

0800a170 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b098      	sub	sp, #96	@ 0x60
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
    double number = 0;
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800a18a:	f7ff ffe7 	bl	800a15c <get_decimal_point>
 800a18e:	4603      	mov	r3, r0
 800a190:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <parse_number+0x36>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <parse_number+0x3a>
    {
        return false;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e0a0      	b.n	800a2ec <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1ae:	e03d      	b.n	800a22c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6899      	ldr	r1, [r3, #8]
 800a1b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1ba:	440b      	add	r3, r1
 800a1bc:	4413      	add	r3, r2
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b45      	cmp	r3, #69	@ 0x45
 800a1c2:	dc17      	bgt.n	800a1f4 <parse_number+0x84>
 800a1c4:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1c6:	db40      	blt.n	800a24a <parse_number+0xda>
 800a1c8:	3b2b      	subs	r3, #43	@ 0x2b
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	409a      	lsls	r2, r3
 800a1ce:	4b4c      	ldr	r3, [pc, #304]	@ (800a300 <parse_number+0x190>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	2300      	moveq	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <parse_number+0x88>
 800a1e0:	f002 0308 	and.w	r3, r2, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bf14      	ite	ne
 800a1e8:	2301      	movne	r3, #1
 800a1ea:	2300      	moveq	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d111      	bne.n	800a216 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800a1f2:	e02a      	b.n	800a24a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800a1f4:	2b65      	cmp	r3, #101	@ 0x65
 800a1f6:	d128      	bne.n	800a24a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	6899      	ldr	r1, [r3, #8]
 800a200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a202:	440b      	add	r3, r1
 800a204:	4413      	add	r3, r2
 800a206:	7819      	ldrb	r1, [r3, #0]
 800a208:	f107 0208 	add.w	r2, r7, #8
 800a20c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a20e:	4413      	add	r3, r2
 800a210:	460a      	mov	r2, r1
 800a212:	701a      	strb	r2, [r3, #0]
                break;
 800a214:	e007      	b.n	800a226 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800a216:	f107 0208 	add.w	r2, r7, #8
 800a21a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a21c:	4413      	add	r3, r2
 800a21e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800a222:	701a      	strb	r2, [r3, #0]
                break;
 800a224:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a228:	3301      	adds	r3, #1
 800a22a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a22c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a22e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a230:	d80d      	bhi.n	800a24e <parse_number+0xde>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <parse_number+0xde>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a23e:	441a      	add	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d3b3      	bcc.n	800a1b0 <parse_number+0x40>
        }
    }
loop_end:
 800a248:	e001      	b.n	800a24e <parse_number+0xde>
                goto loop_end;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <parse_number+0xe0>
loop_end:
 800a24e:	bf00      	nop
    number_c_string[i] = '\0';
 800a250:	f107 0208 	add.w	r2, r7, #8
 800a254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a256:	4413      	add	r3, r2
 800a258:	2200      	movs	r2, #0
 800a25a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800a25c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f00b f9aa 	bl	80155c0 <strtod>
 800a26c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800a270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	429a      	cmp	r2, r3
 800a278:	d101      	bne.n	800a27e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800a27a:	2300      	movs	r3, #0
 800a27c:	e036      	b.n	800a2ec <parse_number+0x17c>
    }

    item->valuedouble = number;
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a284:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800a288:	a31b      	add	r3, pc, #108	@ (adr r3, 800a2f8 <parse_number+0x188>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a292:	f7fe fc67 	bl	8008b64 <__aeabi_dcmpge>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d004      	beq.n	800a2a6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a2a2:	615a      	str	r2, [r3, #20]
 800a2a4:	e015      	b.n	800a2d2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800a2a6:	f04f 0200 	mov.w	r2, #0
 800a2aa:	4b16      	ldr	r3, [pc, #88]	@ (800a304 <parse_number+0x194>)
 800a2ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a2b0:	f7fe fc4e 	bl	8008b50 <__aeabi_dcmple>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2c0:	615a      	str	r2, [r3, #20]
 800a2c2:	e006      	b.n	800a2d2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800a2c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a2c8:	f7fe fc76 	bl	8008bb8 <__aeabi_d2iz>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a2de:	f107 0208 	add.w	r2, r7, #8
 800a2e2:	1a8a      	subs	r2, r1, r2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	609a      	str	r2, [r3, #8]
    return true;
 800a2ea:	2301      	movs	r3, #1
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3760      	adds	r7, #96	@ 0x60
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	f3af 8000 	nop.w
 800a2f8:	ffc00000 	.word	0xffc00000
 800a2fc:	41dfffff 	.word	0x41dfffff
 800a300:	04007fe5 	.word	0x04007fe5
 800a304:	c1e00000 	.word	0xc1e00000

0800a308 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <ensure+0x20>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <ensure+0x24>
    {
        return NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	e083      	b.n	800a434 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <ensure+0x3c>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d301      	bcc.n	800a344 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	e077      	b.n	800a434 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da01      	bge.n	800a34e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e072      	b.n	800a434 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	4413      	add	r3, r2
 800a356:	3301      	adds	r3, #1
 800a358:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d805      	bhi.n	800a370 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	e061      	b.n	800a434 <ensure+0x12c>
    }

    if (p->noalloc) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <ensure+0x74>
        return NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	e05b      	b.n	800a434 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a382:	d308      	bcc.n	800a396 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	db03      	blt.n	800a392 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800a38a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a38e:	60bb      	str	r3, [r7, #8]
 800a390:	e004      	b.n	800a39c <ensure+0x94>
        }
        else
        {
            return NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	e04e      	b.n	800a434 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d018      	beq.n	800a3d6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	4798      	blx	r3
 800a3b2:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d132      	bne.n	800a420 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4798      	blx	r3
            p->length = 0;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]

            return NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e02e      	b.n	800a434 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	68b8      	ldr	r0, [r7, #8]
 800a3dc:	4798      	blx	r3
 800a3de:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10d      	bne.n	800a402 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	4798      	blx	r3
            p->length = 0;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

            return NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e018      	b.n	800a434 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6819      	ldr	r1, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	3301      	adds	r3, #1
 800a40c:	461a      	mov	r2, r3
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f00b fc0f 	bl	8015c32 <memcpy>
        p->hooks.deallocate(p->buffer);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
    }
    p->length = newsize;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4413      	add	r3, r2
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d013      	beq.n	800a476 <update_offset+0x3a>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00f      	beq.n	800a476 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	4413      	add	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689c      	ldr	r4, [r3, #8]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7fd fedc 	bl	8008224 <strlen>
 800a46c:	4603      	mov	r3, r0
 800a46e:	18e2      	adds	r2, r4, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	e000      	b.n	800a478 <update_offset+0x3c>
        return;
 800a476:	bf00      	nop
}
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd90      	pop	{r4, r7, pc}
	...

0800a480 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800a480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a484:	b087      	sub	sp, #28
 800a486:	af00      	add	r7, sp, #0
 800a488:	ed87 0b02 	vstr	d0, [r7, #8]
 800a48c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800a490:	68b8      	ldr	r0, [r7, #8]
 800a492:	68fe      	ldr	r6, [r7, #12]
 800a494:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	687e      	ldr	r6, [r7, #4]
 800a49c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a4a0:	f7fe fb6a 	bl	8008b78 <__aeabi_dcmpgt>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <compare_double+0x34>
 800a4aa:	68bc      	ldr	r4, [r7, #8]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a4b2:	e003      	b.n	800a4bc <compare_double+0x3c>
 800a4b4:	683c      	ldr	r4, [r7, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a4bc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800a4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4c8:	f7fd ff0e 	bl	80082e8 <__aeabi_dsub>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4690      	mov	r8, r2
 800a4d2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800a4d6:	f04f 0200 	mov.w	r2, #0
 800a4da:	4b0c      	ldr	r3, [pc, #48]	@ (800a50c <compare_double+0x8c>)
 800a4dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4e0:	f7fe f8ba 	bl	8008658 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	f7fe fb2e 	bl	8008b50 <__aeabi_dcmple>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <compare_double+0x7e>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	461c      	mov	r4, r3
 800a4fe:	b2e3      	uxtb	r3, r4
}
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50a:	bf00      	nop
 800a50c:	3cb00000 	.word	0x3cb00000

0800a510 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	b093      	sub	sp, #76	@ 0x4c
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a524:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800a530:	f107 0314 	add.w	r3, r7, #20
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	605a      	str	r2, [r3, #4]
 800a53a:	609a      	str	r2, [r3, #8]
 800a53c:	60da      	str	r2, [r3, #12]
 800a53e:	611a      	str	r2, [r3, #16]
 800a540:	615a      	str	r2, [r3, #20]
 800a542:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800a544:	f7ff fe0a 	bl	800a15c <get_decimal_point>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <print_number+0x54>
    {
        return false;
 800a560:	2300      	movs	r3, #0
 800a562:	e0b4      	b.n	800a6ce <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800a564:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a568:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a56c:	f7fe fb0e 	bl	8008b8c <__aeabi_dcmpun>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d121      	bne.n	800a5ba <print_number+0xaa>
 800a576:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800a578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a57e:	2301      	movs	r3, #1
 800a580:	461e      	mov	r6, r3
 800a582:	f04f 32ff 	mov.w	r2, #4294967295
 800a586:	4b54      	ldr	r3, [pc, #336]	@ (800a6d8 <print_number+0x1c8>)
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7fe fafe 	bl	8008b8c <__aeabi_dcmpun>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <print_number+0x9e>
 800a596:	f04f 32ff 	mov.w	r2, #4294967295
 800a59a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6d8 <print_number+0x1c8>)
 800a59c:	4620      	mov	r0, r4
 800a59e:	4629      	mov	r1, r5
 800a5a0:	f7fe fad6 	bl	8008b50 <__aeabi_dcmple>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <print_number+0x9e>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	461e      	mov	r6, r3
 800a5ae:	b2f3      	uxtb	r3, r6
 800a5b0:	f083 0301 	eor.w	r3, r3, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	4947      	ldr	r1, [pc, #284]	@ (800a6dc <print_number+0x1cc>)
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f00b f971 	bl	80158a8 <siprintf>
 800a5c6:	6478      	str	r0, [r7, #68]	@ 0x44
 800a5c8:	e03f      	b.n	800a64a <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fd ffd8 	bl	8008584 <__aeabi_i2d>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a5dc:	f7fe faa4 	bl	8008b28 <__aeabi_dcmpeq>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	f107 0314 	add.w	r3, r7, #20
 800a5ee:	493c      	ldr	r1, [pc, #240]	@ (800a6e0 <print_number+0x1d0>)
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f00b f959 	bl	80158a8 <siprintf>
 800a5f6:	6478      	str	r0, [r7, #68]	@ 0x44
 800a5f8:	e027      	b.n	800a64a <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800a5fa:	f107 0014 	add.w	r0, r7, #20
 800a5fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a602:	4938      	ldr	r1, [pc, #224]	@ (800a6e4 <print_number+0x1d4>)
 800a604:	f00b f950 	bl	80158a8 <siprintf>
 800a608:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800a60a:	f107 0208 	add.w	r2, r7, #8
 800a60e:	f107 0314 	add.w	r3, r7, #20
 800a612:	4935      	ldr	r1, [pc, #212]	@ (800a6e8 <print_number+0x1d8>)
 800a614:	4618      	mov	r0, r3
 800a616:	f00b f969 	bl	80158ec <siscanf>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10c      	bne.n	800a63a <print_number+0x12a>
 800a620:	ed97 7b02 	vldr	d7, [r7, #8]
 800a624:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800a628:	eeb0 0a47 	vmov.f32	s0, s14
 800a62c:	eef0 0a67 	vmov.f32	s1, s15
 800a630:	f7ff ff26 	bl	800a480 <compare_double>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800a63a:	f107 0014 	add.w	r0, r7, #20
 800a63e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a642:	492a      	ldr	r1, [pc, #168]	@ (800a6ec <print_number+0x1dc>)
 800a644:	f00b f930 	bl	80158a8 <siprintf>
 800a648:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800a64a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db02      	blt.n	800a656 <print_number+0x146>
 800a650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a652:	2b19      	cmp	r3, #25
 800a654:	dd01      	ble.n	800a65a <print_number+0x14a>
    {
        return false;
 800a656:	2300      	movs	r3, #0
 800a658:	e039      	b.n	800a6ce <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800a65a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a65c:	3301      	adds	r3, #1
 800a65e:	4619      	mov	r1, r3
 800a660:	6838      	ldr	r0, [r7, #0]
 800a662:	f7ff fe51 	bl	800a308 <ensure>
 800a666:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800a668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <print_number+0x162>
    {
        return false;
 800a66e:	2300      	movs	r3, #0
 800a670:	e02d      	b.n	800a6ce <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800a672:	2300      	movs	r3, #0
 800a674:	643b      	str	r3, [r7, #64]	@ 0x40
 800a676:	e01a      	b.n	800a6ae <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800a678:	f107 0214 	add.w	r2, r7, #20
 800a67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67e:	4413      	add	r3, r2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a686:	429a      	cmp	r2, r3
 800a688:	d105      	bne.n	800a696 <print_number+0x186>
        {
            output_pointer[i] = '.';
 800a68a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a68c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a68e:	4413      	add	r3, r2
 800a690:	222e      	movs	r2, #46	@ 0x2e
 800a692:	701a      	strb	r2, [r3, #0]
            continue;
 800a694:	e008      	b.n	800a6a8 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800a696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a69a:	4413      	add	r3, r2
 800a69c:	f107 0114 	add.w	r1, r7, #20
 800a6a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6a2:	440a      	add	r2, r1
 800a6a4:	7812      	ldrb	r2, [r2, #0]
 800a6a6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800a6a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3e0      	bcc.n	800a678 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800a6b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ba:	4413      	add	r3, r2
 800a6bc:	2200      	movs	r2, #0
 800a6be:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c6:	441a      	add	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	609a      	str	r2, [r3, #8]

    return true;
 800a6cc:	2301      	movs	r3, #1
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	374c      	adds	r7, #76	@ 0x4c
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	7fefffff 	.word	0x7fefffff
 800a6dc:	08018244 	.word	0x08018244
 800a6e0:	0801824c 	.word	0x0801824c
 800a6e4:	08018250 	.word	0x08018250
 800a6e8:	08018258 	.word	0x08018258
 800a6ec:	0801825c 	.word	0x0801825c

0800a6f0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800a700:	2300      	movs	r3, #0
 800a702:	60bb      	str	r3, [r7, #8]
 800a704:	e04c      	b.n	800a7a0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4413      	add	r3, r2
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a710:	d90f      	bls.n	800a732 <parse_hex4+0x42>
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4413      	add	r3, r2
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b39      	cmp	r3, #57	@ 0x39
 800a71c:	d809      	bhi.n	800a732 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4413      	add	r3, r2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	3b30      	subs	r3, #48	@ 0x30
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	e02d      	b.n	800a78e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b40      	cmp	r3, #64	@ 0x40
 800a73c:	d90f      	bls.n	800a75e <parse_hex4+0x6e>
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4413      	add	r3, r2
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b46      	cmp	r3, #70	@ 0x46
 800a748:	d809      	bhi.n	800a75e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4413      	add	r3, r2
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	3b37      	subs	r3, #55	@ 0x37
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e017      	b.n	800a78e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b60      	cmp	r3, #96	@ 0x60
 800a768:	d90f      	bls.n	800a78a <parse_hex4+0x9a>
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	2b66      	cmp	r3, #102	@ 0x66
 800a774:	d809      	bhi.n	800a78a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4413      	add	r3, r2
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	3b57      	subs	r3, #87	@ 0x57
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	e001      	b.n	800a78e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e00c      	b.n	800a7a8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d802      	bhi.n	800a79a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60bb      	str	r3, [r7, #8]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d9af      	bls.n	800a706 <parse_hex4+0x16>
        }
    }

    return h;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	@ 0x28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	f340 80b7 	ble.w	800a95e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff ff7b 	bl	800a6f0 <parse_hex4>
 800a7fa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800a802:	d304      	bcc.n	800a80e <utf16_literal_to_utf8+0x5a>
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800a80a:	f0c0 80aa 	bcc.w	800a962 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800a814:	d337      	bcc.n	800a886 <utf16_literal_to_utf8+0xd2>
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800a81c:	d233      	bcs.n	800a886 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	3306      	adds	r3, #6
 800a822:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800a828:	230c      	movs	r3, #12
 800a82a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	2b05      	cmp	r3, #5
 800a836:	f340 8096 	ble.w	800a966 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b5c      	cmp	r3, #92	@ 0x5c
 800a840:	f040 8093 	bne.w	800a96a <utf16_literal_to_utf8+0x1b6>
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	3301      	adds	r3, #1
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b75      	cmp	r3, #117	@ 0x75
 800a84c:	f040 808d 	bne.w	800a96a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	3302      	adds	r3, #2
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff ff4b 	bl	800a6f0 <parse_hex4>
 800a85a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800a862:	f0c0 8084 	bcc.w	800a96e <utf16_literal_to_utf8+0x1ba>
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800a86c:	d27f      	bcs.n	800a96e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	029a      	lsls	r2, r3, #10
 800a872:	4b43      	ldr	r3, [pc, #268]	@ (800a980 <utf16_literal_to_utf8+0x1cc>)
 800a874:	4013      	ands	r3, r2
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a87c:	4313      	orrs	r3, r2
 800a87e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800a882:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800a884:	e004      	b.n	800a890 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800a886:	2306      	movs	r3, #6
 800a888:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	2b7f      	cmp	r3, #127	@ 0x7f
 800a894:	d803      	bhi.n	800a89e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a89c:	e01f      	b.n	800a8de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800a89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8a4:	d206      	bcs.n	800a8b4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800a8ac:	23c0      	movs	r3, #192	@ 0xc0
 800a8ae:	f887 3020 	strb.w	r3, [r7, #32]
 800a8b2:	e014      	b.n	800a8de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ba:	d206      	bcs.n	800a8ca <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800a8c2:	23e0      	movs	r3, #224	@ 0xe0
 800a8c4:	f887 3020 	strb.w	r3, [r7, #32]
 800a8c8:	e009      	b.n	800a8de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800a8d0:	d24f      	bcs.n	800a972 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800a8d2:	2304      	movs	r3, #4
 800a8d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800a8d8:	23f0      	movs	r3, #240	@ 0xf0
 800a8da:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a8de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a8e8:	e015      	b.n	800a916 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8fc:	440b      	add	r3, r1
 800a8fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a902:	b2d2      	uxtb	r2, r2
 800a904:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a908:	099b      	lsrs	r3, r3, #6
 800a90a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a90c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a910:	3b01      	subs	r3, #1
 800a912:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a916:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e5      	bne.n	800a8ea <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800a91e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a922:	2b01      	cmp	r3, #1
 800a924:	d909      	bls.n	800a93a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	b2d9      	uxtb	r1, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a932:	430a      	orrs	r2, r1
 800a934:	b2d2      	uxtb	r2, r2
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e007      	b.n	800a94a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a952:	441a      	add	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800a958:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a95c:	e00b      	b.n	800a976 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800a95e:	bf00      	nop
 800a960:	e008      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a962:	bf00      	nop
 800a964:	e006      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a966:	bf00      	nop
 800a968:	e004      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a96a:	bf00      	nop
 800a96c:	e002      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a96e:	bf00      	nop
 800a970:	e000      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a972:	bf00      	nop

fail:
    return 0;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3728      	adds	r7, #40	@ 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	000ffc00 	.word	0x000ffc00

0800a984 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08a      	sub	sp, #40	@ 0x28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	3301      	adds	r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	4413      	add	r3, r2
 800a9a8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b22      	cmp	r3, #34	@ 0x22
 800a9c0:	f040 8103 	bne.w	800abca <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a9cc:	e017      	b.n	800a9fe <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b5c      	cmp	r3, #92	@ 0x5c
 800a9d4:	d110      	bne.n	800a9f8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	f080 80f1 	bcs.w	800abce <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	61bb      	str	r3, [r7, #24]
                input_end++;
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d203      	bcs.n	800aa18 <parse_string+0x94>
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b22      	cmp	r3, #34	@ 0x22
 800aa16:	d1da      	bne.n	800a9ce <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	f080 80d3 	bcs.w	800abd2 <parse_string+0x24e>
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b22      	cmp	r3, #34	@ 0x22
 800aa32:	f040 80ce 	bne.w	800abd2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	4413      	add	r3, r2
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	3201      	adds	r2, #1
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
 800aa58:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80ba 	beq.w	800abd6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800aa66:	e094      	b.n	800ab92 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b5c      	cmp	r3, #92	@ 0x5c
 800aa6e:	d008      	beq.n	800aa82 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800aa70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa72:	1c53      	adds	r3, r2, #1
 800aa74:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	1c59      	adds	r1, r3, #1
 800aa7a:	60f9      	str	r1, [r7, #12]
 800aa7c:	7812      	ldrb	r2, [r2, #0]
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	e087      	b.n	800ab92 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800aa82:	2302      	movs	r3, #2
 800aa84:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800aa86:	6a3a      	ldr	r2, [r7, #32]
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f340 80a4 	ble.w	800abda <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	3301      	adds	r3, #1
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b75      	cmp	r3, #117	@ 0x75
 800aa9a:	f300 80a0 	bgt.w	800abde <parse_string+0x25a>
 800aa9e:	2b5c      	cmp	r3, #92	@ 0x5c
 800aaa0:	da04      	bge.n	800aaac <parse_string+0x128>
 800aaa2:	2b22      	cmp	r3, #34	@ 0x22
 800aaa4:	d05c      	beq.n	800ab60 <parse_string+0x1dc>
 800aaa6:	2b2f      	cmp	r3, #47	@ 0x2f
 800aaa8:	d05a      	beq.n	800ab60 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800aaaa:	e098      	b.n	800abde <parse_string+0x25a>
            switch (input_pointer[1])
 800aaac:	3b5c      	subs	r3, #92	@ 0x5c
 800aaae:	2b19      	cmp	r3, #25
 800aab0:	f200 8095 	bhi.w	800abde <parse_string+0x25a>
 800aab4:	a201      	add	r2, pc, #4	@ (adr r2, 800aabc <parse_string+0x138>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800ab61 	.word	0x0800ab61
 800aac0:	0800abdf 	.word	0x0800abdf
 800aac4:	0800abdf 	.word	0x0800abdf
 800aac8:	0800abdf 	.word	0x0800abdf
 800aacc:	0800abdf 	.word	0x0800abdf
 800aad0:	0800abdf 	.word	0x0800abdf
 800aad4:	0800ab25 	.word	0x0800ab25
 800aad8:	0800abdf 	.word	0x0800abdf
 800aadc:	0800abdf 	.word	0x0800abdf
 800aae0:	0800abdf 	.word	0x0800abdf
 800aae4:	0800ab31 	.word	0x0800ab31
 800aae8:	0800abdf 	.word	0x0800abdf
 800aaec:	0800abdf 	.word	0x0800abdf
 800aaf0:	0800abdf 	.word	0x0800abdf
 800aaf4:	0800abdf 	.word	0x0800abdf
 800aaf8:	0800abdf 	.word	0x0800abdf
 800aafc:	0800abdf 	.word	0x0800abdf
 800ab00:	0800abdf 	.word	0x0800abdf
 800ab04:	0800ab3d 	.word	0x0800ab3d
 800ab08:	0800abdf 	.word	0x0800abdf
 800ab0c:	0800abdf 	.word	0x0800abdf
 800ab10:	0800abdf 	.word	0x0800abdf
 800ab14:	0800ab49 	.word	0x0800ab49
 800ab18:	0800abdf 	.word	0x0800abdf
 800ab1c:	0800ab55 	.word	0x0800ab55
 800ab20:	0800ab71 	.word	0x0800ab71
                    *output_pointer++ = '\b';
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	60fa      	str	r2, [r7, #12]
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	701a      	strb	r2, [r3, #0]
                    break;
 800ab2e:	e02c      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\f';
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	60fa      	str	r2, [r7, #12]
 800ab36:	220c      	movs	r2, #12
 800ab38:	701a      	strb	r2, [r3, #0]
                    break;
 800ab3a:	e026      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	60fa      	str	r2, [r7, #12]
 800ab42:	220a      	movs	r2, #10
 800ab44:	701a      	strb	r2, [r3, #0]
                    break;
 800ab46:	e020      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\r';
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	60fa      	str	r2, [r7, #12]
 800ab4e:	220d      	movs	r2, #13
 800ab50:	701a      	strb	r2, [r3, #0]
                    break;
 800ab52:	e01a      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\t';
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	60fa      	str	r2, [r7, #12]
 800ab5a:	2209      	movs	r2, #9
 800ab5c:	701a      	strb	r2, [r3, #0]
                    break;
 800ab5e:	e014      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	1c59      	adds	r1, r3, #1
 800ab68:	60f9      	str	r1, [r7, #12]
 800ab6a:	7812      	ldrb	r2, [r2, #0]
 800ab6c:	701a      	strb	r2, [r3, #0]
                    break;
 800ab6e:	e00c      	b.n	800ab8a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	461a      	mov	r2, r3
 800ab76:	6a39      	ldr	r1, [r7, #32]
 800ab78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab7a:	f7ff fe1b 	bl	800a7b4 <utf16_literal_to_utf8>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02c      	beq.n	800abe2 <parse_string+0x25e>
                    break;
 800ab88:	bf00      	nop
            }
            input_pointer += sequence_length;
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab8e:	4413      	add	r3, r2
 800ab90:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800ab92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	f4ff af66 	bcc.w	800aa68 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2210      	movs	r2, #16
 800aba6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6a3a      	ldr	r2, [r7, #32]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	461a      	mov	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	609a      	str	r2, [r3, #8]

    return true;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e020      	b.n	800ac0c <parse_string+0x288>
        goto fail;
 800abca:	bf00      	nop
 800abcc:	e00a      	b.n	800abe4 <parse_string+0x260>
                    goto fail;
 800abce:	bf00      	nop
 800abd0:	e008      	b.n	800abe4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800abd2:	bf00      	nop
 800abd4:	e006      	b.n	800abe4 <parse_string+0x260>
            goto fail; /* allocation failure */
 800abd6:	bf00      	nop
 800abd8:	e004      	b.n	800abe4 <parse_string+0x260>
                goto fail;
 800abda:	bf00      	nop
 800abdc:	e002      	b.n	800abe4 <parse_string+0x260>
                    goto fail;
 800abde:	bf00      	nop
 800abe0:	e000      	b.n	800abe4 <parse_string+0x260>
                        goto fail;
 800abe2:	bf00      	nop

fail:
    if (output != NULL)
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	69f8      	ldr	r0, [r7, #28]
 800abf0:	4798      	blx	r3
        output = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	461a      	mov	r2, r3
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	609a      	str	r2, [r3, #8]
    }

    return false;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3728      	adds	r7, #40	@ 0x28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <print_string_ptr+0x28>
    {
        return false;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e110      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d111      	bne.n	800ac66 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800ac42:	2103      	movs	r1, #3
 800ac44:	6838      	ldr	r0, [r7, #0]
 800ac46:	f7ff fb5f 	bl	800a308 <ensure>
 800ac4a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <print_string_ptr+0x42>
        {
            return false;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e103      	b.n	800ae5e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	4a83      	ldr	r2, [pc, #524]	@ (800ae68 <print_string_ptr+0x254>)
 800ac5a:	8811      	ldrh	r1, [r2, #0]
 800ac5c:	7892      	ldrb	r2, [r2, #2]
 800ac5e:	8019      	strh	r1, [r3, #0]
 800ac60:	709a      	strb	r2, [r3, #2]

        return true;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e0fb      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	e024      	b.n	800acb6 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b22      	cmp	r3, #34	@ 0x22
 800ac72:	dc0f      	bgt.n	800ac94 <print_string_ptr+0x80>
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	db13      	blt.n	800aca0 <print_string_ptr+0x8c>
 800ac78:	3b08      	subs	r3, #8
 800ac7a:	4a7c      	ldr	r2, [pc, #496]	@ (800ae6c <print_string_ptr+0x258>)
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bf14      	ite	ne
 800ac88:	2301      	movne	r3, #1
 800ac8a:	2300      	moveq	r3, #0
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d102      	bne.n	800ac98 <print_string_ptr+0x84>
 800ac92:	e005      	b.n	800aca0 <print_string_ptr+0x8c>
 800ac94:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac96:	d103      	bne.n	800aca0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	617b      	str	r3, [r7, #20]
                break;
 800ac9e:	e007      	b.n	800acb0 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b1f      	cmp	r3, #31
 800aca6:	d802      	bhi.n	800acae <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	3305      	adds	r3, #5
 800acac:	617b      	str	r3, [r7, #20]
                }
                break;
 800acae:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	3301      	adds	r3, #1
 800acb4:	61fb      	str	r3, [r7, #28]
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1d6      	bne.n	800ac6c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	461a      	mov	r2, r3
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	4413      	add	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3303      	adds	r3, #3
 800acd0:	4619      	mov	r1, r3
 800acd2:	6838      	ldr	r0, [r7, #0]
 800acd4:	f7ff fb18 	bl	800a308 <ensure>
 800acd8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <print_string_ptr+0xd0>
    {
        return false;
 800ace0:	2300      	movs	r3, #0
 800ace2:	e0bc      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d117      	bne.n	800ad1a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2222      	movs	r2, #34	@ 0x22
 800acee:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	3301      	adds	r3, #1
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f00a ff9a 	bl	8015c32 <memcpy>
        output[output_length + 1] = '\"';
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3301      	adds	r3, #1
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4413      	add	r3, r2
 800ad06:	2222      	movs	r2, #34	@ 0x22
 800ad08:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	4413      	add	r3, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]

        return true;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e0a1      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2222      	movs	r2, #34	@ 0x22
 800ad1e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	61fb      	str	r3, [r7, #28]
 800ad2a:	e086      	b.n	800ae3a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b1f      	cmp	r3, #31
 800ad32:	d90c      	bls.n	800ad4e <print_string_ptr+0x13a>
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b22      	cmp	r3, #34	@ 0x22
 800ad3a:	d008      	beq.n	800ad4e <print_string_ptr+0x13a>
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad42:	d004      	beq.n	800ad4e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	701a      	strb	r2, [r3, #0]
 800ad4c:	e06f      	b.n	800ae2e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	61ba      	str	r2, [r7, #24]
 800ad54:	225c      	movs	r2, #92	@ 0x5c
 800ad56:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b22      	cmp	r3, #34	@ 0x22
 800ad5e:	dc3d      	bgt.n	800addc <print_string_ptr+0x1c8>
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	db59      	blt.n	800ae18 <print_string_ptr+0x204>
 800ad64:	3b08      	subs	r3, #8
 800ad66:	2b1a      	cmp	r3, #26
 800ad68:	d856      	bhi.n	800ae18 <print_string_ptr+0x204>
 800ad6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad70 <print_string_ptr+0x15c>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800adf1 	.word	0x0800adf1
 800ad74:	0800ae11 	.word	0x0800ae11
 800ad78:	0800ae01 	.word	0x0800ae01
 800ad7c:	0800ae19 	.word	0x0800ae19
 800ad80:	0800adf9 	.word	0x0800adf9
 800ad84:	0800ae09 	.word	0x0800ae09
 800ad88:	0800ae19 	.word	0x0800ae19
 800ad8c:	0800ae19 	.word	0x0800ae19
 800ad90:	0800ae19 	.word	0x0800ae19
 800ad94:	0800ae19 	.word	0x0800ae19
 800ad98:	0800ae19 	.word	0x0800ae19
 800ad9c:	0800ae19 	.word	0x0800ae19
 800ada0:	0800ae19 	.word	0x0800ae19
 800ada4:	0800ae19 	.word	0x0800ae19
 800ada8:	0800ae19 	.word	0x0800ae19
 800adac:	0800ae19 	.word	0x0800ae19
 800adb0:	0800ae19 	.word	0x0800ae19
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	0800ae19 	.word	0x0800ae19
 800adc0:	0800ae19 	.word	0x0800ae19
 800adc4:	0800ae19 	.word	0x0800ae19
 800adc8:	0800ae19 	.word	0x0800ae19
 800adcc:	0800ae19 	.word	0x0800ae19
 800add0:	0800ae19 	.word	0x0800ae19
 800add4:	0800ae19 	.word	0x0800ae19
 800add8:	0800ade9 	.word	0x0800ade9
 800addc:	2b5c      	cmp	r3, #92	@ 0x5c
 800adde:	d11b      	bne.n	800ae18 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	225c      	movs	r2, #92	@ 0x5c
 800ade4:	701a      	strb	r2, [r3, #0]
                    break;
 800ade6:	e022      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	2222      	movs	r2, #34	@ 0x22
 800adec:	701a      	strb	r2, [r3, #0]
                    break;
 800adee:	e01e      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2262      	movs	r2, #98	@ 0x62
 800adf4:	701a      	strb	r2, [r3, #0]
                    break;
 800adf6:	e01a      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	2266      	movs	r2, #102	@ 0x66
 800adfc:	701a      	strb	r2, [r3, #0]
                    break;
 800adfe:	e016      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	226e      	movs	r2, #110	@ 0x6e
 800ae04:	701a      	strb	r2, [r3, #0]
                    break;
 800ae06:	e012      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	2272      	movs	r2, #114	@ 0x72
 800ae0c:	701a      	strb	r2, [r3, #0]
                    break;
 800ae0e:	e00e      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2274      	movs	r2, #116	@ 0x74
 800ae14:	701a      	strb	r2, [r3, #0]
                    break;
 800ae16:	e00a      	b.n	800ae2e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4914      	ldr	r1, [pc, #80]	@ (800ae70 <print_string_ptr+0x25c>)
 800ae20:	69b8      	ldr	r0, [r7, #24]
 800ae22:	f00a fd41 	bl	80158a8 <siprintf>
                    output_pointer += 4;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	61bb      	str	r3, [r7, #24]
                    break;
 800ae2c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	3301      	adds	r3, #1
 800ae32:	61fb      	str	r3, [r7, #28]
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	3301      	adds	r3, #1
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f47f af74 	bne.w	800ad2c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	2222      	movs	r2, #34	@ 0x22
 800ae4e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3302      	adds	r3, #2
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4413      	add	r3, r2
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]

    return true;
 800ae5c:	2301      	movs	r3, #1
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	08018264 	.word	0x08018264
 800ae6c:	04000037 	.word	0x04000037
 800ae70:	08018268 	.word	0x08018268

0800ae74 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fec5 	bl	800ac14 <print_string_ptr>
 800ae8a:	4603      	mov	r3, r0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <buffer_skip_whitespace+0x16>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e02c      	b.n	800af08 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d005      	beq.n	800aec0 <buffer_skip_whitespace+0x2c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d306      	bcc.n	800aece <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	e021      	b.n	800af08 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00d      	beq.n	800aef0 <buffer_skip_whitespace+0x5c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d207      	bcs.n	800aef0 <buffer_skip_whitespace+0x5c>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d9e9      	bls.n	800aec4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d104      	bne.n	800af06 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800af06:	687b      	ldr	r3, [r7, #4]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d007      	beq.n	800af32 <skip_utf8_bom+0x1e>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <skip_utf8_bom+0x1e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <skip_utf8_bom+0x22>
    {
        return NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	e01c      	b.n	800af70 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d018      	beq.n	800af6e <skip_utf8_bom+0x5a>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	1d1a      	adds	r2, r3, #4
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	429a      	cmp	r2, r3
 800af48:	d211      	bcs.n	800af6e <skip_utf8_bom+0x5a>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	4413      	add	r3, r2
 800af54:	2203      	movs	r2, #3
 800af56:	4908      	ldr	r1, [pc, #32]	@ (800af78 <skip_utf8_bom+0x64>)
 800af58:	4618      	mov	r0, r3
 800af5a:	f00a fdd5 	bl	8015b08 <strncmp>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d104      	bne.n	800af6e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	1cda      	adds	r2, r3, #3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800af6e:	687b      	ldr	r3, [r7, #4]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	08018270 	.word	0x08018270

0800af7c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	e00c      	b.n	800afac <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7fd f946 	bl	8008224 <strlen>
 800af98:	4603      	mov	r3, r0
 800af9a:	3301      	adds	r3, #1
 800af9c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	6979      	ldr	r1, [r7, #20]
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f805 	bl	800afb4 <cJSON_ParseWithLengthOpts>
 800afaa:	4603      	mov	r3, r0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08e      	sub	sp, #56	@ 0x38
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800afc2:	f107 0318 	add.w	r3, r7, #24
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	605a      	str	r2, [r3, #4]
 800afcc:	609a      	str	r2, [r3, #8]
 800afce:	60da      	str	r2, [r3, #12]
 800afd0:	611a      	str	r2, [r3, #16]
 800afd2:	615a      	str	r2, [r3, #20]
 800afd4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800afda:	4b41      	ldr	r3, [pc, #260]	@ (800b0e0 <cJSON_ParseWithLengthOpts+0x12c>)
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800afe0:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e0 <cJSON_ParseWithLengthOpts+0x12c>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d042      	beq.n	800b072 <cJSON_ParseWithLengthOpts+0xbe>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d03f      	beq.n	800b072 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800affe:	4a39      	ldr	r2, [pc, #228]	@ (800b0e4 <cJSON_ParseWithLengthOpts+0x130>)
 800b000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b004:	ca07      	ldmia	r2, {r0, r1, r2}
 800b006:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800b00a:	4836      	ldr	r0, [pc, #216]	@ (800b0e4 <cJSON_ParseWithLengthOpts+0x130>)
 800b00c:	f7ff f840 	bl	800a090 <cJSON_New_Item>
 800b010:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800b012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b014:	2b00      	cmp	r3, #0
 800b016:	d02e      	beq.n	800b076 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800b018:	f107 0318 	add.w	r3, r7, #24
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff ff79 	bl	800af14 <skip_utf8_bom>
 800b022:	4603      	mov	r3, r0
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff ff35 	bl	800ae94 <buffer_skip_whitespace>
 800b02a:	4603      	mov	r3, r0
 800b02c:	4619      	mov	r1, r3
 800b02e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b030:	f000 f902 	bl	800b238 <parse_value>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d01f      	beq.n	800b07a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00e      	beq.n	800b05e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800b040:	f107 0318 	add.w	r3, r7, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff ff25 	bl	800ae94 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800b04a:	6a3a      	ldr	r2, [r7, #32]
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d215      	bcs.n	800b07e <cJSON_ParseWithLengthOpts+0xca>
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	4413      	add	r3, r2
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10f      	bne.n	800b07e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	441a      	add	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800b06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b070:	e031      	b.n	800b0d6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800b072:	bf00      	nop
 800b074:	e004      	b.n	800b080 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b076:	bf00      	nop
 800b078:	e002      	b.n	800b080 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b07a:	bf00      	nop
 800b07c:	e000      	b.n	800b080 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800b07e:	bf00      	nop

fail:
    if (item != NULL)
 800b080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800b086:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b088:	f7ff f818 	bl	800a0bc <cJSON_Delete>
    }

    if (value != NULL)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d020      	beq.n	800b0d4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800b09a:	6a3a      	ldr	r2, [r7, #32]
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d202      	bcs.n	800b0a8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	e005      	b.n	800b0b4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d004      	beq.n	800b0c4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	441a      	add	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800b0c4:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <cJSON_ParseWithLengthOpts+0x12c>)
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f107 0310 	add.w	r3, r7, #16
 800b0cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0d0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3738      	adds	r7, #56	@ 0x38
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000220 	.word	0x20000220
 800b0e4:	20000000 	.word	0x20000000

0800b0e8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ff41 	bl	800af7c <cJSON_ParseWithOpts>
 800b0fa:	4603      	mov	r3, r0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08e      	sub	sp, #56	@ 0x38
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800b110:	2300      	movs	r3, #0
 800b112:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800b114:	f107 0310 	add.w	r3, r7, #16
 800b118:	2224      	movs	r2, #36	@ 0x24
 800b11a:	2100      	movs	r1, #0
 800b11c:	4618      	mov	r0, r3
 800b11e:	f00a fceb 	bl	8015af8 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a3b      	ldr	r2, [pc, #236]	@ (800b214 <print+0x110>)
 800b128:	6812      	ldr	r2, [r2, #0]
 800b12a:	4610      	mov	r0, r2
 800b12c:	4798      	blx	r3
 800b12e:	4603      	mov	r3, r0
 800b130:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800b132:	4b38      	ldr	r3, [pc, #224]	@ (800b214 <print+0x110>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b142:	ca07      	ldmia	r2, {r0, r1, r2}
 800b144:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d042      	beq.n	800b1d4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800b14e:	f107 0310 	add.w	r3, r7, #16
 800b152:	4619      	mov	r1, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 f95b 	bl	800b410 <print_value>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d03b      	beq.n	800b1d8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800b160:	f107 0310 	add.w	r3, r7, #16
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff f969 	bl	800a43c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00d      	beq.n	800b18e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	6938      	ldr	r0, [r7, #16]
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	3201      	adds	r2, #1
 800b17c:	4611      	mov	r1, r2
 800b17e:	4798      	blx	r3
 800b180:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800b182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b184:	2b00      	cmp	r3, #0
 800b186:	d029      	beq.n	800b1dc <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	e020      	b.n	800b1d0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	3201      	adds	r2, #1
 800b196:	4610      	mov	r0, r2
 800b198:	4798      	blx	r3
 800b19a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800b19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01e      	beq.n	800b1e0 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800b1a2:	6939      	ldr	r1, [r7, #16]
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	bf28      	it	cs
 800b1ae:	4613      	movcs	r3, r2
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b1b4:	f00a fd3d 	bl	8015c32 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1bc:	4413      	add	r3, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
        buffer->buffer = NULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d2:	e01a      	b.n	800b20a <print+0x106>
        goto fail;
 800b1d4:	bf00      	nop
 800b1d6:	e004      	b.n	800b1e2 <print+0xde>
        goto fail;
 800b1d8:	bf00      	nop
 800b1da:	e002      	b.n	800b1e2 <print+0xde>
            goto fail;
 800b1dc:	bf00      	nop
 800b1de:	e000      	b.n	800b1e2 <print+0xde>
            goto fail;
 800b1e0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d006      	beq.n	800b1f6 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4798      	blx	r3
        buffer->buffer = NULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800b1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <print+0x104>
    {
        hooks->deallocate(printed);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b202:	4798      	blx	r3
        printed = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3738      	adds	r7, #56	@ 0x38
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	080185e4 	.word	0x080185e4

0800b218 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800b220:	4a04      	ldr	r2, [pc, #16]	@ (800b234 <cJSON_PrintUnformatted+0x1c>)
 800b222:	2100      	movs	r1, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff ff6d 	bl	800b104 <print>
 800b22a:	4603      	mov	r3, r0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20000000 	.word	0x20000000

0800b238 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <parse_value+0x18>
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <parse_value+0x1c>
    {
        return false; /* no input */
 800b250:	2300      	movs	r3, #0
 800b252:	e0d2      	b.n	800b3fa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01d      	beq.n	800b296 <parse_value+0x5e>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d816      	bhi.n	800b296 <parse_value+0x5e>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	4413      	add	r3, r2
 800b272:	2204      	movs	r2, #4
 800b274:	4963      	ldr	r1, [pc, #396]	@ (800b404 <parse_value+0x1cc>)
 800b276:	4618      	mov	r0, r3
 800b278:	f00a fc46 	bl	8015b08 <strncmp>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2204      	movs	r2, #4
 800b286:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	609a      	str	r2, [r3, #8]
        return true;
 800b292:	2301      	movs	r3, #1
 800b294:	e0b1      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01d      	beq.n	800b2d8 <parse_value+0xa0>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	1d5a      	adds	r2, r3, #5
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d816      	bhi.n	800b2d8 <parse_value+0xa0>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	4954      	ldr	r1, [pc, #336]	@ (800b408 <parse_value+0x1d0>)
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f00a fc25 	bl	8015b08 <strncmp>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d109      	bne.n	800b2d8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	1d5a      	adds	r2, r3, #5
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	609a      	str	r2, [r3, #8]
        return true;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e090      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d020      	beq.n	800b320 <parse_value+0xe8>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d819      	bhi.n	800b320 <parse_value+0xe8>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	4944      	ldr	r1, [pc, #272]	@ (800b40c <parse_value+0x1d4>)
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f00a fc04 	bl	8015b08 <strncmp>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10c      	bne.n	800b320 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2202      	movs	r2, #2
 800b30a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	609a      	str	r2, [r3, #8]
        return true;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e06c      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d013      	beq.n	800b34e <parse_value+0x116>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	689a      	ldr	r2, [r3, #8]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d20d      	bcs.n	800b34e <parse_value+0x116>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	4413      	add	r3, r2
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b22      	cmp	r3, #34	@ 0x22
 800b340:	d105      	bne.n	800b34e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff fb1d 	bl	800a984 <parse_string>
 800b34a:	4603      	mov	r3, r0
 800b34c:	e055      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d023      	beq.n	800b39c <parse_value+0x164>
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d21d      	bcs.n	800b39c <parse_value+0x164>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	4413      	add	r3, r2
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b2d      	cmp	r3, #45	@ 0x2d
 800b36e:	d00f      	beq.n	800b390 <parse_value+0x158>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b37e:	d90d      	bls.n	800b39c <parse_value+0x164>
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	4413      	add	r3, r2
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	2b39      	cmp	r3, #57	@ 0x39
 800b38e:	d805      	bhi.n	800b39c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fe feec 	bl	800a170 <parse_number>
 800b398:	4603      	mov	r3, r0
 800b39a:	e02e      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d013      	beq.n	800b3ca <parse_value+0x192>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	689a      	ldr	r2, [r3, #8]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d20d      	bcs.n	800b3ca <parse_value+0x192>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b5b      	cmp	r3, #91	@ 0x5b
 800b3bc:	d105      	bne.n	800b3ca <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f909 	bl	800b5d8 <parse_array>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	e017      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d013      	beq.n	800b3f8 <parse_value+0x1c0>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d20d      	bcs.n	800b3f8 <parse_value+0x1c0>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b7b      	cmp	r3, #123	@ 0x7b
 800b3ea:	d105      	bne.n	800b3f8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa3c 	bl	800b86c <parse_object>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	e000      	b.n	800b3fa <parse_value+0x1c2>
    }

    return false;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	08018244 	.word	0x08018244
 800b408:	08018274 	.word	0x08018274
 800b40c:	0801827c 	.word	0x0801827c

0800b410 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <print_value+0x1a>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <print_value+0x1e>
    {
        return false;
 800b42a:	2300      	movs	r3, #0
 800b42c:	e0c9      	b.n	800b5c2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b80      	cmp	r3, #128	@ 0x80
 800b436:	f000 808e 	beq.w	800b556 <print_value+0x146>
 800b43a:	2b80      	cmp	r3, #128	@ 0x80
 800b43c:	f300 80c0 	bgt.w	800b5c0 <print_value+0x1b0>
 800b440:	2b20      	cmp	r3, #32
 800b442:	dc49      	bgt.n	800b4d8 <print_value+0xc8>
 800b444:	2b00      	cmp	r3, #0
 800b446:	f340 80bb 	ble.w	800b5c0 <print_value+0x1b0>
 800b44a:	3b01      	subs	r3, #1
 800b44c:	2b1f      	cmp	r3, #31
 800b44e:	f200 80b7 	bhi.w	800b5c0 <print_value+0x1b0>
 800b452:	a201      	add	r2, pc, #4	@ (adr r2, 800b458 <print_value+0x48>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b503 	.word	0x0800b503
 800b45c:	0800b527 	.word	0x0800b527
 800b460:	0800b5c1 	.word	0x0800b5c1
 800b464:	0800b4df 	.word	0x0800b4df
 800b468:	0800b5c1 	.word	0x0800b5c1
 800b46c:	0800b5c1 	.word	0x0800b5c1
 800b470:	0800b5c1 	.word	0x0800b5c1
 800b474:	0800b54b 	.word	0x0800b54b
 800b478:	0800b5c1 	.word	0x0800b5c1
 800b47c:	0800b5c1 	.word	0x0800b5c1
 800b480:	0800b5c1 	.word	0x0800b5c1
 800b484:	0800b5c1 	.word	0x0800b5c1
 800b488:	0800b5c1 	.word	0x0800b5c1
 800b48c:	0800b5c1 	.word	0x0800b5c1
 800b490:	0800b5c1 	.word	0x0800b5c1
 800b494:	0800b59d 	.word	0x0800b59d
 800b498:	0800b5c1 	.word	0x0800b5c1
 800b49c:	0800b5c1 	.word	0x0800b5c1
 800b4a0:	0800b5c1 	.word	0x0800b5c1
 800b4a4:	0800b5c1 	.word	0x0800b5c1
 800b4a8:	0800b5c1 	.word	0x0800b5c1
 800b4ac:	0800b5c1 	.word	0x0800b5c1
 800b4b0:	0800b5c1 	.word	0x0800b5c1
 800b4b4:	0800b5c1 	.word	0x0800b5c1
 800b4b8:	0800b5c1 	.word	0x0800b5c1
 800b4bc:	0800b5c1 	.word	0x0800b5c1
 800b4c0:	0800b5c1 	.word	0x0800b5c1
 800b4c4:	0800b5c1 	.word	0x0800b5c1
 800b4c8:	0800b5c1 	.word	0x0800b5c1
 800b4cc:	0800b5c1 	.word	0x0800b5c1
 800b4d0:	0800b5c1 	.word	0x0800b5c1
 800b4d4:	0800b5a9 	.word	0x0800b5a9
 800b4d8:	2b40      	cmp	r3, #64	@ 0x40
 800b4da:	d06b      	beq.n	800b5b4 <print_value+0x1a4>
 800b4dc:	e070      	b.n	800b5c0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800b4de:	2105      	movs	r1, #5
 800b4e0:	6838      	ldr	r0, [r7, #0]
 800b4e2:	f7fe ff11 	bl	800a308 <ensure>
 800b4e6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <print_value+0xe2>
            {
                return false;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e067      	b.n	800b5c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	4a35      	ldr	r2, [pc, #212]	@ (800b5cc <print_value+0x1bc>)
 800b4f6:	6810      	ldr	r0, [r2, #0]
 800b4f8:	6018      	str	r0, [r3, #0]
 800b4fa:	7912      	ldrb	r2, [r2, #4]
 800b4fc:	711a      	strb	r2, [r3, #4]
            return true;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e05f      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800b502:	2106      	movs	r1, #6
 800b504:	6838      	ldr	r0, [r7, #0]
 800b506:	f7fe feff 	bl	800a308 <ensure>
 800b50a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <print_value+0x106>
            {
                return false;
 800b512:	2300      	movs	r3, #0
 800b514:	e055      	b.n	800b5c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	4a2d      	ldr	r2, [pc, #180]	@ (800b5d0 <print_value+0x1c0>)
 800b51a:	6810      	ldr	r0, [r2, #0]
 800b51c:	6018      	str	r0, [r3, #0]
 800b51e:	8892      	ldrh	r2, [r2, #4]
 800b520:	809a      	strh	r2, [r3, #4]
            return true;
 800b522:	2301      	movs	r3, #1
 800b524:	e04d      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800b526:	2105      	movs	r1, #5
 800b528:	6838      	ldr	r0, [r7, #0]
 800b52a:	f7fe feed 	bl	800a308 <ensure>
 800b52e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <print_value+0x12a>
            {
                return false;
 800b536:	2300      	movs	r3, #0
 800b538:	e043      	b.n	800b5c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4a25      	ldr	r2, [pc, #148]	@ (800b5d4 <print_value+0x1c4>)
 800b53e:	6810      	ldr	r0, [r2, #0]
 800b540:	6018      	str	r0, [r3, #0]
 800b542:	7912      	ldrb	r2, [r2, #4]
 800b544:	711a      	strb	r2, [r3, #4]
            return true;
 800b546:	2301      	movs	r3, #1
 800b548:	e03b      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7fe ffdf 	bl	800a510 <print_number>
 800b552:	4603      	mov	r3, r0
 800b554:	e035      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <print_value+0x156>
            {
                return false;
 800b562:	2300      	movs	r3, #0
 800b564:	e02d      	b.n	800b5c2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fc fe5a 	bl	8008224 <strlen>
 800b570:	4603      	mov	r3, r0
 800b572:	3301      	adds	r3, #1
 800b574:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	6838      	ldr	r0, [r7, #0]
 800b57a:	f7fe fec5 	bl	800a308 <ensure>
 800b57e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <print_value+0x17a>
            {
                return false;
 800b586:	2300      	movs	r3, #0
 800b588:	e01b      	b.n	800b5c2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	4619      	mov	r1, r3
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f00a fb4d 	bl	8015c32 <memcpy>
            return true;
 800b598:	2301      	movs	r3, #1
 800b59a:	e012      	b.n	800b5c2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fc68 	bl	800ae74 <print_string>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	e00c      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f8d8 	bl	800b760 <print_array>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	e006      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa64 	bl	800ba84 <print_object>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	e000      	b.n	800b5c2 <print_value+0x1b2>

        default:
            return false;
 800b5c0:	2300      	movs	r3, #0
    }
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	08018244 	.word	0x08018244
 800b5d0:	08018274 	.word	0x08018274
 800b5d4:	0801827c 	.word	0x0801827c

0800b5d8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b5f2:	d301      	bcc.n	800b5f8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e0af      	b.n	800b758 <parse_array+0x180>
    }
    input_buffer->depth++;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	4413      	add	r3, r2
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b5b      	cmp	r3, #91	@ 0x5b
 800b610:	f040 8094 	bne.w	800b73c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800b61e:	6838      	ldr	r0, [r7, #0]
 800b620:	f7ff fc38 	bl	800ae94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00d      	beq.n	800b646 <parse_array+0x6e>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	429a      	cmp	r2, r3
 800b634:	d207      	bcs.n	800b646 <parse_array+0x6e>
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	4413      	add	r3, r2
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2b5d      	cmp	r3, #93	@ 0x5d
 800b644:	d061      	beq.n	800b70a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d005      	beq.n	800b658 <parse_array+0x80>
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	429a      	cmp	r2, r3
 800b656:	d305      	bcc.n	800b664 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	1e5a      	subs	r2, r3, #1
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	609a      	str	r2, [r3, #8]
        goto fail;
 800b662:	e072      	b.n	800b74a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	1e5a      	subs	r2, r3, #1
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	3310      	adds	r3, #16
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fd0c 	bl	800a090 <cJSON_New_Item>
 800b678:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d05f      	beq.n	800b740 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d104      	bne.n	800b690 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	617b      	str	r3, [r7, #20]
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	613b      	str	r3, [r7, #16]
 800b68e:	e007      	b.n	800b6a0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b6aa:	6838      	ldr	r0, [r7, #0]
 800b6ac:	f7ff fbf2 	bl	800ae94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6938      	ldr	r0, [r7, #16]
 800b6b4:	f7ff fdc0 	bl	800b238 <parse_value>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d042      	beq.n	800b744 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800b6be:	6838      	ldr	r0, [r7, #0]
 800b6c0:	f7ff fbe8 	bl	800ae94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00d      	beq.n	800b6e6 <parse_array+0x10e>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d207      	bcs.n	800b6e6 <parse_array+0x10e>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	4413      	add	r3, r2
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b2c      	cmp	r3, #44	@ 0x2c
 800b6e4:	d0c3      	beq.n	800b66e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d02d      	beq.n	800b748 <parse_array+0x170>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d227      	bcs.n	800b748 <parse_array+0x170>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	4413      	add	r3, r2
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b5d      	cmp	r3, #93	@ 0x5d
 800b706:	d11f      	bne.n	800b748 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800b708:	e000      	b.n	800b70c <parse_array+0x134>
        goto success;
 800b70a:	bf00      	nop
    input_buffer->depth--;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <parse_array+0x14a>
        head->prev = current_item;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	60da      	str	r2, [r3, #12]
    item->child = head;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	609a      	str	r2, [r3, #8]

    return true;
 800b738:	2301      	movs	r3, #1
 800b73a:	e00d      	b.n	800b758 <parse_array+0x180>
        goto fail;
 800b73c:	bf00      	nop
 800b73e:	e004      	b.n	800b74a <parse_array+0x172>
            goto fail; /* allocation failure */
 800b740:	bf00      	nop
 800b742:	e002      	b.n	800b74a <parse_array+0x172>
            goto fail; /* failed to parse value */
 800b744:	bf00      	nop
 800b746:	e000      	b.n	800b74a <parse_array+0x172>
        goto fail; /* expected end of array */
 800b748:	bf00      	nop

fail:
    if (head != NULL)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f7fe fcb3 	bl	800a0bc <cJSON_Delete>
    }

    return false;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <print_array+0x22>
    {
        return false;
 800b77e:	2300      	movs	r3, #0
 800b780:	e070      	b.n	800b864 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800b782:	2101      	movs	r1, #1
 800b784:	6838      	ldr	r0, [r7, #0]
 800b786:	f7fe fdbf 	bl	800a308 <ensure>
 800b78a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <print_array+0x36>
    {
        return false;
 800b792:	2300      	movs	r3, #0
 800b794:	e066      	b.n	800b864 <print_array+0x104>
    }

    *output_pointer = '[';
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	225b      	movs	r2, #91	@ 0x5b
 800b79a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800b7b0:	e03d      	b.n	800b82e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6938      	ldr	r0, [r7, #16]
 800b7b6:	f7ff fe2b 	bl	800b410 <print_value>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <print_array+0x64>
        {
            return false;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e04f      	b.n	800b864 <print_array+0x104>
        }
        update_offset(output_buffer);
 800b7c4:	6838      	ldr	r0, [r7, #0]
 800b7c6:	f7fe fe39 	bl	800a43c <update_offset>
        if (current_element->next)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d02a      	beq.n	800b828 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <print_array+0x7e>
 800b7da:	2302      	movs	r3, #2
 800b7dc:	e000      	b.n	800b7e0 <print_array+0x80>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6838      	ldr	r0, [r7, #0]
 800b7ea:	f7fe fd8d 	bl	800a308 <ensure>
 800b7ee:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <print_array+0x9a>
            {
                return false;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e034      	b.n	800b864 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	617a      	str	r2, [r7, #20]
 800b800:	222c      	movs	r2, #44	@ 0x2c
 800b802:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	617a      	str	r2, [r7, #20]
 800b812:	2220      	movs	r2, #32
 800b814:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2200      	movs	r2, #0
 800b81a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	441a      	add	r2, r3
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1be      	bne.n	800b7b2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800b834:	2102      	movs	r1, #2
 800b836:	6838      	ldr	r0, [r7, #0]
 800b838:	f7fe fd66 	bl	800a308 <ensure>
 800b83c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <print_array+0xe8>
    {
        return false;
 800b844:	2300      	movs	r3, #0
 800b846:	e00d      	b.n	800b864 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	617a      	str	r2, [r7, #20]
 800b84e:	225d      	movs	r2, #93	@ 0x5d
 800b850:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2200      	movs	r2, #0
 800b856:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	1e5a      	subs	r2, r3, #1
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	60da      	str	r2, [r3, #12]

    return true;
 800b862:	2301      	movs	r3, #1
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800b876:	2300      	movs	r3, #0
 800b878:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b886:	d301      	bcc.n	800b88c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800b888:	2300      	movs	r3, #0
 800b88a:	e0f7      	b.n	800ba7c <parse_object+0x210>
    }
    input_buffer->depth++;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 80db 	beq.w	800ba54 <parse_object+0x1e8>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	689a      	ldr	r2, [r3, #8]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	f080 80d4 	bcs.w	800ba54 <parse_object+0x1e8>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b7b      	cmp	r3, #123	@ 0x7b
 800b8ba:	f040 80cb 	bne.w	800ba54 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800b8c8:	6838      	ldr	r0, [r7, #0]
 800b8ca:	f7ff fae3 	bl	800ae94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <parse_object+0x86>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d208      	bcs.n	800b8f2 <parse_object+0x86>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b7d      	cmp	r3, #125	@ 0x7d
 800b8ee:	f000 8098 	beq.w	800ba22 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d005      	beq.n	800b904 <parse_object+0x98>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d305      	bcc.n	800b910 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	609a      	str	r2, [r3, #8]
        goto fail;
 800b90e:	e0ae      	b.n	800ba6e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	1e5a      	subs	r2, r3, #1
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	3310      	adds	r3, #16
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fbb6 	bl	800a090 <cJSON_New_Item>
 800b924:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 8095 	beq.w	800ba58 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d104      	bne.n	800b93e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	613b      	str	r3, [r7, #16]
 800b93c:	e007      	b.n	800b94e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 8083 	beq.w	800ba5c <parse_object+0x1f0>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d27b      	bcs.n	800ba5c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	1c5a      	adds	r2, r3, #1
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b96e:	6838      	ldr	r0, [r7, #0]
 800b970:	f7ff fa90 	bl	800ae94 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6938      	ldr	r0, [r7, #16]
 800b978:	f7ff f804 	bl	800a984 <parse_string>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d06e      	beq.n	800ba60 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800b982:	6838      	ldr	r0, [r7, #0]
 800b984:	f7ff fa86 	bl	800ae94 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	691a      	ldr	r2, [r3, #16]
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2200      	movs	r2, #0
 800b994:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d063      	beq.n	800ba64 <parse_object+0x1f8>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d25d      	bcs.n	800ba64 <parse_object+0x1f8>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9b6:	d155      	bne.n	800ba64 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b9c2:	6838      	ldr	r0, [r7, #0]
 800b9c4:	f7ff fa66 	bl	800ae94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f7ff fc34 	bl	800b238 <parse_value>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d048      	beq.n	800ba68 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800b9d6:	6838      	ldr	r0, [r7, #0]
 800b9d8:	f7ff fa5c 	bl	800ae94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00d      	beq.n	800b9fe <parse_object+0x192>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d207      	bcs.n	800b9fe <parse_object+0x192>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b2c      	cmp	r3, #44	@ 0x2c
 800b9fc:	d08d      	beq.n	800b91a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d033      	beq.n	800ba6c <parse_object+0x200>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d22d      	bcs.n	800ba6c <parse_object+0x200>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4413      	add	r3, r2
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b7d      	cmp	r3, #125	@ 0x7d
 800ba1e:	d125      	bne.n	800ba6c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800ba20:	e000      	b.n	800ba24 <parse_object+0x1b8>
        goto success; /* empty object */
 800ba22:	bf00      	nop
    input_buffer->depth--;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	1e5a      	subs	r2, r3, #1
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <parse_object+0x1ce>
        head->prev = current_item;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2240      	movs	r2, #64	@ 0x40
 800ba3e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	1c5a      	adds	r2, r3, #1
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	609a      	str	r2, [r3, #8]
    return true;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e013      	b.n	800ba7c <parse_object+0x210>
        goto fail; /* not an object */
 800ba54:	bf00      	nop
 800ba56:	e00a      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* allocation failure */
 800ba58:	bf00      	nop
 800ba5a:	e008      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800ba5c:	bf00      	nop
 800ba5e:	e006      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* failed to parse name */
 800ba60:	bf00      	nop
 800ba62:	e004      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* invalid object */
 800ba64:	bf00      	nop
 800ba66:	e002      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* failed to parse value */
 800ba68:	bf00      	nop
 800ba6a:	e000      	b.n	800ba6e <parse_object+0x202>
        goto fail; /* expected end of object */
 800ba6c:	bf00      	nop

fail:
    if (head != NULL)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800ba74:	6978      	ldr	r0, [r7, #20]
 800ba76:	f7fe fb21 	bl	800a0bc <cJSON_Delete>
    }

    return false;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <print_object+0x22>
    {
        return false;
 800baa2:	2300      	movs	r3, #0
 800baa4:	e108      	b.n	800bcb8 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <print_object+0x2e>
 800baae:	2302      	movs	r3, #2
 800bab0:	e000      	b.n	800bab4 <print_object+0x30>
 800bab2:	2301      	movs	r3, #1
 800bab4:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	4619      	mov	r1, r3
 800babc:	6838      	ldr	r0, [r7, #0]
 800babe:	f7fe fc23 	bl	800a308 <ensure>
 800bac2:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <print_object+0x4a>
    {
        return false;
 800baca:	2300      	movs	r3, #0
 800bacc:	e0f4      	b.n	800bcb8 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	61fa      	str	r2, [r7, #28]
 800bad4:	227b      	movs	r2, #123	@ 0x7b
 800bad6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d004      	beq.n	800baf4 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	61fa      	str	r2, [r7, #28]
 800baf0:	220a      	movs	r2, #10
 800baf2:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	441a      	add	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	609a      	str	r2, [r3, #8]

    while (current_item)
 800bb00:	e0a0      	b.n	800bc44 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d022      	beq.n	800bb50 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6838      	ldr	r0, [r7, #0]
 800bb12:	f7fe fbf9 	bl	800a308 <ensure>
 800bb16:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <print_object+0x9e>
            {
                return false;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e0ca      	b.n	800bcb8 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	e007      	b.n	800bb38 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	61fa      	str	r2, [r7, #28]
 800bb2e:	2209      	movs	r2, #9
 800bb30:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	3301      	adds	r3, #1
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d3f2      	bcc.n	800bb28 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	6a1b      	ldr	r3, [r3, #32]
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff f85c 	bl	800ac14 <print_string_ptr>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <print_object+0xe2>
        {
            return false;
 800bb62:	2300      	movs	r3, #0
 800bb64:	e0a8      	b.n	800bcb8 <print_object+0x234>
        }
        update_offset(output_buffer);
 800bb66:	6838      	ldr	r0, [r7, #0]
 800bb68:	f7fe fc68 	bl	800a43c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <print_object+0xf4>
 800bb74:	2302      	movs	r3, #2
 800bb76:	e000      	b.n	800bb7a <print_object+0xf6>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800bb7c:	68f9      	ldr	r1, [r7, #12]
 800bb7e:	6838      	ldr	r0, [r7, #0]
 800bb80:	f7fe fbc2 	bl	800a308 <ensure>
 800bb84:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <print_object+0x10c>
        {
            return false;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e093      	b.n	800bcb8 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	61fa      	str	r2, [r7, #28]
 800bb96:	223a      	movs	r2, #58	@ 0x3a
 800bb98:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d004      	beq.n	800bbac <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	1c5a      	adds	r2, r3, #1
 800bba6:	61fa      	str	r2, [r7, #28]
 800bba8:	2209      	movs	r2, #9
 800bbaa:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	441a      	add	r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	69b8      	ldr	r0, [r7, #24]
 800bbbc:	f7ff fc28 	bl	800b410 <print_value>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <print_object+0x146>
        {
            return false;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e076      	b.n	800bcb8 <print_object+0x234>
        }
        update_offset(output_buffer);
 800bbca:	6838      	ldr	r0, [r7, #0]
 800bbcc:	f7fe fc36 	bl	800a43c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <print_object+0x158>
 800bbd8:	2201      	movs	r2, #1
 800bbda:	e000      	b.n	800bbde <print_object+0x15a>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <print_object+0x166>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <print_object+0x168>
 800bbea:	2300      	movs	r3, #0
 800bbec:	4413      	add	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6838      	ldr	r0, [r7, #0]
 800bbf8:	f7fe fb86 	bl	800a308 <ensure>
 800bbfc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <print_object+0x184>
        {
            return false;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e057      	b.n	800bcb8 <print_object+0x234>
        }
        if (current_item->next)
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <print_object+0x196>
        {
            *output_pointer++ = ',';
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	61fa      	str	r2, [r7, #28]
 800bc16:	222c      	movs	r2, #44	@ 0x2c
 800bc18:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	1c5a      	adds	r2, r3, #1
 800bc26:	61fa      	str	r2, [r7, #28]
 800bc28:	220a      	movs	r2, #10
 800bc2a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	441a      	add	r2, r3
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f47f af5b 	bne.w	800bb02 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <print_object+0x1d8>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	e000      	b.n	800bc5e <print_object+0x1da>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6838      	ldr	r0, [r7, #0]
 800bc62:	f7fe fb51 	bl	800a308 <ensure>
 800bc66:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <print_object+0x1ee>
    {
        return false;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e022      	b.n	800bcb8 <print_object+0x234>
    }
    if (output_buffer->format)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d010      	beq.n	800bc9c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	613b      	str	r3, [r7, #16]
 800bc7e:	e007      	b.n	800bc90 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	61fa      	str	r2, [r7, #28]
 800bc86:	2209      	movs	r2, #9
 800bc88:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d3f1      	bcc.n	800bc80 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	61fa      	str	r2, [r7, #28]
 800bca2:	227d      	movs	r2, #125	@ 0x7d
 800bca4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	1e5a      	subs	r2, r3, #1
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	60da      	str	r2, [r3, #12]

    return true;
 800bcb6:	2301      	movs	r3, #1
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3720      	adds	r7, #32
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800bccc:	2300      	movs	r3, #0
 800bcce:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <get_object_item+0x1c>
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <get_object_item+0x20>
    {
        return NULL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	e033      	b.n	800bd48 <get_object_item+0x88>
    }

    current_element = object->child;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d017      	beq.n	800bd1c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800bcec:	e002      	b.n	800bcf4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d01c      	beq.n	800bd34 <get_object_item+0x74>
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d018      	beq.n	800bd34 <get_object_item+0x74>
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	4619      	mov	r1, r3
 800bd08:	68b8      	ldr	r0, [r7, #8]
 800bd0a:	f7fc fa81 	bl	8008210 <strcmp>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1ec      	bne.n	800bcee <get_object_item+0x2e>
 800bd14:	e00e      	b.n	800bd34 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d008      	beq.n	800bd34 <get_object_item+0x74>
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	4619      	mov	r1, r3
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7fe f91d 	bl	8009f68 <case_insensitive_strcmp>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1f0      	bne.n	800bd16 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <get_object_item+0x82>
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <get_object_item+0x86>
        return NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e000      	b.n	800bd48 <get_object_item+0x88>
    }

    return current_element;
 800bd46:	697b      	ldr	r3, [r7, #20]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff ffae 	bl	800bcc0 <get_object_item>
 800bd64:	4603      	mov	r3, r0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	605a      	str	r2, [r3, #4]
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <add_item_to_array+0x22>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <add_item_to_array+0x22>
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d101      	bne.n	800bdb6 <add_item_to_array+0x26>
    {
        return false;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e01e      	b.n	800bdf4 <add_item_to_array+0x64>
    }

    child = array->child;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	e00d      	b.n	800bdf2 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d009      	beq.n	800bdf2 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff ffc2 	bl	800bd6e <suffix_object>
            array->child->prev = item;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800bdf2:	2301      	movs	r3, #1
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800be04:	687b      	ldr	r3, [r7, #4]
}
 800be06:	4618      	mov	r0, r3
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d009      	beq.n	800be42 <add_item_to_object+0x30>
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d006      	beq.n	800be42 <add_item_to_object+0x30>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <add_item_to_object+0x30>
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d101      	bne.n	800be46 <add_item_to_object+0x34>
    {
        return false;
 800be42:	2300      	movs	r3, #0
 800be44:	e036      	b.n	800beb4 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d009      	beq.n	800be60 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800be4c:	68b8      	ldr	r0, [r7, #8]
 800be4e:	f7ff ffd5 	bl	800bdfc <cast_away_const>
 800be52:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	e00e      	b.n	800be7e <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	68b8      	ldr	r0, [r7, #8]
 800be64:	f7fe f8ec 	bl	800a040 <cJSON_strdup>
 800be68:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <add_item_to_object+0x62>
        {
            return false;
 800be70:	2300      	movs	r3, #0
 800be72:	e01f      	b.n	800beb4 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be7c:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <add_item_to_object+0x8c>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6a12      	ldr	r2, [r2, #32]
 800be9a:	4610      	mov	r0, r2
 800be9c:	4798      	blx	r3
    }

    item->string = new_key;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff ff6f 	bl	800bd90 <add_item_to_array>
 800beb2:	4603      	mov	r3, r0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800beca:	ed97 0b00 	vldr	d0, [r7]
 800bece:	f000 f81b 	bl	800bf08 <cJSON_CreateNumber>
 800bed2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800bed4:	2300      	movs	r3, #0
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <cJSON_AddNumberToObject+0x44>)
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7ff ff97 	bl	800be12 <add_item_to_object>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	e003      	b.n	800bef6 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800beee:	6978      	ldr	r0, [r7, #20]
 800bef0:	f7fe f8e4 	bl	800a0bc <cJSON_Delete>
    return NULL;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20000000 	.word	0x20000000
 800bf04:	00000000 	.word	0x00000000

0800bf08 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800bf12:	481f      	ldr	r0, [pc, #124]	@ (800bf90 <cJSON_CreateNumber+0x88>)
 800bf14:	f7fe f8bc 	bl	800a090 <cJSON_New_Item>
 800bf18:	60f8      	str	r0, [r7, #12]
    if(item)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d02c      	beq.n	800bf7a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2208      	movs	r2, #8
 800bf24:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800bf30:	a315      	add	r3, pc, #84	@ (adr r3, 800bf88 <cJSON_CreateNumber+0x80>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf3a:	f7fc fe13 	bl	8008b64 <__aeabi_dcmpge>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800bf4a:	615a      	str	r2, [r3, #20]
 800bf4c:	e015      	b.n	800bf7a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <cJSON_CreateNumber+0x8c>)
 800bf54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf58:	f7fc fdfa 	bl	8008b50 <__aeabi_dcmple>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf68:	615a      	str	r2, [r3, #20]
 800bf6a:	e006      	b.n	800bf7a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800bf6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf70:	f7fc fe22 	bl	8008bb8 <__aeabi_d2iz>
 800bf74:	4602      	mov	r2, r0
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	f3af 8000 	nop.w
 800bf88:	ffc00000 	.word	0xffc00000
 800bf8c:	41dfffff 	.word	0x41dfffff
 800bf90:	20000000 	.word	0x20000000
 800bf94:	c1e00000 	.word	0xc1e00000

0800bf98 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800bf9e:	4807      	ldr	r0, [pc, #28]	@ (800bfbc <cJSON_CreateObject+0x24>)
 800bfa0:	f7fe f876 	bl	800a090 <cJSON_New_Item>
 800bfa4:	6078      	str	r0, [r7, #4]
    if (item)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2240      	movs	r2, #64	@ 0x40
 800bfb0:	60da      	str	r2, [r3, #12]
    }

    return item;
 800bfb2:	687b      	ldr	r3, [r7, #4]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	20000000 	.word	0x20000000

0800bfc0 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <cJSON_IsNumber+0x12>
    {
        return false;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e007      	b.n	800bfe2 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	bf0c      	ite	eq
 800bfdc:	2301      	moveq	r3, #1
 800bfde:	2300      	movne	r3, #0
 800bfe0:	b2db      	uxtb	r3, r3
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
	...

0800bff0 <drawCleanButton>:
int downbutton = 0, upbutton = 0, enter = 0;

volatile int global_device_states[4] = {0, 0, 0, 0};// 0=OFF, 1=ON
int device_states[4] = {0, 0, 0, 0};

void drawCleanButton(int x, int y, int width, int height, char* text, int selected) {
 800bff0:	b590      	push	{r4, r7, lr}
 800bff2:	b089      	sub	sp, #36	@ 0x24
 800bff4:	af04      	add	r7, sp, #16
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
    if (selected) {
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	2b00      	cmp	r3, #0
 800c002:	d03e      	beq.n	800c082 <drawCleanButton+0x92>
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	b29b      	uxth	r3, r3
 800c008:	3b01      	subs	r3, #1
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	b218      	sxth	r0, r3
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29b      	uxth	r3, r3
 800c016:	b219      	sxth	r1, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	3302      	adds	r3, #2
 800c01e:	b29b      	uxth	r3, r3
 800c020:	b21a      	sxth	r2, r3
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	b29b      	uxth	r3, r3
 800c026:	3302      	adds	r3, #2
 800c028:	b29b      	uxth	r3, r3
 800c02a:	b21b      	sxth	r3, r3
 800c02c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c030:	9401      	str	r4, [sp, #4]
 800c032:	2403      	movs	r4, #3
 800c034:	9400      	str	r4, [sp, #0]
 800c036:	f7fd fb07 	bl	8009648 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GREEN);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	b218      	sxth	r0, r3
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	b219      	sxth	r1, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	b21a      	sxth	r2, r3
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	b21b      	sxth	r3, r3
 800c04a:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800c04e:	9401      	str	r4, [sp, #4]
 800c050:	2403      	movs	r4, #3
 800c052:	9400      	str	r4, [sp, #0]
 800c054:	f7fd fbc5 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, BLACK, GREEN);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	3305      	adds	r3, #5
 800c05e:	b298      	uxth	r0, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	b29b      	uxth	r3, r3
 800c064:	3304      	adds	r3, #4
 800c066:	b299      	uxth	r1, r3
 800c068:	4b27      	ldr	r3, [pc, #156]	@ (800c108 <drawCleanButton+0x118>)
 800c06a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c06e:	9202      	str	r2, [sp, #8]
 800c070:	2200      	movs	r2, #0
 800c072:	9201      	str	r2, [sp, #4]
 800c074:	685a      	ldr	r2, [r3, #4]
 800c076:	9200      	str	r2, [sp, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6a3a      	ldr	r2, [r7, #32]
 800c07c:	f7fd fe98 	bl	8009db0 <ST7735_WriteString>
    } else {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
        fillRoundRect(x, y, width, height, 3, GRAY);
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
    }
}
 800c080:	e03e      	b.n	800c100 <drawCleanButton+0x110>
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	b29b      	uxth	r3, r3
 800c086:	3b01      	subs	r3, #1
 800c088:	b29b      	uxth	r3, r3
 800c08a:	b218      	sxth	r0, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	b29b      	uxth	r3, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	b29b      	uxth	r3, r3
 800c094:	b219      	sxth	r1, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	3302      	adds	r3, #2
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	b21a      	sxth	r2, r3
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	3302      	adds	r3, #2
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	b21b      	sxth	r3, r3
 800c0aa:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c0ae:	9401      	str	r4, [sp, #4]
 800c0b0:	2403      	movs	r4, #3
 800c0b2:	9400      	str	r4, [sp, #0]
 800c0b4:	f7fd fac8 	bl	8009648 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GRAY);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	b218      	sxth	r0, r3
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	b219      	sxth	r1, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	b21a      	sxth	r2, r3
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	b21b      	sxth	r3, r3
 800c0c8:	f242 1404 	movw	r4, #8452	@ 0x2104
 800c0cc:	9401      	str	r4, [sp, #4]
 800c0ce:	2403      	movs	r4, #3
 800c0d0:	9400      	str	r4, [sp, #0]
 800c0d2:	f7fd fb86 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	3305      	adds	r3, #5
 800c0dc:	b298      	uxth	r0, r3
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	b299      	uxth	r1, r3
 800c0e6:	4b08      	ldr	r3, [pc, #32]	@ (800c108 <drawCleanButton+0x118>)
 800c0e8:	f242 1204 	movw	r2, #8452	@ 0x2104
 800c0ec:	9202      	str	r2, [sp, #8]
 800c0ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0f2:	9201      	str	r2, [sp, #4]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	9200      	str	r2, [sp, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6a3a      	ldr	r2, [r7, #32]
 800c0fc:	f7fd fe58 	bl	8009db0 <ST7735_WriteString>
}
 800c100:	bf00      	nop
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	bd90      	pop	{r4, r7, pc}
 800c108:	20000010 	.word	0x20000010

0800c10c <drawTitleBar>:


void drawTitleBar(char* title) {
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08a      	sub	sp, #40	@ 0x28
 800c110:	af04      	add	r7, sp, #16
 800c112:	6078      	str	r0, [r7, #4]
    fillRect(0, 0, DISPLAY_WIDTH, TITLE_HEIGHT, BLUE);
 800c114:	231f      	movs	r3, #31
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	230f      	movs	r3, #15
 800c11a:	22a0      	movs	r2, #160	@ 0xa0
 800c11c:	2100      	movs	r1, #0
 800c11e:	2000      	movs	r0, #0
 800c120:	f7fc ff71 	bl	8009006 <fillRect>
    int title_length = strlen(title);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7fc f87d 	bl	8008224 <strlen>
 800c12a:	4603      	mov	r3, r0
 800c12c:	613b      	str	r3, [r7, #16]
    int title_width = title_length * 7;
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	4613      	mov	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	1a9b      	subs	r3, r3, r2
 800c136:	60fb      	str	r3, [r7, #12]
    int center_x = (DISPLAY_WIDTH - title_width) / 2;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800c13e:	0fda      	lsrs	r2, r3, #31
 800c140:	4413      	add	r3, r2
 800c142:	105b      	asrs	r3, r3, #1
 800c144:	617b      	str	r3, [r7, #20]

    if (center_x < 2) center_x = 2;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	dc01      	bgt.n	800c150 <drawTitleBar+0x44>
 800c14c:	2302      	movs	r3, #2
 800c14e:	617b      	str	r3, [r7, #20]

    ST7735_WriteString(center_x, 2, title, Font_7x10, WHITE, BLUE);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	b298      	uxth	r0, r3
 800c154:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <drawTitleBar+0x7c>)
 800c156:	221f      	movs	r2, #31
 800c158:	9202      	str	r2, [sp, #8]
 800c15a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c15e:	9201      	str	r2, [sp, #4]
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	9200      	str	r2, [sp, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	2102      	movs	r1, #2
 800c16a:	f7fd fe21 	bl	8009db0 <ST7735_WriteString>

    drawLine(0, TITLE_HEIGHT, DISPLAY_WIDTH, TITLE_HEIGHT, WHITE);
 800c16e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	230f      	movs	r3, #15
 800c176:	22a0      	movs	r2, #160	@ 0xa0
 800c178:	210f      	movs	r1, #15
 800c17a:	2000      	movs	r0, #0
 800c17c:	f7fd f860 	bl	8009240 <drawLine>
}
 800c180:	bf00      	nop
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20000010 	.word	0x20000010

0800c18c <drawStatusInfo>:

void drawStatusInfo(char* status, uint16_t color) {
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af04      	add	r7, sp, #16
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
 800c198:	2300      	movs	r3, #0
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	230c      	movs	r3, #12
 800c19e:	228c      	movs	r2, #140	@ 0x8c
 800c1a0:	2114      	movs	r1, #20
 800c1a2:	200a      	movs	r0, #10
 800c1a4:	f7fc ff2f 	bl	8009006 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
 800c1a8:	4b08      	ldr	r3, [pc, #32]	@ (800c1cc <drawStatusInfo+0x40>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	9202      	str	r2, [sp, #8]
 800c1ae:	887a      	ldrh	r2, [r7, #2]
 800c1b0:	9201      	str	r2, [sp, #4]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	9200      	str	r2, [sp, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	2116      	movs	r1, #22
 800c1bc:	200c      	movs	r0, #12
 800c1be:	f7fd fdf7 	bl	8009db0 <ST7735_WriteString>
}
 800c1c2:	bf00      	nop
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20000010 	.word	0x20000010

0800c1d0 <displayMainMenu>:


void displayMainMenu(void) {
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af02      	add	r7, sp, #8
    if (last_selection != current_selection || last_selection == -1) {
 800c1d6:	4b20      	ldr	r3, [pc, #128]	@ (800c258 <displayMainMenu+0x88>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	4b20      	ldr	r3, [pc, #128]	@ (800c25c <displayMainMenu+0x8c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d104      	bne.n	800c1ec <displayMainMenu+0x1c>
 800c1e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c258 <displayMainMenu+0x88>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d130      	bne.n	800c24e <displayMainMenu+0x7e>
        ST7735_SetRotation(1);
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f7fd fca9 	bl	8009b44 <ST7735_SetRotation>
        fillScreen(BLACK);
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	f7fd fb6e 	bl	80098d4 <fillScreen>

        drawTitleBar("HOME MENU");
 800c1f8:	4819      	ldr	r0, [pc, #100]	@ (800c260 <displayMainMenu+0x90>)
 800c1fa:	f7ff ff87 	bl	800c10c <drawTitleBar>

        int start_y = TITLE_HEIGHT + 15;
 800c1fe:	231e      	movs	r3, #30
 800c200:	607b      	str	r3, [r7, #4]
        drawCleanButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c202:	4b16      	ldr	r3, [pc, #88]	@ (800c25c <displayMainMenu+0x8c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	bf0c      	ite	eq
 800c20a:	2301      	moveq	r3, #1
 800c20c:	2300      	movne	r3, #0
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	4b14      	ldr	r3, [pc, #80]	@ (800c264 <displayMainMenu+0x94>)
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	2312      	movs	r3, #18
 800c218:	228c      	movs	r2, #140	@ 0x8c
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	200a      	movs	r0, #10
 800c21e:	f7ff fee7 	bl	800bff0 <drawCleanButton>
                       "GROUP CONTROL", (current_selection == 0));
        drawCleanButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f103 0116 	add.w	r1, r3, #22
 800c228:	4b0c      	ldr	r3, [pc, #48]	@ (800c25c <displayMainMenu+0x8c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	bf0c      	ite	eq
 800c230:	2301      	moveq	r3, #1
 800c232:	2300      	movne	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	4b0b      	ldr	r3, [pc, #44]	@ (800c268 <displayMainMenu+0x98>)
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	2312      	movs	r3, #18
 800c23e:	228c      	movs	r2, #140	@ 0x8c
 800c240:	200a      	movs	r0, #10
 800c242:	f7ff fed5 	bl	800bff0 <drawCleanButton>
                       "DEVICE LIST", (current_selection == 1));

        last_selection = current_selection;
 800c246:	4b05      	ldr	r3, [pc, #20]	@ (800c25c <displayMainMenu+0x8c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a03      	ldr	r2, [pc, #12]	@ (800c258 <displayMainMenu+0x88>)
 800c24c:	6013      	str	r3, [r2, #0]
    }
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	2000000c 	.word	0x2000000c
 800c25c:	2000022c 	.word	0x2000022c
 800c260:	08018284 	.word	0x08018284
 800c264:	08018290 	.word	0x08018290
 800c268:	080182a0 	.word	0x080182a0

0800c26c <displayTotalControlMenu>:

void displayTotalControlMenu(void) {
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08c      	sub	sp, #48	@ 0x30
 800c270:	af02      	add	r7, sp, #8
    if (last_selection != current_selection || last_selection == -1) {
 800c272:	4b3a      	ldr	r3, [pc, #232]	@ (800c35c <displayTotalControlMenu+0xf0>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	4b3a      	ldr	r3, [pc, #232]	@ (800c360 <displayTotalControlMenu+0xf4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d104      	bne.n	800c288 <displayTotalControlMenu+0x1c>
 800c27e:	4b37      	ldr	r3, [pc, #220]	@ (800c35c <displayTotalControlMenu+0xf0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c286:	d164      	bne.n	800c352 <displayTotalControlMenu+0xe6>
    	syncDisplayDeviceStates();
 800c288:	f000 fb40 	bl	800c90c <syncDisplayDeviceStates>
        ST7735_SetRotation(1);
 800c28c:	2001      	movs	r0, #1
 800c28e:	f7fd fc59 	bl	8009b44 <ST7735_SetRotation>
        fillScreen(BLACK);
 800c292:	2000      	movs	r0, #0
 800c294:	f7fd fb1e 	bl	80098d4 <fillScreen>

        drawTitleBar("GROUP CONTROL");
 800c298:	4832      	ldr	r0, [pc, #200]	@ (800c364 <displayTotalControlMenu+0xf8>)
 800c29a:	f7ff ff37 	bl	800c10c <drawTitleBar>

        int total_on = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; i < 4; i++) {
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	e00b      	b.n	800c2c0 <displayTotalControlMenu+0x54>
            if (device_states[i]) total_on++;
 800c2a8:	4a2f      	ldr	r2, [pc, #188]	@ (800c368 <displayTotalControlMenu+0xfc>)
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <displayTotalControlMenu+0x4e>
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; i < 4; i++) {
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	623b      	str	r3, [r7, #32]
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	ddf0      	ble.n	800c2a8 <displayTotalControlMenu+0x3c>
        }

        char status[25];
        snprintf(status, sizeof(status), "Active: %d/4 devices", total_on);
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	4a28      	ldr	r2, [pc, #160]	@ (800c36c <displayTotalControlMenu+0x100>)
 800c2cc:	2119      	movs	r1, #25
 800c2ce:	f009 fab5 	bl	801583c <sniprintf>
        drawStatusInfo(status, CYAN);
 800c2d2:	463b      	mov	r3, r7
 800c2d4:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff ff57 	bl	800c18c <drawStatusInfo>

        int start_y = TITLE_HEIGHT + 25;
 800c2de:	2328      	movs	r3, #40	@ 0x28
 800c2e0:	61fb      	str	r3, [r7, #28]
        drawCleanButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c2e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c360 <displayTotalControlMenu+0xf4>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bf0c      	ite	eq
 800c2ea:	2301      	moveq	r3, #1
 800c2ec:	2300      	movne	r3, #0
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	4b1f      	ldr	r3, [pc, #124]	@ (800c370 <displayTotalControlMenu+0x104>)
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	2312      	movs	r3, #18
 800c2f8:	228c      	movs	r2, #140	@ 0x8c
 800c2fa:	69f9      	ldr	r1, [r7, #28]
 800c2fc:	200a      	movs	r0, #10
 800c2fe:	f7ff fe77 	bl	800bff0 <drawCleanButton>
                       "TOTAL ON", (current_selection == 0));
        drawCleanButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	f103 0116 	add.w	r1, r3, #22
 800c308:	4b15      	ldr	r3, [pc, #84]	@ (800c360 <displayTotalControlMenu+0xf4>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	bf0c      	ite	eq
 800c310:	2301      	moveq	r3, #1
 800c312:	2300      	movne	r3, #0
 800c314:	b2db      	uxtb	r3, r3
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	4b16      	ldr	r3, [pc, #88]	@ (800c374 <displayTotalControlMenu+0x108>)
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	2312      	movs	r3, #18
 800c31e:	228c      	movs	r2, #140	@ 0x8c
 800c320:	200a      	movs	r0, #10
 800c322:	f7ff fe65 	bl	800bff0 <drawCleanButton>
                       "TOTAL OFF", (current_selection == 1));
        drawCleanButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800c32c:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <displayTotalControlMenu+0xf4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b02      	cmp	r3, #2
 800c332:	bf0c      	ite	eq
 800c334:	2301      	moveq	r3, #1
 800c336:	2300      	movne	r3, #0
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	4b0e      	ldr	r3, [pc, #56]	@ (800c378 <displayTotalControlMenu+0x10c>)
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	2312      	movs	r3, #18
 800c342:	228c      	movs	r2, #140	@ 0x8c
 800c344:	200a      	movs	r0, #10
 800c346:	f7ff fe53 	bl	800bff0 <drawCleanButton>
                       "GO BACK", (current_selection == 2));

        last_selection = current_selection;
 800c34a:	4b05      	ldr	r3, [pc, #20]	@ (800c360 <displayTotalControlMenu+0xf4>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a03      	ldr	r2, [pc, #12]	@ (800c35c <displayTotalControlMenu+0xf0>)
 800c350:	6013      	str	r3, [r2, #0]
    }
}
 800c352:	bf00      	nop
 800c354:	3728      	adds	r7, #40	@ 0x28
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	2000000c 	.word	0x2000000c
 800c360:	2000022c 	.word	0x2000022c
 800c364:	08018290 	.word	0x08018290
 800c368:	20000250 	.word	0x20000250
 800c36c:	080182ac 	.word	0x080182ac
 800c370:	080182c4 	.word	0x080182c4
 800c374:	080182d0 	.word	0x080182d0
 800c378:	080182dc 	.word	0x080182dc

0800c37c <displaySeparateControlMenu>:

void displaySeparateControlMenu(void) {
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	@ 0x28
 800c380:	af02      	add	r7, sp, #8
    if (last_selection != current_selection || last_selection == -1) {
 800c382:	4b32      	ldr	r3, [pc, #200]	@ (800c44c <displaySeparateControlMenu+0xd0>)
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	4b32      	ldr	r3, [pc, #200]	@ (800c450 <displaySeparateControlMenu+0xd4>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d104      	bne.n	800c398 <displaySeparateControlMenu+0x1c>
 800c38e:	4b2f      	ldr	r3, [pc, #188]	@ (800c44c <displaySeparateControlMenu+0xd0>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d155      	bne.n	800c444 <displaySeparateControlMenu+0xc8>
    	syncDisplayDeviceStates();
 800c398:	f000 fab8 	bl	800c90c <syncDisplayDeviceStates>
        ST7735_SetRotation(1);
 800c39c:	2001      	movs	r0, #1
 800c39e:	f7fd fbd1 	bl	8009b44 <ST7735_SetRotation>
        fillScreen(BLACK);
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	f7fd fa96 	bl	80098d4 <fillScreen>

        drawTitleBar("DEVICE LIST");
 800c3a8:	482a      	ldr	r0, [pc, #168]	@ (800c454 <displaySeparateControlMenu+0xd8>)
 800c3aa:	f7ff feaf 	bl	800c10c <drawTitleBar>
        int start_y = TITLE_HEIGHT + 10;
 800c3ae:	2319      	movs	r3, #25
 800c3b0:	61bb      	str	r3, [r7, #24]
        char device_text[20];

        for (int i = 0; i < 4; i++) {
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	61fb      	str	r3, [r7, #28]
 800c3b6:	e02c      	b.n	800c412 <displaySeparateControlMenu+0x96>
            snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	1c5a      	adds	r2, r3, #1
                    i + 1, device_states[i] ? "ON" : "OFF");
 800c3bc:	4926      	ldr	r1, [pc, #152]	@ (800c458 <displaySeparateControlMenu+0xdc>)
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d001      	beq.n	800c3cc <displaySeparateControlMenu+0x50>
 800c3c8:	4b24      	ldr	r3, [pc, #144]	@ (800c45c <displaySeparateControlMenu+0xe0>)
 800c3ca:	e000      	b.n	800c3ce <displaySeparateControlMenu+0x52>
 800c3cc:	4b24      	ldr	r3, [pc, #144]	@ (800c460 <displaySeparateControlMenu+0xe4>)
 800c3ce:	1d38      	adds	r0, r7, #4
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	4a23      	ldr	r2, [pc, #140]	@ (800c464 <displaySeparateControlMenu+0xe8>)
 800c3d6:	2114      	movs	r1, #20
 800c3d8:	f009 fa30 	bl	801583c <sniprintf>
            drawCleanButton(MARGIN_X, start_y + i * 20, BUTTON_WIDTH, 16,
 800c3dc:	69fa      	ldr	r2, [r7, #28]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	18d1      	adds	r1, r2, r3
 800c3ec:	4b18      	ldr	r3, [pc, #96]	@ (800c450 <displaySeparateControlMenu+0xd4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	69fa      	ldr	r2, [r7, #28]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	bf0c      	ite	eq
 800c3f6:	2301      	moveq	r3, #1
 800c3f8:	2300      	movne	r3, #0
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	1d3b      	adds	r3, r7, #4
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	2310      	movs	r3, #16
 800c404:	228c      	movs	r2, #140	@ 0x8c
 800c406:	200a      	movs	r0, #10
 800c408:	f7ff fdf2 	bl	800bff0 <drawCleanButton>
        for (int i = 0; i < 4; i++) {
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	3301      	adds	r3, #1
 800c410:	61fb      	str	r3, [r7, #28]
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	2b03      	cmp	r3, #3
 800c416:	ddcf      	ble.n	800c3b8 <displaySeparateControlMenu+0x3c>
                           device_text, (current_selection == i));
        }
        drawCleanButton(MARGIN_X, start_y + 4 * 20, BUTTON_WIDTH, 16,
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800c41e:	4b0c      	ldr	r3, [pc, #48]	@ (800c450 <displaySeparateControlMenu+0xd4>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b04      	cmp	r3, #4
 800c424:	bf0c      	ite	eq
 800c426:	2301      	moveq	r3, #1
 800c428:	2300      	movne	r3, #0
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	4b0e      	ldr	r3, [pc, #56]	@ (800c468 <displaySeparateControlMenu+0xec>)
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	2310      	movs	r3, #16
 800c434:	228c      	movs	r2, #140	@ 0x8c
 800c436:	200a      	movs	r0, #10
 800c438:	f7ff fdda 	bl	800bff0 <drawCleanButton>
                       "GO BACK", (current_selection == 4));

        last_selection = current_selection;
 800c43c:	4b04      	ldr	r3, [pc, #16]	@ (800c450 <displaySeparateControlMenu+0xd4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a02      	ldr	r2, [pc, #8]	@ (800c44c <displaySeparateControlMenu+0xd0>)
 800c442:	6013      	str	r3, [r2, #0]
    }
}
 800c444:	bf00      	nop
 800c446:	3720      	adds	r7, #32
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	2000000c 	.word	0x2000000c
 800c450:	2000022c 	.word	0x2000022c
 800c454:	080182a0 	.word	0x080182a0
 800c458:	20000250 	.word	0x20000250
 800c45c:	080182e4 	.word	0x080182e4
 800c460:	080182e8 	.word	0x080182e8
 800c464:	080182ec 	.word	0x080182ec
 800c468:	080182dc 	.word	0x080182dc

0800c46c <displayDeviceControlMenu>:

void displayDeviceControlMenu(void) {
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b094      	sub	sp, #80	@ 0x50
 800c470:	af02      	add	r7, sp, #8
    if (last_selection != current_selection || last_selection == -1) {
 800c472:	4b41      	ldr	r3, [pc, #260]	@ (800c578 <displayDeviceControlMenu+0x10c>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	4b41      	ldr	r3, [pc, #260]	@ (800c57c <displayDeviceControlMenu+0x110>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d104      	bne.n	800c488 <displayDeviceControlMenu+0x1c>
 800c47e:	4b3e      	ldr	r3, [pc, #248]	@ (800c578 <displayDeviceControlMenu+0x10c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d173      	bne.n	800c570 <displayDeviceControlMenu+0x104>
    	syncDisplayDeviceStates();
 800c488:	f000 fa40 	bl	800c90c <syncDisplayDeviceStates>
        ST7735_SetRotation(1);
 800c48c:	2001      	movs	r0, #1
 800c48e:	f7fd fb59 	bl	8009b44 <ST7735_SetRotation>
        fillScreen(BLACK);
 800c492:	2000      	movs	r0, #0
 800c494:	f7fd fa1e 	bl	80098d4 <fillScreen>

        char title[30];
        snprintf(title, sizeof(title), "DEVICE %d CONTROL", current_device + 1);
 800c498:	4b39      	ldr	r3, [pc, #228]	@ (800c580 <displayDeviceControlMenu+0x114>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	f107 0020 	add.w	r0, r7, #32
 800c4a2:	4a38      	ldr	r2, [pc, #224]	@ (800c584 <displayDeviceControlMenu+0x118>)
 800c4a4:	211e      	movs	r1, #30
 800c4a6:	f009 f9c9 	bl	801583c <sniprintf>
        drawTitleBar(title);
 800c4aa:	f107 0320 	add.w	r3, r7, #32
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff fe2c 	bl	800c10c <drawTitleBar>

        char status[25];
        snprintf(status, sizeof(status), "Status: %s",
                device_states[current_device] ? "ON" : "OFF");
 800c4b4:	4b32      	ldr	r3, [pc, #200]	@ (800c580 <displayDeviceControlMenu+0x114>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a33      	ldr	r2, [pc, #204]	@ (800c588 <displayDeviceControlMenu+0x11c>)
 800c4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        snprintf(status, sizeof(status), "Status: %s",
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <displayDeviceControlMenu+0x5a>
 800c4c2:	4b32      	ldr	r3, [pc, #200]	@ (800c58c <displayDeviceControlMenu+0x120>)
 800c4c4:	e000      	b.n	800c4c8 <displayDeviceControlMenu+0x5c>
 800c4c6:	4b32      	ldr	r3, [pc, #200]	@ (800c590 <displayDeviceControlMenu+0x124>)
 800c4c8:	1d38      	adds	r0, r7, #4
 800c4ca:	4a32      	ldr	r2, [pc, #200]	@ (800c594 <displayDeviceControlMenu+0x128>)
 800c4cc:	2119      	movs	r1, #25
 800c4ce:	f009 f9b5 	bl	801583c <sniprintf>
        uint16_t status_color = device_states[current_device] ? GREEN : RED;
 800c4d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c580 <displayDeviceControlMenu+0x114>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a2c      	ldr	r2, [pc, #176]	@ (800c588 <displayDeviceControlMenu+0x11c>)
 800c4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <displayDeviceControlMenu+0x7a>
 800c4e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800c4e4:	e001      	b.n	800c4ea <displayDeviceControlMenu+0x7e>
 800c4e6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800c4ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        drawStatusInfo(status, status_color);
 800c4ee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c4f2:	1d3b      	adds	r3, r7, #4
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fe48 	bl	800c18c <drawStatusInfo>

        int start_y = TITLE_HEIGHT + 25;
 800c4fc:	2328      	movs	r3, #40	@ 0x28
 800c4fe:	643b      	str	r3, [r7, #64]	@ 0x40
        drawCleanButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c500:	4b1e      	ldr	r3, [pc, #120]	@ (800c57c <displayDeviceControlMenu+0x110>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	bf0c      	ite	eq
 800c508:	2301      	moveq	r3, #1
 800c50a:	2300      	movne	r3, #0
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	4b21      	ldr	r3, [pc, #132]	@ (800c598 <displayDeviceControlMenu+0x12c>)
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	2312      	movs	r3, #18
 800c516:	228c      	movs	r2, #140	@ 0x8c
 800c518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c51a:	200a      	movs	r0, #10
 800c51c:	f7ff fd68 	bl	800bff0 <drawCleanButton>
                       "TURN ON", (current_selection == 0));
        drawCleanButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c522:	f103 0116 	add.w	r1, r3, #22
 800c526:	4b15      	ldr	r3, [pc, #84]	@ (800c57c <displayDeviceControlMenu+0x110>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	bf0c      	ite	eq
 800c52e:	2301      	moveq	r3, #1
 800c530:	2300      	movne	r3, #0
 800c532:	b2db      	uxtb	r3, r3
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	4b19      	ldr	r3, [pc, #100]	@ (800c59c <displayDeviceControlMenu+0x130>)
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	2312      	movs	r3, #18
 800c53c:	228c      	movs	r2, #140	@ 0x8c
 800c53e:	200a      	movs	r0, #10
 800c540:	f7ff fd56 	bl	800bff0 <drawCleanButton>
                       "TURN OFF", (current_selection == 1));
        drawCleanButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c546:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800c54a:	4b0c      	ldr	r3, [pc, #48]	@ (800c57c <displayDeviceControlMenu+0x110>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b02      	cmp	r3, #2
 800c550:	bf0c      	ite	eq
 800c552:	2301      	moveq	r3, #1
 800c554:	2300      	movne	r3, #0
 800c556:	b2db      	uxtb	r3, r3
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	4b11      	ldr	r3, [pc, #68]	@ (800c5a0 <displayDeviceControlMenu+0x134>)
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	2312      	movs	r3, #18
 800c560:	228c      	movs	r2, #140	@ 0x8c
 800c562:	200a      	movs	r0, #10
 800c564:	f7ff fd44 	bl	800bff0 <drawCleanButton>
                       "GO BACK", (current_selection == 2));

        last_selection = current_selection;
 800c568:	4b04      	ldr	r3, [pc, #16]	@ (800c57c <displayDeviceControlMenu+0x110>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a02      	ldr	r2, [pc, #8]	@ (800c578 <displayDeviceControlMenu+0x10c>)
 800c56e:	6013      	str	r3, [r2, #0]
    }
}
 800c570:	bf00      	nop
 800c572:	3748      	adds	r7, #72	@ 0x48
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	2000000c 	.word	0x2000000c
 800c57c:	2000022c 	.word	0x2000022c
 800c580:	20000230 	.word	0x20000230
 800c584:	080182fc 	.word	0x080182fc
 800c588:	20000250 	.word	0x20000250
 800c58c:	080182e4 	.word	0x080182e4
 800c590:	080182e8 	.word	0x080182e8
 800c594:	08018310 	.word	0x08018310
 800c598:	0801831c 	.word	0x0801831c
 800c59c:	08018324 	.word	0x08018324
 800c5a0:	080182dc 	.word	0x080182dc

0800c5a4 <setDeviceState>:



void setDeviceState(int device, int state) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08a      	sub	sp, #40	@ 0x28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef* gpio_port;
    uint16_t gpio_pin;
    char deviceItem[15];

    switch(device) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b03      	cmp	r3, #3
 800c5b2:	f200 80aa 	bhi.w	800c70a <setDeviceState+0x166>
 800c5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5bc <setDeviceState+0x18>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c5cd 	.word	0x0800c5cd
 800c5c0:	0800c5e3 	.word	0x0800c5e3
 800c5c4:	0800c5f9 	.word	0x0800c5f9
 800c5c8:	0800c60f 	.word	0x0800c60f
        case 0:
            gpio_port = TOUCH_LED1_GPIO_Port;
 800c5cc:	4b51      	ldr	r3, [pc, #324]	@ (800c714 <setDeviceState+0x170>)
 800c5ce:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED1_Pin;
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device1");
 800c5d4:	f107 0308 	add.w	r3, r7, #8
 800c5d8:	494f      	ldr	r1, [pc, #316]	@ (800c718 <setDeviceState+0x174>)
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f009 f964 	bl	80158a8 <siprintf>
            break;
 800c5e0:	e021      	b.n	800c626 <setDeviceState+0x82>
        case 1:
            gpio_port = TOUCH_LED2_GPIO_Port;
 800c5e2:	4b4c      	ldr	r3, [pc, #304]	@ (800c714 <setDeviceState+0x170>)
 800c5e4:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED2_Pin;
 800c5e6:	2304      	movs	r3, #4
 800c5e8:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device2");
 800c5ea:	f107 0308 	add.w	r3, r7, #8
 800c5ee:	494b      	ldr	r1, [pc, #300]	@ (800c71c <setDeviceState+0x178>)
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f009 f959 	bl	80158a8 <siprintf>
            break;
 800c5f6:	e016      	b.n	800c626 <setDeviceState+0x82>
        case 2:
            gpio_port = TOUCH_LED3_GPIO_Port;
 800c5f8:	4b49      	ldr	r3, [pc, #292]	@ (800c720 <setDeviceState+0x17c>)
 800c5fa:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED3_Pin;
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device3");
 800c600:	f107 0308 	add.w	r3, r7, #8
 800c604:	4947      	ldr	r1, [pc, #284]	@ (800c724 <setDeviceState+0x180>)
 800c606:	4618      	mov	r0, r3
 800c608:	f009 f94e 	bl	80158a8 <siprintf>
            break;
 800c60c:	e00b      	b.n	800c626 <setDeviceState+0x82>
        case 3:
            gpio_port = TOUCH_LED4_GPIO_Port;
 800c60e:	4b46      	ldr	r3, [pc, #280]	@ (800c728 <setDeviceState+0x184>)
 800c610:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED4_Pin;
 800c612:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c616:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device4");
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4943      	ldr	r1, [pc, #268]	@ (800c72c <setDeviceState+0x188>)
 800c61e:	4618      	mov	r0, r3
 800c620:	f009 f942 	bl	80158a8 <siprintf>
            break;
 800c624:	bf00      	nop
        default:
            return;
    }

    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800c626:	4b42      	ldr	r3, [pc, #264]	@ (800c730 <setDeviceState+0x18c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2164      	movs	r1, #100	@ 0x64
 800c62c:	4618      	mov	r0, r3
 800c62e:	f005 ff13 	bl	8012458 <xQueueSemaphoreTake>
 800c632:	4603      	mov	r3, r0
 800c634:	2b01      	cmp	r3, #1
 800c636:	d169      	bne.n	800c70c <setDeviceState+0x168>
		if (state) {
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d010      	beq.n	800c660 <setDeviceState+0xbc>
			HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 800c63e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c640:	2201      	movs	r2, #1
 800c642:	4619      	mov	r1, r3
 800c644:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c646:	f002 fa4d 	bl	800eae4 <HAL_GPIO_WritePin>
			global_device_states[device] = 1;
 800c64a:	4a3a      	ldr	r2, [pc, #232]	@ (800c734 <setDeviceState+0x190>)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2101      	movs	r1, #1
 800c650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 1;
 800c654:	4a38      	ldr	r2, [pc, #224]	@ (800c738 <setDeviceState+0x194>)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2101      	movs	r1, #1
 800c65a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800c65e:	e00f      	b.n	800c680 <setDeviceState+0xdc>
		} else {
			HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_RESET);
 800c660:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c662:	2200      	movs	r2, #0
 800c664:	4619      	mov	r1, r3
 800c666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c668:	f002 fa3c 	bl	800eae4 <HAL_GPIO_WritePin>
			global_device_states[device] = 0;
 800c66c:	4a31      	ldr	r2, [pc, #196]	@ (800c734 <setDeviceState+0x190>)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2100      	movs	r1, #0
 800c672:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 0;
 800c676:	4a30      	ldr	r2, [pc, #192]	@ (800c738 <setDeviceState+0x194>)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2100      	movs	r1, #0
 800c67c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		xSemaphoreGive(deviceStateMutex);
 800c680:	4b2b      	ldr	r3, [pc, #172]	@ (800c730 <setDeviceState+0x18c>)
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	2300      	movs	r3, #0
 800c686:	2200      	movs	r2, #0
 800c688:	2100      	movs	r1, #0
 800c68a:	f005 fc53 	bl	8011f34 <xQueueGenericSend>

		cJSON *resp = cJSON_CreateObject();
 800c68e:	f7ff fc83 	bl	800bf98 <cJSON_CreateObject>
 800c692:	61f8      	str	r0, [r7, #28]
		cJSON_AddNumberToObject(resp, deviceItem, device_states[device]);
 800c694:	4a28      	ldr	r2, [pc, #160]	@ (800c738 <setDeviceState+0x194>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fb ff71 	bl	8008584 <__aeabi_i2d>
 800c6a2:	f107 0308 	add.w	r3, r7, #8
 800c6a6:	ec41 0b10 	vmov	d0, r0, r1
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	69f8      	ldr	r0, [r7, #28]
 800c6ae:	f7ff fc05 	bl	800bebc <cJSON_AddNumberToObject>
		char *respStr = cJSON_PrintUnformatted(resp);
 800c6b2:	69f8      	ldr	r0, [r7, #28]
 800c6b4:	f7fe fdb0 	bl	800b218 <cJSON_PrintUnformatted>
 800c6b8:	61b8      	str	r0, [r7, #24]
		if (respStr)
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d014      	beq.n	800c6ea <setDeviceState+0x146>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800c6c0:	69b8      	ldr	r0, [r7, #24]
 800c6c2:	f7fb fdaf 	bl	8008224 <strlen>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ce:	69b9      	ldr	r1, [r7, #24]
 800c6d0:	481a      	ldr	r0, [pc, #104]	@ (800c73c <setDeviceState+0x198>)
 800c6d2:	f004 fa3d 	bl	8010b50 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6da:	2201      	movs	r2, #1
 800c6dc:	4918      	ldr	r1, [pc, #96]	@ (800c740 <setDeviceState+0x19c>)
 800c6de:	4817      	ldr	r0, [pc, #92]	@ (800c73c <setDeviceState+0x198>)
 800c6e0:	f004 fa36 	bl	8010b50 <HAL_UART_Transmit>
			free(respStr);
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f008 f87d 	bl	80147e4 <free>
		}
		cJSON_Delete(resp);
 800c6ea:	69f8      	ldr	r0, [r7, #28]
 800c6ec:	f7fd fce6 	bl	800a0bc <cJSON_Delete>

		printf("Display: Device %d set to %s\n", device + 1, state ? "ON" : "OFF");
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	1c59      	adds	r1, r3, #1
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <setDeviceState+0x15a>
 800c6fa:	4b12      	ldr	r3, [pc, #72]	@ (800c744 <setDeviceState+0x1a0>)
 800c6fc:	e000      	b.n	800c700 <setDeviceState+0x15c>
 800c6fe:	4b12      	ldr	r3, [pc, #72]	@ (800c748 <setDeviceState+0x1a4>)
 800c700:	461a      	mov	r2, r3
 800c702:	4812      	ldr	r0, [pc, #72]	@ (800c74c <setDeviceState+0x1a8>)
 800c704:	f009 f82a 	bl	801575c <iprintf>
 800c708:	e000      	b.n	800c70c <setDeviceState+0x168>
            return;
 800c70a:	bf00      	nop
	}
}
 800c70c:	3728      	adds	r7, #40	@ 0x28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	40020800 	.word	0x40020800
 800c718:	08018330 	.word	0x08018330
 800c71c:	08018338 	.word	0x08018338
 800c720:	40021c00 	.word	0x40021c00
 800c724:	08018340 	.word	0x08018340
 800c728:	40020400 	.word	0x40020400
 800c72c:	08018348 	.word	0x08018348
 800c730:	200003ec 	.word	0x200003ec
 800c734:	20000240 	.word	0x20000240
 800c738:	20000250 	.word	0x20000250
 800c73c:	20000358 	.word	0x20000358
 800c740:	08018350 	.word	0x08018350
 800c744:	080182e4 	.word	0x080182e4
 800c748:	080182e8 	.word	0x080182e8
 800c74c:	08018354 	.word	0x08018354

0800c750 <setAllDevicesState>:

void setAllDevicesState(int state) {
 800c750:	b590      	push	{r4, r7, lr}
 800c752:	b08d      	sub	sp, #52	@ 0x34
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800c758:	4b60      	ldr	r3, [pc, #384]	@ (800c8dc <setAllDevicesState+0x18c>)
 800c75a:	f107 040c 	add.w	r4, r7, #12
 800c75e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cJSON *resp = cJSON_CreateObject();
 800c764:	f7ff fc18 	bl	800bf98 <cJSON_CreateObject>
 800c768:	6238      	str	r0, [r7, #32]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800c76a:	4b5d      	ldr	r3, [pc, #372]	@ (800c8e0 <setAllDevicesState+0x190>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2164      	movs	r1, #100	@ 0x64
 800c770:	4618      	mov	r0, r3
 800c772:	f005 fe71 	bl	8012458 <xQueueSemaphoreTake>
 800c776:	4603      	mov	r3, r0
 800c778:	2b01      	cmp	r3, #1
 800c77a:	f040 80aa 	bne.w	800c8d2 <setAllDevicesState+0x182>
        for (int i = 0; i < 4; i++) {
 800c77e:	2300      	movs	r3, #0
 800c780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c782:	e073      	b.n	800c86c <setAllDevicesState+0x11c>
            GPIO_TypeDef* gpio_port;
            uint16_t gpio_pin;

            switch(i) {
 800c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c786:	2b03      	cmp	r3, #3
 800c788:	d81f      	bhi.n	800c7ca <setAllDevicesState+0x7a>
 800c78a:	a201      	add	r2, pc, #4	@ (adr r2, 800c790 <setAllDevicesState+0x40>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c7a1 	.word	0x0800c7a1
 800c794:	0800c7ab 	.word	0x0800c7ab
 800c798:	0800c7b5 	.word	0x0800c7b5
 800c79c:	0800c7bf 	.word	0x0800c7bf
                case 0:
                    gpio_port = TOUCH_LED1_GPIO_Port;
 800c7a0:	4b50      	ldr	r3, [pc, #320]	@ (800c8e4 <setAllDevicesState+0x194>)
 800c7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED1_Pin;
 800c7a4:	2308      	movs	r3, #8
 800c7a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800c7a8:	e00f      	b.n	800c7ca <setAllDevicesState+0x7a>
                case 1:
                    gpio_port = TOUCH_LED2_GPIO_Port;
 800c7aa:	4b4e      	ldr	r3, [pc, #312]	@ (800c8e4 <setAllDevicesState+0x194>)
 800c7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED2_Pin;
 800c7ae:	2304      	movs	r3, #4
 800c7b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800c7b2:	e00a      	b.n	800c7ca <setAllDevicesState+0x7a>
                case 2:
                    gpio_port = TOUCH_LED3_GPIO_Port;
 800c7b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c8e8 <setAllDevicesState+0x198>)
 800c7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED3_Pin;
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800c7bc:	e005      	b.n	800c7ca <setAllDevicesState+0x7a>
                case 3:
                    gpio_port = TOUCH_LED4_GPIO_Port;
 800c7be:	4b4b      	ldr	r3, [pc, #300]	@ (800c8ec <setAllDevicesState+0x19c>)
 800c7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED4_Pin;
 800c7c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c7c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800c7c8:	bf00      	nop
            }

            if (state) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d025      	beq.n	800c81c <setAllDevicesState+0xcc>
                HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 800c7d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7d8:	f002 f984 	bl	800eae4 <HAL_GPIO_WritePin>
                global_device_states[i] = 1;
 800c7dc:	4a44      	ldr	r2, [pc, #272]	@ (800c8f0 <setAllDevicesState+0x1a0>)
 800c7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 1;
 800c7e6:	4a43      	ldr	r2, [pc, #268]	@ (800c8f4 <setAllDevicesState+0x1a4>)
 800c7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800c7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	3330      	adds	r3, #48	@ 0x30
 800c7f6:	443b      	add	r3, r7
 800c7f8:	f853 4c24 	ldr.w	r4, [r3, #-36]
 800c7fc:	4a3d      	ldr	r2, [pc, #244]	@ (800c8f4 <setAllDevicesState+0x1a4>)
 800c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c804:	4618      	mov	r0, r3
 800c806:	f7fb febd 	bl	8008584 <__aeabi_i2d>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	ec43 2b10 	vmov	d0, r2, r3
 800c812:	4621      	mov	r1, r4
 800c814:	6a38      	ldr	r0, [r7, #32]
 800c816:	f7ff fb51 	bl	800bebc <cJSON_AddNumberToObject>
 800c81a:	e024      	b.n	800c866 <setAllDevicesState+0x116>
            } else {
                HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_RESET);
 800c81c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c81e:	2200      	movs	r2, #0
 800c820:	4619      	mov	r1, r3
 800c822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c824:	f002 f95e 	bl	800eae4 <HAL_GPIO_WritePin>
                global_device_states[i] = 0;
 800c828:	4a31      	ldr	r2, [pc, #196]	@ (800c8f0 <setAllDevicesState+0x1a0>)
 800c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82c:	2100      	movs	r1, #0
 800c82e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 0;
 800c832:	4a30      	ldr	r2, [pc, #192]	@ (800c8f4 <setAllDevicesState+0x1a4>)
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	2100      	movs	r1, #0
 800c838:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800c83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	3330      	adds	r3, #48	@ 0x30
 800c842:	443b      	add	r3, r7
 800c844:	f853 4c24 	ldr.w	r4, [r3, #-36]
 800c848:	4a2a      	ldr	r2, [pc, #168]	@ (800c8f4 <setAllDevicesState+0x1a4>)
 800c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c850:	4618      	mov	r0, r3
 800c852:	f7fb fe97 	bl	8008584 <__aeabi_i2d>
 800c856:	4602      	mov	r2, r0
 800c858:	460b      	mov	r3, r1
 800c85a:	ec43 2b10 	vmov	d0, r2, r3
 800c85e:	4621      	mov	r1, r4
 800c860:	6a38      	ldr	r0, [r7, #32]
 800c862:	f7ff fb2b 	bl	800bebc <cJSON_AddNumberToObject>
        for (int i = 0; i < 4; i++) {
 800c866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c868:	3301      	adds	r3, #1
 800c86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86e:	2b03      	cmp	r3, #3
 800c870:	dd88      	ble.n	800c784 <setAllDevicesState+0x34>
            }
        }

        xSemaphoreGive(deviceStateMutex);
 800c872:	4b1b      	ldr	r3, [pc, #108]	@ (800c8e0 <setAllDevicesState+0x190>)
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	2300      	movs	r3, #0
 800c878:	2200      	movs	r2, #0
 800c87a:	2100      	movs	r1, #0
 800c87c:	f005 fb5a 	bl	8011f34 <xQueueGenericSend>

        char *respStr = cJSON_PrintUnformatted(resp);
 800c880:	6a38      	ldr	r0, [r7, #32]
 800c882:	f7fe fcc9 	bl	800b218 <cJSON_PrintUnformatted>
 800c886:	61f8      	str	r0, [r7, #28]
		if (respStr)
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d014      	beq.n	800c8b8 <setAllDevicesState+0x168>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800c88e:	69f8      	ldr	r0, [r7, #28]
 800c890:	f7fb fcc8 	bl	8008224 <strlen>
 800c894:	4603      	mov	r3, r0
 800c896:	b29a      	uxth	r2, r3
 800c898:	f04f 33ff 	mov.w	r3, #4294967295
 800c89c:	69f9      	ldr	r1, [r7, #28]
 800c89e:	4816      	ldr	r0, [pc, #88]	@ (800c8f8 <setAllDevicesState+0x1a8>)
 800c8a0:	f004 f956 	bl	8010b50 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	4914      	ldr	r1, [pc, #80]	@ (800c8fc <setAllDevicesState+0x1ac>)
 800c8ac:	4812      	ldr	r0, [pc, #72]	@ (800c8f8 <setAllDevicesState+0x1a8>)
 800c8ae:	f004 f94f 	bl	8010b50 <HAL_UART_Transmit>
			free(respStr);
 800c8b2:	69f8      	ldr	r0, [r7, #28]
 800c8b4:	f007 ff96 	bl	80147e4 <free>
		}
		cJSON_Delete(resp);
 800c8b8:	6a38      	ldr	r0, [r7, #32]
 800c8ba:	f7fd fbff 	bl	800a0bc <cJSON_Delete>

        printf("Display: All devices set to %s\n", state ? "ON" : "OFF");
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <setAllDevicesState+0x178>
 800c8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c900 <setAllDevicesState+0x1b0>)
 800c8c6:	e000      	b.n	800c8ca <setAllDevicesState+0x17a>
 800c8c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c904 <setAllDevicesState+0x1b4>)
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	480e      	ldr	r0, [pc, #56]	@ (800c908 <setAllDevicesState+0x1b8>)
 800c8ce:	f008 ff45 	bl	801575c <iprintf>
    }
}
 800c8d2:	bf00      	nop
 800c8d4:	3734      	adds	r7, #52	@ 0x34
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd90      	pop	{r4, r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	08018394 	.word	0x08018394
 800c8e0:	200003ec 	.word	0x200003ec
 800c8e4:	40020800 	.word	0x40020800
 800c8e8:	40021c00 	.word	0x40021c00
 800c8ec:	40020400 	.word	0x40020400
 800c8f0:	20000240 	.word	0x20000240
 800c8f4:	20000250 	.word	0x20000250
 800c8f8:	20000358 	.word	0x20000358
 800c8fc:	08018350 	.word	0x08018350
 800c900:	080182e4 	.word	0x080182e4
 800c904:	080182e8 	.word	0x080182e8
 800c908:	08018374 	.word	0x08018374

0800c90c <syncDisplayDeviceStates>:

void syncDisplayDeviceStates(void) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 800c912:	4b12      	ldr	r3, [pc, #72]	@ (800c95c <syncDisplayDeviceStates+0x50>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	210a      	movs	r1, #10
 800c918:	4618      	mov	r0, r3
 800c91a:	f005 fd9d 	bl	8012458 <xQueueSemaphoreTake>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b01      	cmp	r3, #1
 800c922:	d117      	bne.n	800c954 <syncDisplayDeviceStates+0x48>
        for (int i = 0; i < 4; i++) {
 800c924:	2300      	movs	r3, #0
 800c926:	607b      	str	r3, [r7, #4]
 800c928:	e00a      	b.n	800c940 <syncDisplayDeviceStates+0x34>
            device_states[i] = global_device_states[i];
 800c92a:	4a0d      	ldr	r2, [pc, #52]	@ (800c960 <syncDisplayDeviceStates+0x54>)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c932:	490c      	ldr	r1, [pc, #48]	@ (800c964 <syncDisplayDeviceStates+0x58>)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3301      	adds	r3, #1
 800c93e:	607b      	str	r3, [r7, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b03      	cmp	r3, #3
 800c944:	ddf1      	ble.n	800c92a <syncDisplayDeviceStates+0x1e>
        }
        xSemaphoreGive(deviceStateMutex);
 800c946:	4b05      	ldr	r3, [pc, #20]	@ (800c95c <syncDisplayDeviceStates+0x50>)
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	2300      	movs	r3, #0
 800c94c:	2200      	movs	r2, #0
 800c94e:	2100      	movs	r1, #0
 800c950:	f005 faf0 	bl	8011f34 <xQueueGenericSend>
    }
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	200003ec 	.word	0x200003ec
 800c960:	20000240 	.word	0x20000240
 800c964:	20000250 	.word	0x20000250

0800c968 <showActionFeedback>:

void showActionFeedback(char* message, uint16_t color) {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af04      	add	r7, sp, #16
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
 800c974:	2300      	movs	r3, #0
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	230c      	movs	r3, #12
 800c97a:	228c      	movs	r2, #140	@ 0x8c
 800c97c:	2171      	movs	r1, #113	@ 0x71
 800c97e:	200a      	movs	r0, #10
 800c980:	f7fc fb41 	bl	8009006 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, DISPLAY_HEIGHT - 13, message, Font_7x10, color, BLACK);
 800c984:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c0 <showActionFeedback+0x58>)
 800c986:	2200      	movs	r2, #0
 800c988:	9202      	str	r2, [sp, #8]
 800c98a:	887a      	ldrh	r2, [r7, #2]
 800c98c:	9201      	str	r2, [sp, #4]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	9200      	str	r2, [sp, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	2173      	movs	r1, #115	@ 0x73
 800c998:	200c      	movs	r0, #12
 800c99a:	f7fd fa09 	bl	8009db0 <ST7735_WriteString>
    HAL_Delay(800);
 800c99e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800c9a2:	f001 fd5b 	bl	800e45c <HAL_Delay>
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	230c      	movs	r3, #12
 800c9ac:	228c      	movs	r2, #140	@ 0x8c
 800c9ae:	2171      	movs	r1, #113	@ 0x71
 800c9b0:	200a      	movs	r0, #10
 800c9b2:	f7fc fb28 	bl	8009006 <fillRect>
}
 800c9b6:	bf00      	nop
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20000010 	.word	0x20000010

0800c9c4 <handleNavigation>:


void handleNavigation(void) {
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b090      	sub	sp, #64	@ 0x40
 800c9c8:	af00      	add	r7, sp, #0
    int max_options;

    switch(current_menu) {
 800c9ca:	4ba2      	ldr	r3, [pc, #648]	@ (800cc54 <handleNavigation+0x290>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d816      	bhi.n	800ca00 <handleNavigation+0x3c>
 800c9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d8 <handleNavigation+0x14>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800c9e9 	.word	0x0800c9e9
 800c9dc:	0800c9ef 	.word	0x0800c9ef
 800c9e0:	0800c9f5 	.word	0x0800c9f5
 800c9e4:	0800c9fb 	.word	0x0800c9fb
        case MENU_MAIN:
            max_options = MAIN_MENU_OPTIONS;
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800c9ec:	e00b      	b.n	800ca06 <handleNavigation+0x42>
        case MENU_TOTAL_CONTROL:
            max_options = TOTAL_CONTROL_OPTIONS;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800c9f2:	e008      	b.n	800ca06 <handleNavigation+0x42>
        case MENU_SEPARATE_CONTROL:
            max_options = SEPARATE_CONTROL_OPTIONS;
 800c9f4:	2305      	movs	r3, #5
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800c9f8:	e005      	b.n	800ca06 <handleNavigation+0x42>
        case MENU_DEVICE_CONTROL:
            max_options = DEVICE_CONTROL_OPTIONS;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800c9fe:	e002      	b.n	800ca06 <handleNavigation+0x42>
        default:
            max_options = 2;
 800ca00:	2302      	movs	r3, #2
 800ca02:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 800ca04:	bf00      	nop
    }

    if (upbutton) {
 800ca06:	4b94      	ldr	r3, [pc, #592]	@ (800cc58 <handleNavigation+0x294>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d02e      	beq.n	800ca6c <handleNavigation+0xa8>
        HAL_Delay(200);
 800ca0e:	20c8      	movs	r0, #200	@ 0xc8
 800ca10:	f001 fd24 	bl	800e45c <HAL_Delay>
        current_selection = (current_selection - 1 + max_options) % max_options;
 800ca14:	4b91      	ldr	r3, [pc, #580]	@ (800cc5c <handleNavigation+0x298>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	1e5a      	subs	r2, r3, #1
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1c:	4413      	add	r3, r2
 800ca1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca20:	fb93 f2f2 	sdiv	r2, r3, r2
 800ca24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca26:	fb01 f202 	mul.w	r2, r1, r2
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	4a8b      	ldr	r2, [pc, #556]	@ (800cc5c <handleNavigation+0x298>)
 800ca2e:	6013      	str	r3, [r2, #0]
        upbutton = 0;
 800ca30:	4b89      	ldr	r3, [pc, #548]	@ (800cc58 <handleNavigation+0x294>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800ca36:	4b87      	ldr	r3, [pc, #540]	@ (800cc54 <handleNavigation+0x290>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d816      	bhi.n	800ca6c <handleNavigation+0xa8>
 800ca3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca44 <handleNavigation+0x80>)
 800ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca44:	0800ca55 	.word	0x0800ca55
 800ca48:	0800ca5b 	.word	0x0800ca5b
 800ca4c:	0800ca61 	.word	0x0800ca61
 800ca50:	0800ca67 	.word	0x0800ca67
            case MENU_MAIN:
                displayMainMenu();
 800ca54:	f7ff fbbc 	bl	800c1d0 <displayMainMenu>
                break;
 800ca58:	e008      	b.n	800ca6c <handleNavigation+0xa8>
            case MENU_TOTAL_CONTROL:
                displayTotalControlMenu();
 800ca5a:	f7ff fc07 	bl	800c26c <displayTotalControlMenu>
                break;
 800ca5e:	e005      	b.n	800ca6c <handleNavigation+0xa8>
            case MENU_SEPARATE_CONTROL:
                displaySeparateControlMenu();
 800ca60:	f7ff fc8c 	bl	800c37c <displaySeparateControlMenu>
                break;
 800ca64:	e002      	b.n	800ca6c <handleNavigation+0xa8>
            case MENU_DEVICE_CONTROL:
                displayDeviceControlMenu();
 800ca66:	f7ff fd01 	bl	800c46c <displayDeviceControlMenu>
                break;
 800ca6a:	bf00      	nop
        }
    }

    if (downbutton) {
 800ca6c:	4b7c      	ldr	r3, [pc, #496]	@ (800cc60 <handleNavigation+0x29c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d02d      	beq.n	800cad0 <handleNavigation+0x10c>
        HAL_Delay(200);
 800ca74:	20c8      	movs	r0, #200	@ 0xc8
 800ca76:	f001 fcf1 	bl	800e45c <HAL_Delay>
        current_selection = (current_selection + 1) % max_options;
 800ca7a:	4b78      	ldr	r3, [pc, #480]	@ (800cc5c <handleNavigation+0x298>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca82:	fb93 f2f2 	sdiv	r2, r3, r2
 800ca86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca88:	fb01 f202 	mul.w	r2, r1, r2
 800ca8c:	1a9b      	subs	r3, r3, r2
 800ca8e:	4a73      	ldr	r2, [pc, #460]	@ (800cc5c <handleNavigation+0x298>)
 800ca90:	6013      	str	r3, [r2, #0]
        downbutton = 0;
 800ca92:	4b73      	ldr	r3, [pc, #460]	@ (800cc60 <handleNavigation+0x29c>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800ca98:	4b6e      	ldr	r3, [pc, #440]	@ (800cc54 <handleNavigation+0x290>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d817      	bhi.n	800cad0 <handleNavigation+0x10c>
 800caa0:	a201      	add	r2, pc, #4	@ (adr r2, 800caa8 <handleNavigation+0xe4>)
 800caa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa6:	bf00      	nop
 800caa8:	0800cab9 	.word	0x0800cab9
 800caac:	0800cabf 	.word	0x0800cabf
 800cab0:	0800cac5 	.word	0x0800cac5
 800cab4:	0800cacb 	.word	0x0800cacb
            case MENU_MAIN:
                displayMainMenu();
 800cab8:	f7ff fb8a 	bl	800c1d0 <displayMainMenu>
                break;
 800cabc:	e008      	b.n	800cad0 <handleNavigation+0x10c>
            case MENU_TOTAL_CONTROL:
                displayTotalControlMenu();
 800cabe:	f7ff fbd5 	bl	800c26c <displayTotalControlMenu>
                break;
 800cac2:	e005      	b.n	800cad0 <handleNavigation+0x10c>
            case MENU_SEPARATE_CONTROL:
                displaySeparateControlMenu();
 800cac4:	f7ff fc5a 	bl	800c37c <displaySeparateControlMenu>
                break;
 800cac8:	e002      	b.n	800cad0 <handleNavigation+0x10c>
            case MENU_DEVICE_CONTROL:
                displayDeviceControlMenu();
 800caca:	f7ff fccf 	bl	800c46c <displayDeviceControlMenu>
                break;
 800cace:	bf00      	nop
        }
    }

    if (enter) {
 800cad0:	4b64      	ldr	r3, [pc, #400]	@ (800cc64 <handleNavigation+0x2a0>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8109 	beq.w	800ccec <handleNavigation+0x328>
        HAL_Delay(200);
 800cada:	20c8      	movs	r0, #200	@ 0xc8
 800cadc:	f001 fcbe 	bl	800e45c <HAL_Delay>
        enter = 0;
 800cae0:	4b60      	ldr	r3, [pc, #384]	@ (800cc64 <handleNavigation+0x2a0>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800cae6:	4b5b      	ldr	r3, [pc, #364]	@ (800cc54 <handleNavigation+0x290>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b03      	cmp	r3, #3
 800caec:	f200 80fe 	bhi.w	800ccec <handleNavigation+0x328>
 800caf0:	a201      	add	r2, pc, #4	@ (adr r2, 800caf8 <handleNavigation+0x134>)
 800caf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf6:	bf00      	nop
 800caf8:	0800cb09 	.word	0x0800cb09
 800cafc:	0800cb4f 	.word	0x0800cb4f
 800cb00:	0800cbbf 	.word	0x0800cbbf
 800cb04:	0800cc13 	.word	0x0800cc13
            case MENU_MAIN:
                if (current_selection == 0) {
 800cb08:	4b54      	ldr	r3, [pc, #336]	@ (800cc5c <handleNavigation+0x298>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10c      	bne.n	800cb2a <handleNavigation+0x166>
                    current_menu = MENU_TOTAL_CONTROL;
 800cb10:	4b50      	ldr	r3, [pc, #320]	@ (800cc54 <handleNavigation+0x290>)
 800cb12:	2201      	movs	r2, #1
 800cb14:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800cb16:	4b51      	ldr	r3, [pc, #324]	@ (800cc5c <handleNavigation+0x298>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
                    last_selection = -1;
 800cb1c:	4b52      	ldr	r3, [pc, #328]	@ (800cc68 <handleNavigation+0x2a4>)
 800cb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb22:	601a      	str	r2, [r3, #0]
                    displayTotalControlMenu();
 800cb24:	f7ff fba2 	bl	800c26c <displayTotalControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = 0;
                    last_selection = -1;
                    displaySeparateControlMenu();
                }
                break;
 800cb28:	e0d9      	b.n	800ccde <handleNavigation+0x31a>
                } else if (current_selection == 1) {
 800cb2a:	4b4c      	ldr	r3, [pc, #304]	@ (800cc5c <handleNavigation+0x298>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	f040 80d5 	bne.w	800ccde <handleNavigation+0x31a>
                    current_menu = MENU_SEPARATE_CONTROL;
 800cb34:	4b47      	ldr	r3, [pc, #284]	@ (800cc54 <handleNavigation+0x290>)
 800cb36:	2202      	movs	r2, #2
 800cb38:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800cb3a:	4b48      	ldr	r3, [pc, #288]	@ (800cc5c <handleNavigation+0x298>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	601a      	str	r2, [r3, #0]
                    last_selection = -1;
 800cb40:	4b49      	ldr	r3, [pc, #292]	@ (800cc68 <handleNavigation+0x2a4>)
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295
 800cb46:	601a      	str	r2, [r3, #0]
                    displaySeparateControlMenu();
 800cb48:	f7ff fc18 	bl	800c37c <displaySeparateControlMenu>
                break;
 800cb4c:	e0c7      	b.n	800ccde <handleNavigation+0x31a>

            case MENU_TOTAL_CONTROL:
                if (current_selection == 0) {
 800cb4e:	4b43      	ldr	r3, [pc, #268]	@ (800cc5c <handleNavigation+0x298>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10e      	bne.n	800cb74 <handleNavigation+0x1b0>
                    setAllDevicesState(1);
 800cb56:	2001      	movs	r0, #1
 800cb58:	f7ff fdfa 	bl	800c750 <setAllDevicesState>
                    showActionFeedback("All Devices ON", GREEN);
 800cb5c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800cb60:	4842      	ldr	r0, [pc, #264]	@ (800cc6c <handleNavigation+0x2a8>)
 800cb62:	f7ff ff01 	bl	800c968 <showActionFeedback>
                    last_selection = -1;
 800cb66:	4b40      	ldr	r3, [pc, #256]	@ (800cc68 <handleNavigation+0x2a4>)
 800cb68:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6c:	601a      	str	r2, [r3, #0]
                    displayTotalControlMenu();
 800cb6e:	f7ff fb7d 	bl	800c26c <displayTotalControlMenu>
                    current_menu = MENU_MAIN;
                    current_selection = 0;
                    last_selection = -1;
                    displayMainMenu();
                }
                break;
 800cb72:	e0b6      	b.n	800cce2 <handleNavigation+0x31e>
                } else if (current_selection == 1) {
 800cb74:	4b39      	ldr	r3, [pc, #228]	@ (800cc5c <handleNavigation+0x298>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d10e      	bne.n	800cb9a <handleNavigation+0x1d6>
                    setAllDevicesState(0);
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	f7ff fde7 	bl	800c750 <setAllDevicesState>
                    showActionFeedback("All Devices OFF", RED);
 800cb82:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800cb86:	483a      	ldr	r0, [pc, #232]	@ (800cc70 <handleNavigation+0x2ac>)
 800cb88:	f7ff feee 	bl	800c968 <showActionFeedback>
                    last_selection = -1;
 800cb8c:	4b36      	ldr	r3, [pc, #216]	@ (800cc68 <handleNavigation+0x2a4>)
 800cb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb92:	601a      	str	r2, [r3, #0]
                    displayTotalControlMenu();
 800cb94:	f7ff fb6a 	bl	800c26c <displayTotalControlMenu>
                break;
 800cb98:	e0a3      	b.n	800cce2 <handleNavigation+0x31e>
                } else if (current_selection == 2) {
 800cb9a:	4b30      	ldr	r3, [pc, #192]	@ (800cc5c <handleNavigation+0x298>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	f040 809f 	bne.w	800cce2 <handleNavigation+0x31e>
                    current_menu = MENU_MAIN;
 800cba4:	4b2b      	ldr	r3, [pc, #172]	@ (800cc54 <handleNavigation+0x290>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800cbaa:	4b2c      	ldr	r3, [pc, #176]	@ (800cc5c <handleNavigation+0x298>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]
                    last_selection = -1;
 800cbb0:	4b2d      	ldr	r3, [pc, #180]	@ (800cc68 <handleNavigation+0x2a4>)
 800cbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb6:	601a      	str	r2, [r3, #0]
                    displayMainMenu();
 800cbb8:	f7ff fb0a 	bl	800c1d0 <displayMainMenu>
                break;
 800cbbc:	e091      	b.n	800cce2 <handleNavigation+0x31e>

            case MENU_SEPARATE_CONTROL:
                if (current_selection >= 0 && current_selection <= 3) {
 800cbbe:	4b27      	ldr	r3, [pc, #156]	@ (800cc5c <handleNavigation+0x298>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	db14      	blt.n	800cbf0 <handleNavigation+0x22c>
 800cbc6:	4b25      	ldr	r3, [pc, #148]	@ (800cc5c <handleNavigation+0x298>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	dc10      	bgt.n	800cbf0 <handleNavigation+0x22c>
                    current_device = current_selection;
 800cbce:	4b23      	ldr	r3, [pc, #140]	@ (800cc5c <handleNavigation+0x298>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a28      	ldr	r2, [pc, #160]	@ (800cc74 <handleNavigation+0x2b0>)
 800cbd4:	6013      	str	r3, [r2, #0]
                    current_menu = MENU_DEVICE_CONTROL;
 800cbd6:	4b1f      	ldr	r3, [pc, #124]	@ (800cc54 <handleNavigation+0x290>)
 800cbd8:	2203      	movs	r2, #3
 800cbda:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800cbdc:	4b1f      	ldr	r3, [pc, #124]	@ (800cc5c <handleNavigation+0x298>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
                    last_selection = -1;
 800cbe2:	4b21      	ldr	r3, [pc, #132]	@ (800cc68 <handleNavigation+0x2a4>)
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe8:	601a      	str	r2, [r3, #0]
                    displayDeviceControlMenu();
 800cbea:	f7ff fc3f 	bl	800c46c <displayDeviceControlMenu>
                    current_menu = MENU_MAIN;
                    current_selection = 0;
                    last_selection = -1;
                    displayMainMenu();
                }
                break;
 800cbee:	e07a      	b.n	800cce6 <handleNavigation+0x322>
                } else if (current_selection == 4) {
 800cbf0:	4b1a      	ldr	r3, [pc, #104]	@ (800cc5c <handleNavigation+0x298>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d176      	bne.n	800cce6 <handleNavigation+0x322>
                    current_menu = MENU_MAIN;
 800cbf8:	4b16      	ldr	r3, [pc, #88]	@ (800cc54 <handleNavigation+0x290>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800cbfe:	4b17      	ldr	r3, [pc, #92]	@ (800cc5c <handleNavigation+0x298>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	601a      	str	r2, [r3, #0]
                    last_selection = -1;
 800cc04:	4b18      	ldr	r3, [pc, #96]	@ (800cc68 <handleNavigation+0x2a4>)
 800cc06:	f04f 32ff 	mov.w	r2, #4294967295
 800cc0a:	601a      	str	r2, [r3, #0]
                    displayMainMenu();
 800cc0c:	f7ff fae0 	bl	800c1d0 <displayMainMenu>
                break;
 800cc10:	e069      	b.n	800cce6 <handleNavigation+0x322>

            case MENU_DEVICE_CONTROL:
                if (current_selection == 0) {
 800cc12:	4b12      	ldr	r3, [pc, #72]	@ (800cc5c <handleNavigation+0x298>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d130      	bne.n	800cc7c <handleNavigation+0x2b8>
                    setDeviceState(current_device, 1);
 800cc1a:	4b16      	ldr	r3, [pc, #88]	@ (800cc74 <handleNavigation+0x2b0>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2101      	movs	r1, #1
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff fcbf 	bl	800c5a4 <setDeviceState>
                    char msg[25];
                    snprintf(msg, sizeof(msg), "Device %d ON", current_device + 1);
 800cc26:	4b13      	ldr	r3, [pc, #76]	@ (800cc74 <handleNavigation+0x2b0>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f107 0020 	add.w	r0, r7, #32
 800cc30:	4a11      	ldr	r2, [pc, #68]	@ (800cc78 <handleNavigation+0x2b4>)
 800cc32:	2119      	movs	r1, #25
 800cc34:	f008 fe02 	bl	801583c <sniprintf>
                    showActionFeedback(msg, GREEN);
 800cc38:	f107 0320 	add.w	r3, r7, #32
 800cc3c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff fe91 	bl	800c968 <showActionFeedback>
                    last_selection = -1;
 800cc46:	4b08      	ldr	r3, [pc, #32]	@ (800cc68 <handleNavigation+0x2a4>)
 800cc48:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4c:	601a      	str	r2, [r3, #0]
                    displayDeviceControlMenu();
 800cc4e:	f7ff fc0d 	bl	800c46c <displayDeviceControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = current_device;
                    last_selection = -1;
                    displaySeparateControlMenu();
                }
                break;
 800cc52:	e04a      	b.n	800ccea <handleNavigation+0x326>
 800cc54:	20000228 	.word	0x20000228
 800cc58:	20000238 	.word	0x20000238
 800cc5c:	2000022c 	.word	0x2000022c
 800cc60:	20000234 	.word	0x20000234
 800cc64:	2000023c 	.word	0x2000023c
 800cc68:	2000000c 	.word	0x2000000c
 800cc6c:	080183a4 	.word	0x080183a4
 800cc70:	080183b4 	.word	0x080183b4
 800cc74:	20000230 	.word	0x20000230
 800cc78:	080183c4 	.word	0x080183c4
                } else if (current_selection == 1) {
 800cc7c:	4b1d      	ldr	r3, [pc, #116]	@ (800ccf4 <handleNavigation+0x330>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d11a      	bne.n	800ccba <handleNavigation+0x2f6>
                    setDeviceState(current_device, 0);
 800cc84:	4b1c      	ldr	r3, [pc, #112]	@ (800ccf8 <handleNavigation+0x334>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2100      	movs	r1, #0
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fc8a 	bl	800c5a4 <setDeviceState>
                    snprintf(msg, sizeof(msg), "Device %d OFF", current_device + 1);
 800cc90:	4b19      	ldr	r3, [pc, #100]	@ (800ccf8 <handleNavigation+0x334>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	3301      	adds	r3, #1
 800cc96:	1d38      	adds	r0, r7, #4
 800cc98:	4a18      	ldr	r2, [pc, #96]	@ (800ccfc <handleNavigation+0x338>)
 800cc9a:	2119      	movs	r1, #25
 800cc9c:	f008 fdce 	bl	801583c <sniprintf>
                    showActionFeedback(msg, RED);
 800cca0:	1d3b      	adds	r3, r7, #4
 800cca2:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fe5e 	bl	800c968 <showActionFeedback>
                    last_selection = -1;
 800ccac:	4b14      	ldr	r3, [pc, #80]	@ (800cd00 <handleNavigation+0x33c>)
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	601a      	str	r2, [r3, #0]
                    displayDeviceControlMenu();
 800ccb4:	f7ff fbda 	bl	800c46c <displayDeviceControlMenu>
                break;
 800ccb8:	e017      	b.n	800ccea <handleNavigation+0x326>
                } else if (current_selection == 2) {
 800ccba:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf4 <handleNavigation+0x330>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d113      	bne.n	800ccea <handleNavigation+0x326>
                    current_menu = MENU_SEPARATE_CONTROL;
 800ccc2:	4b10      	ldr	r3, [pc, #64]	@ (800cd04 <handleNavigation+0x340>)
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	601a      	str	r2, [r3, #0]
                    current_selection = current_device;
 800ccc8:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf8 <handleNavigation+0x334>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a09      	ldr	r2, [pc, #36]	@ (800ccf4 <handleNavigation+0x330>)
 800ccce:	6013      	str	r3, [r2, #0]
                    last_selection = -1;
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd00 <handleNavigation+0x33c>)
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	601a      	str	r2, [r3, #0]
                    displaySeparateControlMenu();
 800ccd8:	f7ff fb50 	bl	800c37c <displaySeparateControlMenu>
                break;
 800ccdc:	e005      	b.n	800ccea <handleNavigation+0x326>
                break;
 800ccde:	bf00      	nop
 800cce0:	e004      	b.n	800ccec <handleNavigation+0x328>
                break;
 800cce2:	bf00      	nop
 800cce4:	e002      	b.n	800ccec <handleNavigation+0x328>
                break;
 800cce6:	bf00      	nop
 800cce8:	e000      	b.n	800ccec <handleNavigation+0x328>
                break;
 800ccea:	bf00      	nop
        }
    }
}
 800ccec:	bf00      	nop
 800ccee:	3740      	adds	r7, #64	@ 0x40
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	2000022c 	.word	0x2000022c
 800ccf8:	20000230 	.word	0x20000230
 800ccfc:	080183d4 	.word	0x080183d4
 800cd00:	2000000c 	.word	0x2000000c
 800cd04:	20000228 	.word	0x20000228

0800cd08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_10) { // ENTER button
 800cd12:	88fb      	ldrh	r3, [r7, #6]
 800cd14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd18:	d108      	bne.n	800cd2c <HAL_GPIO_EXTI_Callback+0x24>
        downbutton = 0;
 800cd1a:	4b14      	ldr	r3, [pc, #80]	@ (800cd6c <HAL_GPIO_EXTI_Callback+0x64>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800cd20:	4b13      	ldr	r3, [pc, #76]	@ (800cd70 <HAL_GPIO_EXTI_Callback+0x68>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
        enter = 1;
 800cd26:	4b13      	ldr	r3, [pc, #76]	@ (800cd74 <HAL_GPIO_EXTI_Callback+0x6c>)
 800cd28:	2201      	movs	r2, #1
 800cd2a:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_11) { // DOWN button
 800cd2c:	88fb      	ldrh	r3, [r7, #6]
 800cd2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd32:	d108      	bne.n	800cd46 <HAL_GPIO_EXTI_Callback+0x3e>
        downbutton = 1;
 800cd34:	4b0d      	ldr	r3, [pc, #52]	@ (800cd6c <HAL_GPIO_EXTI_Callback+0x64>)
 800cd36:	2201      	movs	r2, #1
 800cd38:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd70 <HAL_GPIO_EXTI_Callback+0x68>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	601a      	str	r2, [r3, #0]
        enter = 0;
 800cd40:	4b0c      	ldr	r3, [pc, #48]	@ (800cd74 <HAL_GPIO_EXTI_Callback+0x6c>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_9) { // UP button
 800cd46:	88fb      	ldrh	r3, [r7, #6]
 800cd48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd4c:	d108      	bne.n	800cd60 <HAL_GPIO_EXTI_Callback+0x58>
        downbutton = 0;
 800cd4e:	4b07      	ldr	r3, [pc, #28]	@ (800cd6c <HAL_GPIO_EXTI_Callback+0x64>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]
        upbutton = 1;
 800cd54:	4b06      	ldr	r3, [pc, #24]	@ (800cd70 <HAL_GPIO_EXTI_Callback+0x68>)
 800cd56:	2201      	movs	r2, #1
 800cd58:	601a      	str	r2, [r3, #0]
        enter = 0;
 800cd5a:	4b06      	ldr	r3, [pc, #24]	@ (800cd74 <HAL_GPIO_EXTI_Callback+0x6c>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	601a      	str	r2, [r3, #0]
    }
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	20000234 	.word	0x20000234
 800cd70:	20000238 	.word	0x20000238
 800cd74:	2000023c 	.word	0x2000023c

0800cd78 <Menu_Handler>:

void Menu_Handler(void) {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
    handleNavigation();
 800cd7c:	f7ff fe22 	bl	800c9c4 <handleNavigation>
}
 800cd80:	bf00      	nop
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <initializeMenu>:



void initializeMenu(void) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
	printf("display_init\n\r");
 800cd8a:	4814      	ldr	r0, [pc, #80]	@ (800cddc <initializeMenu+0x58>)
 800cd8c:	f008 fce6 	bl	801575c <iprintf>
    current_menu = MENU_MAIN;
 800cd90:	4b13      	ldr	r3, [pc, #76]	@ (800cde0 <initializeMenu+0x5c>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
    current_selection = 0;
 800cd96:	4b13      	ldr	r3, [pc, #76]	@ (800cde4 <initializeMenu+0x60>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]
    current_device = 0;
 800cd9c:	4b12      	ldr	r3, [pc, #72]	@ (800cde8 <initializeMenu+0x64>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	601a      	str	r2, [r3, #0]
    last_selection = -1;
 800cda2:	4b12      	ldr	r3, [pc, #72]	@ (800cdec <initializeMenu+0x68>)
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 800cdaa:	2300      	movs	r3, #0
 800cdac:	607b      	str	r3, [r7, #4]
 800cdae:	e00b      	b.n	800cdc8 <initializeMenu+0x44>
        device_states[i] = 0;
 800cdb0:	4a0f      	ldr	r2, [pc, #60]	@ (800cdf0 <initializeMenu+0x6c>)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        setDeviceState(i, 0);
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7ff fbf1 	bl	800c5a4 <setDeviceState>
    for (int i = 0; i < 4; i++) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	607b      	str	r3, [r7, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	ddf0      	ble.n	800cdb0 <initializeMenu+0x2c>
    }
    displayMainMenu();
 800cdce:	f7ff f9ff 	bl	800c1d0 <displayMainMenu>
}
 800cdd2:	bf00      	nop
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	080183e4 	.word	0x080183e4
 800cde0:	20000228 	.word	0x20000228
 800cde4:	2000022c 	.word	0x2000022c
 800cde8:	20000230 	.word	0x20000230
 800cdec:	2000000c 	.word	0x2000000c
 800cdf0:	20000250 	.word	0x20000250

0800cdf4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800cdfc:	1d39      	adds	r1, r7, #4
 800cdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ce02:	2201      	movs	r2, #1
 800ce04:	4803      	ldr	r0, [pc, #12]	@ (800ce14 <__io_putchar+0x20>)
 800ce06:	f003 fea3 	bl	8010b50 <HAL_UART_Transmit>
	return ch;
 800ce0a:	687b      	ldr	r3, [r7, #4]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20000310 	.word	0x20000310

0800ce18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ce1e:	f001 fadb 	bl	800e3d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ce22:	f000 f84f 	bl	800cec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ce26:	f000 f97f 	bl	800d128 <MX_GPIO_Init>
  MX_SPI1_Init();
 800ce2a:	f000 f8bd 	bl	800cfa8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800ce2e:	f000 f8f3 	bl	800d018 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800ce32:	f000 f925 	bl	800d080 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800ce36:	f000 f94d 	bl	800d0d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	f7fc fe56 	bl	8009aec <ST7735_Init>
  ST7735_SetRotation(1);
 800ce40:	2001      	movs	r0, #1
 800ce42:	f7fc fe7f 	bl	8009b44 <ST7735_SetRotation>
  fillScreen(BLACK);
 800ce46:	2000      	movs	r0, #0
 800ce48:	f7fc fd44 	bl	80098d4 <fillScreen>
  ST7735_WriteString(10, 10, "ONWORDS", Font_16x26, WHITE, BLACK);
 800ce4c:	4b18      	ldr	r3, [pc, #96]	@ (800ceb0 <main+0x98>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	9202      	str	r2, [sp, #8]
 800ce52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce56:	9201      	str	r2, [sp, #4]
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	9200      	str	r2, [sp, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a15      	ldr	r2, [pc, #84]	@ (800ceb4 <main+0x9c>)
 800ce60:	210a      	movs	r1, #10
 800ce62:	200a      	movs	r0, #10
 800ce64:	f7fc ffa4 	bl	8009db0 <ST7735_WriteString>
  HAL_Delay(3000);
 800ce68:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ce6c:	f001 faf6 	bl	800e45c <HAL_Delay>
  deviceStateMutex = xSemaphoreCreateMutex();
 800ce70:	2001      	movs	r0, #1
 800ce72:	f005 f846 	bl	8011f02 <xQueueCreateMutex>
 800ce76:	4603      	mov	r3, r0
 800ce78:	4a0f      	ldr	r2, [pc, #60]	@ (800ceb8 <main+0xa0>)
 800ce7a:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++) {
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	607b      	str	r3, [r7, #4]
 800ce80:	e00c      	b.n	800ce9c <main+0x84>
	  global_device_states[i] = 0;
 800ce82:	4a0e      	ldr	r2, [pc, #56]	@ (800cebc <main+0xa4>)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2100      	movs	r1, #0
 800ce88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  device_states[i] = 0;
 800ce8c:	4a0c      	ldr	r2, [pc, #48]	@ (800cec0 <main+0xa8>)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2100      	movs	r1, #0
 800ce92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < 4; i++) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	607b      	str	r3, [r7, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	ddef      	ble.n	800ce82 <main+0x6a>
  }

  initializeMenu();
 800cea2:	f7ff ff6f 	bl	800cd84 <initializeMenu>
  setup_freeRTOS();
 800cea6:	f000 fd07 	bl	800d8b8 <setup_freeRTOS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ceaa:	bf00      	nop
 800ceac:	e7fd      	b.n	800ceaa <main+0x92>
 800ceae:	bf00      	nop
 800ceb0:	20000018 	.word	0x20000018
 800ceb4:	080183f4 	.word	0x080183f4
 800ceb8:	200003ec 	.word	0x200003ec
 800cebc:	20000240 	.word	0x20000240
 800cec0:	20000250 	.word	0x20000250

0800cec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b094      	sub	sp, #80	@ 0x50
 800cec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ceca:	f107 031c 	add.w	r3, r7, #28
 800cece:	2234      	movs	r2, #52	@ 0x34
 800ced0:	2100      	movs	r1, #0
 800ced2:	4618      	mov	r0, r3
 800ced4:	f008 fe10 	bl	8015af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ced8:	f107 0308 	add.w	r3, r7, #8
 800cedc:	2200      	movs	r2, #0
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	605a      	str	r2, [r3, #4]
 800cee2:	609a      	str	r2, [r3, #8]
 800cee4:	60da      	str	r2, [r3, #12]
 800cee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cee8:	2300      	movs	r3, #0
 800ceea:	607b      	str	r3, [r7, #4]
 800ceec:	4b2c      	ldr	r3, [pc, #176]	@ (800cfa0 <SystemClock_Config+0xdc>)
 800ceee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef0:	4a2b      	ldr	r2, [pc, #172]	@ (800cfa0 <SystemClock_Config+0xdc>)
 800cef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cef6:	6413      	str	r3, [r2, #64]	@ 0x40
 800cef8:	4b29      	ldr	r3, [pc, #164]	@ (800cfa0 <SystemClock_Config+0xdc>)
 800cefa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cefc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf00:	607b      	str	r3, [r7, #4]
 800cf02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cf04:	2300      	movs	r3, #0
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	4b26      	ldr	r3, [pc, #152]	@ (800cfa4 <SystemClock_Config+0xe0>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a25      	ldr	r2, [pc, #148]	@ (800cfa4 <SystemClock_Config+0xe0>)
 800cf0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	4b23      	ldr	r3, [pc, #140]	@ (800cfa4 <SystemClock_Config+0xe0>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cf1c:	603b      	str	r3, [r7, #0]
 800cf1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cf20:	2302      	movs	r3, #2
 800cf22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cf24:	2301      	movs	r3, #1
 800cf26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cf28:	2310      	movs	r3, #16
 800cf2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cf30:	2300      	movs	r3, #0
 800cf32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800cf34:	2308      	movs	r3, #8
 800cf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800cf38:	23b4      	movs	r3, #180	@ 0xb4
 800cf3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cf3c:	2302      	movs	r3, #2
 800cf3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800cf40:	2302      	movs	r3, #2
 800cf42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800cf44:	2302      	movs	r3, #2
 800cf46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cf48:	f107 031c 	add.w	r3, r7, #28
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f002 f95b 	bl	800f208 <HAL_RCC_OscConfig>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 800cf58:	f000 f9b6 	bl	800d2c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800cf5c:	f001 fe0e 	bl	800eb7c <HAL_PWREx_EnableOverDrive>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800cf66:	f000 f9af 	bl	800d2c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cf6a:	230f      	movs	r3, #15
 800cf6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cf72:	2300      	movs	r3, #0
 800cf74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cf76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800cf7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cf7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	2105      	movs	r1, #5
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f001 fe47 	bl	800ec1c <HAL_RCC_ClockConfig>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800cf94:	f000 f998 	bl	800d2c8 <Error_Handler>
  }
}
 800cf98:	bf00      	nop
 800cf9a:	3750      	adds	r7, #80	@ 0x50
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	40023800 	.word	0x40023800
 800cfa4:	40007000 	.word	0x40007000

0800cfa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800cfac:	4b18      	ldr	r3, [pc, #96]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfae:	4a19      	ldr	r2, [pc, #100]	@ (800d014 <MX_SPI1_Init+0x6c>)
 800cfb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800cfb2:	4b17      	ldr	r3, [pc, #92]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800cfb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800cfba:	4b15      	ldr	r3, [pc, #84]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfbc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800cfc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800cfc2:	4b13      	ldr	r3, [pc, #76]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800cfc8:	4b11      	ldr	r3, [pc, #68]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800cfce:	4b10      	ldr	r3, [pc, #64]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800cfdc:	4b0c      	ldr	r3, [pc, #48]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfde:	2208      	movs	r2, #8
 800cfe0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cfe2:	4b0b      	ldr	r3, [pc, #44]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800cfe8:	4b09      	ldr	r3, [pc, #36]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfee:	4b08      	ldr	r3, [pc, #32]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800cff4:	4b06      	ldr	r3, [pc, #24]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cff6:	220a      	movs	r2, #10
 800cff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800cffa:	4805      	ldr	r0, [pc, #20]	@ (800d010 <MX_SPI1_Init+0x68>)
 800cffc:	f002 fba2 	bl	800f744 <HAL_SPI_Init>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800d006:	f000 f95f 	bl	800d2c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d00a:	bf00      	nop
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	20000260 	.word	0x20000260
 800d014:	40013000 	.word	0x40013000

0800d018 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800d01c:	4b16      	ldr	r3, [pc, #88]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d01e:	4a17      	ldr	r2, [pc, #92]	@ (800d07c <MX_SPI2_Init+0x64>)
 800d020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800d022:	4b15      	ldr	r3, [pc, #84]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d024:	2200      	movs	r2, #0
 800d026:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800d028:	4b13      	ldr	r3, [pc, #76]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d02a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d02e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d030:	4b11      	ldr	r3, [pc, #68]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d032:	2200      	movs	r2, #0
 800d034:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d036:	4b10      	ldr	r3, [pc, #64]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d038:	2200      	movs	r2, #0
 800d03a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d03c:	4b0e      	ldr	r3, [pc, #56]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d03e:	2200      	movs	r2, #0
 800d040:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d042:	4b0d      	ldr	r3, [pc, #52]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d048:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d04a:	4b0b      	ldr	r3, [pc, #44]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d050:	4b09      	ldr	r3, [pc, #36]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d052:	2200      	movs	r2, #0
 800d054:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d056:	4b08      	ldr	r3, [pc, #32]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d058:	2200      	movs	r2, #0
 800d05a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800d05c:	4b06      	ldr	r3, [pc, #24]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d05e:	220a      	movs	r2, #10
 800d060:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d062:	4805      	ldr	r0, [pc, #20]	@ (800d078 <MX_SPI2_Init+0x60>)
 800d064:	f002 fb6e 	bl	800f744 <HAL_SPI_Init>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800d06e:	f000 f92b 	bl	800d2c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d072:	bf00      	nop
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	200002b8 	.word	0x200002b8
 800d07c:	40003800 	.word	0x40003800

0800d080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d084:	4b11      	ldr	r3, [pc, #68]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d086:	4a12      	ldr	r2, [pc, #72]	@ (800d0d0 <MX_USART2_UART_Init+0x50>)
 800d088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d08a:	4b10      	ldr	r3, [pc, #64]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d08c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d092:	4b0e      	ldr	r3, [pc, #56]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d094:	2200      	movs	r2, #0
 800d096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d098:	4b0c      	ldr	r3, [pc, #48]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d09e:	4b0b      	ldr	r3, [pc, #44]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d0a4:	4b09      	ldr	r3, [pc, #36]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d0a6:	220c      	movs	r2, #12
 800d0a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0aa:	4b08      	ldr	r3, [pc, #32]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0b0:	4b06      	ldr	r3, [pc, #24]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d0b6:	4805      	ldr	r0, [pc, #20]	@ (800d0cc <MX_USART2_UART_Init+0x4c>)
 800d0b8:	f003 fcfa 	bl	8010ab0 <HAL_UART_Init>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d0c2:	f000 f901 	bl	800d2c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d0c6:	bf00      	nop
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20000310 	.word	0x20000310
 800d0d0:	40004400 	.word	0x40004400

0800d0d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800d0d8:	4b11      	ldr	r3, [pc, #68]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d0da:	4a12      	ldr	r2, [pc, #72]	@ (800d124 <MX_USART3_UART_Init+0x50>)
 800d0dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800d0de:	4b10      	ldr	r3, [pc, #64]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d0e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d0e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d0f8:	4b09      	ldr	r3, [pc, #36]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d0fa:	220c      	movs	r2, #12
 800d0fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0fe:	4b08      	ldr	r3, [pc, #32]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d100:	2200      	movs	r2, #0
 800d102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d104:	4b06      	ldr	r3, [pc, #24]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d106:	2200      	movs	r2, #0
 800d108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d10a:	4805      	ldr	r0, [pc, #20]	@ (800d120 <MX_USART3_UART_Init+0x4c>)
 800d10c:	f003 fcd0 	bl	8010ab0 <HAL_UART_Init>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d116:	f000 f8d7 	bl	800d2c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800d11a:	bf00      	nop
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	20000358 	.word	0x20000358
 800d124:	40004800 	.word	0x40004800

0800d128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08a      	sub	sp, #40	@ 0x28
 800d12c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d12e:	f107 0314 	add.w	r3, r7, #20
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	605a      	str	r2, [r3, #4]
 800d138:	609a      	str	r2, [r3, #8]
 800d13a:	60da      	str	r2, [r3, #12]
 800d13c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d13e:	2300      	movs	r3, #0
 800d140:	613b      	str	r3, [r7, #16]
 800d142:	4b53      	ldr	r3, [pc, #332]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d146:	4a52      	ldr	r2, [pc, #328]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d14c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d14e:	4b50      	ldr	r3, [pc, #320]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d156:	613b      	str	r3, [r7, #16]
 800d158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d15a:	2300      	movs	r3, #0
 800d15c:	60fb      	str	r3, [r7, #12]
 800d15e:	4b4c      	ldr	r3, [pc, #304]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d162:	4a4b      	ldr	r2, [pc, #300]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d164:	f043 0304 	orr.w	r3, r3, #4
 800d168:	6313      	str	r3, [r2, #48]	@ 0x30
 800d16a:	4b49      	ldr	r3, [pc, #292]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d16c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d16e:	f003 0304 	and.w	r3, r3, #4
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d176:	2300      	movs	r3, #0
 800d178:	60bb      	str	r3, [r7, #8]
 800d17a:	4b45      	ldr	r3, [pc, #276]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d17e:	4a44      	ldr	r2, [pc, #272]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d180:	f043 0301 	orr.w	r3, r3, #1
 800d184:	6313      	str	r3, [r2, #48]	@ 0x30
 800d186:	4b42      	ldr	r3, [pc, #264]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	60bb      	str	r3, [r7, #8]
 800d190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d192:	2300      	movs	r3, #0
 800d194:	607b      	str	r3, [r7, #4]
 800d196:	4b3e      	ldr	r3, [pc, #248]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d19a:	4a3d      	ldr	r2, [pc, #244]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d19c:	f043 0302 	orr.w	r3, r3, #2
 800d1a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1a2:	4b3b      	ldr	r3, [pc, #236]	@ (800d290 <MX_GPIO_Init+0x168>)
 800d1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	607b      	str	r3, [r7, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2102      	movs	r1, #2
 800d1b2:	4838      	ldr	r0, [pc, #224]	@ (800d294 <MX_GPIO_Init+0x16c>)
 800d1b4:	f001 fc96 	bl	800eae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	211c      	movs	r1, #28
 800d1bc:	4836      	ldr	r0, [pc, #216]	@ (800d298 <MX_GPIO_Init+0x170>)
 800d1be:	f001 fc91 	bl	800eae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2112      	movs	r1, #18
 800d1c6:	4835      	ldr	r0, [pc, #212]	@ (800d29c <MX_GPIO_Init+0x174>)
 800d1c8:	f001 fc8c 	bl	800eae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d1d2:	4833      	ldr	r0, [pc, #204]	@ (800d2a0 <MX_GPIO_Init+0x178>)
 800d1d4:	f001 fc86 	bl	800eae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800d1d8:	2302      	movs	r3, #2
 800d1da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800d1e8:	f107 0314 	add.w	r3, r7, #20
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4829      	ldr	r0, [pc, #164]	@ (800d294 <MX_GPIO_Init+0x16c>)
 800d1f0:	f001 facc 	bl	800e78c <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4;
 800d1f4:	231c      	movs	r3, #28
 800d1f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d200:	2300      	movs	r3, #0
 800d202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d204:	f107 0314 	add.w	r3, r7, #20
 800d208:	4619      	mov	r1, r3
 800d20a:	4823      	ldr	r0, [pc, #140]	@ (800d298 <MX_GPIO_Init+0x170>)
 800d20c:	f001 fabe 	bl	800e78c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800d210:	2312      	movs	r3, #18
 800d212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d214:	2301      	movs	r3, #1
 800d216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d218:	2300      	movs	r3, #0
 800d21a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d21c:	2300      	movs	r3, #0
 800d21e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	4619      	mov	r1, r3
 800d226:	481d      	ldr	r0, [pc, #116]	@ (800d29c <MX_GPIO_Init+0x174>)
 800d228:	f001 fab0 	bl	800e78c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_LED4_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin;
 800d22c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d232:	2301      	movs	r3, #1
 800d234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d236:	2300      	movs	r3, #0
 800d238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d23a:	2300      	movs	r3, #0
 800d23c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED4_GPIO_Port, &GPIO_InitStruct);
 800d23e:	f107 0314 	add.w	r3, r7, #20
 800d242:	4619      	mov	r1, r3
 800d244:	4816      	ldr	r0, [pc, #88]	@ (800d2a0 <MX_GPIO_Init+0x178>)
 800d246:	f001 faa1 	bl	800e78c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800d24a:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800d24e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d250:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d256:	2302      	movs	r3, #2
 800d258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d25a:	f107 0314 	add.w	r3, r7, #20
 800d25e:	4619      	mov	r1, r3
 800d260:	480e      	ldr	r0, [pc, #56]	@ (800d29c <MX_GPIO_Init+0x174>)
 800d262:	f001 fa93 	bl	800e78c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800d266:	2200      	movs	r2, #0
 800d268:	2100      	movs	r1, #0
 800d26a:	2017      	movs	r0, #23
 800d26c:	f001 f9d2 	bl	800e614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d270:	2017      	movs	r0, #23
 800d272:	f001 f9eb 	bl	800e64c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d276:	2200      	movs	r2, #0
 800d278:	2100      	movs	r1, #0
 800d27a:	2028      	movs	r0, #40	@ 0x28
 800d27c:	f001 f9ca 	bl	800e614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d280:	2028      	movs	r0, #40	@ 0x28
 800d282:	f001 f9e3 	bl	800e64c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800d286:	bf00      	nop
 800d288:	3728      	adds	r7, #40	@ 0x28
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	40023800 	.word	0x40023800
 800d294:	40021c00 	.word	0x40021c00
 800d298:	40020800 	.word	0x40020800
 800d29c:	40020000 	.word	0x40020000
 800d2a0:	40020400 	.word	0x40020400

0800d2a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a04      	ldr	r2, [pc, #16]	@ (800d2c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d101      	bne.n	800d2ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800d2b6:	f001 f8b1 	bl	800e41c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	40010000 	.word	0x40010000

0800d2c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d2cc:	b672      	cpsid	i
}
 800d2ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d2d0:	bf00      	nop
 800d2d2:	e7fd      	b.n	800d2d0 <Error_Handler+0x8>

0800d2d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2da:	2300      	movs	r3, #0
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	4b10      	ldr	r3, [pc, #64]	@ (800d320 <HAL_MspInit+0x4c>)
 800d2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2e2:	4a0f      	ldr	r2, [pc, #60]	@ (800d320 <HAL_MspInit+0x4c>)
 800d2e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d2e8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d320 <HAL_MspInit+0x4c>)
 800d2ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d2f2:	607b      	str	r3, [r7, #4]
 800d2f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	603b      	str	r3, [r7, #0]
 800d2fa:	4b09      	ldr	r3, [pc, #36]	@ (800d320 <HAL_MspInit+0x4c>)
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2fe:	4a08      	ldr	r2, [pc, #32]	@ (800d320 <HAL_MspInit+0x4c>)
 800d300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d304:	6413      	str	r3, [r2, #64]	@ 0x40
 800d306:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <HAL_MspInit+0x4c>)
 800d308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d30a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d30e:	603b      	str	r3, [r7, #0]
 800d310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d312:	bf00      	nop
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	40023800 	.word	0x40023800

0800d324 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08c      	sub	sp, #48	@ 0x30
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d32c:	f107 031c 	add.w	r3, r7, #28
 800d330:	2200      	movs	r2, #0
 800d332:	601a      	str	r2, [r3, #0]
 800d334:	605a      	str	r2, [r3, #4]
 800d336:	609a      	str	r2, [r3, #8]
 800d338:	60da      	str	r2, [r3, #12]
 800d33a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a45      	ldr	r2, [pc, #276]	@ (800d458 <HAL_SPI_MspInit+0x134>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d12c      	bne.n	800d3a0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d346:	2300      	movs	r3, #0
 800d348:	61bb      	str	r3, [r7, #24]
 800d34a:	4b44      	ldr	r3, [pc, #272]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d34e:	4a43      	ldr	r2, [pc, #268]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d354:	6453      	str	r3, [r2, #68]	@ 0x44
 800d356:	4b41      	ldr	r3, [pc, #260]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d35a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d35e:	61bb      	str	r3, [r7, #24]
 800d360:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	4b3d      	ldr	r3, [pc, #244]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d36a:	4a3c      	ldr	r2, [pc, #240]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d36c:	f043 0301 	orr.w	r3, r3, #1
 800d370:	6313      	str	r3, [r2, #48]	@ 0x30
 800d372:	4b3a      	ldr	r3, [pc, #232]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d376:	f003 0301 	and.w	r3, r3, #1
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800d37e:	23a0      	movs	r3, #160	@ 0xa0
 800d380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d382:	2302      	movs	r3, #2
 800d384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d386:	2300      	movs	r3, #0
 800d388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d38a:	2303      	movs	r3, #3
 800d38c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d38e:	2305      	movs	r3, #5
 800d390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d392:	f107 031c 	add.w	r3, r7, #28
 800d396:	4619      	mov	r1, r3
 800d398:	4831      	ldr	r0, [pc, #196]	@ (800d460 <HAL_SPI_MspInit+0x13c>)
 800d39a:	f001 f9f7 	bl	800e78c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d39e:	e057      	b.n	800d450 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a2f      	ldr	r2, [pc, #188]	@ (800d464 <HAL_SPI_MspInit+0x140>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d152      	bne.n	800d450 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	613b      	str	r3, [r7, #16]
 800d3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d3b8:	6413      	str	r3, [r2, #64]	@ 0x40
 800d3ba:	4b28      	ldr	r3, [pc, #160]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3c2:	613b      	str	r3, [r7, #16]
 800d3c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	60fb      	str	r3, [r7, #12]
 800d3ca:	4b24      	ldr	r3, [pc, #144]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ce:	4a23      	ldr	r2, [pc, #140]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3d0:	f043 0304 	orr.w	r3, r3, #4
 800d3d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3d6:	4b21      	ldr	r3, [pc, #132]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3da:	f003 0304 	and.w	r3, r3, #4
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60bb      	str	r3, [r7, #8]
 800d3e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ea:	4a1c      	ldr	r2, [pc, #112]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3ec:	f043 0302 	orr.w	r3, r3, #2
 800d3f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d45c <HAL_SPI_MspInit+0x138>)
 800d3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3f6:	f003 0302 	and.w	r3, r3, #2
 800d3fa:	60bb      	str	r3, [r7, #8]
 800d3fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d3fe:	2302      	movs	r3, #2
 800d400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d402:	2302      	movs	r3, #2
 800d404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d406:	2300      	movs	r3, #0
 800d408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d40a:	2303      	movs	r3, #3
 800d40c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800d40e:	2307      	movs	r3, #7
 800d410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d412:	f107 031c 	add.w	r3, r7, #28
 800d416:	4619      	mov	r1, r3
 800d418:	4813      	ldr	r0, [pc, #76]	@ (800d468 <HAL_SPI_MspInit+0x144>)
 800d41a:	f001 f9b7 	bl	800e78c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d41e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d424:	2302      	movs	r3, #2
 800d426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d428:	2300      	movs	r3, #0
 800d42a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d42c:	2303      	movs	r3, #3
 800d42e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d430:	2305      	movs	r3, #5
 800d432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d434:	f107 031c 	add.w	r3, r7, #28
 800d438:	4619      	mov	r1, r3
 800d43a:	480c      	ldr	r0, [pc, #48]	@ (800d46c <HAL_SPI_MspInit+0x148>)
 800d43c:	f001 f9a6 	bl	800e78c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800d440:	2200      	movs	r2, #0
 800d442:	2105      	movs	r1, #5
 800d444:	2024      	movs	r0, #36	@ 0x24
 800d446:	f001 f8e5 	bl	800e614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800d44a:	2024      	movs	r0, #36	@ 0x24
 800d44c:	f001 f8fe 	bl	800e64c <HAL_NVIC_EnableIRQ>
}
 800d450:	bf00      	nop
 800d452:	3730      	adds	r7, #48	@ 0x30
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	40013000 	.word	0x40013000
 800d45c:	40023800 	.word	0x40023800
 800d460:	40020000 	.word	0x40020000
 800d464:	40003800 	.word	0x40003800
 800d468:	40020800 	.word	0x40020800
 800d46c:	40020400 	.word	0x40020400

0800d470 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08c      	sub	sp, #48	@ 0x30
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d478:	f107 031c 	add.w	r3, r7, #28
 800d47c:	2200      	movs	r2, #0
 800d47e:	601a      	str	r2, [r3, #0]
 800d480:	605a      	str	r2, [r3, #4]
 800d482:	609a      	str	r2, [r3, #8]
 800d484:	60da      	str	r2, [r3, #12]
 800d486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a45      	ldr	r2, [pc, #276]	@ (800d5a4 <HAL_UART_MspInit+0x134>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d12c      	bne.n	800d4ec <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d492:	2300      	movs	r3, #0
 800d494:	61bb      	str	r3, [r7, #24]
 800d496:	4b44      	ldr	r3, [pc, #272]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d49a:	4a43      	ldr	r2, [pc, #268]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d49c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4a0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d4a2:	4b41      	ldr	r3, [pc, #260]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4aa:	61bb      	str	r3, [r7, #24]
 800d4ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	4b3d      	ldr	r3, [pc, #244]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4b6:	4a3c      	ldr	r2, [pc, #240]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d4b8:	f043 0301 	orr.w	r3, r3, #1
 800d4bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4be:	4b3a      	ldr	r3, [pc, #232]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d4ca:	230c      	movs	r3, #12
 800d4cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d4da:	2307      	movs	r3, #7
 800d4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4de:	f107 031c 	add.w	r3, r7, #28
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4831      	ldr	r0, [pc, #196]	@ (800d5ac <HAL_UART_MspInit+0x13c>)
 800d4e6:	f001 f951 	bl	800e78c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800d4ea:	e057      	b.n	800d59c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a2f      	ldr	r2, [pc, #188]	@ (800d5b0 <HAL_UART_MspInit+0x140>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d152      	bne.n	800d59c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	613b      	str	r3, [r7, #16]
 800d4fa:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fe:	4a2a      	ldr	r2, [pc, #168]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d504:	6413      	str	r3, [r2, #64]	@ 0x40
 800d506:	4b28      	ldr	r3, [pc, #160]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d50a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d50e:	613b      	str	r3, [r7, #16]
 800d510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	4b24      	ldr	r3, [pc, #144]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d51a:	4a23      	ldr	r2, [pc, #140]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d51c:	f043 0304 	orr.w	r3, r3, #4
 800d520:	6313      	str	r3, [r2, #48]	@ 0x30
 800d522:	4b21      	ldr	r3, [pc, #132]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d526:	f003 0304 	and.w	r3, r3, #4
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d52e:	2300      	movs	r3, #0
 800d530:	60bb      	str	r3, [r7, #8]
 800d532:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d536:	4a1c      	ldr	r2, [pc, #112]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d538:	f043 0302 	orr.w	r3, r3, #2
 800d53c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d53e:	4b1a      	ldr	r3, [pc, #104]	@ (800d5a8 <HAL_UART_MspInit+0x138>)
 800d540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d542:	f003 0302 	and.w	r3, r3, #2
 800d546:	60bb      	str	r3, [r7, #8]
 800d548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d54a:	2320      	movs	r3, #32
 800d54c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d54e:	2302      	movs	r3, #2
 800d550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d552:	2300      	movs	r3, #0
 800d554:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d556:	2303      	movs	r3, #3
 800d558:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d55a:	2307      	movs	r3, #7
 800d55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d55e:	f107 031c 	add.w	r3, r7, #28
 800d562:	4619      	mov	r1, r3
 800d564:	4813      	ldr	r0, [pc, #76]	@ (800d5b4 <HAL_UART_MspInit+0x144>)
 800d566:	f001 f911 	bl	800e78c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d56e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d570:	2302      	movs	r3, #2
 800d572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d574:	2300      	movs	r3, #0
 800d576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d578:	2303      	movs	r3, #3
 800d57a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d57c:	2307      	movs	r3, #7
 800d57e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d580:	f107 031c 	add.w	r3, r7, #28
 800d584:	4619      	mov	r1, r3
 800d586:	480c      	ldr	r0, [pc, #48]	@ (800d5b8 <HAL_UART_MspInit+0x148>)
 800d588:	f001 f900 	bl	800e78c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800d58c:	2200      	movs	r2, #0
 800d58e:	2106      	movs	r1, #6
 800d590:	2027      	movs	r0, #39	@ 0x27
 800d592:	f001 f83f 	bl	800e614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d596:	2027      	movs	r0, #39	@ 0x27
 800d598:	f001 f858 	bl	800e64c <HAL_NVIC_EnableIRQ>
}
 800d59c:	bf00      	nop
 800d59e:	3730      	adds	r7, #48	@ 0x30
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	40004400 	.word	0x40004400
 800d5a8:	40023800 	.word	0x40023800
 800d5ac:	40020000 	.word	0x40020000
 800d5b0:	40004800 	.word	0x40004800
 800d5b4:	40020800 	.word	0x40020800
 800d5b8:	40020400 	.word	0x40020400

0800d5bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	@ 0x30
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	60bb      	str	r3, [r7, #8]
 800d5d0:	4b2f      	ldr	r3, [pc, #188]	@ (800d690 <HAL_InitTick+0xd4>)
 800d5d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5d4:	4a2e      	ldr	r2, [pc, #184]	@ (800d690 <HAL_InitTick+0xd4>)
 800d5d6:	f043 0301 	orr.w	r3, r3, #1
 800d5da:	6453      	str	r3, [r2, #68]	@ 0x44
 800d5dc:	4b2c      	ldr	r3, [pc, #176]	@ (800d690 <HAL_InitTick+0xd4>)
 800d5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	60bb      	str	r3, [r7, #8]
 800d5e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d5e8:	f107 020c 	add.w	r2, r7, #12
 800d5ec:	f107 0310 	add.w	r3, r7, #16
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f001 fc2c 	bl	800ee50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800d5f8:	f001 fc16 	bl	800ee28 <HAL_RCC_GetPCLK2Freq>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	4a23      	ldr	r2, [pc, #140]	@ (800d694 <HAL_InitTick+0xd8>)
 800d606:	fba2 2303 	umull	r2, r3, r2, r3
 800d60a:	0c9b      	lsrs	r3, r3, #18
 800d60c:	3b01      	subs	r3, #1
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800d610:	4b21      	ldr	r3, [pc, #132]	@ (800d698 <HAL_InitTick+0xdc>)
 800d612:	4a22      	ldr	r2, [pc, #136]	@ (800d69c <HAL_InitTick+0xe0>)
 800d614:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800d616:	4b20      	ldr	r3, [pc, #128]	@ (800d698 <HAL_InitTick+0xdc>)
 800d618:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800d61c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800d61e:	4a1e      	ldr	r2, [pc, #120]	@ (800d698 <HAL_InitTick+0xdc>)
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800d624:	4b1c      	ldr	r3, [pc, #112]	@ (800d698 <HAL_InitTick+0xdc>)
 800d626:	2200      	movs	r2, #0
 800d628:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d62a:	4b1b      	ldr	r3, [pc, #108]	@ (800d698 <HAL_InitTick+0xdc>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d630:	4b19      	ldr	r3, [pc, #100]	@ (800d698 <HAL_InitTick+0xdc>)
 800d632:	2200      	movs	r2, #0
 800d634:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800d636:	4818      	ldr	r0, [pc, #96]	@ (800d698 <HAL_InitTick+0xdc>)
 800d638:	f002 ff9f 	bl	801057a <HAL_TIM_Base_Init>
 800d63c:	4603      	mov	r3, r0
 800d63e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800d642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d646:	2b00      	cmp	r3, #0
 800d648:	d11b      	bne.n	800d682 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800d64a:	4813      	ldr	r0, [pc, #76]	@ (800d698 <HAL_InitTick+0xdc>)
 800d64c:	f002 ffee 	bl	801062c <HAL_TIM_Base_Start_IT>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800d656:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d111      	bne.n	800d682 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d65e:	2019      	movs	r0, #25
 800d660:	f000 fff4 	bl	800e64c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b0f      	cmp	r3, #15
 800d668:	d808      	bhi.n	800d67c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800d66a:	2200      	movs	r2, #0
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	2019      	movs	r0, #25
 800d670:	f000 ffd0 	bl	800e614 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d674:	4a0a      	ldr	r2, [pc, #40]	@ (800d6a0 <HAL_InitTick+0xe4>)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6013      	str	r3, [r2, #0]
 800d67a:	e002      	b.n	800d682 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800d682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d686:	4618      	mov	r0, r3
 800d688:	3730      	adds	r7, #48	@ 0x30
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	40023800 	.word	0x40023800
 800d694:	431bde83 	.word	0x431bde83
 800d698:	200003a0 	.word	0x200003a0
 800d69c:	40010000 	.word	0x40010000
 800d6a0:	20000024 	.word	0x20000024

0800d6a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d6a8:	bf00      	nop
 800d6aa:	e7fd      	b.n	800d6a8 <NMI_Handler+0x4>

0800d6ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d6b0:	bf00      	nop
 800d6b2:	e7fd      	b.n	800d6b0 <HardFault_Handler+0x4>

0800d6b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d6b8:	bf00      	nop
 800d6ba:	e7fd      	b.n	800d6b8 <MemManage_Handler+0x4>

0800d6bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d6c0:	bf00      	nop
 800d6c2:	e7fd      	b.n	800d6c0 <BusFault_Handler+0x4>

0800d6c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d6c8:	bf00      	nop
 800d6ca:	e7fd      	b.n	800d6c8 <UsageFault_Handler+0x4>

0800d6cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d6d0:	bf00      	nop
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800d6de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d6e2:	f001 fa33 	bl	800eb4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d6e6:	bf00      	nop
 800d6e8:	bd80      	pop	{r7, pc}
	...

0800d6ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d6f0:	4802      	ldr	r0, [pc, #8]	@ (800d6fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d6f2:	f003 f80b 	bl	801070c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d6f6:	bf00      	nop
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	200003a0 	.word	0x200003a0

0800d700 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d704:	4802      	ldr	r0, [pc, #8]	@ (800d710 <SPI2_IRQHandler+0x10>)
 800d706:	f002 fb11 	bl	800fd2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d70a:	bf00      	nop
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	200002b8 	.word	0x200002b8

0800d714 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d718:	4802      	ldr	r0, [pc, #8]	@ (800d724 <USART3_IRQHandler+0x10>)
 800d71a:	f003 fac9 	bl	8010cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d71e:	bf00      	nop
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000358 	.word	0x20000358

0800d728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800d72c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d730:	f001 fa0c 	bl	800eb4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800d734:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d738:	f001 fa08 	bl	800eb4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d73c:	bf00      	nop
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d740:	b480      	push	{r7}
 800d742:	af00      	add	r7, sp, #0
  return 1;
 800d744:	2301      	movs	r3, #1
}
 800d746:	4618      	mov	r0, r3
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <_kill>:

int _kill(int pid, int sig)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d75a:	f008 fa3d 	bl	8015bd8 <__errno>
 800d75e:	4603      	mov	r3, r0
 800d760:	2216      	movs	r2, #22
 800d762:	601a      	str	r2, [r3, #0]
  return -1;
 800d764:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <_exit>:

void _exit (int status)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d778:	f04f 31ff 	mov.w	r1, #4294967295
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff ffe7 	bl	800d750 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d782:	bf00      	nop
 800d784:	e7fd      	b.n	800d782 <_exit+0x12>

0800d786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b086      	sub	sp, #24
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	60f8      	str	r0, [r7, #12]
 800d78e:	60b9      	str	r1, [r7, #8]
 800d790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d792:	2300      	movs	r3, #0
 800d794:	617b      	str	r3, [r7, #20]
 800d796:	e00a      	b.n	800d7ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d798:	f3af 8000 	nop.w
 800d79c:	4601      	mov	r1, r0
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	60ba      	str	r2, [r7, #8]
 800d7a4:	b2ca      	uxtb	r2, r1
 800d7a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	617b      	str	r3, [r7, #20]
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	dbf0      	blt.n	800d798 <_read+0x12>
  }

  return len;
 800d7b6:	687b      	ldr	r3, [r7, #4]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3718      	adds	r7, #24
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	617b      	str	r3, [r7, #20]
 800d7d0:	e009      	b.n	800d7e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	60ba      	str	r2, [r7, #8]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7ff fb0a 	bl	800cdf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	617b      	str	r3, [r7, #20]
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	dbf1      	blt.n	800d7d2 <_write+0x12>
  }
  return len;
 800d7ee:	687b      	ldr	r3, [r7, #4]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <_close>:

int _close(int file)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d800:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d820:	605a      	str	r2, [r3, #4]
  return 0;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <_isatty>:

int _isatty(int file)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d838:	2301      	movs	r3, #1
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d846:	b480      	push	{r7}
 800d848:	b085      	sub	sp, #20
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	60f8      	str	r0, [r7, #12]
 800d84e:	60b9      	str	r1, [r7, #8]
 800d850:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d860:	b480      	push	{r7}
 800d862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d864:	4b07      	ldr	r3, [pc, #28]	@ (800d884 <SystemInit+0x24>)
 800d866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d86a:	4a06      	ldr	r2, [pc, #24]	@ (800d884 <SystemInit+0x24>)
 800d86c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800d874:	4b03      	ldr	r3, [pc, #12]	@ (800d884 <SystemInit+0x24>)
 800d876:	4a04      	ldr	r2, [pc, #16]	@ (800d888 <SystemInit+0x28>)
 800d878:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d87a:	bf00      	nop
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	e000ed00 	.word	0xe000ed00
 800d888:	08008000 	.word	0x08008000

0800d88c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d890:	f3bf 8f4f 	dsb	sy
}
 800d894:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d896:	4b06      	ldr	r3, [pc, #24]	@ (800d8b0 <__NVIC_SystemReset+0x24>)
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d89e:	4904      	ldr	r1, [pc, #16]	@ (800d8b0 <__NVIC_SystemReset+0x24>)
 800d8a0:	4b04      	ldr	r3, [pc, #16]	@ (800d8b4 <__NVIC_SystemReset+0x28>)
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d8a6:	f3bf 8f4f 	dsb	sy
}
 800d8aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d8ac:	bf00      	nop
 800d8ae:	e7fd      	b.n	800d8ac <__NVIC_SystemReset+0x20>
 800d8b0:	e000ed00 	.word	0xe000ed00
 800d8b4:	05fa0004 	.word	0x05fa0004

0800d8b8 <setup_freeRTOS>:

uint8_t spiRxBuffer[2];


void setup_freeRTOS(void)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af02      	add	r7, sp, #8
	spiQueue = xQueueCreate(10, sizeof(spiRxBuffer));
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2102      	movs	r1, #2
 800d8c2:	200a      	movs	r0, #10
 800d8c4:	f004 fa7e 	bl	8011dc4 <xQueueGenericCreate>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	4a3e      	ldr	r2, [pc, #248]	@ (800d9c4 <setup_freeRTOS+0x10c>)
 800d8cc:	6013      	str	r3, [r2, #0]
	configASSERT(spiQueue != NULL);
 800d8ce:	4b3d      	ldr	r3, [pc, #244]	@ (800d9c4 <setup_freeRTOS+0x10c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10b      	bne.n	800d8ee <setup_freeRTOS+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	e7fd      	b.n	800d8ea <setup_freeRTOS+0x32>

	HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	4935      	ldr	r1, [pc, #212]	@ (800d9c8 <setup_freeRTOS+0x110>)
 800d8f2:	4836      	ldr	r0, [pc, #216]	@ (800d9cc <setup_freeRTOS+0x114>)
 800d8f4:	f002 f8f4 	bl	800fae0 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	4935      	ldr	r1, [pc, #212]	@ (800d9d0 <setup_freeRTOS+0x118>)
 800d8fc:	4835      	ldr	r0, [pc, #212]	@ (800d9d4 <setup_freeRTOS+0x11c>)
 800d8fe:	f003 f9b2 	bl	8010c66 <HAL_UART_Receive_IT>


	status = xTaskCreate(SPI_handler, "SPIHandler", 512, NULL, 5, NULL);
 800d902:	2300      	movs	r3, #0
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	2305      	movs	r3, #5
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	2300      	movs	r3, #0
 800d90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d910:	4931      	ldr	r1, [pc, #196]	@ (800d9d8 <setup_freeRTOS+0x120>)
 800d912:	4832      	ldr	r0, [pc, #200]	@ (800d9dc <setup_freeRTOS+0x124>)
 800d914:	f005 f836 	bl	8012984 <xTaskCreate>
 800d918:	4603      	mov	r3, r0
 800d91a:	4a31      	ldr	r2, [pc, #196]	@ (800d9e0 <setup_freeRTOS+0x128>)
 800d91c:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800d91e:	4b30      	ldr	r3, [pc, #192]	@ (800d9e0 <setup_freeRTOS+0x128>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d00b      	beq.n	800d93e <setup_freeRTOS+0x86>
        __asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	60bb      	str	r3, [r7, #8]
    }
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	e7fd      	b.n	800d93a <setup_freeRTOS+0x82>

	status = xTaskCreate(UART_handler, "UARTHandler", 1024, NULL, 4, NULL);
 800d93e:	2300      	movs	r3, #0
 800d940:	9301      	str	r3, [sp, #4]
 800d942:	2304      	movs	r3, #4
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	2300      	movs	r3, #0
 800d948:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d94c:	4925      	ldr	r1, [pc, #148]	@ (800d9e4 <setup_freeRTOS+0x12c>)
 800d94e:	4826      	ldr	r0, [pc, #152]	@ (800d9e8 <setup_freeRTOS+0x130>)
 800d950:	f005 f818 	bl	8012984 <xTaskCreate>
 800d954:	4603      	mov	r3, r0
 800d956:	4a22      	ldr	r2, [pc, #136]	@ (800d9e0 <setup_freeRTOS+0x128>)
 800d958:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800d95a:	4b21      	ldr	r3, [pc, #132]	@ (800d9e0 <setup_freeRTOS+0x128>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d00b      	beq.n	800d97a <setup_freeRTOS+0xc2>
        __asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	607b      	str	r3, [r7, #4]
    }
 800d974:	bf00      	nop
 800d976:	bf00      	nop
 800d978:	e7fd      	b.n	800d976 <setup_freeRTOS+0xbe>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800d97a:	2300      	movs	r3, #0
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	2303      	movs	r3, #3
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	2300      	movs	r3, #0
 800d984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d988:	4918      	ldr	r1, [pc, #96]	@ (800d9ec <setup_freeRTOS+0x134>)
 800d98a:	4819      	ldr	r0, [pc, #100]	@ (800d9f0 <setup_freeRTOS+0x138>)
 800d98c:	f004 fffa 	bl	8012984 <xTaskCreate>
 800d990:	4603      	mov	r3, r0
 800d992:	4a13      	ldr	r2, [pc, #76]	@ (800d9e0 <setup_freeRTOS+0x128>)
 800d994:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800d996:	4b12      	ldr	r3, [pc, #72]	@ (800d9e0 <setup_freeRTOS+0x128>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d00b      	beq.n	800d9b6 <setup_freeRTOS+0xfe>
        __asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	603b      	str	r3, [r7, #0]
    }
 800d9b0:	bf00      	nop
 800d9b2:	bf00      	nop
 800d9b4:	e7fd      	b.n	800d9b2 <setup_freeRTOS+0xfa>

	vTaskStartScheduler();
 800d9b6:	f005 f961 	bl	8012c7c <vTaskStartScheduler>
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200003e8 	.word	0x200003e8
 800d9c8:	200004fc 	.word	0x200004fc
 800d9cc:	200002b8 	.word	0x200002b8
 800d9d0:	200004f8 	.word	0x200004f8
 800d9d4:	20000358 	.word	0x20000358
 800d9d8:	080183fc 	.word	0x080183fc
 800d9dc:	0800da05 	.word	0x0800da05
 800d9e0:	200003f0 	.word	0x200003f0
 800d9e4:	08018408 	.word	0x08018408
 800d9e8:	0800de2d 	.word	0x0800de2d
 800d9ec:	08018414 	.word	0x08018414
 800d9f0:	0800d9f5 	.word	0x0800d9f5

0800d9f4 <Display_Handler>:

void Display_Handler(void *param)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 800d9fc:	f7ff f9bc 	bl	800cd78 <Menu_Handler>
 800da00:	e7fc      	b.n	800d9fc <Display_Handler+0x8>
	...

0800da04 <SPI_handler>:
	}
}

void SPI_handler(void *param)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	@ 0x38
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
    uint8_t localSpiRxBuffer[3] = {0};
 800da0c:	f107 0308 	add.w	r3, r7, #8
 800da10:	2100      	movs	r1, #0
 800da12:	460a      	mov	r2, r1
 800da14:	801a      	strh	r2, [r3, #0]
 800da16:	460a      	mov	r2, r1
 800da18:	709a      	strb	r2, [r3, #2]
    uint8_t deviceState;
    GPIO_PinState state;
    int deviceIndex = -1;
 800da1a:	f04f 33ff 	mov.w	r3, #4294967295
 800da1e:	633b      	str	r3, [r7, #48]	@ 0x30

    while (1) {
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800da20:	4bac      	ldr	r3, [pc, #688]	@ (800dcd4 <SPI_handler+0x2d0>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f107 0108 	add.w	r1, r7, #8
 800da28:	f04f 32ff 	mov.w	r2, #4294967295
 800da2c:	4618      	mov	r0, r3
 800da2e:	f004 fc31 	bl	8012294 <xQueueReceive>
 800da32:	4603      	mov	r3, r0
 800da34:	2b01      	cmp	r3, #1
 800da36:	d1f3      	bne.n	800da20 <SPI_handler+0x1c>
        {
            printf("SPI Data Received: %s\n", localSpiRxBuffer);
 800da38:	f107 0308 	add.w	r3, r7, #8
 800da3c:	4619      	mov	r1, r3
 800da3e:	48a6      	ldr	r0, [pc, #664]	@ (800dcd8 <SPI_handler+0x2d4>)
 800da40:	f007 fe8c 	bl	801575c <iprintf>
            if (strcmp((char *)localSpiRxBuffer, "L1") == 0)
 800da44:	f107 0308 	add.w	r3, r7, #8
 800da48:	49a4      	ldr	r1, [pc, #656]	@ (800dcdc <SPI_handler+0x2d8>)
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fa fbe0 	bl	8008210 <strcmp>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d163      	bne.n	800db1e <SPI_handler+0x11a>
            {
            	if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800da56:	4ba2      	ldr	r3, [pc, #648]	@ (800dce0 <SPI_handler+0x2dc>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2164      	movs	r1, #100	@ 0x64
 800da5c:	4618      	mov	r0, r3
 800da5e:	f004 fcfb 	bl	8012458 <xQueueSemaphoreTake>
 800da62:	4603      	mov	r3, r0
 800da64:	2b01      	cmp	r3, #1
 800da66:	d122      	bne.n	800daae <SPI_handler+0xaa>
            	{
            		deviceIndex = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	633b      	str	r3, [r7, #48]	@ 0x30
            		HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800da6c:	2108      	movs	r1, #8
 800da6e:	489d      	ldr	r0, [pc, #628]	@ (800dce4 <SPI_handler+0x2e0>)
 800da70:	f001 f851 	bl	800eb16 <HAL_GPIO_TogglePin>
					state = HAL_GPIO_ReadPin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800da74:	2108      	movs	r1, #8
 800da76:	489b      	ldr	r0, [pc, #620]	@ (800dce4 <SPI_handler+0x2e0>)
 800da78:	f001 f81c 	bl	800eab4 <HAL_GPIO_ReadPin>
 800da7c:	4603      	mov	r3, r0
 800da7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800da82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da86:	2b01      	cmp	r3, #1
 800da88:	bf0c      	ite	eq
 800da8a:	2301      	moveq	r3, #1
 800da8c:	2300      	movne	r3, #0
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    global_device_states[deviceIndex] = deviceState;
 800da94:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800da98:	4993      	ldr	r1, [pc, #588]	@ (800dce8 <SPI_handler+0x2e4>)
 800da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    xSemaphoreGive(deviceStateMutex);
 800daa0:	4b8f      	ldr	r3, [pc, #572]	@ (800dce0 <SPI_handler+0x2dc>)
 800daa2:	6818      	ldr	r0, [r3, #0]
 800daa4:	2300      	movs	r3, #0
 800daa6:	2200      	movs	r2, #0
 800daa8:	2100      	movs	r1, #0
 800daaa:	f004 fa43 	bl	8011f34 <xQueueGenericSend>
            	}

                cJSON *jsonObj = cJSON_CreateObject();
 800daae:	f7fe fa73 	bl	800bf98 <cJSON_CreateObject>
 800dab2:	6138      	str	r0, [r7, #16]
				if (jsonObj != NULL)
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 819b 	beq.w	800ddf2 <SPI_handler+0x3ee>
				{
					cJSON_AddNumberToObject(jsonObj, "device1", deviceState);
 800dabc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fa fd4f 	bl	8008564 <__aeabi_ui2d>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	ec43 2b10 	vmov	d0, r2, r3
 800dace:	4987      	ldr	r1, [pc, #540]	@ (800dcec <SPI_handler+0x2e8>)
 800dad0:	6938      	ldr	r0, [r7, #16]
 800dad2:	f7fe f9f3 	bl	800bebc <cJSON_AddNumberToObject>
					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800dad6:	6938      	ldr	r0, [r7, #16]
 800dad8:	f7fd fb9e 	bl	800b218 <cJSON_PrintUnformatted>
 800dadc:	60f8      	str	r0, [r7, #12]
					if (jsonStr != NULL)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d018      	beq.n	800db16 <SPI_handler+0x112>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f7fa fb9d 	bl	8008224 <strlen>
 800daea:	4603      	mov	r3, r0
 800daec:	b29a      	uxth	r2, r3
 800daee:	f04f 33ff 	mov.w	r3, #4294967295
 800daf2:	68f9      	ldr	r1, [r7, #12]
 800daf4:	487e      	ldr	r0, [pc, #504]	@ (800dcf0 <SPI_handler+0x2ec>)
 800daf6:	f003 f82b 	bl	8010b50 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800dafa:	f04f 33ff 	mov.w	r3, #4294967295
 800dafe:	2201      	movs	r2, #1
 800db00:	497c      	ldr	r1, [pc, #496]	@ (800dcf4 <SPI_handler+0x2f0>)
 800db02:	487b      	ldr	r0, [pc, #492]	@ (800dcf0 <SPI_handler+0x2ec>)
 800db04:	f003 f824 	bl	8010b50 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800db08:	68f9      	ldr	r1, [r7, #12]
 800db0a:	487b      	ldr	r0, [pc, #492]	@ (800dcf8 <SPI_handler+0x2f4>)
 800db0c:	f007 fe26 	bl	801575c <iprintf>
						free(jsonStr);
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f006 fe67 	bl	80147e4 <free>
					}

					cJSON_Delete(jsonObj);
 800db16:	6938      	ldr	r0, [r7, #16]
 800db18:	f7fc fad0 	bl	800a0bc <cJSON_Delete>
 800db1c:	e169      	b.n	800ddf2 <SPI_handler+0x3ee>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L2") == 0)
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	4976      	ldr	r1, [pc, #472]	@ (800dcfc <SPI_handler+0x2f8>)
 800db24:	4618      	mov	r0, r3
 800db26:	f7fa fb73 	bl	8008210 <strcmp>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d163      	bne.n	800dbf8 <SPI_handler+0x1f4>
            {
            	if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800db30:	4b6b      	ldr	r3, [pc, #428]	@ (800dce0 <SPI_handler+0x2dc>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2164      	movs	r1, #100	@ 0x64
 800db36:	4618      	mov	r0, r3
 800db38:	f004 fc8e 	bl	8012458 <xQueueSemaphoreTake>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d122      	bne.n	800db88 <SPI_handler+0x184>
				{
					deviceIndex = 1;
 800db42:	2301      	movs	r3, #1
 800db44:	633b      	str	r3, [r7, #48]	@ 0x30
					HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800db46:	2104      	movs	r1, #4
 800db48:	4866      	ldr	r0, [pc, #408]	@ (800dce4 <SPI_handler+0x2e0>)
 800db4a:	f000 ffe4 	bl	800eb16 <HAL_GPIO_TogglePin>
					state = HAL_GPIO_ReadPin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800db4e:	2104      	movs	r1, #4
 800db50:	4864      	ldr	r0, [pc, #400]	@ (800dce4 <SPI_handler+0x2e0>)
 800db52:	f000 ffaf 	bl	800eab4 <HAL_GPIO_ReadPin>
 800db56:	4603      	mov	r3, r0
 800db58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800db5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800db60:	2b01      	cmp	r3, #1
 800db62:	bf0c      	ite	eq
 800db64:	2301      	moveq	r3, #1
 800db66:	2300      	movne	r3, #0
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					global_device_states[deviceIndex] = deviceState;
 800db6e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800db72:	495d      	ldr	r1, [pc, #372]	@ (800dce8 <SPI_handler+0x2e4>)
 800db74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					xSemaphoreGive(deviceStateMutex);
 800db7a:	4b59      	ldr	r3, [pc, #356]	@ (800dce0 <SPI_handler+0x2dc>)
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	2300      	movs	r3, #0
 800db80:	2200      	movs	r2, #0
 800db82:	2100      	movs	r1, #0
 800db84:	f004 f9d6 	bl	8011f34 <xQueueGenericSend>
				}

				cJSON *jsonObj = cJSON_CreateObject();
 800db88:	f7fe fa06 	bl	800bf98 <cJSON_CreateObject>
 800db8c:	61b8      	str	r0, [r7, #24]
				if (jsonObj != NULL)
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 812e 	beq.w	800ddf2 <SPI_handler+0x3ee>
				{
					cJSON_AddNumberToObject(jsonObj, "device2", deviceState);
 800db96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fa fce2 	bl	8008564 <__aeabi_ui2d>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	ec43 2b10 	vmov	d0, r2, r3
 800dba8:	4955      	ldr	r1, [pc, #340]	@ (800dd00 <SPI_handler+0x2fc>)
 800dbaa:	69b8      	ldr	r0, [r7, #24]
 800dbac:	f7fe f986 	bl	800bebc <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800dbb0:	69b8      	ldr	r0, [r7, #24]
 800dbb2:	f7fd fb31 	bl	800b218 <cJSON_PrintUnformatted>
 800dbb6:	6178      	str	r0, [r7, #20]
					if (jsonStr != NULL)
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d018      	beq.n	800dbf0 <SPI_handler+0x1ec>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800dbbe:	6978      	ldr	r0, [r7, #20]
 800dbc0:	f7fa fb30 	bl	8008224 <strlen>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbcc:	6979      	ldr	r1, [r7, #20]
 800dbce:	4848      	ldr	r0, [pc, #288]	@ (800dcf0 <SPI_handler+0x2ec>)
 800dbd0:	f002 ffbe 	bl	8010b50 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800dbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd8:	2201      	movs	r2, #1
 800dbda:	4946      	ldr	r1, [pc, #280]	@ (800dcf4 <SPI_handler+0x2f0>)
 800dbdc:	4844      	ldr	r0, [pc, #272]	@ (800dcf0 <SPI_handler+0x2ec>)
 800dbde:	f002 ffb7 	bl	8010b50 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800dbe2:	6979      	ldr	r1, [r7, #20]
 800dbe4:	4844      	ldr	r0, [pc, #272]	@ (800dcf8 <SPI_handler+0x2f4>)
 800dbe6:	f007 fdb9 	bl	801575c <iprintf>
						free(jsonStr);
 800dbea:	6978      	ldr	r0, [r7, #20]
 800dbec:	f006 fdfa 	bl	80147e4 <free>
					}

					cJSON_Delete(jsonObj);
 800dbf0:	69b8      	ldr	r0, [r7, #24]
 800dbf2:	f7fc fa63 	bl	800a0bc <cJSON_Delete>
 800dbf6:	e0fc      	b.n	800ddf2 <SPI_handler+0x3ee>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L3") == 0)
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	4941      	ldr	r1, [pc, #260]	@ (800dd04 <SPI_handler+0x300>)
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fa fb06 	bl	8008210 <strcmp>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f040 8082 	bne.w	800dd10 <SPI_handler+0x30c>
            {
            	if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800dc0c:	4b34      	ldr	r3, [pc, #208]	@ (800dce0 <SPI_handler+0x2dc>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2164      	movs	r1, #100	@ 0x64
 800dc12:	4618      	mov	r0, r3
 800dc14:	f004 fc20 	bl	8012458 <xQueueSemaphoreTake>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d122      	bne.n	800dc64 <SPI_handler+0x260>
				{
					deviceIndex = 2;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	633b      	str	r3, [r7, #48]	@ 0x30
					HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800dc22:	2102      	movs	r1, #2
 800dc24:	4838      	ldr	r0, [pc, #224]	@ (800dd08 <SPI_handler+0x304>)
 800dc26:	f000 ff76 	bl	800eb16 <HAL_GPIO_TogglePin>
					state = HAL_GPIO_ReadPin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800dc2a:	2102      	movs	r1, #2
 800dc2c:	4836      	ldr	r0, [pc, #216]	@ (800dd08 <SPI_handler+0x304>)
 800dc2e:	f000 ff41 	bl	800eab4 <HAL_GPIO_ReadPin>
 800dc32:	4603      	mov	r3, r0
 800dc34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800dc38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	bf0c      	ite	eq
 800dc40:	2301      	moveq	r3, #1
 800dc42:	2300      	movne	r3, #0
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					global_device_states[deviceIndex] = deviceState;
 800dc4a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dc4e:	4926      	ldr	r1, [pc, #152]	@ (800dce8 <SPI_handler+0x2e4>)
 800dc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					xSemaphoreGive(deviceStateMutex);
 800dc56:	4b22      	ldr	r3, [pc, #136]	@ (800dce0 <SPI_handler+0x2dc>)
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2100      	movs	r1, #0
 800dc60:	f004 f968 	bl	8011f34 <xQueueGenericSend>
				}

				cJSON *jsonObj = cJSON_CreateObject();
 800dc64:	f7fe f998 	bl	800bf98 <cJSON_CreateObject>
 800dc68:	6238      	str	r0, [r7, #32]
				if (jsonObj != NULL)
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 80c0 	beq.w	800ddf2 <SPI_handler+0x3ee>
				{
					cJSON_AddNumberToObject(jsonObj, "device3", deviceState);
 800dc72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fa fc74 	bl	8008564 <__aeabi_ui2d>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	ec43 2b10 	vmov	d0, r2, r3
 800dc84:	4921      	ldr	r1, [pc, #132]	@ (800dd0c <SPI_handler+0x308>)
 800dc86:	6a38      	ldr	r0, [r7, #32]
 800dc88:	f7fe f918 	bl	800bebc <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800dc8c:	6a38      	ldr	r0, [r7, #32]
 800dc8e:	f7fd fac3 	bl	800b218 <cJSON_PrintUnformatted>
 800dc92:	61f8      	str	r0, [r7, #28]
					if (jsonStr != NULL)
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d018      	beq.n	800dccc <SPI_handler+0x2c8>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800dc9a:	69f8      	ldr	r0, [r7, #28]
 800dc9c:	f7fa fac2 	bl	8008224 <strlen>
 800dca0:	4603      	mov	r3, r0
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	f04f 33ff 	mov.w	r3, #4294967295
 800dca8:	69f9      	ldr	r1, [r7, #28]
 800dcaa:	4811      	ldr	r0, [pc, #68]	@ (800dcf0 <SPI_handler+0x2ec>)
 800dcac:	f002 ff50 	bl	8010b50 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800dcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	490f      	ldr	r1, [pc, #60]	@ (800dcf4 <SPI_handler+0x2f0>)
 800dcb8:	480d      	ldr	r0, [pc, #52]	@ (800dcf0 <SPI_handler+0x2ec>)
 800dcba:	f002 ff49 	bl	8010b50 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800dcbe:	69f9      	ldr	r1, [r7, #28]
 800dcc0:	480d      	ldr	r0, [pc, #52]	@ (800dcf8 <SPI_handler+0x2f4>)
 800dcc2:	f007 fd4b 	bl	801575c <iprintf>
						free(jsonStr);
 800dcc6:	69f8      	ldr	r0, [r7, #28]
 800dcc8:	f006 fd8c 	bl	80147e4 <free>
					}

					cJSON_Delete(jsonObj);
 800dccc:	6a38      	ldr	r0, [r7, #32]
 800dcce:	f7fc f9f5 	bl	800a0bc <cJSON_Delete>
 800dcd2:	e08e      	b.n	800ddf2 <SPI_handler+0x3ee>
 800dcd4:	200003e8 	.word	0x200003e8
 800dcd8:	08018424 	.word	0x08018424
 800dcdc:	0801843c 	.word	0x0801843c
 800dce0:	200003ec 	.word	0x200003ec
 800dce4:	40020800 	.word	0x40020800
 800dce8:	20000240 	.word	0x20000240
 800dcec:	08018440 	.word	0x08018440
 800dcf0:	20000358 	.word	0x20000358
 800dcf4:	08018448 	.word	0x08018448
 800dcf8:	0801844c 	.word	0x0801844c
 800dcfc:	08018464 	.word	0x08018464
 800dd00:	08018468 	.word	0x08018468
 800dd04:	08018470 	.word	0x08018470
 800dd08:	40021c00 	.word	0x40021c00
 800dd0c:	08018474 	.word	0x08018474
				}
			}
            else if(strcmp((char *)localSpiRxBuffer, "L4") == 0)
 800dd10:	f107 0308 	add.w	r3, r7, #8
 800dd14:	493c      	ldr	r1, [pc, #240]	@ (800de08 <SPI_handler+0x404>)
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fa fa7a 	bl	8008210 <strcmp>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d164      	bne.n	800ddec <SPI_handler+0x3e8>
            {
            	if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800dd22:	4b3a      	ldr	r3, [pc, #232]	@ (800de0c <SPI_handler+0x408>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2164      	movs	r1, #100	@ 0x64
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f004 fb95 	bl	8012458 <xQueueSemaphoreTake>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d124      	bne.n	800dd7e <SPI_handler+0x37a>
				{
					deviceIndex = 3;
 800dd34:	2303      	movs	r3, #3
 800dd36:	633b      	str	r3, [r7, #48]	@ 0x30
					HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800dd38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dd3c:	4834      	ldr	r0, [pc, #208]	@ (800de10 <SPI_handler+0x40c>)
 800dd3e:	f000 feea 	bl	800eb16 <HAL_GPIO_TogglePin>
					state = HAL_GPIO_ReadPin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800dd42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dd46:	4832      	ldr	r0, [pc, #200]	@ (800de10 <SPI_handler+0x40c>)
 800dd48:	f000 feb4 	bl	800eab4 <HAL_GPIO_ReadPin>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800dd52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	bf0c      	ite	eq
 800dd5a:	2301      	moveq	r3, #1
 800dd5c:	2300      	movne	r3, #0
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					global_device_states[deviceIndex] = deviceState;
 800dd64:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dd68:	492a      	ldr	r1, [pc, #168]	@ (800de14 <SPI_handler+0x410>)
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					xSemaphoreGive(deviceStateMutex);
 800dd70:	4b26      	ldr	r3, [pc, #152]	@ (800de0c <SPI_handler+0x408>)
 800dd72:	6818      	ldr	r0, [r3, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	2200      	movs	r2, #0
 800dd78:	2100      	movs	r1, #0
 800dd7a:	f004 f8db 	bl	8011f34 <xQueueGenericSend>
				}

				cJSON *jsonObj = cJSON_CreateObject();
 800dd7e:	f7fe f90b 	bl	800bf98 <cJSON_CreateObject>
 800dd82:	62b8      	str	r0, [r7, #40]	@ 0x28
				if (jsonObj != NULL)
 800dd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d033      	beq.n	800ddf2 <SPI_handler+0x3ee>
				{
					cJSON_AddNumberToObject(jsonObj, "device4", deviceState);
 800dd8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fa fbe8 	bl	8008564 <__aeabi_ui2d>
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	ec43 2b10 	vmov	d0, r2, r3
 800dd9c:	491e      	ldr	r1, [pc, #120]	@ (800de18 <SPI_handler+0x414>)
 800dd9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dda0:	f7fe f88c 	bl	800bebc <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800dda4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dda6:	f7fd fa37 	bl	800b218 <cJSON_PrintUnformatted>
 800ddaa:	6278      	str	r0, [r7, #36]	@ 0x24
					if (jsonStr != NULL)
 800ddac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d018      	beq.n	800dde4 <SPI_handler+0x3e0>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800ddb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddb4:	f7fa fa36 	bl	8008224 <strlen>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddc2:	4816      	ldr	r0, [pc, #88]	@ (800de1c <SPI_handler+0x418>)
 800ddc4:	f002 fec4 	bl	8010b50 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddcc:	2201      	movs	r2, #1
 800ddce:	4914      	ldr	r1, [pc, #80]	@ (800de20 <SPI_handler+0x41c>)
 800ddd0:	4812      	ldr	r0, [pc, #72]	@ (800de1c <SPI_handler+0x418>)
 800ddd2:	f002 febd 	bl	8010b50 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800ddd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddd8:	4812      	ldr	r0, [pc, #72]	@ (800de24 <SPI_handler+0x420>)
 800ddda:	f007 fcbf 	bl	801575c <iprintf>
						free(jsonStr);
 800ddde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dde0:	f006 fd00 	bl	80147e4 <free>
					}

					cJSON_Delete(jsonObj);
 800dde4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dde6:	f7fc f969 	bl	800a0bc <cJSON_Delete>
 800ddea:	e002      	b.n	800ddf2 <SPI_handler+0x3ee>
				}
			}
            else
            {
            	printf("junk data received on SPI\r\n");
 800ddec:	480e      	ldr	r0, [pc, #56]	@ (800de28 <SPI_handler+0x424>)
 800ddee:	f007 fd1d 	bl	801582c <puts>
            }
            memset(localSpiRxBuffer, 0, sizeof(localSpiRxBuffer));
 800ddf2:	f107 0308 	add.w	r3, r7, #8
 800ddf6:	2203      	movs	r2, #3
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f007 fe7c 	bl	8015af8 <memset>
            updateToDisplayMenu();
 800de00:	f000 fa98 	bl	800e334 <updateToDisplayMenu>
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800de04:	e60c      	b.n	800da20 <SPI_handler+0x1c>
 800de06:	bf00      	nop
 800de08:	0801847c 	.word	0x0801847c
 800de0c:	200003ec 	.word	0x200003ec
 800de10:	40020400 	.word	0x40020400
 800de14:	20000240 	.word	0x20000240
 800de18:	08018480 	.word	0x08018480
 800de1c:	20000358 	.word	0x20000358
 800de20:	08018448 	.word	0x08018448
 800de24:	0801844c 	.word	0x0801844c
 800de28:	08018488 	.word	0x08018488

0800de2c <UART_handler>:
        }
    }
}

void UART_handler(void *param)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b0b9      	sub	sp, #228	@ 0xe4
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[128];
    uint8_t index = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    bool collecting = false;
 800de3a:	2300      	movs	r3, #0
 800de3c:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde

    while (1)
    {
        if (uartHead != uartTail)
 800de40:	4bb7      	ldr	r3, [pc, #732]	@ (800e120 <UART_handler+0x2f4>)
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	b29a      	uxth	r2, r3
 800de46:	4bb7      	ldr	r3, [pc, #732]	@ (800e124 <UART_handler+0x2f8>)
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	429a      	cmp	r2, r3
 800de4e:	f000 81de 	beq.w	800e20e <UART_handler+0x3e2>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800de52:	4bb4      	ldr	r3, [pc, #720]	@ (800e124 <UART_handler+0x2f8>)
 800de54:	881b      	ldrh	r3, [r3, #0]
 800de56:	b29b      	uxth	r3, r3
 800de58:	461a      	mov	r2, r3
 800de5a:	4bb3      	ldr	r3, [pc, #716]	@ (800e128 <UART_handler+0x2fc>)
 800de5c:	5c9b      	ldrb	r3, [r3, r2]
 800de5e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800de62:	4bb0      	ldr	r3, [pc, #704]	@ (800e124 <UART_handler+0x2f8>)
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	b29b      	uxth	r3, r3
 800de68:	3301      	adds	r3, #1
 800de6a:	425a      	negs	r2, r3
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	bf58      	it	pl
 800de72:	4253      	negpl	r3, r2
 800de74:	b29a      	uxth	r2, r3
 800de76:	4bab      	ldr	r3, [pc, #684]	@ (800e124 <UART_handler+0x2f8>)
 800de78:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800de7a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800de7e:	2b7b      	cmp	r3, #123	@ 0x7b
 800de80:	d111      	bne.n	800dea6 <UART_handler+0x7a>
            {
                collecting = true;
 800de82:	2301      	movs	r3, #1
 800de84:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
                index = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
                jsonBuffer[index++] = byte;
 800de8e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	f887 20df 	strb.w	r2, [r7, #223]	@ 0xdf
 800de98:	33e0      	adds	r3, #224	@ 0xe0
 800de9a:	443b      	add	r3, r7
 800de9c:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 800dea0:	f803 2cb0 	strb.w	r2, [r3, #-176]
 800dea4:	e7cc      	b.n	800de40 <UART_handler+0x14>
            }
            else if (collecting)
 800dea6:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 81a8 	beq.w	800e200 <UART_handler+0x3d4>
            {
                if (index < sizeof(jsonBuffer) - 1)
 800deb0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800deb4:	2b7e      	cmp	r3, #126	@ 0x7e
 800deb6:	f200 819c 	bhi.w	800e1f2 <UART_handler+0x3c6>
                {
                    jsonBuffer[index++] = byte;
 800deba:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800debe:	1c5a      	adds	r2, r3, #1
 800dec0:	f887 20df 	strb.w	r2, [r7, #223]	@ 0xdf
 800dec4:	33e0      	adds	r3, #224	@ 0xe0
 800dec6:	443b      	add	r3, r7
 800dec8:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 800decc:	f803 2cb0 	strb.w	r2, [r3, #-176]

                    if (byte == '}')
 800ded0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800ded4:	2b7d      	cmp	r3, #125	@ 0x7d
 800ded6:	d1b3      	bne.n	800de40 <UART_handler+0x14>
                    {
                        jsonBuffer[index] = '\0';
 800ded8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800dedc:	33e0      	adds	r3, #224	@ 0xe0
 800dede:	443b      	add	r3, r7
 800dee0:	2200      	movs	r2, #0
 800dee2:	f803 2cb0 	strb.w	r2, [r3, #-176]
                        printf("JSON received: %s\n", jsonBuffer);
 800dee6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800deea:	4619      	mov	r1, r3
 800deec:	488f      	ldr	r0, [pc, #572]	@ (800e12c <UART_handler+0x300>)
 800deee:	f007 fc35 	bl	801575c <iprintf>

                        cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800def2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800def6:	4618      	mov	r0, r3
 800def8:	f7fd f8f6 	bl	800b0e8 <cJSON_Parse>
 800defc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
                        if (json)
 800df00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 816a 	beq.w	800e1de <UART_handler+0x3b2>
                        {
                        	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800df0a:	4b89      	ldr	r3, [pc, #548]	@ (800e130 <UART_handler+0x304>)
 800df0c:	f107 0420 	add.w	r4, r7, #32
 800df10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							GPIO_TypeDef* ports[] = {TOUCH_LED1_GPIO_Port, TOUCH_LED2_GPIO_Port, TOUCH_LED3_GPIO_Port, TOUCH_LED4_GPIO_Port};
 800df16:	4b87      	ldr	r3, [pc, #540]	@ (800e134 <UART_handler+0x308>)
 800df18:	f107 0410 	add.w	r4, r7, #16
 800df1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							uint16_t pins[] = {TOUCH_LED1_Pin, TOUCH_LED2_Pin, TOUCH_LED3_Pin, TOUCH_LED4_Pin};
 800df22:	4a85      	ldr	r2, [pc, #532]	@ (800e138 <UART_handler+0x30c>)
 800df24:	f107 0308 	add.w	r3, r7, #8
 800df28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df2c:	e883 0003 	stmia.w	r3, {r0, r1}

                        	cJSON *getCurrentStatus = cJSON_GetObjectItem(json, "request");
 800df30:	4982      	ldr	r1, [pc, #520]	@ (800e13c <UART_handler+0x310>)
 800df32:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800df36:	f7fd ff0b 	bl	800bd50 <cJSON_GetObjectItem>
 800df3a:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
                        	if(strcmp(getCurrentStatus->valuestring, "getCurrentStatus") == 0)
 800df3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	497e      	ldr	r1, [pc, #504]	@ (800e140 <UART_handler+0x314>)
 800df46:	4618      	mov	r0, r3
 800df48:	f7fa f962 	bl	8008210 <strcmp>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d15f      	bne.n	800e012 <UART_handler+0x1e6>
                        	{
                        		cJSON *resp = cJSON_CreateObject();
 800df52:	f7fe f821 	bl	800bf98 <cJSON_CreateObject>
 800df56:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

                        		if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800df5a:	4b7a      	ldr	r3, [pc, #488]	@ (800e144 <UART_handler+0x318>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2164      	movs	r1, #100	@ 0x64
 800df60:	4618      	mov	r0, r3
 800df62:	f004 fa79 	bl	8012458 <xQueueSemaphoreTake>
 800df66:	4603      	mov	r3, r0
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d12b      	bne.n	800dfc4 <UART_handler+0x198>
									for (int i = 0; i < 4; i++)
 800df6c:	2300      	movs	r3, #0
 800df6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df72:	e01c      	b.n	800dfae <UART_handler+0x182>
									{
										cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800df74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	33e0      	adds	r3, #224	@ 0xe0
 800df7c:	443b      	add	r3, r7
 800df7e:	f853 4cc0 	ldr.w	r4, [r3, #-192]
 800df82:	4a71      	ldr	r2, [pc, #452]	@ (800e148 <UART_handler+0x31c>)
 800df84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fa faf9 	bl	8008584 <__aeabi_i2d>
 800df92:	4602      	mov	r2, r0
 800df94:	460b      	mov	r3, r1
 800df96:	ec43 2b10 	vmov	d0, r2, r3
 800df9a:	4621      	mov	r1, r4
 800df9c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800dfa0:	f7fd ff8c 	bl	800bebc <cJSON_AddNumberToObject>
									for (int i = 0; i < 4; i++)
 800dfa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfb2:	2b03      	cmp	r3, #3
 800dfb4:	ddde      	ble.n	800df74 <UART_handler+0x148>
									}
									xSemaphoreGive(deviceStateMutex);
 800dfb6:	4b63      	ldr	r3, [pc, #396]	@ (800e144 <UART_handler+0x318>)
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	f003 ffb8 	bl	8011f34 <xQueueGenericSend>
								}

								char *respStr = cJSON_PrintUnformatted(resp);
 800dfc4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800dfc8:	f7fd f926 	bl	800b218 <cJSON_PrintUnformatted>
 800dfcc:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
								if (respStr)
 800dfd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d017      	beq.n	800e008 <UART_handler+0x1dc>
								{
									HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800dfd8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800dfdc:	f7fa f922 	bl	8008224 <strlen>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800dfec:	4857      	ldr	r0, [pc, #348]	@ (800e14c <UART_handler+0x320>)
 800dfee:	f002 fdaf 	bl	8010b50 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800dff2:	f04f 33ff 	mov.w	r3, #4294967295
 800dff6:	2201      	movs	r2, #1
 800dff8:	4955      	ldr	r1, [pc, #340]	@ (800e150 <UART_handler+0x324>)
 800dffa:	4854      	ldr	r0, [pc, #336]	@ (800e14c <UART_handler+0x320>)
 800dffc:	f002 fda8 	bl	8010b50 <HAL_UART_Transmit>
									free(respStr);
 800e000:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800e004:	f006 fbee 	bl	80147e4 <free>
								}

								cJSON_Delete(resp);
 800e008:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800e00c:	f7fc f856 	bl	800a0bc <cJSON_Delete>
 800e010:	e0e0      	b.n	800e1d4 <UART_handler+0x3a8>
                        	}
                        	else
                        	{
                        		if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800e012:	4b4c      	ldr	r3, [pc, #304]	@ (800e144 <UART_handler+0x318>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2164      	movs	r1, #100	@ 0x64
 800e018:	4618      	mov	r0, r3
 800e01a:	f004 fa1d 	bl	8012458 <xQueueSemaphoreTake>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b01      	cmp	r3, #1
 800e022:	f040 80d7 	bne.w	800e1d4 <UART_handler+0x3a8>
                        		{
                        			cJSON *resp = cJSON_CreateObject();
 800e026:	f7fd ffb7 	bl	800bf98 <cJSON_CreateObject>
 800e02a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
									for (int i = 0; i < 4; i++)
 800e02e:	2300      	movs	r3, #0
 800e030:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e034:	e09a      	b.n	800e16c <UART_handler+0x340>
									{
										cJSON *item = cJSON_GetObjectItem(json, devices[i]);
 800e036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	33e0      	adds	r3, #224	@ 0xe0
 800e03e:	443b      	add	r3, r7
 800e040:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800e044:	4619      	mov	r1, r3
 800e046:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800e04a:	f7fd fe81 	bl	800bd50 <cJSON_GetObjectItem>
 800e04e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
										if (cJSON_IsNumber(item))
 800e052:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800e056:	f7fd ffb3 	bl	800bfc0 <cJSON_IsNumber>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 8080 	beq.w	800e162 <UART_handler+0x336>
										{
											HAL_GPIO_WritePin(ports[i], pins[i], item->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800e062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	33e0      	adds	r3, #224	@ 0xe0
 800e06a:	443b      	add	r3, r7
 800e06c:	f853 0cd0 	ldr.w	r0, [r3, #-208]
 800e070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	33e0      	adds	r3, #224	@ 0xe0
 800e078:	443b      	add	r3, r7
 800e07a:	f833 1cd8 	ldrh.w	r1, [r3, #-216]
 800e07e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	bf14      	ite	ne
 800e088:	2301      	movne	r3, #1
 800e08a:	2300      	moveq	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	461a      	mov	r2, r3
 800e090:	f000 fd28 	bl	800eae4 <HAL_GPIO_WritePin>
											GPIO_PinState state = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800e094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	33e0      	adds	r3, #224	@ 0xe0
 800e09c:	443b      	add	r3, r7
 800e09e:	f853 2cd0 	ldr.w	r2, [r3, #-208]
 800e0a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	33e0      	adds	r3, #224	@ 0xe0
 800e0aa:	443b      	add	r3, r7
 800e0ac:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	f000 fcfe 	bl	800eab4 <HAL_GPIO_ReadPin>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
											global_device_states[i] = (state == GPIO_PIN_SET) ? 1 : 0;
 800e0be:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	bf0c      	ite	eq
 800e0c6:	2301      	moveq	r3, #1
 800e0c8:	2300      	movne	r3, #0
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4a1e      	ldr	r2, [pc, #120]	@ (800e148 <UART_handler+0x31c>)
 800e0d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
											cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800e0d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	33e0      	adds	r3, #224	@ 0xe0
 800e0e0:	443b      	add	r3, r7
 800e0e2:	f853 4cc0 	ldr.w	r4, [r3, #-192]
 800e0e6:	4a18      	ldr	r2, [pc, #96]	@ (800e148 <UART_handler+0x31c>)
 800e0e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fa fa47 	bl	8008584 <__aeabi_i2d>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	ec43 2b10 	vmov	d0, r2, r3
 800e0fe:	4621      	mov	r1, r4
 800e100:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800e104:	f7fd feda 	bl	800bebc <cJSON_AddNumberToObject>
											printf("UART: Device %d set to %s\n", i + 1, global_device_states[i] ? "ON" : "OFF");
 800e108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e10c:	1c59      	adds	r1, r3, #1
 800e10e:	4a0e      	ldr	r2, [pc, #56]	@ (800e148 <UART_handler+0x31c>)
 800e110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01d      	beq.n	800e158 <UART_handler+0x32c>
 800e11c:	4b0d      	ldr	r3, [pc, #52]	@ (800e154 <UART_handler+0x328>)
 800e11e:	e01c      	b.n	800e15a <UART_handler+0x32e>
 800e120:	200004f4 	.word	0x200004f4
 800e124:	200004f6 	.word	0x200004f6
 800e128:	200003f4 	.word	0x200003f4
 800e12c:	080184a4 	.word	0x080184a4
 800e130:	08018508 	.word	0x08018508
 800e134:	08018518 	.word	0x08018518
 800e138:	08018528 	.word	0x08018528
 800e13c:	080184b8 	.word	0x080184b8
 800e140:	080184c0 	.word	0x080184c0
 800e144:	200003ec 	.word	0x200003ec
 800e148:	20000240 	.word	0x20000240
 800e14c:	20000358 	.word	0x20000358
 800e150:	08018448 	.word	0x08018448
 800e154:	080184d4 	.word	0x080184d4
 800e158:	4b2f      	ldr	r3, [pc, #188]	@ (800e218 <UART_handler+0x3ec>)
 800e15a:	461a      	mov	r2, r3
 800e15c:	482f      	ldr	r0, [pc, #188]	@ (800e21c <UART_handler+0x3f0>)
 800e15e:	f007 fafd 	bl	801575c <iprintf>
									for (int i = 0; i < 4; i++)
 800e162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e166:	3301      	adds	r3, #1
 800e168:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e16c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e170:	2b03      	cmp	r3, #3
 800e172:	f77f af60 	ble.w	800e036 <UART_handler+0x20a>
										}
									}
									xSemaphoreGive(deviceStateMutex);
 800e176:	4b2a      	ldr	r3, [pc, #168]	@ (800e220 <UART_handler+0x3f4>)
 800e178:	6818      	ldr	r0, [r3, #0]
 800e17a:	2300      	movs	r3, #0
 800e17c:	2200      	movs	r2, #0
 800e17e:	2100      	movs	r1, #0
 800e180:	f003 fed8 	bl	8011f34 <xQueueGenericSend>
									char *respStr = cJSON_PrintUnformatted(resp);
 800e184:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800e188:	f7fd f846 	bl	800b218 <cJSON_PrintUnformatted>
 800e18c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
									if (respStr)
 800e190:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d017      	beq.n	800e1c8 <UART_handler+0x39c>
									{
										HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800e198:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800e19c:	f7fa f842 	bl	8008224 <strlen>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800e1ac:	481d      	ldr	r0, [pc, #116]	@ (800e224 <UART_handler+0x3f8>)
 800e1ae:	f002 fccf 	bl	8010b50 <HAL_UART_Transmit>
										HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	491b      	ldr	r1, [pc, #108]	@ (800e228 <UART_handler+0x3fc>)
 800e1ba:	481a      	ldr	r0, [pc, #104]	@ (800e224 <UART_handler+0x3f8>)
 800e1bc:	f002 fcc8 	bl	8010b50 <HAL_UART_Transmit>
										free(respStr);
 800e1c0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800e1c4:	f006 fb0e 	bl	80147e4 <free>
									}
									cJSON_Delete(resp);
 800e1c8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800e1cc:	f7fb ff76 	bl	800a0bc <cJSON_Delete>
									updateToDisplayMenu();
 800e1d0:	f000 f8b0 	bl	800e334 <updateToDisplayMenu>
                        		}
                        	}
                            cJSON_Delete(json);
 800e1d4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800e1d8:	f7fb ff70 	bl	800a0bc <cJSON_Delete>
 800e1dc:	e002      	b.n	800e1e4 <UART_handler+0x3b8>
                        }
                        else
                        {
                            printf("Invalid JSON!\n");
 800e1de:	4813      	ldr	r0, [pc, #76]	@ (800e22c <UART_handler+0x400>)
 800e1e0:	f007 fb24 	bl	801582c <puts>
                        }
                        collecting = false;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
                        index = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800e1f0:	e626      	b.n	800de40 <UART_handler+0x14>
                    }
                }
                else
                {
                    collecting = false;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
                    index = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800e1fe:	e61f      	b.n	800de40 <UART_handler+0x14>
                }
            }
            else if (byte == BOOT_CMD)
 800e200:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800e204:	2b50      	cmp	r3, #80	@ 0x50
 800e206:	f47f ae1b 	bne.w	800de40 <UART_handler+0x14>
            {
                NVIC_SystemReset();
 800e20a:	f7ff fb3f 	bl	800d88c <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800e20e:	2005      	movs	r0, #5
 800e210:	f004 fcfe 	bl	8012c10 <vTaskDelay>
        if (uartHead != uartTail)
 800e214:	e614      	b.n	800de40 <UART_handler+0x14>
 800e216:	bf00      	nop
 800e218:	080184d8 	.word	0x080184d8
 800e21c:	080184dc 	.word	0x080184dc
 800e220:	200003ec 	.word	0x200003ec
 800e224:	20000358 	.word	0x20000358
 800e228:	08018448 	.word	0x08018448
 800e22c:	080184f8 	.word	0x080184f8

0800e230 <HAL_SPI_RxCpltCallback>:
    }
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a18      	ldr	r2, [pc, #96]	@ (800e2a0 <HAL_SPI_RxCpltCallback+0x70>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d11e      	bne.n	800e280 <HAL_SPI_RxCpltCallback+0x50>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(spiQueue, spiRxBuffer, &xHigherPriorityTaskWoken);
 800e246:	4b17      	ldr	r3, [pc, #92]	@ (800e2a4 <HAL_SPI_RxCpltCallback+0x74>)
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	f107 020c 	add.w	r2, r7, #12
 800e24e:	2300      	movs	r3, #0
 800e250:	4915      	ldr	r1, [pc, #84]	@ (800e2a8 <HAL_SPI_RxCpltCallback+0x78>)
 800e252:	f003 ff71 	bl	8012138 <xQueueGenericSendFromISR>
        memset(spiRxBuffer, 0, sizeof(spiRxBuffer));
 800e256:	2202      	movs	r2, #2
 800e258:	2100      	movs	r1, #0
 800e25a:	4813      	ldr	r0, [pc, #76]	@ (800e2a8 <HAL_SPI_RxCpltCallback+0x78>)
 800e25c:	f007 fc4c 	bl	8015af8 <memset>
        HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800e260:	2202      	movs	r2, #2
 800e262:	4911      	ldr	r1, [pc, #68]	@ (800e2a8 <HAL_SPI_RxCpltCallback+0x78>)
 800e264:	4811      	ldr	r0, [pc, #68]	@ (800e2ac <HAL_SPI_RxCpltCallback+0x7c>)
 800e266:	f001 fc3b 	bl	800fae0 <HAL_SPI_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d007      	beq.n	800e280 <HAL_SPI_RxCpltCallback+0x50>
 800e270:	4b0f      	ldr	r3, [pc, #60]	@ (800e2b0 <HAL_SPI_RxCpltCallback+0x80>)
 800e272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	f3bf 8f6f 	isb	sy
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e280:	2300      	movs	r3, #0
 800e282:	60bb      	str	r3, [r7, #8]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	60bb      	str	r3, [r7, #8]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	60bb      	str	r3, [r7, #8]
 800e294:	68bb      	ldr	r3, [r7, #8]
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	40003800 	.word	0x40003800
 800e2a4:	200003e8 	.word	0x200003e8
 800e2a8:	200004fc 	.word	0x200004fc
 800e2ac:	200002b8 	.word	0x200002b8
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a15      	ldr	r2, [pc, #84]	@ (800e318 <HAL_UART_RxCpltCallback+0x64>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d123      	bne.n	800e30e <HAL_UART_RxCpltCallback+0x5a>
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800e2c6:	4b15      	ldr	r3, [pc, #84]	@ (800e31c <HAL_UART_RxCpltCallback+0x68>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	425a      	negs	r2, r3
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	b2d2      	uxtb	r2, r2
 800e2d4:	bf58      	it	pl
 800e2d6:	4253      	negpl	r3, r2
 800e2d8:	81fb      	strh	r3, [r7, #14]

        if (nextHead != uartTail) {
 800e2da:	4b11      	ldr	r3, [pc, #68]	@ (800e320 <HAL_UART_RxCpltCallback+0x6c>)
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	89fa      	ldrh	r2, [r7, #14]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d00b      	beq.n	800e2fe <HAL_UART_RxCpltCallback+0x4a>
            uartRingBuffer[uartHead] = uartRxByte;
 800e2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e31c <HAL_UART_RxCpltCallback+0x68>)
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e324 <HAL_UART_RxCpltCallback+0x70>)
 800e2f0:	7819      	ldrb	r1, [r3, #0]
 800e2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e328 <HAL_UART_RxCpltCallback+0x74>)
 800e2f4:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800e2f6:	4a09      	ldr	r2, [pc, #36]	@ (800e31c <HAL_UART_RxCpltCallback+0x68>)
 800e2f8:	89fb      	ldrh	r3, [r7, #14]
 800e2fa:	8013      	strh	r3, [r2, #0]
 800e2fc:	e002      	b.n	800e304 <HAL_UART_RxCpltCallback+0x50>
        } else {
            printf("UART ring buffer overflow!\n");
 800e2fe:	480b      	ldr	r0, [pc, #44]	@ (800e32c <HAL_UART_RxCpltCallback+0x78>)
 800e300:	f007 fa94 	bl	801582c <puts>
        }

        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800e304:	2201      	movs	r2, #1
 800e306:	4907      	ldr	r1, [pc, #28]	@ (800e324 <HAL_UART_RxCpltCallback+0x70>)
 800e308:	4809      	ldr	r0, [pc, #36]	@ (800e330 <HAL_UART_RxCpltCallback+0x7c>)
 800e30a:	f002 fcac 	bl	8010c66 <HAL_UART_Receive_IT>
    }
}
 800e30e:	bf00      	nop
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	40004800 	.word	0x40004800
 800e31c:	200004f4 	.word	0x200004f4
 800e320:	200004f6 	.word	0x200004f6
 800e324:	200004f8 	.word	0x200004f8
 800e328:	200003f4 	.word	0x200003f4
 800e32c:	08018530 	.word	0x08018530
 800e330:	20000358 	.word	0x20000358

0800e334 <updateToDisplayMenu>:

void updateToDisplayMenu(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
	if(current_menu == MENU_TOTAL_CONTROL)
 800e338:	4b10      	ldr	r3, [pc, #64]	@ (800e37c <updateToDisplayMenu+0x48>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d106      	bne.n	800e34e <updateToDisplayMenu+0x1a>
	{
		last_selection = -1;
 800e340:	4b0f      	ldr	r3, [pc, #60]	@ (800e380 <updateToDisplayMenu+0x4c>)
 800e342:	f04f 32ff 	mov.w	r2, #4294967295
 800e346:	601a      	str	r2, [r3, #0]
		displayTotalControlMenu();
 800e348:	f7fd ff90 	bl	800c26c <displayTotalControlMenu>
	else if(current_menu == MENU_DEVICE_CONTROL)
	{
		last_selection = -1;
		displayDeviceControlMenu();
	}
}
 800e34c:	e014      	b.n	800e378 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_SEPARATE_CONTROL)
 800e34e:	4b0b      	ldr	r3, [pc, #44]	@ (800e37c <updateToDisplayMenu+0x48>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b02      	cmp	r3, #2
 800e354:	d106      	bne.n	800e364 <updateToDisplayMenu+0x30>
		last_selection = -1;
 800e356:	4b0a      	ldr	r3, [pc, #40]	@ (800e380 <updateToDisplayMenu+0x4c>)
 800e358:	f04f 32ff 	mov.w	r2, #4294967295
 800e35c:	601a      	str	r2, [r3, #0]
		displaySeparateControlMenu();
 800e35e:	f7fe f80d 	bl	800c37c <displaySeparateControlMenu>
}
 800e362:	e009      	b.n	800e378 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_DEVICE_CONTROL)
 800e364:	4b05      	ldr	r3, [pc, #20]	@ (800e37c <updateToDisplayMenu+0x48>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d105      	bne.n	800e378 <updateToDisplayMenu+0x44>
		last_selection = -1;
 800e36c:	4b04      	ldr	r3, [pc, #16]	@ (800e380 <updateToDisplayMenu+0x4c>)
 800e36e:	f04f 32ff 	mov.w	r2, #4294967295
 800e372:	601a      	str	r2, [r3, #0]
		displayDeviceControlMenu();
 800e374:	f7fe f87a 	bl	800c46c <displayDeviceControlMenu>
}
 800e378:	bf00      	nop
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	20000228 	.word	0x20000228
 800e380:	2000000c 	.word	0x2000000c

0800e384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e3bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800e388:	f7ff fa6a 	bl	800d860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e38c:	480c      	ldr	r0, [pc, #48]	@ (800e3c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e38e:	490d      	ldr	r1, [pc, #52]	@ (800e3c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e390:	4a0d      	ldr	r2, [pc, #52]	@ (800e3c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e394:	e002      	b.n	800e39c <LoopCopyDataInit>

0800e396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e39a:	3304      	adds	r3, #4

0800e39c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e39c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e39e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e3a0:	d3f9      	bcc.n	800e396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e3a2:	4a0a      	ldr	r2, [pc, #40]	@ (800e3cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e3a4:	4c0a      	ldr	r4, [pc, #40]	@ (800e3d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800e3a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e3a8:	e001      	b.n	800e3ae <LoopFillZerobss>

0800e3aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e3aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e3ac:	3204      	adds	r2, #4

0800e3ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e3ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e3b0:	d3fb      	bcc.n	800e3aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800e3b2:	f007 fc17 	bl	8015be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e3b6:	f7fe fd2f 	bl	800ce18 <main>
  bx  lr    
 800e3ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e3bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e3c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e3c4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800e3c8:	0801a4a0 	.word	0x0801a4a0
  ldr r2, =_sbss
 800e3cc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800e3d0:	200133fc 	.word	0x200133fc

0800e3d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e3d4:	e7fe      	b.n	800e3d4 <ADC_IRQHandler>
	...

0800e3d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	@ (800e418 <HAL_Init+0x40>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a0d      	ldr	r2, [pc, #52]	@ (800e418 <HAL_Init+0x40>)
 800e3e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e3e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e418 <HAL_Init+0x40>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a0a      	ldr	r2, [pc, #40]	@ (800e418 <HAL_Init+0x40>)
 800e3ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e3f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e3f4:	4b08      	ldr	r3, [pc, #32]	@ (800e418 <HAL_Init+0x40>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a07      	ldr	r2, [pc, #28]	@ (800e418 <HAL_Init+0x40>)
 800e3fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e3fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e400:	2003      	movs	r0, #3
 800e402:	f000 f8fc 	bl	800e5fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e406:	200f      	movs	r0, #15
 800e408:	f7ff f8d8 	bl	800d5bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e40c:	f7fe ff62 	bl	800d2d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	40023c00 	.word	0x40023c00

0800e41c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e420:	4b06      	ldr	r3, [pc, #24]	@ (800e43c <HAL_IncTick+0x20>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	461a      	mov	r2, r3
 800e426:	4b06      	ldr	r3, [pc, #24]	@ (800e440 <HAL_IncTick+0x24>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4413      	add	r3, r2
 800e42c:	4a04      	ldr	r2, [pc, #16]	@ (800e440 <HAL_IncTick+0x24>)
 800e42e:	6013      	str	r3, [r2, #0]
}
 800e430:	bf00      	nop
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	20000028 	.word	0x20000028
 800e440:	20000500 	.word	0x20000500

0800e444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e444:	b480      	push	{r7}
 800e446:	af00      	add	r7, sp, #0
  return uwTick;
 800e448:	4b03      	ldr	r3, [pc, #12]	@ (800e458 <HAL_GetTick+0x14>)
 800e44a:	681b      	ldr	r3, [r3, #0]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	20000500 	.word	0x20000500

0800e45c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e464:	f7ff ffee 	bl	800e444 <HAL_GetTick>
 800e468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e474:	d005      	beq.n	800e482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e476:	4b0a      	ldr	r3, [pc, #40]	@ (800e4a0 <HAL_Delay+0x44>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e482:	bf00      	nop
 800e484:	f7ff ffde 	bl	800e444 <HAL_GetTick>
 800e488:	4602      	mov	r2, r0
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	429a      	cmp	r2, r3
 800e492:	d8f7      	bhi.n	800e484 <HAL_Delay+0x28>
  {
  }
}
 800e494:	bf00      	nop
 800e496:	bf00      	nop
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20000028 	.word	0x20000028

0800e4a4 <__NVIC_SetPriorityGrouping>:
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f003 0307 	and.w	r3, r3, #7
 800e4b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e8 <__NVIC_SetPriorityGrouping+0x44>)
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e4cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e4d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e4d6:	4a04      	ldr	r2, [pc, #16]	@ (800e4e8 <__NVIC_SetPriorityGrouping+0x44>)
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	60d3      	str	r3, [r2, #12]
}
 800e4dc:	bf00      	nop
 800e4de:	3714      	adds	r7, #20
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr
 800e4e8:	e000ed00 	.word	0xe000ed00

0800e4ec <__NVIC_GetPriorityGrouping>:
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e4f0:	4b04      	ldr	r3, [pc, #16]	@ (800e504 <__NVIC_GetPriorityGrouping+0x18>)
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	0a1b      	lsrs	r3, r3, #8
 800e4f6:	f003 0307 	and.w	r3, r3, #7
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr
 800e504:	e000ed00 	.word	0xe000ed00

0800e508 <__NVIC_EnableIRQ>:
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	4603      	mov	r3, r0
 800e510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e516:	2b00      	cmp	r3, #0
 800e518:	db0b      	blt.n	800e532 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e51a:	79fb      	ldrb	r3, [r7, #7]
 800e51c:	f003 021f 	and.w	r2, r3, #31
 800e520:	4907      	ldr	r1, [pc, #28]	@ (800e540 <__NVIC_EnableIRQ+0x38>)
 800e522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e526:	095b      	lsrs	r3, r3, #5
 800e528:	2001      	movs	r0, #1
 800e52a:	fa00 f202 	lsl.w	r2, r0, r2
 800e52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e532:	bf00      	nop
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	e000e100 	.word	0xe000e100

0800e544 <__NVIC_SetPriority>:
{
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
 800e54a:	4603      	mov	r3, r0
 800e54c:	6039      	str	r1, [r7, #0]
 800e54e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e554:	2b00      	cmp	r3, #0
 800e556:	db0a      	blt.n	800e56e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	490c      	ldr	r1, [pc, #48]	@ (800e590 <__NVIC_SetPriority+0x4c>)
 800e55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e562:	0112      	lsls	r2, r2, #4
 800e564:	b2d2      	uxtb	r2, r2
 800e566:	440b      	add	r3, r1
 800e568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e56c:	e00a      	b.n	800e584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	b2da      	uxtb	r2, r3
 800e572:	4908      	ldr	r1, [pc, #32]	@ (800e594 <__NVIC_SetPriority+0x50>)
 800e574:	79fb      	ldrb	r3, [r7, #7]
 800e576:	f003 030f 	and.w	r3, r3, #15
 800e57a:	3b04      	subs	r3, #4
 800e57c:	0112      	lsls	r2, r2, #4
 800e57e:	b2d2      	uxtb	r2, r2
 800e580:	440b      	add	r3, r1
 800e582:	761a      	strb	r2, [r3, #24]
}
 800e584:	bf00      	nop
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	e000e100 	.word	0xe000e100
 800e594:	e000ed00 	.word	0xe000ed00

0800e598 <NVIC_EncodePriority>:
{
 800e598:	b480      	push	{r7}
 800e59a:	b089      	sub	sp, #36	@ 0x24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f003 0307 	and.w	r3, r3, #7
 800e5aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	f1c3 0307 	rsb	r3, r3, #7
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	bf28      	it	cs
 800e5b6:	2304      	movcs	r3, #4
 800e5b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	3304      	adds	r3, #4
 800e5be:	2b06      	cmp	r3, #6
 800e5c0:	d902      	bls.n	800e5c8 <NVIC_EncodePriority+0x30>
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	3b03      	subs	r3, #3
 800e5c6:	e000      	b.n	800e5ca <NVIC_EncodePriority+0x32>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d6:	43da      	mvns	r2, r3
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	401a      	ands	r2, r3
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e5e0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ea:	43d9      	mvns	r1, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e5f0:	4313      	orrs	r3, r2
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3724      	adds	r7, #36	@ 0x24
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7ff ff4c 	bl	800e4a4 <__NVIC_SetPriorityGrouping>
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	4603      	mov	r3, r0
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e626:	f7ff ff61 	bl	800e4ec <__NVIC_GetPriorityGrouping>
 800e62a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	68b9      	ldr	r1, [r7, #8]
 800e630:	6978      	ldr	r0, [r7, #20]
 800e632:	f7ff ffb1 	bl	800e598 <NVIC_EncodePriority>
 800e636:	4602      	mov	r2, r0
 800e638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff ff80 	bl	800e544 <__NVIC_SetPriority>
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	4603      	mov	r3, r0
 800e654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff ff54 	bl	800e508 <__NVIC_EnableIRQ>
}
 800e660:	bf00      	nop
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e674:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e676:	f7ff fee5 	bl	800e444 <HAL_GetTick>
 800e67a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e682:	b2db      	uxtb	r3, r3
 800e684:	2b02      	cmp	r3, #2
 800e686:	d008      	beq.n	800e69a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2280      	movs	r2, #128	@ 0x80
 800e68c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e052      	b.n	800e740 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f022 0216 	bic.w	r2, r2, #22
 800e6a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	695a      	ldr	r2, [r3, #20]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e6b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d103      	bne.n	800e6ca <HAL_DMA_Abort+0x62>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f022 0208 	bic.w	r2, r2, #8
 800e6d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f022 0201 	bic.w	r2, r2, #1
 800e6e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e6ea:	e013      	b.n	800e714 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e6ec:	f7ff feaa 	bl	800e444 <HAL_GetTick>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	d90c      	bls.n	800e714 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2203      	movs	r2, #3
 800e704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800e710:	2303      	movs	r3, #3
 800e712:	e015      	b.n	800e740 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f003 0301 	and.w	r3, r3, #1
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1e4      	bne.n	800e6ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e726:	223f      	movs	r2, #63	@ 0x3f
 800e728:	409a      	lsls	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e756:	b2db      	uxtb	r3, r3
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d004      	beq.n	800e766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2280      	movs	r2, #128	@ 0x80
 800e760:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e00c      	b.n	800e780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2205      	movs	r2, #5
 800e76a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f022 0201 	bic.w	r2, r2, #1
 800e77c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b089      	sub	sp, #36	@ 0x24
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e79a:	2300      	movs	r3, #0
 800e79c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	61fb      	str	r3, [r7, #28]
 800e7a6:	e165      	b.n	800ea74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e7bc:	693a      	ldr	r2, [r7, #16]
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	f040 8154 	bne.w	800ea6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	f003 0303 	and.w	r3, r3, #3
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d005      	beq.n	800e7de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d130      	bne.n	800e840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	2203      	movs	r2, #3
 800e7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ee:	43db      	mvns	r3, r3
 800e7f0:	69ba      	ldr	r2, [r7, #24]
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	68da      	ldr	r2, [r3, #12]
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e802:	69ba      	ldr	r2, [r7, #24]
 800e804:	4313      	orrs	r3, r2
 800e806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	69ba      	ldr	r2, [r7, #24]
 800e80c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e814:	2201      	movs	r2, #1
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	fa02 f303 	lsl.w	r3, r2, r3
 800e81c:	43db      	mvns	r3, r3
 800e81e:	69ba      	ldr	r2, [r7, #24]
 800e820:	4013      	ands	r3, r2
 800e822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	091b      	lsrs	r3, r3, #4
 800e82a:	f003 0201 	and.w	r2, r3, #1
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	fa02 f303 	lsl.w	r3, r2, r3
 800e834:	69ba      	ldr	r2, [r7, #24]
 800e836:	4313      	orrs	r3, r2
 800e838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	69ba      	ldr	r2, [r7, #24]
 800e83e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	f003 0303 	and.w	r3, r3, #3
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d017      	beq.n	800e87c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	2203      	movs	r2, #3
 800e858:	fa02 f303 	lsl.w	r3, r2, r3
 800e85c:	43db      	mvns	r3, r3
 800e85e:	69ba      	ldr	r2, [r7, #24]
 800e860:	4013      	ands	r3, r2
 800e862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	689a      	ldr	r2, [r3, #8]
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	fa02 f303 	lsl.w	r3, r2, r3
 800e870:	69ba      	ldr	r2, [r7, #24]
 800e872:	4313      	orrs	r3, r2
 800e874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	69ba      	ldr	r2, [r7, #24]
 800e87a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	f003 0303 	and.w	r3, r3, #3
 800e884:	2b02      	cmp	r3, #2
 800e886:	d123      	bne.n	800e8d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	08da      	lsrs	r2, r3, #3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3208      	adds	r2, #8
 800e890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	f003 0307 	and.w	r3, r3, #7
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	220f      	movs	r2, #15
 800e8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a4:	43db      	mvns	r3, r3
 800e8a6:	69ba      	ldr	r2, [r7, #24]
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	691a      	ldr	r2, [r3, #16]
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8bc:	69ba      	ldr	r2, [r7, #24]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	08da      	lsrs	r2, r3, #3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	3208      	adds	r2, #8
 800e8ca:	69b9      	ldr	r1, [r7, #24]
 800e8cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	2203      	movs	r2, #3
 800e8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8e0:	43db      	mvns	r3, r3
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	f003 0203 	and.w	r2, r3, #3
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f8:	69ba      	ldr	r2, [r7, #24]
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 80ae 	beq.w	800ea6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e912:	2300      	movs	r3, #0
 800e914:	60fb      	str	r3, [r7, #12]
 800e916:	4b5d      	ldr	r3, [pc, #372]	@ (800ea8c <HAL_GPIO_Init+0x300>)
 800e918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e91a:	4a5c      	ldr	r2, [pc, #368]	@ (800ea8c <HAL_GPIO_Init+0x300>)
 800e91c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e920:	6453      	str	r3, [r2, #68]	@ 0x44
 800e922:	4b5a      	ldr	r3, [pc, #360]	@ (800ea8c <HAL_GPIO_Init+0x300>)
 800e924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e92e:	4a58      	ldr	r2, [pc, #352]	@ (800ea90 <HAL_GPIO_Init+0x304>)
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	089b      	lsrs	r3, r3, #2
 800e934:	3302      	adds	r3, #2
 800e936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e93a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	f003 0303 	and.w	r3, r3, #3
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	220f      	movs	r2, #15
 800e946:	fa02 f303 	lsl.w	r3, r2, r3
 800e94a:	43db      	mvns	r3, r3
 800e94c:	69ba      	ldr	r2, [r7, #24]
 800e94e:	4013      	ands	r3, r2
 800e950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a4f      	ldr	r2, [pc, #316]	@ (800ea94 <HAL_GPIO_Init+0x308>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d025      	beq.n	800e9a6 <HAL_GPIO_Init+0x21a>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a4e      	ldr	r2, [pc, #312]	@ (800ea98 <HAL_GPIO_Init+0x30c>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d01f      	beq.n	800e9a2 <HAL_GPIO_Init+0x216>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a4d      	ldr	r2, [pc, #308]	@ (800ea9c <HAL_GPIO_Init+0x310>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d019      	beq.n	800e99e <HAL_GPIO_Init+0x212>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a4c      	ldr	r2, [pc, #304]	@ (800eaa0 <HAL_GPIO_Init+0x314>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d013      	beq.n	800e99a <HAL_GPIO_Init+0x20e>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a4b      	ldr	r2, [pc, #300]	@ (800eaa4 <HAL_GPIO_Init+0x318>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d00d      	beq.n	800e996 <HAL_GPIO_Init+0x20a>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a4a      	ldr	r2, [pc, #296]	@ (800eaa8 <HAL_GPIO_Init+0x31c>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d007      	beq.n	800e992 <HAL_GPIO_Init+0x206>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a49      	ldr	r2, [pc, #292]	@ (800eaac <HAL_GPIO_Init+0x320>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d101      	bne.n	800e98e <HAL_GPIO_Init+0x202>
 800e98a:	2306      	movs	r3, #6
 800e98c:	e00c      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e98e:	2307      	movs	r3, #7
 800e990:	e00a      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e992:	2305      	movs	r3, #5
 800e994:	e008      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e996:	2304      	movs	r3, #4
 800e998:	e006      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e99a:	2303      	movs	r3, #3
 800e99c:	e004      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e99e:	2302      	movs	r3, #2
 800e9a0:	e002      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e000      	b.n	800e9a8 <HAL_GPIO_Init+0x21c>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	69fa      	ldr	r2, [r7, #28]
 800e9aa:	f002 0203 	and.w	r2, r2, #3
 800e9ae:	0092      	lsls	r2, r2, #2
 800e9b0:	4093      	lsls	r3, r2
 800e9b2:	69ba      	ldr	r2, [r7, #24]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e9b8:	4935      	ldr	r1, [pc, #212]	@ (800ea90 <HAL_GPIO_Init+0x304>)
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	089b      	lsrs	r3, r3, #2
 800e9be:	3302      	adds	r3, #2
 800e9c0:	69ba      	ldr	r2, [r7, #24]
 800e9c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e9c6:	4b3a      	ldr	r3, [pc, #232]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	43db      	mvns	r3, r3
 800e9d0:	69ba      	ldr	r2, [r7, #24]
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e9ea:	4a31      	ldr	r2, [pc, #196]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e9f0:	4b2f      	ldr	r3, [pc, #188]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	43db      	mvns	r3, r3
 800e9fa:	69ba      	ldr	r2, [r7, #24]
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800ea0c:	69ba      	ldr	r2, [r7, #24]
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ea14:	4a26      	ldr	r2, [pc, #152]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ea1a:	4b25      	ldr	r3, [pc, #148]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	43db      	mvns	r3, r3
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	4013      	ands	r3, r2
 800ea28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d003      	beq.n	800ea3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800ea36:	69ba      	ldr	r2, [r7, #24]
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ea3e:	4a1c      	ldr	r2, [pc, #112]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ea44:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	43db      	mvns	r3, r3
 800ea4e:	69ba      	ldr	r2, [r7, #24]
 800ea50:	4013      	ands	r3, r2
 800ea52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ea60:	69ba      	ldr	r2, [r7, #24]
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ea68:	4a11      	ldr	r2, [pc, #68]	@ (800eab0 <HAL_GPIO_Init+0x324>)
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	3301      	adds	r3, #1
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	2b0f      	cmp	r3, #15
 800ea78:	f67f ae96 	bls.w	800e7a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ea7c:	bf00      	nop
 800ea7e:	bf00      	nop
 800ea80:	3724      	adds	r7, #36	@ 0x24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	40023800 	.word	0x40023800
 800ea90:	40013800 	.word	0x40013800
 800ea94:	40020000 	.word	0x40020000
 800ea98:	40020400 	.word	0x40020400
 800ea9c:	40020800 	.word	0x40020800
 800eaa0:	40020c00 	.word	0x40020c00
 800eaa4:	40021000 	.word	0x40021000
 800eaa8:	40021400 	.word	0x40021400
 800eaac:	40021800 	.word	0x40021800
 800eab0:	40013c00 	.word	0x40013c00

0800eab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	691a      	ldr	r2, [r3, #16]
 800eac4:	887b      	ldrh	r3, [r7, #2]
 800eac6:	4013      	ands	r3, r2
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d002      	beq.n	800ead2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800eacc:	2301      	movs	r3, #1
 800eace:	73fb      	strb	r3, [r7, #15]
 800ead0:	e001      	b.n	800ead6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ead2:	2300      	movs	r3, #0
 800ead4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3714      	adds	r7, #20
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	807b      	strh	r3, [r7, #2]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800eaf4:	787b      	ldrb	r3, [r7, #1]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800eafa:	887a      	ldrh	r2, [r7, #2]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800eb00:	e003      	b.n	800eb0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800eb02:	887b      	ldrh	r3, [r7, #2]
 800eb04:	041a      	lsls	r2, r3, #16
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	619a      	str	r2, [r3, #24]
}
 800eb0a:	bf00      	nop
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b085      	sub	sp, #20
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800eb28:	887a      	ldrh	r2, [r7, #2]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	041a      	lsls	r2, r3, #16
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	43d9      	mvns	r1, r3
 800eb34:	887b      	ldrh	r3, [r7, #2]
 800eb36:	400b      	ands	r3, r1
 800eb38:	431a      	orrs	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	619a      	str	r2, [r3, #24]
}
 800eb3e:	bf00      	nop
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
	...

0800eb4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800eb56:	4b08      	ldr	r3, [pc, #32]	@ (800eb78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eb58:	695a      	ldr	r2, [r3, #20]
 800eb5a:	88fb      	ldrh	r3, [r7, #6]
 800eb5c:	4013      	ands	r3, r2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d006      	beq.n	800eb70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800eb62:	4a05      	ldr	r2, [pc, #20]	@ (800eb78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eb64:	88fb      	ldrh	r3, [r7, #6]
 800eb66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800eb68:	88fb      	ldrh	r3, [r7, #6]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fe f8cc 	bl	800cd08 <HAL_GPIO_EXTI_Callback>
  }
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	40013c00 	.word	0x40013c00

0800eb7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800eb82:	2300      	movs	r3, #0
 800eb84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800eb86:	2300      	movs	r3, #0
 800eb88:	603b      	str	r3, [r7, #0]
 800eb8a:	4b20      	ldr	r3, [pc, #128]	@ (800ec0c <HAL_PWREx_EnableOverDrive+0x90>)
 800eb8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ec0c <HAL_PWREx_EnableOverDrive+0x90>)
 800eb90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb94:	6413      	str	r3, [r2, #64]	@ 0x40
 800eb96:	4b1d      	ldr	r3, [pc, #116]	@ (800ec0c <HAL_PWREx_EnableOverDrive+0x90>)
 800eb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb9e:	603b      	str	r3, [r7, #0]
 800eba0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800eba2:	4b1b      	ldr	r3, [pc, #108]	@ (800ec10 <HAL_PWREx_EnableOverDrive+0x94>)
 800eba4:	2201      	movs	r2, #1
 800eba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800eba8:	f7ff fc4c 	bl	800e444 <HAL_GetTick>
 800ebac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ebae:	e009      	b.n	800ebc4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ebb0:	f7ff fc48 	bl	800e444 <HAL_GetTick>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ebbe:	d901      	bls.n	800ebc4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	e01f      	b.n	800ec04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ebc4:	4b13      	ldr	r3, [pc, #76]	@ (800ec14 <HAL_PWREx_EnableOverDrive+0x98>)
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ebcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebd0:	d1ee      	bne.n	800ebb0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ebd2:	4b11      	ldr	r3, [pc, #68]	@ (800ec18 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ebd8:	f7ff fc34 	bl	800e444 <HAL_GetTick>
 800ebdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ebde:	e009      	b.n	800ebf4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ebe0:	f7ff fc30 	bl	800e444 <HAL_GetTick>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ebee:	d901      	bls.n	800ebf4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e007      	b.n	800ec04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ebf4:	4b07      	ldr	r3, [pc, #28]	@ (800ec14 <HAL_PWREx_EnableOverDrive+0x98>)
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec00:	d1ee      	bne.n	800ebe0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	40023800 	.word	0x40023800
 800ec10:	420e0040 	.word	0x420e0040
 800ec14:	40007000 	.word	0x40007000
 800ec18:	420e0044 	.word	0x420e0044

0800ec1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e0cc      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec30:	4b68      	ldr	r3, [pc, #416]	@ (800edd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f003 030f 	and.w	r3, r3, #15
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d90c      	bls.n	800ec58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec3e:	4b65      	ldr	r3, [pc, #404]	@ (800edd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	b2d2      	uxtb	r2, r2
 800ec44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec46:	4b63      	ldr	r3, [pc, #396]	@ (800edd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f003 030f 	and.w	r3, r3, #15
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d001      	beq.n	800ec58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e0b8      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f003 0302 	and.w	r3, r3, #2
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d020      	beq.n	800eca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 0304 	and.w	r3, r3, #4
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d005      	beq.n	800ec7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ec70:	4b59      	ldr	r3, [pc, #356]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	4a58      	ldr	r2, [pc, #352]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ec7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 0308 	and.w	r3, r3, #8
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d005      	beq.n	800ec94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ec88:	4b53      	ldr	r3, [pc, #332]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	4a52      	ldr	r2, [pc, #328]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ec92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ec94:	4b50      	ldr	r3, [pc, #320]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	494d      	ldr	r1, [pc, #308]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eca2:	4313      	orrs	r3, r2
 800eca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d044      	beq.n	800ed3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d107      	bne.n	800ecca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecba:	4b47      	ldr	r3, [pc, #284]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d119      	bne.n	800ecfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e07f      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	2b02      	cmp	r3, #2
 800ecd0:	d003      	beq.n	800ecda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ecd6:	2b03      	cmp	r3, #3
 800ecd8:	d107      	bne.n	800ecea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecda:	4b3f      	ldr	r3, [pc, #252]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d109      	bne.n	800ecfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	e06f      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ecea:	4b3b      	ldr	r3, [pc, #236]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f003 0302 	and.w	r3, r3, #2
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e067      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ecfa:	4b37      	ldr	r3, [pc, #220]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	f023 0203 	bic.w	r2, r3, #3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	4934      	ldr	r1, [pc, #208]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ed0c:	f7ff fb9a 	bl	800e444 <HAL_GetTick>
 800ed10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed12:	e00a      	b.n	800ed2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed14:	f7ff fb96 	bl	800e444 <HAL_GetTick>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d901      	bls.n	800ed2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e04f      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed2a:	4b2b      	ldr	r3, [pc, #172]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	f003 020c 	and.w	r2, r3, #12
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d1eb      	bne.n	800ed14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed3c:	4b25      	ldr	r3, [pc, #148]	@ (800edd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f003 030f 	and.w	r3, r3, #15
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d20c      	bcs.n	800ed64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed4a:	4b22      	ldr	r3, [pc, #136]	@ (800edd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed52:	4b20      	ldr	r3, [pc, #128]	@ (800edd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d001      	beq.n	800ed64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	e032      	b.n	800edca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f003 0304 	and.w	r3, r3, #4
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d008      	beq.n	800ed82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ed70:	4b19      	ldr	r3, [pc, #100]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	4916      	ldr	r1, [pc, #88]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f003 0308 	and.w	r3, r3, #8
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d009      	beq.n	800eda2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ed8e:	4b12      	ldr	r3, [pc, #72]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	00db      	lsls	r3, r3, #3
 800ed9c:	490e      	ldr	r1, [pc, #56]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800eda2:	f000 f887 	bl	800eeb4 <HAL_RCC_GetSysClockFreq>
 800eda6:	4602      	mov	r2, r0
 800eda8:	4b0b      	ldr	r3, [pc, #44]	@ (800edd8 <HAL_RCC_ClockConfig+0x1bc>)
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	091b      	lsrs	r3, r3, #4
 800edae:	f003 030f 	and.w	r3, r3, #15
 800edb2:	490a      	ldr	r1, [pc, #40]	@ (800eddc <HAL_RCC_ClockConfig+0x1c0>)
 800edb4:	5ccb      	ldrb	r3, [r1, r3]
 800edb6:	fa22 f303 	lsr.w	r3, r2, r3
 800edba:	4a09      	ldr	r2, [pc, #36]	@ (800ede0 <HAL_RCC_ClockConfig+0x1c4>)
 800edbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800edbe:	4b09      	ldr	r3, [pc, #36]	@ (800ede4 <HAL_RCC_ClockConfig+0x1c8>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fe fbfa 	bl	800d5bc <HAL_InitTick>

  return HAL_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	40023c00 	.word	0x40023c00
 800edd8:	40023800 	.word	0x40023800
 800eddc:	0801a0a0 	.word	0x0801a0a0
 800ede0:	20000020 	.word	0x20000020
 800ede4:	20000024 	.word	0x20000024

0800ede8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ede8:	b480      	push	{r7}
 800edea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800edec:	4b03      	ldr	r3, [pc, #12]	@ (800edfc <HAL_RCC_GetHCLKFreq+0x14>)
 800edee:	681b      	ldr	r3, [r3, #0]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	20000020 	.word	0x20000020

0800ee00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ee04:	f7ff fff0 	bl	800ede8 <HAL_RCC_GetHCLKFreq>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ee0c:	689b      	ldr	r3, [r3, #8]
 800ee0e:	0a9b      	lsrs	r3, r3, #10
 800ee10:	f003 0307 	and.w	r3, r3, #7
 800ee14:	4903      	ldr	r1, [pc, #12]	@ (800ee24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ee16:	5ccb      	ldrb	r3, [r1, r3]
 800ee18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	40023800 	.word	0x40023800
 800ee24:	0801a0b0 	.word	0x0801a0b0

0800ee28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ee2c:	f7ff ffdc 	bl	800ede8 <HAL_RCC_GetHCLKFreq>
 800ee30:	4602      	mov	r2, r0
 800ee32:	4b05      	ldr	r3, [pc, #20]	@ (800ee48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	0b5b      	lsrs	r3, r3, #13
 800ee38:	f003 0307 	and.w	r3, r3, #7
 800ee3c:	4903      	ldr	r1, [pc, #12]	@ (800ee4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee3e:	5ccb      	ldrb	r3, [r1, r3]
 800ee40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	40023800 	.word	0x40023800
 800ee4c:	0801a0b0 	.word	0x0801a0b0

0800ee50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	220f      	movs	r2, #15
 800ee5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ee60:	4b12      	ldr	r3, [pc, #72]	@ (800eeac <HAL_RCC_GetClockConfig+0x5c>)
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	f003 0203 	and.w	r2, r3, #3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ee6c:	4b0f      	ldr	r3, [pc, #60]	@ (800eeac <HAL_RCC_GetClockConfig+0x5c>)
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ee78:	4b0c      	ldr	r3, [pc, #48]	@ (800eeac <HAL_RCC_GetClockConfig+0x5c>)
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ee84:	4b09      	ldr	r3, [pc, #36]	@ (800eeac <HAL_RCC_GetClockConfig+0x5c>)
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	08db      	lsrs	r3, r3, #3
 800ee8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ee92:	4b07      	ldr	r3, [pc, #28]	@ (800eeb0 <HAL_RCC_GetClockConfig+0x60>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f003 020f 	and.w	r2, r3, #15
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	601a      	str	r2, [r3, #0]
}
 800ee9e:	bf00      	nop
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	40023800 	.word	0x40023800
 800eeb0:	40023c00 	.word	0x40023c00

0800eeb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eeb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eeb8:	b0a6      	sub	sp, #152	@ 0x98
 800eeba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800eebc:	2300      	movs	r3, #0
 800eebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800eec2:	2300      	movs	r3, #0
 800eec4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800eece:	2300      	movs	r3, #0
 800eed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800eed4:	2300      	movs	r3, #0
 800eed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eeda:	4bc8      	ldr	r3, [pc, #800]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f003 030c 	and.w	r3, r3, #12
 800eee2:	2b0c      	cmp	r3, #12
 800eee4:	f200 817e 	bhi.w	800f1e4 <HAL_RCC_GetSysClockFreq+0x330>
 800eee8:	a201      	add	r2, pc, #4	@ (adr r2, 800eef0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800eeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeee:	bf00      	nop
 800eef0:	0800ef25 	.word	0x0800ef25
 800eef4:	0800f1e5 	.word	0x0800f1e5
 800eef8:	0800f1e5 	.word	0x0800f1e5
 800eefc:	0800f1e5 	.word	0x0800f1e5
 800ef00:	0800ef2d 	.word	0x0800ef2d
 800ef04:	0800f1e5 	.word	0x0800f1e5
 800ef08:	0800f1e5 	.word	0x0800f1e5
 800ef0c:	0800f1e5 	.word	0x0800f1e5
 800ef10:	0800ef35 	.word	0x0800ef35
 800ef14:	0800f1e5 	.word	0x0800f1e5
 800ef18:	0800f1e5 	.word	0x0800f1e5
 800ef1c:	0800f1e5 	.word	0x0800f1e5
 800ef20:	0800f09f 	.word	0x0800f09f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ef24:	4bb6      	ldr	r3, [pc, #728]	@ (800f200 <HAL_RCC_GetSysClockFreq+0x34c>)
 800ef26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800ef2a:	e15f      	b.n	800f1ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ef2c:	4bb5      	ldr	r3, [pc, #724]	@ (800f204 <HAL_RCC_GetSysClockFreq+0x350>)
 800ef2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800ef32:	e15b      	b.n	800f1ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ef34:	4bb1      	ldr	r3, [pc, #708]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ef40:	4bae      	ldr	r3, [pc, #696]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d031      	beq.n	800efb0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef4c:	4bab      	ldr	r3, [pc, #684]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	099b      	lsrs	r3, r3, #6
 800ef52:	2200      	movs	r2, #0
 800ef54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef5e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef60:	2300      	movs	r3, #0
 800ef62:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef64:	4ba7      	ldr	r3, [pc, #668]	@ (800f204 <HAL_RCC_GetSysClockFreq+0x350>)
 800ef66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	fb03 f202 	mul.w	r2, r3, r2
 800ef70:	2300      	movs	r3, #0
 800ef72:	4621      	mov	r1, r4
 800ef74:	fb01 f303 	mul.w	r3, r1, r3
 800ef78:	4413      	add	r3, r2
 800ef7a:	4aa2      	ldr	r2, [pc, #648]	@ (800f204 <HAL_RCC_GetSysClockFreq+0x350>)
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	fba1 1202 	umull	r1, r2, r1, r2
 800ef82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ef84:	460a      	mov	r2, r1
 800ef86:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ef88:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ef8a:	4413      	add	r3, r2
 800ef8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef92:	2200      	movs	r2, #0
 800ef94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800ef98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ef9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800efa0:	f7f9 fe52 	bl	8008c48 <__aeabi_uldivmod>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4613      	mov	r3, r2
 800efaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800efae:	e064      	b.n	800f07a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800efb0:	4b92      	ldr	r3, [pc, #584]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	099b      	lsrs	r3, r3, #6
 800efb6:	2200      	movs	r2, #0
 800efb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800efba:	657a      	str	r2, [r7, #84]	@ 0x54
 800efbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800efc4:	2300      	movs	r3, #0
 800efc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800efc8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800efcc:	4622      	mov	r2, r4
 800efce:	462b      	mov	r3, r5
 800efd0:	f04f 0000 	mov.w	r0, #0
 800efd4:	f04f 0100 	mov.w	r1, #0
 800efd8:	0159      	lsls	r1, r3, #5
 800efda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800efde:	0150      	lsls	r0, r2, #5
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4621      	mov	r1, r4
 800efe6:	1a51      	subs	r1, r2, r1
 800efe8:	6139      	str	r1, [r7, #16]
 800efea:	4629      	mov	r1, r5
 800efec:	eb63 0301 	sbc.w	r3, r3, r1
 800eff0:	617b      	str	r3, [r7, #20]
 800eff2:	f04f 0200 	mov.w	r2, #0
 800eff6:	f04f 0300 	mov.w	r3, #0
 800effa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800effe:	4659      	mov	r1, fp
 800f000:	018b      	lsls	r3, r1, #6
 800f002:	4651      	mov	r1, sl
 800f004:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f008:	4651      	mov	r1, sl
 800f00a:	018a      	lsls	r2, r1, #6
 800f00c:	4651      	mov	r1, sl
 800f00e:	ebb2 0801 	subs.w	r8, r2, r1
 800f012:	4659      	mov	r1, fp
 800f014:	eb63 0901 	sbc.w	r9, r3, r1
 800f018:	f04f 0200 	mov.w	r2, #0
 800f01c:	f04f 0300 	mov.w	r3, #0
 800f020:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f024:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f028:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f02c:	4690      	mov	r8, r2
 800f02e:	4699      	mov	r9, r3
 800f030:	4623      	mov	r3, r4
 800f032:	eb18 0303 	adds.w	r3, r8, r3
 800f036:	60bb      	str	r3, [r7, #8]
 800f038:	462b      	mov	r3, r5
 800f03a:	eb49 0303 	adc.w	r3, r9, r3
 800f03e:	60fb      	str	r3, [r7, #12]
 800f040:	f04f 0200 	mov.w	r2, #0
 800f044:	f04f 0300 	mov.w	r3, #0
 800f048:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f04c:	4629      	mov	r1, r5
 800f04e:	028b      	lsls	r3, r1, #10
 800f050:	4621      	mov	r1, r4
 800f052:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f056:	4621      	mov	r1, r4
 800f058:	028a      	lsls	r2, r1, #10
 800f05a:	4610      	mov	r0, r2
 800f05c:	4619      	mov	r1, r3
 800f05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f062:	2200      	movs	r2, #0
 800f064:	643b      	str	r3, [r7, #64]	@ 0x40
 800f066:	647a      	str	r2, [r7, #68]	@ 0x44
 800f068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f06c:	f7f9 fdec 	bl	8008c48 <__aeabi_uldivmod>
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	4613      	mov	r3, r2
 800f076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f07a:	4b60      	ldr	r3, [pc, #384]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	0c1b      	lsrs	r3, r3, #16
 800f080:	f003 0303 	and.w	r3, r3, #3
 800f084:	3301      	adds	r3, #1
 800f086:	005b      	lsls	r3, r3, #1
 800f088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800f08c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f094:	fbb2 f3f3 	udiv	r3, r2, r3
 800f098:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f09c:	e0a6      	b.n	800f1ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f09e:	4b57      	ldr	r3, [pc, #348]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f0aa:	4b54      	ldr	r3, [pc, #336]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d02a      	beq.n	800f10c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f0b6:	4b51      	ldr	r3, [pc, #324]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	099b      	lsrs	r3, r3, #6
 800f0bc:	2200      	movs	r2, #0
 800f0be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	4b4e      	ldr	r3, [pc, #312]	@ (800f204 <HAL_RCC_GetSysClockFreq+0x350>)
 800f0cc:	fb03 f201 	mul.w	r2, r3, r1
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	fb00 f303 	mul.w	r3, r0, r3
 800f0d6:	4413      	add	r3, r2
 800f0d8:	4a4a      	ldr	r2, [pc, #296]	@ (800f204 <HAL_RCC_GetSysClockFreq+0x350>)
 800f0da:	fba0 1202 	umull	r1, r2, r0, r2
 800f0de:	677a      	str	r2, [r7, #116]	@ 0x74
 800f0e0:	460a      	mov	r2, r1
 800f0e2:	673a      	str	r2, [r7, #112]	@ 0x70
 800f0e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f0e6:	4413      	add	r3, r2
 800f0e8:	677b      	str	r3, [r7, #116]	@ 0x74
 800f0ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0f2:	637a      	str	r2, [r7, #52]	@ 0x34
 800f0f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f0f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800f0fc:	f7f9 fda4 	bl	8008c48 <__aeabi_uldivmod>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4613      	mov	r3, r2
 800f106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f10a:	e05b      	b.n	800f1c4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f10c:	4b3b      	ldr	r3, [pc, #236]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	099b      	lsrs	r3, r3, #6
 800f112:	2200      	movs	r2, #0
 800f114:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f11e:	623b      	str	r3, [r7, #32]
 800f120:	2300      	movs	r3, #0
 800f122:	627b      	str	r3, [r7, #36]	@ 0x24
 800f124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f128:	4642      	mov	r2, r8
 800f12a:	464b      	mov	r3, r9
 800f12c:	f04f 0000 	mov.w	r0, #0
 800f130:	f04f 0100 	mov.w	r1, #0
 800f134:	0159      	lsls	r1, r3, #5
 800f136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f13a:	0150      	lsls	r0, r2, #5
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	4641      	mov	r1, r8
 800f142:	ebb2 0a01 	subs.w	sl, r2, r1
 800f146:	4649      	mov	r1, r9
 800f148:	eb63 0b01 	sbc.w	fp, r3, r1
 800f14c:	f04f 0200 	mov.w	r2, #0
 800f150:	f04f 0300 	mov.w	r3, #0
 800f154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f15c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f160:	ebb2 040a 	subs.w	r4, r2, sl
 800f164:	eb63 050b 	sbc.w	r5, r3, fp
 800f168:	f04f 0200 	mov.w	r2, #0
 800f16c:	f04f 0300 	mov.w	r3, #0
 800f170:	00eb      	lsls	r3, r5, #3
 800f172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f176:	00e2      	lsls	r2, r4, #3
 800f178:	4614      	mov	r4, r2
 800f17a:	461d      	mov	r5, r3
 800f17c:	4643      	mov	r3, r8
 800f17e:	18e3      	adds	r3, r4, r3
 800f180:	603b      	str	r3, [r7, #0]
 800f182:	464b      	mov	r3, r9
 800f184:	eb45 0303 	adc.w	r3, r5, r3
 800f188:	607b      	str	r3, [r7, #4]
 800f18a:	f04f 0200 	mov.w	r2, #0
 800f18e:	f04f 0300 	mov.w	r3, #0
 800f192:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f196:	4629      	mov	r1, r5
 800f198:	028b      	lsls	r3, r1, #10
 800f19a:	4621      	mov	r1, r4
 800f19c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	028a      	lsls	r2, r1, #10
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	61bb      	str	r3, [r7, #24]
 800f1b0:	61fa      	str	r2, [r7, #28]
 800f1b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f1b6:	f7f9 fd47 	bl	8008c48 <__aeabi_uldivmod>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	460b      	mov	r3, r1
 800f1be:	4613      	mov	r3, r2
 800f1c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800f1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800f1fc <HAL_RCC_GetSysClockFreq+0x348>)
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	0f1b      	lsrs	r3, r3, #28
 800f1ca:	f003 0307 	and.w	r3, r3, #7
 800f1ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800f1d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f1d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f1e2:	e003      	b.n	800f1ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f1e4:	4b06      	ldr	r3, [pc, #24]	@ (800f200 <HAL_RCC_GetSysClockFreq+0x34c>)
 800f1e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f1ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f1ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3798      	adds	r7, #152	@ 0x98
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1fa:	bf00      	nop
 800f1fc:	40023800 	.word	0x40023800
 800f200:	00f42400 	.word	0x00f42400
 800f204:	017d7840 	.word	0x017d7840

0800f208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d101      	bne.n	800f21a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	e28d      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f003 0301 	and.w	r3, r3, #1
 800f222:	2b00      	cmp	r3, #0
 800f224:	f000 8083 	beq.w	800f32e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800f228:	4b94      	ldr	r3, [pc, #592]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	f003 030c 	and.w	r3, r3, #12
 800f230:	2b04      	cmp	r3, #4
 800f232:	d019      	beq.n	800f268 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800f234:	4b91      	ldr	r3, [pc, #580]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	f003 030c 	and.w	r3, r3, #12
        || \
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	d106      	bne.n	800f24e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800f240:	4b8e      	ldr	r3, [pc, #568]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f24c:	d00c      	beq.n	800f268 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f24e:	4b8b      	ldr	r3, [pc, #556]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f250:	689b      	ldr	r3, [r3, #8]
 800f252:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800f256:	2b0c      	cmp	r3, #12
 800f258:	d112      	bne.n	800f280 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f25a:	4b88      	ldr	r3, [pc, #544]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f266:	d10b      	bne.n	800f280 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f268:	4b84      	ldr	r3, [pc, #528]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d05b      	beq.n	800f32c <HAL_RCC_OscConfig+0x124>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d157      	bne.n	800f32c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	e25a      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f288:	d106      	bne.n	800f298 <HAL_RCC_OscConfig+0x90>
 800f28a:	4b7c      	ldr	r3, [pc, #496]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a7b      	ldr	r2, [pc, #492]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f294:	6013      	str	r3, [r2, #0]
 800f296:	e01d      	b.n	800f2d4 <HAL_RCC_OscConfig+0xcc>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f2a0:	d10c      	bne.n	800f2bc <HAL_RCC_OscConfig+0xb4>
 800f2a2:	4b76      	ldr	r3, [pc, #472]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a75      	ldr	r2, [pc, #468]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f2ac:	6013      	str	r3, [r2, #0]
 800f2ae:	4b73      	ldr	r3, [pc, #460]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a72      	ldr	r2, [pc, #456]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f2b8:	6013      	str	r3, [r2, #0]
 800f2ba:	e00b      	b.n	800f2d4 <HAL_RCC_OscConfig+0xcc>
 800f2bc:	4b6f      	ldr	r3, [pc, #444]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a6e      	ldr	r2, [pc, #440]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	4b6c      	ldr	r3, [pc, #432]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a6b      	ldr	r2, [pc, #428]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f2d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d013      	beq.n	800f304 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2dc:	f7ff f8b2 	bl	800e444 <HAL_GetTick>
 800f2e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f2e2:	e008      	b.n	800f2f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f2e4:	f7ff f8ae 	bl	800e444 <HAL_GetTick>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	2b64      	cmp	r3, #100	@ 0x64
 800f2f0:	d901      	bls.n	800f2f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e21f      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f2f6:	4b61      	ldr	r3, [pc, #388]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d0f0      	beq.n	800f2e4 <HAL_RCC_OscConfig+0xdc>
 800f302:	e014      	b.n	800f32e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f304:	f7ff f89e 	bl	800e444 <HAL_GetTick>
 800f308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f30a:	e008      	b.n	800f31e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f30c:	f7ff f89a 	bl	800e444 <HAL_GetTick>
 800f310:	4602      	mov	r2, r0
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	2b64      	cmp	r3, #100	@ 0x64
 800f318:	d901      	bls.n	800f31e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800f31a:	2303      	movs	r3, #3
 800f31c:	e20b      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f31e:	4b57      	ldr	r3, [pc, #348]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1f0      	bne.n	800f30c <HAL_RCC_OscConfig+0x104>
 800f32a:	e000      	b.n	800f32e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f32c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f003 0302 	and.w	r3, r3, #2
 800f336:	2b00      	cmp	r3, #0
 800f338:	d06f      	beq.n	800f41a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800f33a:	4b50      	ldr	r3, [pc, #320]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	f003 030c 	and.w	r3, r3, #12
 800f342:	2b00      	cmp	r3, #0
 800f344:	d017      	beq.n	800f376 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800f346:	4b4d      	ldr	r3, [pc, #308]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	f003 030c 	and.w	r3, r3, #12
        || \
 800f34e:	2b08      	cmp	r3, #8
 800f350:	d105      	bne.n	800f35e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800f352:	4b4a      	ldr	r3, [pc, #296]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00b      	beq.n	800f376 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f35e:	4b47      	ldr	r3, [pc, #284]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800f366:	2b0c      	cmp	r3, #12
 800f368:	d11c      	bne.n	800f3a4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f36a:	4b44      	ldr	r3, [pc, #272]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f372:	2b00      	cmp	r3, #0
 800f374:	d116      	bne.n	800f3a4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f376:	4b41      	ldr	r3, [pc, #260]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f003 0302 	and.w	r3, r3, #2
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d005      	beq.n	800f38e <HAL_RCC_OscConfig+0x186>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d001      	beq.n	800f38e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e1d3      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f38e:	4b3b      	ldr	r3, [pc, #236]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	4937      	ldr	r1, [pc, #220]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f3a2:	e03a      	b.n	800f41a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d020      	beq.n	800f3ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f3ac:	4b34      	ldr	r3, [pc, #208]	@ (800f480 <HAL_RCC_OscConfig+0x278>)
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3b2:	f7ff f847 	bl	800e444 <HAL_GetTick>
 800f3b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3b8:	e008      	b.n	800f3cc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3ba:	f7ff f843 	bl	800e444 <HAL_GetTick>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	1ad3      	subs	r3, r2, r3
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d901      	bls.n	800f3cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e1b4      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3cc:	4b2b      	ldr	r3, [pc, #172]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f003 0302 	and.w	r3, r3, #2
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0f0      	beq.n	800f3ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f3d8:	4b28      	ldr	r3, [pc, #160]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	4925      	ldr	r1, [pc, #148]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	600b      	str	r3, [r1, #0]
 800f3ec:	e015      	b.n	800f41a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f3ee:	4b24      	ldr	r3, [pc, #144]	@ (800f480 <HAL_RCC_OscConfig+0x278>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3f4:	f7ff f826 	bl	800e444 <HAL_GetTick>
 800f3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f3fa:	e008      	b.n	800f40e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3fc:	f7ff f822 	bl	800e444 <HAL_GetTick>
 800f400:	4602      	mov	r2, r0
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	2b02      	cmp	r3, #2
 800f408:	d901      	bls.n	800f40e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f40a:	2303      	movs	r3, #3
 800f40c:	e193      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f40e:	4b1b      	ldr	r3, [pc, #108]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f003 0302 	and.w	r3, r3, #2
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1f0      	bne.n	800f3fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0308 	and.w	r3, r3, #8
 800f422:	2b00      	cmp	r3, #0
 800f424:	d036      	beq.n	800f494 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	695b      	ldr	r3, [r3, #20]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d016      	beq.n	800f45c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f42e:	4b15      	ldr	r3, [pc, #84]	@ (800f484 <HAL_RCC_OscConfig+0x27c>)
 800f430:	2201      	movs	r2, #1
 800f432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f434:	f7ff f806 	bl	800e444 <HAL_GetTick>
 800f438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f43a:	e008      	b.n	800f44e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f43c:	f7ff f802 	bl	800e444 <HAL_GetTick>
 800f440:	4602      	mov	r2, r0
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	2b02      	cmp	r3, #2
 800f448:	d901      	bls.n	800f44e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800f44a:	2303      	movs	r3, #3
 800f44c:	e173      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f44e:	4b0b      	ldr	r3, [pc, #44]	@ (800f47c <HAL_RCC_OscConfig+0x274>)
 800f450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d0f0      	beq.n	800f43c <HAL_RCC_OscConfig+0x234>
 800f45a:	e01b      	b.n	800f494 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f45c:	4b09      	ldr	r3, [pc, #36]	@ (800f484 <HAL_RCC_OscConfig+0x27c>)
 800f45e:	2200      	movs	r2, #0
 800f460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f462:	f7fe ffef 	bl	800e444 <HAL_GetTick>
 800f466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f468:	e00e      	b.n	800f488 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f46a:	f7fe ffeb 	bl	800e444 <HAL_GetTick>
 800f46e:	4602      	mov	r2, r0
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	2b02      	cmp	r3, #2
 800f476:	d907      	bls.n	800f488 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800f478:	2303      	movs	r3, #3
 800f47a:	e15c      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
 800f47c:	40023800 	.word	0x40023800
 800f480:	42470000 	.word	0x42470000
 800f484:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f488:	4b8a      	ldr	r3, [pc, #552]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f48a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f48c:	f003 0302 	and.w	r3, r3, #2
 800f490:	2b00      	cmp	r3, #0
 800f492:	d1ea      	bne.n	800f46a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f003 0304 	and.w	r3, r3, #4
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f000 8097 	beq.w	800f5d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f4a6:	4b83      	ldr	r3, [pc, #524]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10f      	bne.n	800f4d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	60bb      	str	r3, [r7, #8]
 800f4b6:	4b7f      	ldr	r3, [pc, #508]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4ba:	4a7e      	ldr	r2, [pc, #504]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f4bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f4c0:	6413      	str	r3, [r2, #64]	@ 0x40
 800f4c2:	4b7c      	ldr	r3, [pc, #496]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4ca:	60bb      	str	r3, [r7, #8]
 800f4cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f4d2:	4b79      	ldr	r3, [pc, #484]	@ (800f6b8 <HAL_RCC_OscConfig+0x4b0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d118      	bne.n	800f510 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f4de:	4b76      	ldr	r3, [pc, #472]	@ (800f6b8 <HAL_RCC_OscConfig+0x4b0>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4a75      	ldr	r2, [pc, #468]	@ (800f6b8 <HAL_RCC_OscConfig+0x4b0>)
 800f4e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f4e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f4ea:	f7fe ffab 	bl	800e444 <HAL_GetTick>
 800f4ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f4f0:	e008      	b.n	800f504 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f4f2:	f7fe ffa7 	bl	800e444 <HAL_GetTick>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	1ad3      	subs	r3, r2, r3
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d901      	bls.n	800f504 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800f500:	2303      	movs	r3, #3
 800f502:	e118      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f504:	4b6c      	ldr	r3, [pc, #432]	@ (800f6b8 <HAL_RCC_OscConfig+0x4b0>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d0f0      	beq.n	800f4f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d106      	bne.n	800f526 <HAL_RCC_OscConfig+0x31e>
 800f518:	4b66      	ldr	r3, [pc, #408]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f51a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f51c:	4a65      	ldr	r2, [pc, #404]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f51e:	f043 0301 	orr.w	r3, r3, #1
 800f522:	6713      	str	r3, [r2, #112]	@ 0x70
 800f524:	e01c      	b.n	800f560 <HAL_RCC_OscConfig+0x358>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	2b05      	cmp	r3, #5
 800f52c:	d10c      	bne.n	800f548 <HAL_RCC_OscConfig+0x340>
 800f52e:	4b61      	ldr	r3, [pc, #388]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f532:	4a60      	ldr	r2, [pc, #384]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f534:	f043 0304 	orr.w	r3, r3, #4
 800f538:	6713      	str	r3, [r2, #112]	@ 0x70
 800f53a:	4b5e      	ldr	r3, [pc, #376]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f53c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f53e:	4a5d      	ldr	r2, [pc, #372]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f540:	f043 0301 	orr.w	r3, r3, #1
 800f544:	6713      	str	r3, [r2, #112]	@ 0x70
 800f546:	e00b      	b.n	800f560 <HAL_RCC_OscConfig+0x358>
 800f548:	4b5a      	ldr	r3, [pc, #360]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f54a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f54c:	4a59      	ldr	r2, [pc, #356]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f54e:	f023 0301 	bic.w	r3, r3, #1
 800f552:	6713      	str	r3, [r2, #112]	@ 0x70
 800f554:	4b57      	ldr	r3, [pc, #348]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f558:	4a56      	ldr	r2, [pc, #344]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f55a:	f023 0304 	bic.w	r3, r3, #4
 800f55e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d015      	beq.n	800f594 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f568:	f7fe ff6c 	bl	800e444 <HAL_GetTick>
 800f56c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f56e:	e00a      	b.n	800f586 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f570:	f7fe ff68 	bl	800e444 <HAL_GetTick>
 800f574:	4602      	mov	r2, r0
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f57e:	4293      	cmp	r3, r2
 800f580:	d901      	bls.n	800f586 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800f582:	2303      	movs	r3, #3
 800f584:	e0d7      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f586:	4b4b      	ldr	r3, [pc, #300]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f58a:	f003 0302 	and.w	r3, r3, #2
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0ee      	beq.n	800f570 <HAL_RCC_OscConfig+0x368>
 800f592:	e014      	b.n	800f5be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f594:	f7fe ff56 	bl	800e444 <HAL_GetTick>
 800f598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f59a:	e00a      	b.n	800f5b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f59c:	f7fe ff52 	bl	800e444 <HAL_GetTick>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	1ad3      	subs	r3, r2, r3
 800f5a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d901      	bls.n	800f5b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	e0c1      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f5b2:	4b40      	ldr	r3, [pc, #256]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5b6:	f003 0302 	and.w	r3, r3, #2
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1ee      	bne.n	800f59c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f5be:	7dfb      	ldrb	r3, [r7, #23]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d105      	bne.n	800f5d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f5c4:	4b3b      	ldr	r3, [pc, #236]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5c8:	4a3a      	ldr	r2, [pc, #232]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f5ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f5ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	699b      	ldr	r3, [r3, #24]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 80ad 	beq.w	800f734 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f5da:	4b36      	ldr	r3, [pc, #216]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	f003 030c 	and.w	r3, r3, #12
 800f5e2:	2b08      	cmp	r3, #8
 800f5e4:	d060      	beq.n	800f6a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	699b      	ldr	r3, [r3, #24]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d145      	bne.n	800f67a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f5ee:	4b33      	ldr	r3, [pc, #204]	@ (800f6bc <HAL_RCC_OscConfig+0x4b4>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5f4:	f7fe ff26 	bl	800e444 <HAL_GetTick>
 800f5f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f5fa:	e008      	b.n	800f60e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f5fc:	f7fe ff22 	bl	800e444 <HAL_GetTick>
 800f600:	4602      	mov	r2, r0
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	2b02      	cmp	r3, #2
 800f608:	d901      	bls.n	800f60e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f60a:	2303      	movs	r3, #3
 800f60c:	e093      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f60e:	4b29      	ldr	r3, [pc, #164]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f616:	2b00      	cmp	r3, #0
 800f618:	d1f0      	bne.n	800f5fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	69da      	ldr	r2, [r3, #28]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a1b      	ldr	r3, [r3, #32]
 800f622:	431a      	orrs	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f628:	019b      	lsls	r3, r3, #6
 800f62a:	431a      	orrs	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f630:	085b      	lsrs	r3, r3, #1
 800f632:	3b01      	subs	r3, #1
 800f634:	041b      	lsls	r3, r3, #16
 800f636:	431a      	orrs	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f63c:	061b      	lsls	r3, r3, #24
 800f63e:	431a      	orrs	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f644:	071b      	lsls	r3, r3, #28
 800f646:	491b      	ldr	r1, [pc, #108]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f648:	4313      	orrs	r3, r2
 800f64a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f64c:	4b1b      	ldr	r3, [pc, #108]	@ (800f6bc <HAL_RCC_OscConfig+0x4b4>)
 800f64e:	2201      	movs	r2, #1
 800f650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f652:	f7fe fef7 	bl	800e444 <HAL_GetTick>
 800f656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f658:	e008      	b.n	800f66c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f65a:	f7fe fef3 	bl	800e444 <HAL_GetTick>
 800f65e:	4602      	mov	r2, r0
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	2b02      	cmp	r3, #2
 800f666:	d901      	bls.n	800f66c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f668:	2303      	movs	r3, #3
 800f66a:	e064      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f66c:	4b11      	ldr	r3, [pc, #68]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f674:	2b00      	cmp	r3, #0
 800f676:	d0f0      	beq.n	800f65a <HAL_RCC_OscConfig+0x452>
 800f678:	e05c      	b.n	800f734 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f67a:	4b10      	ldr	r3, [pc, #64]	@ (800f6bc <HAL_RCC_OscConfig+0x4b4>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f680:	f7fe fee0 	bl	800e444 <HAL_GetTick>
 800f684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f686:	e008      	b.n	800f69a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f688:	f7fe fedc 	bl	800e444 <HAL_GetTick>
 800f68c:	4602      	mov	r2, r0
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	2b02      	cmp	r3, #2
 800f694:	d901      	bls.n	800f69a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f696:	2303      	movs	r3, #3
 800f698:	e04d      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f69a:	4b06      	ldr	r3, [pc, #24]	@ (800f6b4 <HAL_RCC_OscConfig+0x4ac>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1f0      	bne.n	800f688 <HAL_RCC_OscConfig+0x480>
 800f6a6:	e045      	b.n	800f734 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	699b      	ldr	r3, [r3, #24]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d107      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e040      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
 800f6b4:	40023800 	.word	0x40023800
 800f6b8:	40007000 	.word	0x40007000
 800f6bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f6c0:	4b1f      	ldr	r3, [pc, #124]	@ (800f740 <HAL_RCC_OscConfig+0x538>)
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d030      	beq.n	800f730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d129      	bne.n	800f730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d122      	bne.n	800f730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f6f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d119      	bne.n	800f730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f706:	085b      	lsrs	r3, r3, #1
 800f708:	3b01      	subs	r3, #1
 800f70a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d10f      	bne.n	800f730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f71a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d107      	bne.n	800f730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f72a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d001      	beq.n	800f734 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	e000      	b.n	800f736 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3718      	adds	r7, #24
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	40023800 	.word	0x40023800

0800f744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d101      	bne.n	800f756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	e07b      	b.n	800f84e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d108      	bne.n	800f770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f766:	d009      	beq.n	800f77c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	61da      	str	r2, [r3, #28]
 800f76e:	e005      	b.n	800f77c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7fd fdc4 	bl	800d324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f7c4:	431a      	orrs	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7ce:	431a      	orrs	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	f003 0302 	and.w	r3, r3, #2
 800f7d8:	431a      	orrs	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	695b      	ldr	r3, [r3, #20]
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	431a      	orrs	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	699b      	ldr	r3, [r3, #24]
 800f7e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f7ec:	431a      	orrs	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	69db      	ldr	r3, [r3, #28]
 800f7f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f7f6:	431a      	orrs	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a1b      	ldr	r3, [r3, #32]
 800f7fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f800:	ea42 0103 	orr.w	r1, r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f808:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	430a      	orrs	r2, r1
 800f812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	699b      	ldr	r3, [r3, #24]
 800f818:	0c1b      	lsrs	r3, r3, #16
 800f81a:	f003 0104 	and.w	r1, r3, #4
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f822:	f003 0210 	and.w	r2, r3, #16
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	430a      	orrs	r2, r1
 800f82c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	69da      	ldr	r2, [r3, #28]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f83c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b088      	sub	sp, #32
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	60f8      	str	r0, [r7, #12]
 800f85e:	60b9      	str	r1, [r7, #8]
 800f860:	603b      	str	r3, [r7, #0]
 800f862:	4613      	mov	r3, r2
 800f864:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f866:	f7fe fded 	bl	800e444 <HAL_GetTick>
 800f86a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f86c:	88fb      	ldrh	r3, [r7, #6]
 800f86e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d001      	beq.n	800f880 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f87c:	2302      	movs	r3, #2
 800f87e:	e12a      	b.n	800fad6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d002      	beq.n	800f88c <HAL_SPI_Transmit+0x36>
 800f886:	88fb      	ldrh	r3, [r7, #6]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	e122      	b.n	800fad6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f896:	2b01      	cmp	r3, #1
 800f898:	d101      	bne.n	800f89e <HAL_SPI_Transmit+0x48>
 800f89a:	2302      	movs	r3, #2
 800f89c:	e11b      	b.n	800fad6 <HAL_SPI_Transmit+0x280>
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2203      	movs	r2, #3
 800f8aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	88fa      	ldrh	r2, [r7, #6]
 800f8be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	88fa      	ldrh	r2, [r7, #6]
 800f8c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f8ec:	d10f      	bne.n	800f90e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f8fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f90c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f918:	2b40      	cmp	r3, #64	@ 0x40
 800f91a:	d007      	beq.n	800f92c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f92a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f934:	d152      	bne.n	800f9dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d002      	beq.n	800f944 <HAL_SPI_Transmit+0xee>
 800f93e:	8b7b      	ldrh	r3, [r7, #26]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d145      	bne.n	800f9d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f948:	881a      	ldrh	r2, [r3, #0]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f954:	1c9a      	adds	r2, r3, #2
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f95e:	b29b      	uxth	r3, r3
 800f960:	3b01      	subs	r3, #1
 800f962:	b29a      	uxth	r2, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f968:	e032      	b.n	800f9d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f003 0302 	and.w	r3, r3, #2
 800f974:	2b02      	cmp	r3, #2
 800f976:	d112      	bne.n	800f99e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f97c:	881a      	ldrh	r2, [r3, #0]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f988:	1c9a      	adds	r2, r3, #2
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f992:	b29b      	uxth	r3, r3
 800f994:	3b01      	subs	r3, #1
 800f996:	b29a      	uxth	r2, r3
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f99c:	e018      	b.n	800f9d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f99e:	f7fe fd51 	bl	800e444 <HAL_GetTick>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	1ad3      	subs	r3, r2, r3
 800f9a8:	683a      	ldr	r2, [r7, #0]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d803      	bhi.n	800f9b6 <HAL_SPI_Transmit+0x160>
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b4:	d102      	bne.n	800f9bc <HAL_SPI_Transmit+0x166>
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d109      	bne.n	800f9d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	e082      	b.n	800fad6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1c7      	bne.n	800f96a <HAL_SPI_Transmit+0x114>
 800f9da:	e053      	b.n	800fa84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <HAL_SPI_Transmit+0x194>
 800f9e4:	8b7b      	ldrh	r3, [r7, #26]
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d147      	bne.n	800fa7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	330c      	adds	r3, #12
 800f9f4:	7812      	ldrb	r2, [r2, #0]
 800f9f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9fc:	1c5a      	adds	r2, r3, #1
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fa10:	e033      	b.n	800fa7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	f003 0302 	and.w	r3, r3, #2
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	d113      	bne.n	800fa48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	330c      	adds	r3, #12
 800fa2a:	7812      	ldrb	r2, [r2, #0]
 800fa2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	86da      	strh	r2, [r3, #54]	@ 0x36
 800fa46:	e018      	b.n	800fa7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa48:	f7fe fcfc 	bl	800e444 <HAL_GetTick>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d803      	bhi.n	800fa60 <HAL_SPI_Transmit+0x20a>
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa5e:	d102      	bne.n	800fa66 <HAL_SPI_Transmit+0x210>
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d109      	bne.n	800fa7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2201      	movs	r2, #1
 800fa6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800fa76:	2303      	movs	r3, #3
 800fa78:	e02d      	b.n	800fad6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d1c6      	bne.n	800fa12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fa84:	69fa      	ldr	r2, [r7, #28]
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f000 fc6f 	bl	801036c <SPI_EndRxTxTransaction>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2220      	movs	r2, #32
 800fa98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d10a      	bne.n	800fab8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800faa2:	2300      	movs	r3, #0
 800faa4:	617b      	str	r3, [r7, #20]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	617b      	str	r3, [r7, #20]
 800fab6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2201      	movs	r2, #1
 800fabc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	e000      	b.n	800fad6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800fad4:	2300      	movs	r3, #0
  }
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3720      	adds	r7, #32
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
	...

0800fae0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	4613      	mov	r3, r2
 800faec:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d001      	beq.n	800fafe <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800fafa:	2302      	movs	r3, #2
 800fafc:	e07f      	b.n	800fbfe <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d002      	beq.n	800fb0a <HAL_SPI_Receive_IT+0x2a>
 800fb04:	88fb      	ldrh	r3, [r7, #6]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e077      	b.n	800fbfe <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d110      	bne.n	800fb38 <HAL_SPI_Receive_IT+0x58>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb1e:	d10b      	bne.n	800fb38 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2204      	movs	r2, #4
 800fb24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800fb28:	88fb      	ldrh	r3, [r7, #6]
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	68b9      	ldr	r1, [r7, #8]
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f000 f86e 	bl	800fc10 <HAL_SPI_TransmitReceive_IT>
 800fb34:	4603      	mov	r3, r0
 800fb36:	e062      	b.n	800fbfe <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d101      	bne.n	800fb46 <HAL_SPI_Receive_IT+0x66>
 800fb42:	2302      	movs	r3, #2
 800fb44:	e05b      	b.n	800fbfe <HAL_SPI_Receive_IT+0x11e>
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2204      	movs	r2, #4
 800fb52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	68ba      	ldr	r2, [r7, #8]
 800fb60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	88fa      	ldrh	r2, [r7, #6]
 800fb66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	88fa      	ldrh	r2, [r7, #6]
 800fb6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2200      	movs	r2, #0
 800fb72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	4a1d      	ldr	r2, [pc, #116]	@ (800fc08 <HAL_SPI_Receive_IT+0x128>)
 800fb92:	641a      	str	r2, [r3, #64]	@ 0x40
 800fb94:	e002      	b.n	800fb9c <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	4a1c      	ldr	r2, [pc, #112]	@ (800fc0c <HAL_SPI_Receive_IT+0x12c>)
 800fb9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fba4:	d10f      	bne.n	800fbc6 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fbb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fbc4:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbd0:	2b40      	cmp	r3, #64	@ 0x40
 800fbd2:	d007      	beq.n	800fbe4 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fbe2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800fbfa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	08010149 	.word	0x08010149
 800fc0c:	080100ff 	.word	0x080100ff

0800fc10 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b087      	sub	sp, #28
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
 800fc1c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fc24:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fc2c:	7dfb      	ldrb	r3, [r7, #23]
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d00c      	beq.n	800fc4c <HAL_SPI_TransmitReceive_IT+0x3c>
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fc38:	d106      	bne.n	800fc48 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	689b      	ldr	r3, [r3, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d102      	bne.n	800fc48 <HAL_SPI_TransmitReceive_IT+0x38>
 800fc42:	7dfb      	ldrb	r3, [r7, #23]
 800fc44:	2b04      	cmp	r3, #4
 800fc46:	d001      	beq.n	800fc4c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800fc48:	2302      	movs	r3, #2
 800fc4a:	e061      	b.n	800fd10 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d005      	beq.n	800fc5e <HAL_SPI_TransmitReceive_IT+0x4e>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d002      	beq.n	800fc5e <HAL_SPI_TransmitReceive_IT+0x4e>
 800fc58:	887b      	ldrh	r3, [r7, #2]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e056      	b.n	800fd10 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d101      	bne.n	800fc70 <HAL_SPI_TransmitReceive_IT+0x60>
 800fc6c:	2302      	movs	r3, #2
 800fc6e:	e04f      	b.n	800fd10 <HAL_SPI_TransmitReceive_IT+0x100>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	2b04      	cmp	r3, #4
 800fc82:	d003      	beq.n	800fc8c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2205      	movs	r2, #5
 800fc88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	887a      	ldrh	r2, [r7, #2]
 800fc9c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	887a      	ldrh	r2, [r7, #2]
 800fca2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	887a      	ldrh	r2, [r7, #2]
 800fcae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	887a      	ldrh	r2, [r7, #2]
 800fcb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d006      	beq.n	800fccc <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	4a16      	ldr	r2, [pc, #88]	@ (800fd1c <HAL_SPI_TransmitReceive_IT+0x10c>)
 800fcc2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	4a16      	ldr	r2, [pc, #88]	@ (800fd20 <HAL_SPI_TransmitReceive_IT+0x110>)
 800fcc8:	645a      	str	r2, [r3, #68]	@ 0x44
 800fcca:	e005      	b.n	800fcd8 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4a15      	ldr	r2, [pc, #84]	@ (800fd24 <HAL_SPI_TransmitReceive_IT+0x114>)
 800fcd0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	4a14      	ldr	r2, [pc, #80]	@ (800fd28 <HAL_SPI_TransmitReceive_IT+0x118>)
 800fcd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fce2:	2b40      	cmp	r3, #64	@ 0x40
 800fce4:	d007      	beq.n	800fcf6 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fcf4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800fd0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fd0e:	2300      	movs	r3, #0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	371c      	adds	r7, #28
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	08010041 	.word	0x08010041
 800fd20:	080100a1 	.word	0x080100a1
 800fd24:	0800ff7d 	.word	0x0800ff7d
 800fd28:	0800ffe1 	.word	0x0800ffe1

0800fd2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b088      	sub	sp, #32
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	099b      	lsrs	r3, r3, #6
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10f      	bne.n	800fd70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00a      	beq.n	800fd70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	099b      	lsrs	r3, r3, #6
 800fd5e:	f003 0301 	and.w	r3, r3, #1
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d004      	beq.n	800fd70 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	4798      	blx	r3
    return;
 800fd6e:	e0d7      	b.n	800ff20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	085b      	lsrs	r3, r3, #1
 800fd74:	f003 0301 	and.w	r3, r3, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <HAL_SPI_IRQHandler+0x66>
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	09db      	lsrs	r3, r3, #7
 800fd80:	f003 0301 	and.w	r3, r3, #1
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d004      	beq.n	800fd92 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	4798      	blx	r3
    return;
 800fd90:	e0c6      	b.n	800ff20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	095b      	lsrs	r3, r3, #5
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10c      	bne.n	800fdb8 <HAL_SPI_IRQHandler+0x8c>
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	099b      	lsrs	r3, r3, #6
 800fda2:	f003 0301 	and.w	r3, r3, #1
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d106      	bne.n	800fdb8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	0a1b      	lsrs	r3, r3, #8
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f000 80b4 	beq.w	800ff20 <HAL_SPI_IRQHandler+0x1f4>
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	095b      	lsrs	r3, r3, #5
 800fdbc:	f003 0301 	and.w	r3, r3, #1
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 80ad 	beq.w	800ff20 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	099b      	lsrs	r3, r3, #6
 800fdca:	f003 0301 	and.w	r3, r3, #1
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d023      	beq.n	800fe1a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b03      	cmp	r3, #3
 800fddc:	d011      	beq.n	800fe02 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fde2:	f043 0204 	orr.w	r2, r3, #4
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fdea:	2300      	movs	r3, #0
 800fdec:	617b      	str	r3, [r7, #20]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	617b      	str	r3, [r7, #20]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	617b      	str	r3, [r7, #20]
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	e00b      	b.n	800fe1a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fe02:	2300      	movs	r3, #0
 800fe04:	613b      	str	r3, [r7, #16]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	613b      	str	r3, [r7, #16]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	613b      	str	r3, [r7, #16]
 800fe16:	693b      	ldr	r3, [r7, #16]
        return;
 800fe18:	e082      	b.n	800ff20 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	095b      	lsrs	r3, r3, #5
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d014      	beq.n	800fe50 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe2a:	f043 0201 	orr.w	r2, r3, #1
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fe32:	2300      	movs	r3, #0
 800fe34:	60fb      	str	r3, [r7, #12]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	60fb      	str	r3, [r7, #12]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	0a1b      	lsrs	r3, r3, #8
 800fe54:	f003 0301 	and.w	r3, r3, #1
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00c      	beq.n	800fe76 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe60:	f043 0208 	orr.w	r2, r3, #8
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fe68:	2300      	movs	r3, #0
 800fe6a:	60bb      	str	r3, [r7, #8]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	60bb      	str	r3, [r7, #8]
 800fe74:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d04f      	beq.n	800ff1e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fe8c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2201      	movs	r2, #1
 800fe92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	f003 0302 	and.w	r3, r3, #2
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d104      	bne.n	800feaa <HAL_SPI_IRQHandler+0x17e>
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d034      	beq.n	800ff14 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	685a      	ldr	r2, [r3, #4]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f022 0203 	bic.w	r2, r2, #3
 800feb8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d011      	beq.n	800fee6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fec6:	4a18      	ldr	r2, [pc, #96]	@ (800ff28 <HAL_SPI_IRQHandler+0x1fc>)
 800fec8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fe fc3a 	bl	800e748 <HAL_DMA_Abort_IT>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d005      	beq.n	800fee6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fede:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800feea:	2b00      	cmp	r3, #0
 800feec:	d016      	beq.n	800ff1c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef2:	4a0d      	ldr	r2, [pc, #52]	@ (800ff28 <HAL_SPI_IRQHandler+0x1fc>)
 800fef4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fc24 	bl	800e748 <HAL_DMA_Abort_IT>
 800ff00:	4603      	mov	r3, r0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00a      	beq.n	800ff1c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800ff12:	e003      	b.n	800ff1c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 f813 	bl	800ff40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ff1a:	e000      	b.n	800ff1e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ff1c:	bf00      	nop
    return;
 800ff1e:	bf00      	nop
  }
}
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	0800ff55 	.word	0x0800ff55

0800ff2c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	f7ff ffe6 	bl	800ff40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ff74:	bf00      	nop
 800ff76:	3710      	adds	r7, #16
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f103 020c 	add.w	r2, r3, #12
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff90:	7812      	ldrb	r2, [r2, #0]
 800ff92:	b2d2      	uxtb	r2, r2
 800ff94:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff9a:	1c5a      	adds	r2, r3, #1
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10f      	bne.n	800ffd8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	685a      	ldr	r2, [r3, #4]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ffc6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d102      	bne.n	800ffd8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fa1e 	bl	8010414 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ffd8:	bf00      	nop
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	330c      	adds	r3, #12
 800fff2:	7812      	ldrb	r2, [r2, #0]
 800fff4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010004:	b29b      	uxth	r3, r3
 8010006:	3b01      	subs	r3, #1
 8010008:	b29a      	uxth	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010012:	b29b      	uxth	r3, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10f      	bne.n	8010038 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010026:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801002c:	b29b      	uxth	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d102      	bne.n	8010038 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f9ee 	bl	8010414 <SPI_CloseRxTx_ISR>
    }
  }
}
 8010038:	bf00      	nop
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	68da      	ldr	r2, [r3, #12]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010052:	b292      	uxth	r2, r2
 8010054:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801005a:	1c9a      	adds	r2, r3, #2
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010064:	b29b      	uxth	r3, r3
 8010066:	3b01      	subs	r3, #1
 8010068:	b29a      	uxth	r2, r3
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010072:	b29b      	uxth	r3, r3
 8010074:	2b00      	cmp	r3, #0
 8010076:	d10f      	bne.n	8010098 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	685a      	ldr	r2, [r3, #4]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010086:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801008c:	b29b      	uxth	r3, r3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d102      	bne.n	8010098 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 f9be 	bl	8010414 <SPI_CloseRxTx_ISR>
    }
  }
}
 8010098:	bf00      	nop
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ac:	881a      	ldrh	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b8:	1c9a      	adds	r2, r3, #2
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	3b01      	subs	r3, #1
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d10f      	bne.n	80100f6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80100e4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d102      	bne.n	80100f6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 f98f 	bl	8010414 <SPI_CloseRxTx_ISR>
    }
  }
}
 80100f6:	bf00      	nop
 80100f8:	3708      	adds	r7, #8
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}

080100fe <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80100fe:	b580      	push	{r7, lr}
 8010100:	b082      	sub	sp, #8
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f103 020c 	add.w	r2, r3, #12
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010112:	7812      	ldrb	r2, [r2, #0]
 8010114:	b2d2      	uxtb	r2, r2
 8010116:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010126:	b29b      	uxth	r3, r3
 8010128:	3b01      	subs	r3, #1
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010134:	b29b      	uxth	r3, r3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d102      	bne.n	8010140 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f9de 	bl	80104fc <SPI_CloseRx_ISR>
  }
}
 8010140:	bf00      	nop
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68da      	ldr	r2, [r3, #12]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801015a:	b292      	uxth	r2, r2
 801015c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010162:	1c9a      	adds	r2, r3, #2
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801016c:	b29b      	uxth	r3, r3
 801016e:	3b01      	subs	r3, #1
 8010170:	b29a      	uxth	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801017a:	b29b      	uxth	r3, r3
 801017c:	2b00      	cmp	r3, #0
 801017e:	d102      	bne.n	8010186 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f9bb 	bl	80104fc <SPI_CloseRx_ISR>
  }
}
 8010186:	bf00      	nop
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
	...

08010190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b088      	sub	sp, #32
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	603b      	str	r3, [r7, #0]
 801019c:	4613      	mov	r3, r2
 801019e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80101a0:	f7fe f950 	bl	800e444 <HAL_GetTick>
 80101a4:	4602      	mov	r2, r0
 80101a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a8:	1a9b      	subs	r3, r3, r2
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	4413      	add	r3, r2
 80101ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80101b0:	f7fe f948 	bl	800e444 <HAL_GetTick>
 80101b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80101b6:	4b39      	ldr	r3, [pc, #228]	@ (801029c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	015b      	lsls	r3, r3, #5
 80101bc:	0d1b      	lsrs	r3, r3, #20
 80101be:	69fa      	ldr	r2, [r7, #28]
 80101c0:	fb02 f303 	mul.w	r3, r2, r3
 80101c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80101c6:	e055      	b.n	8010274 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ce:	d051      	beq.n	8010274 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80101d0:	f7fe f938 	bl	800e444 <HAL_GetTick>
 80101d4:	4602      	mov	r2, r0
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	69fa      	ldr	r2, [r7, #28]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d902      	bls.n	80101e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d13d      	bne.n	8010262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80101f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80101fe:	d111      	bne.n	8010224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010208:	d004      	beq.n	8010214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010212:	d107      	bne.n	8010224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801022c:	d10f      	bne.n	801024e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801024c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2200      	movs	r2, #0
 801025a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801025e:	2303      	movs	r3, #3
 8010260:	e018      	b.n	8010294 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d102      	bne.n	801026e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8010268:	2300      	movs	r3, #0
 801026a:	61fb      	str	r3, [r7, #28]
 801026c:	e002      	b.n	8010274 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	3b01      	subs	r3, #1
 8010272:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	689a      	ldr	r2, [r3, #8]
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	4013      	ands	r3, r2
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	429a      	cmp	r2, r3
 8010282:	bf0c      	ite	eq
 8010284:	2301      	moveq	r3, #1
 8010286:	2300      	movne	r3, #0
 8010288:	b2db      	uxtb	r3, r3
 801028a:	461a      	mov	r2, r3
 801028c:	79fb      	ldrb	r3, [r7, #7]
 801028e:	429a      	cmp	r2, r3
 8010290:	d19a      	bne.n	80101c8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3720      	adds	r7, #32
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20000020 	.word	0x20000020

080102a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102b4:	d111      	bne.n	80102da <SPI_EndRxTransaction+0x3a>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102be:	d004      	beq.n	80102ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102c8:	d107      	bne.n	80102da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80102d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102e2:	d12a      	bne.n	801033a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102ec:	d012      	beq.n	8010314 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	2200      	movs	r2, #0
 80102f6:	2180      	movs	r1, #128	@ 0x80
 80102f8:	68f8      	ldr	r0, [r7, #12]
 80102fa:	f7ff ff49 	bl	8010190 <SPI_WaitFlagStateUntilTimeout>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d02d      	beq.n	8010360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010308:	f043 0220 	orr.w	r2, r3, #32
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010310:	2303      	movs	r3, #3
 8010312:	e026      	b.n	8010362 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	2200      	movs	r2, #0
 801031c:	2101      	movs	r1, #1
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7ff ff36 	bl	8010190 <SPI_WaitFlagStateUntilTimeout>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d01a      	beq.n	8010360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801032e:	f043 0220 	orr.w	r2, r3, #32
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010336:	2303      	movs	r3, #3
 8010338:	e013      	b.n	8010362 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	9300      	str	r3, [sp, #0]
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	2200      	movs	r2, #0
 8010342:	2101      	movs	r1, #1
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7ff ff23 	bl	8010190 <SPI_WaitFlagStateUntilTimeout>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d007      	beq.n	8010360 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010354:	f043 0220 	orr.w	r2, r3, #32
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801035c:	2303      	movs	r3, #3
 801035e:	e000      	b.n	8010362 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
	...

0801036c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af02      	add	r7, sp, #8
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2201      	movs	r2, #1
 8010380:	2102      	movs	r1, #2
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f7ff ff04 	bl	8010190 <SPI_WaitFlagStateUntilTimeout>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d007      	beq.n	801039e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010392:	f043 0220 	orr.w	r2, r3, #32
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801039a:	2303      	movs	r3, #3
 801039c:	e032      	b.n	8010404 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801039e:	4b1b      	ldr	r3, [pc, #108]	@ (801040c <SPI_EndRxTxTransaction+0xa0>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4a1b      	ldr	r2, [pc, #108]	@ (8010410 <SPI_EndRxTxTransaction+0xa4>)
 80103a4:	fba2 2303 	umull	r2, r3, r2, r3
 80103a8:	0d5b      	lsrs	r3, r3, #21
 80103aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80103ae:	fb02 f303 	mul.w	r3, r2, r3
 80103b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103bc:	d112      	bne.n	80103e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	2200      	movs	r2, #0
 80103c6:	2180      	movs	r1, #128	@ 0x80
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f7ff fee1 	bl	8010190 <SPI_WaitFlagStateUntilTimeout>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d016      	beq.n	8010402 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103d8:	f043 0220 	orr.w	r2, r3, #32
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80103e0:	2303      	movs	r3, #3
 80103e2:	e00f      	b.n	8010404 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103fa:	2b80      	cmp	r3, #128	@ 0x80
 80103fc:	d0f2      	beq.n	80103e4 <SPI_EndRxTxTransaction+0x78>
 80103fe:	e000      	b.n	8010402 <SPI_EndRxTxTransaction+0x96>
        break;
 8010400:	bf00      	nop
  }

  return HAL_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3718      	adds	r7, #24
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	20000020 	.word	0x20000020
 8010410:	165e9f81 	.word	0x165e9f81

08010414 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b086      	sub	sp, #24
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801041c:	4b35      	ldr	r3, [pc, #212]	@ (80104f4 <SPI_CloseRxTx_ISR+0xe0>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a35      	ldr	r2, [pc, #212]	@ (80104f8 <SPI_CloseRxTx_ISR+0xe4>)
 8010422:	fba2 2303 	umull	r2, r3, r2, r3
 8010426:	0a5b      	lsrs	r3, r3, #9
 8010428:	2264      	movs	r2, #100	@ 0x64
 801042a:	fb02 f303 	mul.w	r3, r2, r3
 801042e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010430:	f7fe f808 	bl	800e444 <HAL_GetTick>
 8010434:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	685a      	ldr	r2, [r3, #4]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f022 0220 	bic.w	r2, r2, #32
 8010444:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d106      	bne.n	801045a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010450:	f043 0220 	orr.w	r2, r3, #32
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010458:	e009      	b.n	801046e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	3b01      	subs	r3, #1
 801045e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	689b      	ldr	r3, [r3, #8]
 8010466:	f003 0302 	and.w	r3, r3, #2
 801046a:	2b00      	cmp	r3, #0
 801046c:	d0eb      	beq.n	8010446 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	2164      	movs	r1, #100	@ 0x64
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff ff7a 	bl	801036c <SPI_EndRxTxTransaction>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d005      	beq.n	801048a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010482:	f043 0220 	orr.w	r2, r3, #32
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d10a      	bne.n	80104a8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010492:	2300      	movs	r3, #0
 8010494:	60fb      	str	r3, [r7, #12]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	60fb      	str	r3, [r7, #12]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	60fb      	str	r3, [r7, #12]
 80104a6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d115      	bne.n	80104dc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	2b04      	cmp	r3, #4
 80104ba:	d107      	bne.n	80104cc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7fd feb3 	bl	800e230 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80104ca:	e00e      	b.n	80104ea <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff fd29 	bl	800ff2c <HAL_SPI_TxRxCpltCallback>
}
 80104da:	e006      	b.n	80104ea <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f7ff fd2b 	bl	800ff40 <HAL_SPI_ErrorCallback>
}
 80104ea:	bf00      	nop
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	20000020 	.word	0x20000020
 80104f8:	057619f1 	.word	0x057619f1

080104fc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	685a      	ldr	r2, [r3, #4]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010512:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8010514:	f7fd ff96 	bl	800e444 <HAL_GetTick>
 8010518:	4603      	mov	r3, r0
 801051a:	461a      	mov	r2, r3
 801051c:	2164      	movs	r1, #100	@ 0x64
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7ff febe 	bl	80102a0 <SPI_EndRxTransaction>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d005      	beq.n	8010536 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801052e:	f043 0220 	orr.w	r2, r3, #32
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10a      	bne.n	8010554 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801053e:	2300      	movs	r3, #0
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	60fb      	str	r3, [r7, #12]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	689b      	ldr	r3, [r3, #8]
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010560:	2b00      	cmp	r3, #0
 8010562:	d103      	bne.n	801056c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7fd fe63 	bl	800e230 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801056a:	e002      	b.n	8010572 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7ff fce7 	bl	800ff40 <HAL_SPI_ErrorCallback>
}
 8010572:	bf00      	nop
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}

0801057a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b082      	sub	sp, #8
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d101      	bne.n	801058c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010588:	2301      	movs	r3, #1
 801058a:	e041      	b.n	8010610 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010592:	b2db      	uxtb	r3, r3
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 f839 	bl	8010618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2202      	movs	r2, #2
 80105aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	3304      	adds	r3, #4
 80105b6:	4619      	mov	r1, r3
 80105b8:	4610      	mov	r0, r2
 80105ba:	f000 f9bf 	bl	801093c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2201      	movs	r2, #1
 80105c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2201      	movs	r2, #1
 80105ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2201      	movs	r2, #1
 80105d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2201      	movs	r2, #1
 80105da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2201      	movs	r2, #1
 80105e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2201      	movs	r2, #1
 80105ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2201      	movs	r2, #1
 80105fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2201      	movs	r2, #1
 8010602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2201      	movs	r2, #1
 801060a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010620:	bf00      	nop
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b01      	cmp	r3, #1
 801063e:	d001      	beq.n	8010644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010640:	2301      	movs	r3, #1
 8010642:	e04e      	b.n	80106e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2202      	movs	r2, #2
 8010648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	68da      	ldr	r2, [r3, #12]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f042 0201 	orr.w	r2, r2, #1
 801065a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a23      	ldr	r2, [pc, #140]	@ (80106f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d022      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801066e:	d01d      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a1f      	ldr	r2, [pc, #124]	@ (80106f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d018      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a1e      	ldr	r2, [pc, #120]	@ (80106f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d013      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a1c      	ldr	r2, [pc, #112]	@ (80106fc <HAL_TIM_Base_Start_IT+0xd0>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00e      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a1b      	ldr	r2, [pc, #108]	@ (8010700 <HAL_TIM_Base_Start_IT+0xd4>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d009      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a19      	ldr	r2, [pc, #100]	@ (8010704 <HAL_TIM_Base_Start_IT+0xd8>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d004      	beq.n	80106ac <HAL_TIM_Base_Start_IT+0x80>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a18      	ldr	r2, [pc, #96]	@ (8010708 <HAL_TIM_Base_Start_IT+0xdc>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d111      	bne.n	80106d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	f003 0307 	and.w	r3, r3, #7
 80106b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2b06      	cmp	r3, #6
 80106bc:	d010      	beq.n	80106e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f042 0201 	orr.w	r2, r2, #1
 80106cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106ce:	e007      	b.n	80106e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f042 0201 	orr.w	r2, r2, #1
 80106de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3714      	adds	r7, #20
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	40010000 	.word	0x40010000
 80106f4:	40000400 	.word	0x40000400
 80106f8:	40000800 	.word	0x40000800
 80106fc:	40000c00 	.word	0x40000c00
 8010700:	40010400 	.word	0x40010400
 8010704:	40014000 	.word	0x40014000
 8010708:	40001800 	.word	0x40001800

0801070c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	691b      	ldr	r3, [r3, #16]
 8010722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	f003 0302 	and.w	r3, r3, #2
 801072a:	2b00      	cmp	r3, #0
 801072c:	d020      	beq.n	8010770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f003 0302 	and.w	r3, r3, #2
 8010734:	2b00      	cmp	r3, #0
 8010736:	d01b      	beq.n	8010770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f06f 0202 	mvn.w	r2, #2
 8010740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2201      	movs	r2, #1
 8010746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	699b      	ldr	r3, [r3, #24]
 801074e:	f003 0303 	and.w	r3, r3, #3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d003      	beq.n	801075e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f8d2 	bl	8010900 <HAL_TIM_IC_CaptureCallback>
 801075c:	e005      	b.n	801076a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f8c4 	bl	80108ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 f8d5 	bl	8010914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	f003 0304 	and.w	r3, r3, #4
 8010776:	2b00      	cmp	r3, #0
 8010778:	d020      	beq.n	80107bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f003 0304 	and.w	r3, r3, #4
 8010780:	2b00      	cmp	r3, #0
 8010782:	d01b      	beq.n	80107bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f06f 0204 	mvn.w	r2, #4
 801078c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2202      	movs	r2, #2
 8010792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d003      	beq.n	80107aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 f8ac 	bl	8010900 <HAL_TIM_IC_CaptureCallback>
 80107a8:	e005      	b.n	80107b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f89e 	bl	80108ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 f8af 	bl	8010914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	f003 0308 	and.w	r3, r3, #8
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d020      	beq.n	8010808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f003 0308 	and.w	r3, r3, #8
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d01b      	beq.n	8010808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f06f 0208 	mvn.w	r2, #8
 80107d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2204      	movs	r2, #4
 80107de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	69db      	ldr	r3, [r3, #28]
 80107e6:	f003 0303 	and.w	r3, r3, #3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d003      	beq.n	80107f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 f886 	bl	8010900 <HAL_TIM_IC_CaptureCallback>
 80107f4:	e005      	b.n	8010802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 f878 	bl	80108ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 f889 	bl	8010914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	f003 0310 	and.w	r3, r3, #16
 801080e:	2b00      	cmp	r3, #0
 8010810:	d020      	beq.n	8010854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b00      	cmp	r3, #0
 801081a:	d01b      	beq.n	8010854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f06f 0210 	mvn.w	r2, #16
 8010824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2208      	movs	r2, #8
 801082a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	69db      	ldr	r3, [r3, #28]
 8010832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010836:	2b00      	cmp	r3, #0
 8010838:	d003      	beq.n	8010842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f860 	bl	8010900 <HAL_TIM_IC_CaptureCallback>
 8010840:	e005      	b.n	801084e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 f852 	bl	80108ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 f863 	bl	8010914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	f003 0301 	and.w	r3, r3, #1
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00c      	beq.n	8010878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	2b00      	cmp	r3, #0
 8010866:	d007      	beq.n	8010878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f06f 0201 	mvn.w	r2, #1
 8010870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7fc fd16 	bl	800d2a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00c      	beq.n	801089c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010888:	2b00      	cmp	r3, #0
 801088a:	d007      	beq.n	801089c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 f900 	bl	8010a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00c      	beq.n	80108c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d007      	beq.n	80108c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80108b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f834 	bl	8010928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	f003 0320 	and.w	r3, r3, #32
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00c      	beq.n	80108e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f003 0320 	and.w	r3, r3, #32
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d007      	beq.n	80108e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f06f 0220 	mvn.w	r2, #32
 80108dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f000 f8d2 	bl	8010a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108e4:	bf00      	nop
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80108f4:	bf00      	nop
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010908:	bf00      	nop
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010930:	bf00      	nop
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801093c:	b480      	push	{r7}
 801093e:	b085      	sub	sp, #20
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a43      	ldr	r2, [pc, #268]	@ (8010a5c <TIM_Base_SetConfig+0x120>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d013      	beq.n	801097c <TIM_Base_SetConfig+0x40>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801095a:	d00f      	beq.n	801097c <TIM_Base_SetConfig+0x40>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a40      	ldr	r2, [pc, #256]	@ (8010a60 <TIM_Base_SetConfig+0x124>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d00b      	beq.n	801097c <TIM_Base_SetConfig+0x40>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4a3f      	ldr	r2, [pc, #252]	@ (8010a64 <TIM_Base_SetConfig+0x128>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d007      	beq.n	801097c <TIM_Base_SetConfig+0x40>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	4a3e      	ldr	r2, [pc, #248]	@ (8010a68 <TIM_Base_SetConfig+0x12c>)
 8010970:	4293      	cmp	r3, r2
 8010972:	d003      	beq.n	801097c <TIM_Base_SetConfig+0x40>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4a3d      	ldr	r2, [pc, #244]	@ (8010a6c <TIM_Base_SetConfig+0x130>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d108      	bne.n	801098e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	4313      	orrs	r3, r2
 801098c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4a32      	ldr	r2, [pc, #200]	@ (8010a5c <TIM_Base_SetConfig+0x120>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d02b      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801099c:	d027      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4a2f      	ldr	r2, [pc, #188]	@ (8010a60 <TIM_Base_SetConfig+0x124>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d023      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4a2e      	ldr	r2, [pc, #184]	@ (8010a64 <TIM_Base_SetConfig+0x128>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d01f      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4a2d      	ldr	r2, [pc, #180]	@ (8010a68 <TIM_Base_SetConfig+0x12c>)
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d01b      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a2c      	ldr	r2, [pc, #176]	@ (8010a6c <TIM_Base_SetConfig+0x130>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d017      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a2b      	ldr	r2, [pc, #172]	@ (8010a70 <TIM_Base_SetConfig+0x134>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d013      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4a2a      	ldr	r2, [pc, #168]	@ (8010a74 <TIM_Base_SetConfig+0x138>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d00f      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4a29      	ldr	r2, [pc, #164]	@ (8010a78 <TIM_Base_SetConfig+0x13c>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d00b      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a28      	ldr	r2, [pc, #160]	@ (8010a7c <TIM_Base_SetConfig+0x140>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d007      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4a27      	ldr	r2, [pc, #156]	@ (8010a80 <TIM_Base_SetConfig+0x144>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d003      	beq.n	80109ee <TIM_Base_SetConfig+0xb2>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4a26      	ldr	r2, [pc, #152]	@ (8010a84 <TIM_Base_SetConfig+0x148>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d108      	bne.n	8010a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80109f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	4313      	orrs	r3, r2
 80109fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	695b      	ldr	r3, [r3, #20]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	689a      	ldr	r2, [r3, #8]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4a0e      	ldr	r2, [pc, #56]	@ (8010a5c <TIM_Base_SetConfig+0x120>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d003      	beq.n	8010a2e <TIM_Base_SetConfig+0xf2>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4a10      	ldr	r2, [pc, #64]	@ (8010a6c <TIM_Base_SetConfig+0x130>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d103      	bne.n	8010a36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	691a      	ldr	r2, [r3, #16]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f043 0204 	orr.w	r2, r3, #4
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2201      	movs	r2, #1
 8010a46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	601a      	str	r2, [r3, #0]
}
 8010a4e:	bf00      	nop
 8010a50:	3714      	adds	r7, #20
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	40010000 	.word	0x40010000
 8010a60:	40000400 	.word	0x40000400
 8010a64:	40000800 	.word	0x40000800
 8010a68:	40000c00 	.word	0x40000c00
 8010a6c:	40010400 	.word	0x40010400
 8010a70:	40014000 	.word	0x40014000
 8010a74:	40014400 	.word	0x40014400
 8010a78:	40014800 	.word	0x40014800
 8010a7c:	40001800 	.word	0x40001800
 8010a80:	40001c00 	.word	0x40001c00
 8010a84:	40002000 	.word	0x40002000

08010a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010aa4:	bf00      	nop
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d101      	bne.n	8010ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e042      	b.n	8010b48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d106      	bne.n	8010adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7fc fcca 	bl	800d470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2224      	movs	r2, #36	@ 0x24
 8010ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68da      	ldr	r2, [r3, #12]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f000 fdd3 	bl	80116a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	691a      	ldr	r2, [r3, #16]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	695a      	ldr	r2, [r3, #20]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68da      	ldr	r2, [r3, #12]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2220      	movs	r2, #32
 8010b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2220      	movs	r2, #32
 8010b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8010b46:	2300      	movs	r3, #0
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3708      	adds	r7, #8
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08a      	sub	sp, #40	@ 0x28
 8010b54:	af02      	add	r7, sp, #8
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	603b      	str	r3, [r7, #0]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010b60:	2300      	movs	r3, #0
 8010b62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b20      	cmp	r3, #32
 8010b6e:	d175      	bne.n	8010c5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d002      	beq.n	8010b7c <HAL_UART_Transmit+0x2c>
 8010b76:	88fb      	ldrh	r3, [r7, #6]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d101      	bne.n	8010b80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e06e      	b.n	8010c5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2221      	movs	r2, #33	@ 0x21
 8010b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010b8e:	f7fd fc59 	bl	800e444 <HAL_GetTick>
 8010b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	88fa      	ldrh	r2, [r7, #6]
 8010b98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	88fa      	ldrh	r2, [r7, #6]
 8010b9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ba8:	d108      	bne.n	8010bbc <HAL_UART_Transmit+0x6c>
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d104      	bne.n	8010bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	61bb      	str	r3, [r7, #24]
 8010bba:	e003      	b.n	8010bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010bc4:	e02e      	b.n	8010c24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2180      	movs	r1, #128	@ 0x80
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f000 fb37 	bl	8011244 <UART_WaitOnFlagUntilTimeout>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d005      	beq.n	8010be8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2220      	movs	r2, #32
 8010be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8010be4:	2303      	movs	r3, #3
 8010be6:	e03a      	b.n	8010c5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d10b      	bne.n	8010c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	881b      	ldrh	r3, [r3, #0]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	3302      	adds	r3, #2
 8010c02:	61bb      	str	r3, [r7, #24]
 8010c04:	e007      	b.n	8010c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	781a      	ldrb	r2, [r3, #0]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	3301      	adds	r3, #1
 8010c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1cb      	bne.n	8010bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	2200      	movs	r2, #0
 8010c36:	2140      	movs	r1, #64	@ 0x40
 8010c38:	68f8      	ldr	r0, [r7, #12]
 8010c3a:	f000 fb03 	bl	8011244 <UART_WaitOnFlagUntilTimeout>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d005      	beq.n	8010c50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2220      	movs	r2, #32
 8010c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8010c4c:	2303      	movs	r3, #3
 8010c4e:	e006      	b.n	8010c5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2220      	movs	r2, #32
 8010c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e000      	b.n	8010c5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8010c5c:	2302      	movs	r3, #2
  }
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3720      	adds	r7, #32
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b084      	sub	sp, #16
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	60f8      	str	r0, [r7, #12]
 8010c6e:	60b9      	str	r1, [r7, #8]
 8010c70:	4613      	mov	r3, r2
 8010c72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	2b20      	cmp	r3, #32
 8010c7e:	d112      	bne.n	8010ca6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d002      	beq.n	8010c8c <HAL_UART_Receive_IT+0x26>
 8010c86:	88fb      	ldrh	r3, [r7, #6]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d101      	bne.n	8010c90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e00b      	b.n	8010ca8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2200      	movs	r2, #0
 8010c94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010c96:	88fb      	ldrh	r3, [r7, #6]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	68b9      	ldr	r1, [r7, #8]
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 fb2a 	bl	80112f6 <UART_Start_Receive_IT>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	e000      	b.n	8010ca8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8010ca6:	2302      	movs	r3, #2
  }
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b0ba      	sub	sp, #232	@ 0xe8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ce6:	f003 030f 	and.w	r3, r3, #15
 8010cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10f      	bne.n	8010d16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cfa:	f003 0320 	and.w	r3, r3, #32
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d009      	beq.n	8010d16 <HAL_UART_IRQHandler+0x66>
 8010d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d06:	f003 0320 	and.w	r3, r3, #32
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d003      	beq.n	8010d16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f000 fc07 	bl	8011522 <UART_Receive_IT>
      return;
 8010d14:	e273      	b.n	80111fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f000 80de 	beq.w	8010edc <HAL_UART_IRQHandler+0x22c>
 8010d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d24:	f003 0301 	and.w	r3, r3, #1
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d106      	bne.n	8010d3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 80d1 	beq.w	8010edc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d3e:	f003 0301 	and.w	r3, r3, #1
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00b      	beq.n	8010d5e <HAL_UART_IRQHandler+0xae>
 8010d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d005      	beq.n	8010d5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d56:	f043 0201 	orr.w	r2, r3, #1
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d62:	f003 0304 	and.w	r3, r3, #4
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00b      	beq.n	8010d82 <HAL_UART_IRQHandler+0xd2>
 8010d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d6e:	f003 0301 	and.w	r3, r3, #1
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d005      	beq.n	8010d82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d7a:	f043 0202 	orr.w	r2, r3, #2
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d86:	f003 0302 	and.w	r3, r3, #2
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00b      	beq.n	8010da6 <HAL_UART_IRQHandler+0xf6>
 8010d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d005      	beq.n	8010da6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d9e:	f043 0204 	orr.w	r2, r3, #4
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010daa:	f003 0308 	and.w	r3, r3, #8
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d011      	beq.n	8010dd6 <HAL_UART_IRQHandler+0x126>
 8010db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010db6:	f003 0320 	and.w	r3, r3, #32
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d105      	bne.n	8010dca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d005      	beq.n	8010dd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dce:	f043 0208 	orr.w	r2, r3, #8
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 820a 	beq.w	80111f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010de4:	f003 0320 	and.w	r3, r3, #32
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d008      	beq.n	8010dfe <HAL_UART_IRQHandler+0x14e>
 8010dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010df0:	f003 0320 	and.w	r3, r3, #32
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 fb92 	bl	8011522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e08:	2b40      	cmp	r3, #64	@ 0x40
 8010e0a:	bf0c      	ite	eq
 8010e0c:	2301      	moveq	r3, #1
 8010e0e:	2300      	movne	r3, #0
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e1a:	f003 0308 	and.w	r3, r3, #8
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d103      	bne.n	8010e2a <HAL_UART_IRQHandler+0x17a>
 8010e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d04f      	beq.n	8010eca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 fa9d 	bl	801136a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	695b      	ldr	r3, [r3, #20]
 8010e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e3a:	2b40      	cmp	r3, #64	@ 0x40
 8010e3c:	d141      	bne.n	8010ec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3314      	adds	r3, #20
 8010e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e4c:	e853 3f00 	ldrex	r3, [r3]
 8010e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	3314      	adds	r3, #20
 8010e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010e7a:	e841 2300 	strex	r3, r2, [r1]
 8010e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1d9      	bne.n	8010e3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d013      	beq.n	8010eba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e96:	4a8a      	ldr	r2, [pc, #552]	@ (80110c0 <HAL_UART_IRQHandler+0x410>)
 8010e98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fd fc52 	bl	800e748 <HAL_DMA_Abort_IT>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d016      	beq.n	8010ed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010eb8:	e00e      	b.n	8010ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 f9ac 	bl	8011218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ec0:	e00a      	b.n	8010ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 f9a8 	bl	8011218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ec8:	e006      	b.n	8010ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f9a4 	bl	8011218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8010ed6:	e18d      	b.n	80111f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ed8:	bf00      	nop
    return;
 8010eda:	e18b      	b.n	80111f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	f040 8167 	bne.w	80111b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010eea:	f003 0310 	and.w	r3, r3, #16
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f000 8160 	beq.w	80111b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8010ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ef8:	f003 0310 	and.w	r3, r3, #16
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 8159 	beq.w	80111b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010f02:	2300      	movs	r3, #0
 8010f04:	60bb      	str	r3, [r7, #8]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	60bb      	str	r3, [r7, #8]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	60bb      	str	r3, [r7, #8]
 8010f16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	695b      	ldr	r3, [r3, #20]
 8010f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f22:	2b40      	cmp	r3, #64	@ 0x40
 8010f24:	f040 80ce 	bne.w	80110c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f000 80a9 	beq.w	8011090 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f46:	429a      	cmp	r2, r3
 8010f48:	f080 80a2 	bcs.w	8011090 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f58:	69db      	ldr	r3, [r3, #28]
 8010f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f5e:	f000 8088 	beq.w	8011072 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	330c      	adds	r3, #12
 8010f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f70:	e853 3f00 	ldrex	r3, [r3]
 8010f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	330c      	adds	r3, #12
 8010f8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010f8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010f9e:	e841 2300 	strex	r3, r2, [r1]
 8010fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1d9      	bne.n	8010f62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3314      	adds	r3, #20
 8010fb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010fb8:	e853 3f00 	ldrex	r3, [r3]
 8010fbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010fc0:	f023 0301 	bic.w	r3, r3, #1
 8010fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	3314      	adds	r3, #20
 8010fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010fd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010fde:	e841 2300 	strex	r3, r2, [r1]
 8010fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1e1      	bne.n	8010fae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3314      	adds	r3, #20
 8010ff0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ff4:	e853 3f00 	ldrex	r3, [r3]
 8010ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3314      	adds	r3, #20
 801100a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801100e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011010:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011012:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011014:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011016:	e841 2300 	strex	r3, r2, [r1]
 801101a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801101c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1e3      	bne.n	8010fea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2220      	movs	r2, #32
 8011026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	330c      	adds	r3, #12
 8011036:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801103a:	e853 3f00 	ldrex	r3, [r3]
 801103e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011042:	f023 0310 	bic.w	r3, r3, #16
 8011046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	330c      	adds	r3, #12
 8011050:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011054:	65ba      	str	r2, [r7, #88]	@ 0x58
 8011056:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011058:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801105a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801105c:	e841 2300 	strex	r3, r2, [r1]
 8011060:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1e3      	bne.n	8011030 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801106c:	4618      	mov	r0, r3
 801106e:	f7fd fafb 	bl	800e668 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2202      	movs	r2, #2
 8011076:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011080:	b29b      	uxth	r3, r3
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	b29b      	uxth	r3, r3
 8011086:	4619      	mov	r1, r3
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f000 f8cf 	bl	801122c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801108e:	e0b3      	b.n	80111f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011094:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011098:	429a      	cmp	r2, r3
 801109a:	f040 80ad 	bne.w	80111f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110a2:	69db      	ldr	r3, [r3, #28]
 80110a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110a8:	f040 80a6 	bne.w	80111f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2202      	movs	r2, #2
 80110b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f8b7 	bl	801122c <HAL_UARTEx_RxEventCallback>
      return;
 80110be:	e09b      	b.n	80111f8 <HAL_UART_IRQHandler+0x548>
 80110c0:	08011431 	.word	0x08011431
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	1ad3      	subs	r3, r2, r3
 80110d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80110d8:	b29b      	uxth	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f000 808e 	beq.w	80111fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80110e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 8089 	beq.w	80111fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	330c      	adds	r3, #12
 80110f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f4:	e853 3f00 	ldrex	r3, [r3]
 80110f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80110fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	330c      	adds	r3, #12
 801110a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801110e:	647a      	str	r2, [r7, #68]	@ 0x44
 8011110:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011112:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011116:	e841 2300 	strex	r3, r2, [r1]
 801111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801111c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801111e:	2b00      	cmp	r3, #0
 8011120:	d1e3      	bne.n	80110ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	3314      	adds	r3, #20
 8011128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112c:	e853 3f00 	ldrex	r3, [r3]
 8011130:	623b      	str	r3, [r7, #32]
   return(result);
 8011132:	6a3b      	ldr	r3, [r7, #32]
 8011134:	f023 0301 	bic.w	r3, r3, #1
 8011138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3314      	adds	r3, #20
 8011142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011146:	633a      	str	r2, [r7, #48]	@ 0x30
 8011148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801114c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801114e:	e841 2300 	strex	r3, r2, [r1]
 8011152:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1e3      	bne.n	8011122 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2220      	movs	r2, #32
 801115e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	330c      	adds	r3, #12
 801116e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	60fb      	str	r3, [r7, #12]
   return(result);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f023 0310 	bic.w	r3, r3, #16
 801117e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	330c      	adds	r3, #12
 8011188:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801118c:	61fa      	str	r2, [r7, #28]
 801118e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011190:	69b9      	ldr	r1, [r7, #24]
 8011192:	69fa      	ldr	r2, [r7, #28]
 8011194:	e841 2300 	strex	r3, r2, [r1]
 8011198:	617b      	str	r3, [r7, #20]
   return(result);
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1e3      	bne.n	8011168 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2202      	movs	r2, #2
 80111a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80111a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80111aa:	4619      	mov	r1, r3
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 f83d 	bl	801122c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80111b2:	e023      	b.n	80111fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80111b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d009      	beq.n	80111d4 <HAL_UART_IRQHandler+0x524>
 80111c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d003      	beq.n	80111d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 f940 	bl	8011452 <UART_Transmit_IT>
    return;
 80111d2:	e014      	b.n	80111fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80111d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00e      	beq.n	80111fe <HAL_UART_IRQHandler+0x54e>
 80111e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d008      	beq.n	80111fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f980 	bl	80114f2 <UART_EndTransmit_IT>
    return;
 80111f2:	e004      	b.n	80111fe <HAL_UART_IRQHandler+0x54e>
    return;
 80111f4:	bf00      	nop
 80111f6:	e002      	b.n	80111fe <HAL_UART_IRQHandler+0x54e>
      return;
 80111f8:	bf00      	nop
 80111fa:	e000      	b.n	80111fe <HAL_UART_IRQHandler+0x54e>
      return;
 80111fc:	bf00      	nop
  }
}
 80111fe:	37e8      	adds	r7, #232	@ 0xe8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	460b      	mov	r3, r1
 8011236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011238:	bf00      	nop
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	603b      	str	r3, [r7, #0]
 8011250:	4613      	mov	r3, r2
 8011252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011254:	e03b      	b.n	80112ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125c:	d037      	beq.n	80112ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801125e:	f7fd f8f1 	bl	800e444 <HAL_GetTick>
 8011262:	4602      	mov	r2, r0
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	6a3a      	ldr	r2, [r7, #32]
 801126a:	429a      	cmp	r2, r3
 801126c:	d302      	bcc.n	8011274 <UART_WaitOnFlagUntilTimeout+0x30>
 801126e:	6a3b      	ldr	r3, [r7, #32]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d101      	bne.n	8011278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011274:	2303      	movs	r3, #3
 8011276:	e03a      	b.n	80112ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	f003 0304 	and.w	r3, r3, #4
 8011282:	2b00      	cmp	r3, #0
 8011284:	d023      	beq.n	80112ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2b80      	cmp	r3, #128	@ 0x80
 801128a:	d020      	beq.n	80112ce <UART_WaitOnFlagUntilTimeout+0x8a>
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	2b40      	cmp	r3, #64	@ 0x40
 8011290:	d01d      	beq.n	80112ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f003 0308 	and.w	r3, r3, #8
 801129c:	2b08      	cmp	r3, #8
 801129e:	d116      	bne.n	80112ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80112a0:	2300      	movs	r3, #0
 80112a2:	617b      	str	r3, [r7, #20]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	617b      	str	r3, [r7, #20]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	617b      	str	r3, [r7, #20]
 80112b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f000 f857 	bl	801136a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2208      	movs	r2, #8
 80112c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	e00f      	b.n	80112ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	4013      	ands	r3, r2
 80112d8:	68ba      	ldr	r2, [r7, #8]
 80112da:	429a      	cmp	r2, r3
 80112dc:	bf0c      	ite	eq
 80112de:	2301      	moveq	r3, #1
 80112e0:	2300      	movne	r3, #0
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	461a      	mov	r2, r3
 80112e6:	79fb      	ldrb	r3, [r7, #7]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d0b4      	beq.n	8011256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80112ec:	2300      	movs	r3, #0
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3718      	adds	r7, #24
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112f6:	b480      	push	{r7}
 80112f8:	b085      	sub	sp, #20
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	60f8      	str	r0, [r7, #12]
 80112fe:	60b9      	str	r1, [r7, #8]
 8011300:	4613      	mov	r3, r2
 8011302:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	68ba      	ldr	r2, [r7, #8]
 8011308:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	88fa      	ldrh	r2, [r7, #6]
 801130e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	88fa      	ldrh	r2, [r7, #6]
 8011314:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2200      	movs	r2, #0
 801131a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2222      	movs	r2, #34	@ 0x22
 8011320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	691b      	ldr	r3, [r3, #16]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d007      	beq.n	801133c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	68da      	ldr	r2, [r3, #12]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801133a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	695a      	ldr	r2, [r3, #20]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f042 0201 	orr.w	r2, r2, #1
 801134a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68da      	ldr	r2, [r3, #12]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f042 0220 	orr.w	r2, r2, #32
 801135a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3714      	adds	r7, #20
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr

0801136a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801136a:	b480      	push	{r7}
 801136c:	b095      	sub	sp, #84	@ 0x54
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	330c      	adds	r3, #12
 8011378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801137a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801137c:	e853 3f00 	ldrex	r3, [r3]
 8011380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	330c      	adds	r3, #12
 8011390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011392:	643a      	str	r2, [r7, #64]	@ 0x40
 8011394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801139a:	e841 2300 	strex	r3, r2, [r1]
 801139e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80113a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d1e5      	bne.n	8011372 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	3314      	adds	r3, #20
 80113ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	e853 3f00 	ldrex	r3, [r3]
 80113b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	f023 0301 	bic.w	r3, r3, #1
 80113bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	3314      	adds	r3, #20
 80113c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113ce:	e841 2300 	strex	r3, r2, [r1]
 80113d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1e5      	bne.n	80113a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d119      	bne.n	8011416 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	330c      	adds	r3, #12
 80113e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	e853 3f00 	ldrex	r3, [r3]
 80113f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	f023 0310 	bic.w	r3, r3, #16
 80113f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	330c      	adds	r3, #12
 8011400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011402:	61ba      	str	r2, [r7, #24]
 8011404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011406:	6979      	ldr	r1, [r7, #20]
 8011408:	69ba      	ldr	r2, [r7, #24]
 801140a:	e841 2300 	strex	r3, r2, [r1]
 801140e:	613b      	str	r3, [r7, #16]
   return(result);
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d1e5      	bne.n	80113e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2220      	movs	r2, #32
 801141a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011424:	bf00      	nop
 8011426:	3754      	adds	r7, #84	@ 0x54
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801143c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2200      	movs	r2, #0
 8011442:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f7ff fee7 	bl	8011218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801144a:	bf00      	nop
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011452:	b480      	push	{r7}
 8011454:	b085      	sub	sp, #20
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011460:	b2db      	uxtb	r3, r3
 8011462:	2b21      	cmp	r3, #33	@ 0x21
 8011464:	d13e      	bne.n	80114e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801146e:	d114      	bne.n	801149a <UART_Transmit_IT+0x48>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	691b      	ldr	r3, [r3, #16]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d110      	bne.n	801149a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a1b      	ldr	r3, [r3, #32]
 801147c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	881b      	ldrh	r3, [r3, #0]
 8011482:	461a      	mov	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801148c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a1b      	ldr	r3, [r3, #32]
 8011492:	1c9a      	adds	r2, r3, #2
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	621a      	str	r2, [r3, #32]
 8011498:	e008      	b.n	80114ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6a1b      	ldr	r3, [r3, #32]
 801149e:	1c59      	adds	r1, r3, #1
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	6211      	str	r1, [r2, #32]
 80114a4:	781a      	ldrb	r2, [r3, #0]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	3b01      	subs	r3, #1
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	4619      	mov	r1, r3
 80114ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d10f      	bne.n	80114e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	68da      	ldr	r2, [r3, #12]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80114ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	68da      	ldr	r2, [r3, #12]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80114de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	e000      	b.n	80114e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80114e4:	2302      	movs	r3, #2
  }
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3714      	adds	r7, #20
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr

080114f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b082      	sub	sp, #8
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	68da      	ldr	r2, [r3, #12]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2220      	movs	r2, #32
 801150e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7ff fe76 	bl	8011204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b08c      	sub	sp, #48	@ 0x30
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 801152a:	2300      	movs	r3, #0
 801152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 801152e:	2300      	movs	r3, #0
 8011530:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b22      	cmp	r3, #34	@ 0x22
 801153c:	f040 80aa 	bne.w	8011694 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011548:	d115      	bne.n	8011576 <UART_Receive_IT+0x54>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d111      	bne.n	8011576 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011556:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	b29b      	uxth	r3, r3
 8011560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011564:	b29a      	uxth	r2, r3
 8011566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801156e:	1c9a      	adds	r2, r3, #2
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	629a      	str	r2, [r3, #40]	@ 0x28
 8011574:	e024      	b.n	80115c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	689b      	ldr	r3, [r3, #8]
 8011580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011584:	d007      	beq.n	8011596 <UART_Receive_IT+0x74>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d10a      	bne.n	80115a4 <UART_Receive_IT+0x82>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	691b      	ldr	r3, [r3, #16]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d106      	bne.n	80115a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	b2da      	uxtb	r2, r3
 801159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a0:	701a      	strb	r2, [r3, #0]
 80115a2:	e008      	b.n	80115b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115b0:	b2da      	uxtb	r2, r3
 80115b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ba:	1c5a      	adds	r2, r3, #1
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	3b01      	subs	r3, #1
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	4619      	mov	r1, r3
 80115ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d15d      	bne.n	8011690 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68da      	ldr	r2, [r3, #12]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f022 0220 	bic.w	r2, r2, #32
 80115e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68da      	ldr	r2, [r3, #12]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80115f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	695a      	ldr	r2, [r3, #20]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f022 0201 	bic.w	r2, r2, #1
 8011602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2220      	movs	r2, #32
 8011608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2200      	movs	r2, #0
 8011610:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011616:	2b01      	cmp	r3, #1
 8011618:	d135      	bne.n	8011686 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	330c      	adds	r3, #12
 8011626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	e853 3f00 	ldrex	r3, [r3]
 801162e:	613b      	str	r3, [r7, #16]
   return(result);
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	f023 0310 	bic.w	r3, r3, #16
 8011636:	627b      	str	r3, [r7, #36]	@ 0x24
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	330c      	adds	r3, #12
 801163e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011640:	623a      	str	r2, [r7, #32]
 8011642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011644:	69f9      	ldr	r1, [r7, #28]
 8011646:	6a3a      	ldr	r2, [r7, #32]
 8011648:	e841 2300 	strex	r3, r2, [r1]
 801164c:	61bb      	str	r3, [r7, #24]
   return(result);
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d1e5      	bne.n	8011620 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f003 0310 	and.w	r3, r3, #16
 801165e:	2b10      	cmp	r3, #16
 8011660:	d10a      	bne.n	8011678 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011662:	2300      	movs	r3, #0
 8011664:	60fb      	str	r3, [r7, #12]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	60fb      	str	r3, [r7, #12]
 8011676:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801167c:	4619      	mov	r1, r3
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7ff fdd4 	bl	801122c <HAL_UARTEx_RxEventCallback>
 8011684:	e002      	b.n	801168c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f7fc fe14 	bl	800e2b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801168c:	2300      	movs	r3, #0
 801168e:	e002      	b.n	8011696 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011690:	2300      	movs	r3, #0
 8011692:	e000      	b.n	8011696 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8011694:	2302      	movs	r3, #2
  }
}
 8011696:	4618      	mov	r0, r3
 8011698:	3730      	adds	r7, #48	@ 0x30
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
	...

080116a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116a4:	b0c0      	sub	sp, #256	@ 0x100
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	691b      	ldr	r3, [r3, #16]
 80116b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80116b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116bc:	68d9      	ldr	r1, [r3, #12]
 80116be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	ea40 0301 	orr.w	r3, r0, r1
 80116c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80116ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116ce:	689a      	ldr	r2, [r3, #8]
 80116d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116d4:	691b      	ldr	r3, [r3, #16]
 80116d6:	431a      	orrs	r2, r3
 80116d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	431a      	orrs	r2, r3
 80116e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116e4:	69db      	ldr	r3, [r3, #28]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80116ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80116f8:	f021 010c 	bic.w	r1, r1, #12
 80116fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011706:	430b      	orrs	r3, r1
 8011708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801170a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	695b      	ldr	r3, [r3, #20]
 8011712:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801171a:	6999      	ldr	r1, [r3, #24]
 801171c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	ea40 0301 	orr.w	r3, r0, r1
 8011726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	4b8f      	ldr	r3, [pc, #572]	@ (801196c <UART_SetConfig+0x2cc>)
 8011730:	429a      	cmp	r2, r3
 8011732:	d005      	beq.n	8011740 <UART_SetConfig+0xa0>
 8011734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	4b8d      	ldr	r3, [pc, #564]	@ (8011970 <UART_SetConfig+0x2d0>)
 801173c:	429a      	cmp	r2, r3
 801173e:	d104      	bne.n	801174a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011740:	f7fd fb72 	bl	800ee28 <HAL_RCC_GetPCLK2Freq>
 8011744:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011748:	e003      	b.n	8011752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801174a:	f7fd fb59 	bl	800ee00 <HAL_RCC_GetPCLK1Freq>
 801174e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011756:	69db      	ldr	r3, [r3, #28]
 8011758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801175c:	f040 810c 	bne.w	8011978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011764:	2200      	movs	r2, #0
 8011766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801176a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801176e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011772:	4622      	mov	r2, r4
 8011774:	462b      	mov	r3, r5
 8011776:	1891      	adds	r1, r2, r2
 8011778:	65b9      	str	r1, [r7, #88]	@ 0x58
 801177a:	415b      	adcs	r3, r3
 801177c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801177e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011782:	4621      	mov	r1, r4
 8011784:	eb12 0801 	adds.w	r8, r2, r1
 8011788:	4629      	mov	r1, r5
 801178a:	eb43 0901 	adc.w	r9, r3, r1
 801178e:	f04f 0200 	mov.w	r2, #0
 8011792:	f04f 0300 	mov.w	r3, #0
 8011796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801179a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801179e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80117a2:	4690      	mov	r8, r2
 80117a4:	4699      	mov	r9, r3
 80117a6:	4623      	mov	r3, r4
 80117a8:	eb18 0303 	adds.w	r3, r8, r3
 80117ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80117b0:	462b      	mov	r3, r5
 80117b2:	eb49 0303 	adc.w	r3, r9, r3
 80117b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80117ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80117c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80117ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80117ce:	460b      	mov	r3, r1
 80117d0:	18db      	adds	r3, r3, r3
 80117d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80117d4:	4613      	mov	r3, r2
 80117d6:	eb42 0303 	adc.w	r3, r2, r3
 80117da:	657b      	str	r3, [r7, #84]	@ 0x54
 80117dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80117e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80117e4:	f7f7 fa30 	bl	8008c48 <__aeabi_uldivmod>
 80117e8:	4602      	mov	r2, r0
 80117ea:	460b      	mov	r3, r1
 80117ec:	4b61      	ldr	r3, [pc, #388]	@ (8011974 <UART_SetConfig+0x2d4>)
 80117ee:	fba3 2302 	umull	r2, r3, r3, r2
 80117f2:	095b      	lsrs	r3, r3, #5
 80117f4:	011c      	lsls	r4, r3, #4
 80117f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80117fa:	2200      	movs	r2, #0
 80117fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011800:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011808:	4642      	mov	r2, r8
 801180a:	464b      	mov	r3, r9
 801180c:	1891      	adds	r1, r2, r2
 801180e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011810:	415b      	adcs	r3, r3
 8011812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011818:	4641      	mov	r1, r8
 801181a:	eb12 0a01 	adds.w	sl, r2, r1
 801181e:	4649      	mov	r1, r9
 8011820:	eb43 0b01 	adc.w	fp, r3, r1
 8011824:	f04f 0200 	mov.w	r2, #0
 8011828:	f04f 0300 	mov.w	r3, #0
 801182c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011838:	4692      	mov	sl, r2
 801183a:	469b      	mov	fp, r3
 801183c:	4643      	mov	r3, r8
 801183e:	eb1a 0303 	adds.w	r3, sl, r3
 8011842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011846:	464b      	mov	r3, r9
 8011848:	eb4b 0303 	adc.w	r3, fp, r3
 801184c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801185c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011864:	460b      	mov	r3, r1
 8011866:	18db      	adds	r3, r3, r3
 8011868:	643b      	str	r3, [r7, #64]	@ 0x40
 801186a:	4613      	mov	r3, r2
 801186c:	eb42 0303 	adc.w	r3, r2, r3
 8011870:	647b      	str	r3, [r7, #68]	@ 0x44
 8011872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801187a:	f7f7 f9e5 	bl	8008c48 <__aeabi_uldivmod>
 801187e:	4602      	mov	r2, r0
 8011880:	460b      	mov	r3, r1
 8011882:	4611      	mov	r1, r2
 8011884:	4b3b      	ldr	r3, [pc, #236]	@ (8011974 <UART_SetConfig+0x2d4>)
 8011886:	fba3 2301 	umull	r2, r3, r3, r1
 801188a:	095b      	lsrs	r3, r3, #5
 801188c:	2264      	movs	r2, #100	@ 0x64
 801188e:	fb02 f303 	mul.w	r3, r2, r3
 8011892:	1acb      	subs	r3, r1, r3
 8011894:	00db      	lsls	r3, r3, #3
 8011896:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801189a:	4b36      	ldr	r3, [pc, #216]	@ (8011974 <UART_SetConfig+0x2d4>)
 801189c:	fba3 2302 	umull	r2, r3, r3, r2
 80118a0:	095b      	lsrs	r3, r3, #5
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80118a8:	441c      	add	r4, r3
 80118aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80118ae:	2200      	movs	r2, #0
 80118b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80118b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80118b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80118bc:	4642      	mov	r2, r8
 80118be:	464b      	mov	r3, r9
 80118c0:	1891      	adds	r1, r2, r2
 80118c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80118c4:	415b      	adcs	r3, r3
 80118c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80118cc:	4641      	mov	r1, r8
 80118ce:	1851      	adds	r1, r2, r1
 80118d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80118d2:	4649      	mov	r1, r9
 80118d4:	414b      	adcs	r3, r1
 80118d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80118d8:	f04f 0200 	mov.w	r2, #0
 80118dc:	f04f 0300 	mov.w	r3, #0
 80118e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80118e4:	4659      	mov	r1, fp
 80118e6:	00cb      	lsls	r3, r1, #3
 80118e8:	4651      	mov	r1, sl
 80118ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80118ee:	4651      	mov	r1, sl
 80118f0:	00ca      	lsls	r2, r1, #3
 80118f2:	4610      	mov	r0, r2
 80118f4:	4619      	mov	r1, r3
 80118f6:	4603      	mov	r3, r0
 80118f8:	4642      	mov	r2, r8
 80118fa:	189b      	adds	r3, r3, r2
 80118fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011900:	464b      	mov	r3, r9
 8011902:	460a      	mov	r2, r1
 8011904:	eb42 0303 	adc.w	r3, r2, r3
 8011908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801190c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2200      	movs	r2, #0
 8011914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011918:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801191c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011920:	460b      	mov	r3, r1
 8011922:	18db      	adds	r3, r3, r3
 8011924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011926:	4613      	mov	r3, r2
 8011928:	eb42 0303 	adc.w	r3, r2, r3
 801192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801192e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011936:	f7f7 f987 	bl	8008c48 <__aeabi_uldivmod>
 801193a:	4602      	mov	r2, r0
 801193c:	460b      	mov	r3, r1
 801193e:	4b0d      	ldr	r3, [pc, #52]	@ (8011974 <UART_SetConfig+0x2d4>)
 8011940:	fba3 1302 	umull	r1, r3, r3, r2
 8011944:	095b      	lsrs	r3, r3, #5
 8011946:	2164      	movs	r1, #100	@ 0x64
 8011948:	fb01 f303 	mul.w	r3, r1, r3
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	00db      	lsls	r3, r3, #3
 8011950:	3332      	adds	r3, #50	@ 0x32
 8011952:	4a08      	ldr	r2, [pc, #32]	@ (8011974 <UART_SetConfig+0x2d4>)
 8011954:	fba2 2303 	umull	r2, r3, r2, r3
 8011958:	095b      	lsrs	r3, r3, #5
 801195a:	f003 0207 	and.w	r2, r3, #7
 801195e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4422      	add	r2, r4
 8011966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011968:	e106      	b.n	8011b78 <UART_SetConfig+0x4d8>
 801196a:	bf00      	nop
 801196c:	40011000 	.word	0x40011000
 8011970:	40011400 	.word	0x40011400
 8011974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801197c:	2200      	movs	r2, #0
 801197e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011982:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801198a:	4642      	mov	r2, r8
 801198c:	464b      	mov	r3, r9
 801198e:	1891      	adds	r1, r2, r2
 8011990:	6239      	str	r1, [r7, #32]
 8011992:	415b      	adcs	r3, r3
 8011994:	627b      	str	r3, [r7, #36]	@ 0x24
 8011996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801199a:	4641      	mov	r1, r8
 801199c:	1854      	adds	r4, r2, r1
 801199e:	4649      	mov	r1, r9
 80119a0:	eb43 0501 	adc.w	r5, r3, r1
 80119a4:	f04f 0200 	mov.w	r2, #0
 80119a8:	f04f 0300 	mov.w	r3, #0
 80119ac:	00eb      	lsls	r3, r5, #3
 80119ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80119b2:	00e2      	lsls	r2, r4, #3
 80119b4:	4614      	mov	r4, r2
 80119b6:	461d      	mov	r5, r3
 80119b8:	4643      	mov	r3, r8
 80119ba:	18e3      	adds	r3, r4, r3
 80119bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80119c0:	464b      	mov	r3, r9
 80119c2:	eb45 0303 	adc.w	r3, r5, r3
 80119c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	2200      	movs	r2, #0
 80119d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80119d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80119da:	f04f 0200 	mov.w	r2, #0
 80119de:	f04f 0300 	mov.w	r3, #0
 80119e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80119e6:	4629      	mov	r1, r5
 80119e8:	008b      	lsls	r3, r1, #2
 80119ea:	4621      	mov	r1, r4
 80119ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80119f0:	4621      	mov	r1, r4
 80119f2:	008a      	lsls	r2, r1, #2
 80119f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80119f8:	f7f7 f926 	bl	8008c48 <__aeabi_uldivmod>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	4b60      	ldr	r3, [pc, #384]	@ (8011b84 <UART_SetConfig+0x4e4>)
 8011a02:	fba3 2302 	umull	r2, r3, r3, r2
 8011a06:	095b      	lsrs	r3, r3, #5
 8011a08:	011c      	lsls	r4, r3, #4
 8011a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011a1c:	4642      	mov	r2, r8
 8011a1e:	464b      	mov	r3, r9
 8011a20:	1891      	adds	r1, r2, r2
 8011a22:	61b9      	str	r1, [r7, #24]
 8011a24:	415b      	adcs	r3, r3
 8011a26:	61fb      	str	r3, [r7, #28]
 8011a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011a2c:	4641      	mov	r1, r8
 8011a2e:	1851      	adds	r1, r2, r1
 8011a30:	6139      	str	r1, [r7, #16]
 8011a32:	4649      	mov	r1, r9
 8011a34:	414b      	adcs	r3, r1
 8011a36:	617b      	str	r3, [r7, #20]
 8011a38:	f04f 0200 	mov.w	r2, #0
 8011a3c:	f04f 0300 	mov.w	r3, #0
 8011a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011a44:	4659      	mov	r1, fp
 8011a46:	00cb      	lsls	r3, r1, #3
 8011a48:	4651      	mov	r1, sl
 8011a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a4e:	4651      	mov	r1, sl
 8011a50:	00ca      	lsls	r2, r1, #3
 8011a52:	4610      	mov	r0, r2
 8011a54:	4619      	mov	r1, r3
 8011a56:	4603      	mov	r3, r0
 8011a58:	4642      	mov	r2, r8
 8011a5a:	189b      	adds	r3, r3, r2
 8011a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a60:	464b      	mov	r3, r9
 8011a62:	460a      	mov	r2, r1
 8011a64:	eb42 0303 	adc.w	r3, r2, r3
 8011a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011a78:	f04f 0200 	mov.w	r2, #0
 8011a7c:	f04f 0300 	mov.w	r3, #0
 8011a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011a84:	4649      	mov	r1, r9
 8011a86:	008b      	lsls	r3, r1, #2
 8011a88:	4641      	mov	r1, r8
 8011a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a8e:	4641      	mov	r1, r8
 8011a90:	008a      	lsls	r2, r1, #2
 8011a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011a96:	f7f7 f8d7 	bl	8008c48 <__aeabi_uldivmod>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	4611      	mov	r1, r2
 8011aa0:	4b38      	ldr	r3, [pc, #224]	@ (8011b84 <UART_SetConfig+0x4e4>)
 8011aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8011aa6:	095b      	lsrs	r3, r3, #5
 8011aa8:	2264      	movs	r2, #100	@ 0x64
 8011aaa:	fb02 f303 	mul.w	r3, r2, r3
 8011aae:	1acb      	subs	r3, r1, r3
 8011ab0:	011b      	lsls	r3, r3, #4
 8011ab2:	3332      	adds	r3, #50	@ 0x32
 8011ab4:	4a33      	ldr	r2, [pc, #204]	@ (8011b84 <UART_SetConfig+0x4e4>)
 8011ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8011aba:	095b      	lsrs	r3, r3, #5
 8011abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011ac0:	441c      	add	r4, r3
 8011ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	673b      	str	r3, [r7, #112]	@ 0x70
 8011aca:	677a      	str	r2, [r7, #116]	@ 0x74
 8011acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011ad0:	4642      	mov	r2, r8
 8011ad2:	464b      	mov	r3, r9
 8011ad4:	1891      	adds	r1, r2, r2
 8011ad6:	60b9      	str	r1, [r7, #8]
 8011ad8:	415b      	adcs	r3, r3
 8011ada:	60fb      	str	r3, [r7, #12]
 8011adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011ae0:	4641      	mov	r1, r8
 8011ae2:	1851      	adds	r1, r2, r1
 8011ae4:	6039      	str	r1, [r7, #0]
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	414b      	adcs	r3, r1
 8011aea:	607b      	str	r3, [r7, #4]
 8011aec:	f04f 0200 	mov.w	r2, #0
 8011af0:	f04f 0300 	mov.w	r3, #0
 8011af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011af8:	4659      	mov	r1, fp
 8011afa:	00cb      	lsls	r3, r1, #3
 8011afc:	4651      	mov	r1, sl
 8011afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b02:	4651      	mov	r1, sl
 8011b04:	00ca      	lsls	r2, r1, #3
 8011b06:	4610      	mov	r0, r2
 8011b08:	4619      	mov	r1, r3
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4642      	mov	r2, r8
 8011b0e:	189b      	adds	r3, r3, r2
 8011b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b12:	464b      	mov	r3, r9
 8011b14:	460a      	mov	r2, r1
 8011b16:	eb42 0303 	adc.w	r3, r2, r3
 8011b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b26:	667a      	str	r2, [r7, #100]	@ 0x64
 8011b28:	f04f 0200 	mov.w	r2, #0
 8011b2c:	f04f 0300 	mov.w	r3, #0
 8011b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011b34:	4649      	mov	r1, r9
 8011b36:	008b      	lsls	r3, r1, #2
 8011b38:	4641      	mov	r1, r8
 8011b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011b3e:	4641      	mov	r1, r8
 8011b40:	008a      	lsls	r2, r1, #2
 8011b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011b46:	f7f7 f87f 	bl	8008c48 <__aeabi_uldivmod>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b84 <UART_SetConfig+0x4e4>)
 8011b50:	fba3 1302 	umull	r1, r3, r3, r2
 8011b54:	095b      	lsrs	r3, r3, #5
 8011b56:	2164      	movs	r1, #100	@ 0x64
 8011b58:	fb01 f303 	mul.w	r3, r1, r3
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	011b      	lsls	r3, r3, #4
 8011b60:	3332      	adds	r3, #50	@ 0x32
 8011b62:	4a08      	ldr	r2, [pc, #32]	@ (8011b84 <UART_SetConfig+0x4e4>)
 8011b64:	fba2 2303 	umull	r2, r3, r2, r3
 8011b68:	095b      	lsrs	r3, r3, #5
 8011b6a:	f003 020f 	and.w	r2, r3, #15
 8011b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4422      	add	r2, r4
 8011b76:	609a      	str	r2, [r3, #8]
}
 8011b78:	bf00      	nop
 8011b7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b84:	51eb851f 	.word	0x51eb851f

08011b88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f103 0208 	add.w	r2, r3, #8
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f103 0208 	add.w	r2, r3, #8
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f103 0208 	add.w	r2, r3, #8
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011bbc:	bf00      	nop
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011bd6:	bf00      	nop
 8011bd8:	370c      	adds	r7, #12
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr

08011be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8011be2:	b480      	push	{r7}
 8011be4:	b085      	sub	sp, #20
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	689a      	ldr	r2, [r3, #8]
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	683a      	ldr	r2, [r7, #0]
 8011c0c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	1c5a      	adds	r2, r3, #1
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	601a      	str	r2, [r3, #0]
}
 8011c1e:	bf00      	nop
 8011c20:	3714      	adds	r7, #20
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	b085      	sub	sp, #20
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
 8011c32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c40:	d103      	bne.n	8011c4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	691b      	ldr	r3, [r3, #16]
 8011c46:	60fb      	str	r3, [r7, #12]
 8011c48:	e00c      	b.n	8011c64 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	60fb      	str	r3, [r7, #12]
 8011c50:	e002      	b.n	8011c58 <vListInsert+0x2e>
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	60fb      	str	r3, [r7, #12]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d2f6      	bcs.n	8011c52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	685a      	ldr	r2, [r3, #4]
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	683a      	ldr	r2, [r7, #0]
 8011c72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	683a      	ldr	r2, [r7, #0]
 8011c7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	1c5a      	adds	r2, r3, #1
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	601a      	str	r2, [r3, #0]
}
 8011c90:	bf00      	nop
 8011c92:	3714      	adds	r7, #20
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr

08011c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b085      	sub	sp, #20
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	6892      	ldr	r2, [r2, #8]
 8011cb2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	6852      	ldr	r2, [r2, #4]
 8011cbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d103      	bne.n	8011cd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	689a      	ldr	r2, [r3, #8]
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	1e5a      	subs	r2, r3, #1
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3714      	adds	r7, #20
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10b      	bne.n	8011d1c <xQueueGenericReset+0x2c>
        __asm volatile
 8011d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d08:	f383 8811 	msr	BASEPRI, r3
 8011d0c:	f3bf 8f6f 	isb	sy
 8011d10:	f3bf 8f4f 	dsb	sy
 8011d14:	60bb      	str	r3, [r7, #8]
    }
 8011d16:	bf00      	nop
 8011d18:	bf00      	nop
 8011d1a:	e7fd      	b.n	8011d18 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8011d1c:	f002 fa2e 	bl	801417c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d28:	68f9      	ldr	r1, [r7, #12]
 8011d2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011d2c:	fb01 f303 	mul.w	r3, r1, r3
 8011d30:	441a      	add	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	68f9      	ldr	r1, [r7, #12]
 8011d50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011d52:	fb01 f303 	mul.w	r3, r1, r3
 8011d56:	441a      	add	r2, r3
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	22ff      	movs	r2, #255	@ 0xff
 8011d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	22ff      	movs	r2, #255	@ 0xff
 8011d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d114      	bne.n	8011d9c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	691b      	ldr	r3, [r3, #16]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d01a      	beq.n	8011db0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3310      	adds	r3, #16
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f001 f9f2 	bl	8013168 <xTaskRemoveFromEventList>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d012      	beq.n	8011db0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8011d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8011dc0 <xQueueGenericReset+0xd0>)
 8011d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d90:	601a      	str	r2, [r3, #0]
 8011d92:	f3bf 8f4f 	dsb	sy
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	e009      	b.n	8011db0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	3310      	adds	r3, #16
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7ff fef1 	bl	8011b88 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	3324      	adds	r3, #36	@ 0x24
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7ff feec 	bl	8011b88 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8011db0:	f002 fa16 	bl	80141e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8011db4:	2301      	movs	r3, #1
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	e000ed04 	.word	0xe000ed04

08011dc4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b08c      	sub	sp, #48	@ 0x30
 8011dc8:	af02      	add	r7, sp, #8
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	4613      	mov	r3, r2
 8011dd0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d10b      	bne.n	8011df0 <xQueueGenericCreate+0x2c>
        __asm volatile
 8011dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ddc:	f383 8811 	msr	BASEPRI, r3
 8011de0:	f3bf 8f6f 	isb	sy
 8011de4:	f3bf 8f4f 	dsb	sy
 8011de8:	61bb      	str	r3, [r7, #24]
    }
 8011dea:	bf00      	nop
 8011dec:	bf00      	nop
 8011dee:	e7fd      	b.n	8011dec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	68ba      	ldr	r2, [r7, #8]
 8011df4:	fb02 f303 	mul.w	r3, r2, r3
 8011df8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d006      	beq.n	8011e0e <xQueueGenericCreate+0x4a>
 8011e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e08:	68fa      	ldr	r2, [r7, #12]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d101      	bne.n	8011e12 <xQueueGenericCreate+0x4e>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e000      	b.n	8011e14 <xQueueGenericCreate+0x50>
 8011e12:	2300      	movs	r3, #0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d10b      	bne.n	8011e30 <xQueueGenericCreate+0x6c>
        __asm volatile
 8011e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e1c:	f383 8811 	msr	BASEPRI, r3
 8011e20:	f3bf 8f6f 	isb	sy
 8011e24:	f3bf 8f4f 	dsb	sy
 8011e28:	617b      	str	r3, [r7, #20]
    }
 8011e2a:	bf00      	nop
 8011e2c:	bf00      	nop
 8011e2e:	e7fd      	b.n	8011e2c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8011e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e32:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8011e36:	d90b      	bls.n	8011e50 <xQueueGenericCreate+0x8c>
        __asm volatile
 8011e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e3c:	f383 8811 	msr	BASEPRI, r3
 8011e40:	f3bf 8f6f 	isb	sy
 8011e44:	f3bf 8f4f 	dsb	sy
 8011e48:	613b      	str	r3, [r7, #16]
    }
 8011e4a:	bf00      	nop
 8011e4c:	bf00      	nop
 8011e4e:	e7fd      	b.n	8011e4c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e52:	3350      	adds	r3, #80	@ 0x50
 8011e54:	4618      	mov	r0, r3
 8011e56:	f002 fabb 	bl	80143d0 <pvPortMalloc>
 8011e5a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8011e5c:	6a3b      	ldr	r3, [r7, #32]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00d      	beq.n	8011e7e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	3350      	adds	r3, #80	@ 0x50
 8011e6a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e6c:	79fa      	ldrb	r2, [r7, #7]
 8011e6e:	6a3b      	ldr	r3, [r7, #32]
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	4613      	mov	r3, r2
 8011e74:	69fa      	ldr	r2, [r7, #28]
 8011e76:	68b9      	ldr	r1, [r7, #8]
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f000 f805 	bl	8011e88 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
    }
 8011e80:	4618      	mov	r0, r3
 8011e82:	3728      	adds	r7, #40	@ 0x28
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d103      	bne.n	8011ea4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	69ba      	ldr	r2, [r7, #24]
 8011ea0:	601a      	str	r2, [r3, #0]
 8011ea2:	e002      	b.n	8011eaa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011ea4:	69bb      	ldr	r3, [r7, #24]
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8011eb0:	69bb      	ldr	r3, [r7, #24]
 8011eb2:	68ba      	ldr	r2, [r7, #8]
 8011eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	69b8      	ldr	r0, [r7, #24]
 8011eba:	f7ff ff19 	bl	8011cf0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	78fa      	ldrb	r2, [r7, #3]
 8011ec2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8011ec6:	bf00      	nop
 8011ec8:	3710      	adds	r7, #16
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00e      	beq.n	8011efa <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011eee:	2300      	movs	r3, #0
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 f81d 	bl	8011f34 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8011efa:	bf00      	nop
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b086      	sub	sp, #24
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	4603      	mov	r3, r0
 8011f0a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	617b      	str	r3, [r7, #20]
 8011f10:	2300      	movs	r3, #0
 8011f12:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011f14:	79fb      	ldrb	r3, [r7, #7]
 8011f16:	461a      	mov	r2, r3
 8011f18:	6939      	ldr	r1, [r7, #16]
 8011f1a:	6978      	ldr	r0, [r7, #20]
 8011f1c:	f7ff ff52 	bl	8011dc4 <xQueueGenericCreate>
 8011f20:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	f7ff ffd3 	bl	8011ece <prvInitialiseMutex>

        return xNewQueue;
 8011f28:	68fb      	ldr	r3, [r7, #12]
    }
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3718      	adds	r7, #24
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
	...

08011f34 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b08e      	sub	sp, #56	@ 0x38
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
 8011f40:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011f42:	2300      	movs	r3, #0
 8011f44:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d10b      	bne.n	8011f68 <xQueueGenericSend+0x34>
        __asm volatile
 8011f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f54:	f383 8811 	msr	BASEPRI, r3
 8011f58:	f3bf 8f6f 	isb	sy
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8011f62:	bf00      	nop
 8011f64:	bf00      	nop
 8011f66:	e7fd      	b.n	8011f64 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d103      	bne.n	8011f76 <xQueueGenericSend+0x42>
 8011f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d101      	bne.n	8011f7a <xQueueGenericSend+0x46>
 8011f76:	2301      	movs	r3, #1
 8011f78:	e000      	b.n	8011f7c <xQueueGenericSend+0x48>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d10b      	bne.n	8011f98 <xQueueGenericSend+0x64>
        __asm volatile
 8011f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f84:	f383 8811 	msr	BASEPRI, r3
 8011f88:	f3bf 8f6f 	isb	sy
 8011f8c:	f3bf 8f4f 	dsb	sy
 8011f90:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8011f92:	bf00      	nop
 8011f94:	bf00      	nop
 8011f96:	e7fd      	b.n	8011f94 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2b02      	cmp	r3, #2
 8011f9c:	d103      	bne.n	8011fa6 <xQueueGenericSend+0x72>
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d101      	bne.n	8011faa <xQueueGenericSend+0x76>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e000      	b.n	8011fac <xQueueGenericSend+0x78>
 8011faa:	2300      	movs	r3, #0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10b      	bne.n	8011fc8 <xQueueGenericSend+0x94>
        __asm volatile
 8011fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	623b      	str	r3, [r7, #32]
    }
 8011fc2:	bf00      	nop
 8011fc4:	bf00      	nop
 8011fc6:	e7fd      	b.n	8011fc4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011fc8:	f001 fa6e 	bl	80134a8 <xTaskGetSchedulerState>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d102      	bne.n	8011fd8 <xQueueGenericSend+0xa4>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d101      	bne.n	8011fdc <xQueueGenericSend+0xa8>
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e000      	b.n	8011fde <xQueueGenericSend+0xaa>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10b      	bne.n	8011ffa <xQueueGenericSend+0xc6>
        __asm volatile
 8011fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fe6:	f383 8811 	msr	BASEPRI, r3
 8011fea:	f3bf 8f6f 	isb	sy
 8011fee:	f3bf 8f4f 	dsb	sy
 8011ff2:	61fb      	str	r3, [r7, #28]
    }
 8011ff4:	bf00      	nop
 8011ff6:	bf00      	nop
 8011ff8:	e7fd      	b.n	8011ff6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011ffa:	f002 f8bf 	bl	801417c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012006:	429a      	cmp	r2, r3
 8012008:	d302      	bcc.n	8012010 <xQueueGenericSend+0xdc>
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	2b02      	cmp	r3, #2
 801200e:	d129      	bne.n	8012064 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	68b9      	ldr	r1, [r7, #8]
 8012014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012016:	f000 fb47 	bl	80126a8 <prvCopyDataToQueue>
 801201a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012020:	2b00      	cmp	r3, #0
 8012022:	d010      	beq.n	8012046 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012026:	3324      	adds	r3, #36	@ 0x24
 8012028:	4618      	mov	r0, r3
 801202a:	f001 f89d 	bl	8013168 <xTaskRemoveFromEventList>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d013      	beq.n	801205c <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8012034:	4b3f      	ldr	r3, [pc, #252]	@ (8012134 <xQueueGenericSend+0x200>)
 8012036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801203a:	601a      	str	r2, [r3, #0]
 801203c:	f3bf 8f4f 	dsb	sy
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	e00a      	b.n	801205c <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8012046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012048:	2b00      	cmp	r3, #0
 801204a:	d007      	beq.n	801205c <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 801204c:	4b39      	ldr	r3, [pc, #228]	@ (8012134 <xQueueGenericSend+0x200>)
 801204e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012052:	601a      	str	r2, [r3, #0]
 8012054:	f3bf 8f4f 	dsb	sy
 8012058:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 801205c:	f002 f8c0 	bl	80141e0 <vPortExitCritical>
                return pdPASS;
 8012060:	2301      	movs	r3, #1
 8012062:	e063      	b.n	801212c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d103      	bne.n	8012072 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 801206a:	f002 f8b9 	bl	80141e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 801206e:	2300      	movs	r3, #0
 8012070:	e05c      	b.n	801212c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012074:	2b00      	cmp	r3, #0
 8012076:	d106      	bne.n	8012086 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8012078:	f107 0314 	add.w	r3, r7, #20
 801207c:	4618      	mov	r0, r3
 801207e:	f001 f8d7 	bl	8013230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012082:	2301      	movs	r3, #1
 8012084:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8012086:	f002 f8ab 	bl	80141e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801208a:	f000 fe49 	bl	8012d20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801208e:	f002 f875 	bl	801417c <vPortEnterCritical>
 8012092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012098:	b25b      	sxtb	r3, r3
 801209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801209e:	d103      	bne.n	80120a8 <xQueueGenericSend+0x174>
 80120a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a2:	2200      	movs	r2, #0
 80120a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80120a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80120ae:	b25b      	sxtb	r3, r3
 80120b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b4:	d103      	bne.n	80120be <xQueueGenericSend+0x18a>
 80120b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80120be:	f002 f88f 	bl	80141e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80120c2:	1d3a      	adds	r2, r7, #4
 80120c4:	f107 0314 	add.w	r3, r7, #20
 80120c8:	4611      	mov	r1, r2
 80120ca:	4618      	mov	r0, r3
 80120cc:	f001 f8c6 	bl	801325c <xTaskCheckForTimeOut>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d124      	bne.n	8012120 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80120d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80120d8:	f000 fbde 	bl	8012898 <prvIsQueueFull>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d018      	beq.n	8012114 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80120e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e4:	3310      	adds	r3, #16
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	4611      	mov	r1, r2
 80120ea:	4618      	mov	r0, r3
 80120ec:	f000 ffea 	bl	80130c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80120f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80120f2:	f000 fb69 	bl	80127c8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80120f6:	f000 fe21 	bl	8012d3c <xTaskResumeAll>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f47f af7c 	bne.w	8011ffa <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8012102:	4b0c      	ldr	r3, [pc, #48]	@ (8012134 <xQueueGenericSend+0x200>)
 8012104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012108:	601a      	str	r2, [r3, #0]
 801210a:	f3bf 8f4f 	dsb	sy
 801210e:	f3bf 8f6f 	isb	sy
 8012112:	e772      	b.n	8011ffa <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8012114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012116:	f000 fb57 	bl	80127c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801211a:	f000 fe0f 	bl	8012d3c <xTaskResumeAll>
 801211e:	e76c      	b.n	8011ffa <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8012120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012122:	f000 fb51 	bl	80127c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012126:	f000 fe09 	bl	8012d3c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 801212a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 801212c:	4618      	mov	r0, r3
 801212e:	3738      	adds	r7, #56	@ 0x38
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	e000ed04 	.word	0xe000ed04

08012138 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b090      	sub	sp, #64	@ 0x40
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 801214a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801214c:	2b00      	cmp	r3, #0
 801214e:	d10b      	bne.n	8012168 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8012150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012154:	f383 8811 	msr	BASEPRI, r3
 8012158:	f3bf 8f6f 	isb	sy
 801215c:	f3bf 8f4f 	dsb	sy
 8012160:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8012162:	bf00      	nop
 8012164:	bf00      	nop
 8012166:	e7fd      	b.n	8012164 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d103      	bne.n	8012176 <xQueueGenericSendFromISR+0x3e>
 801216e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012172:	2b00      	cmp	r3, #0
 8012174:	d101      	bne.n	801217a <xQueueGenericSendFromISR+0x42>
 8012176:	2301      	movs	r3, #1
 8012178:	e000      	b.n	801217c <xQueueGenericSendFromISR+0x44>
 801217a:	2300      	movs	r3, #0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10b      	bne.n	8012198 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8012192:	bf00      	nop
 8012194:	bf00      	nop
 8012196:	e7fd      	b.n	8012194 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	2b02      	cmp	r3, #2
 801219c:	d103      	bne.n	80121a6 <xQueueGenericSendFromISR+0x6e>
 801219e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d101      	bne.n	80121aa <xQueueGenericSendFromISR+0x72>
 80121a6:	2301      	movs	r3, #1
 80121a8:	e000      	b.n	80121ac <xQueueGenericSendFromISR+0x74>
 80121aa:	2300      	movs	r3, #0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10b      	bne.n	80121c8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	623b      	str	r3, [r7, #32]
    }
 80121c2:	bf00      	nop
 80121c4:	bf00      	nop
 80121c6:	e7fd      	b.n	80121c4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121c8:	f002 f8c0 	bl	801434c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80121cc:	f3ef 8211 	mrs	r2, BASEPRI
 80121d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	61fa      	str	r2, [r7, #28]
 80121e2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80121e4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80121e6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80121e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d302      	bcc.n	80121fa <xQueueGenericSendFromISR+0xc2>
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d13f      	bne.n	801227a <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80121fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012208:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801220a:	683a      	ldr	r2, [r7, #0]
 801220c:	68b9      	ldr	r1, [r7, #8]
 801220e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012210:	f000 fa4a 	bl	80126a8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8012214:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801221c:	d112      	bne.n	8012244 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801221e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012222:	2b00      	cmp	r3, #0
 8012224:	d026      	beq.n	8012274 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012228:	3324      	adds	r3, #36	@ 0x24
 801222a:	4618      	mov	r0, r3
 801222c:	f000 ff9c 	bl	8013168 <xTaskRemoveFromEventList>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d01e      	beq.n	8012274 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d01b      	beq.n	8012274 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2201      	movs	r2, #1
 8012240:	601a      	str	r2, [r3, #0]
 8012242:	e017      	b.n	8012274 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8012244:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012248:	2b7f      	cmp	r3, #127	@ 0x7f
 801224a:	d10b      	bne.n	8012264 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 801224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012250:	f383 8811 	msr	BASEPRI, r3
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	617b      	str	r3, [r7, #20]
    }
 801225e:	bf00      	nop
 8012260:	bf00      	nop
 8012262:	e7fd      	b.n	8012260 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012264:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012268:	3301      	adds	r3, #1
 801226a:	b2db      	uxtb	r3, r3
 801226c:	b25a      	sxtb	r2, r3
 801226e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8012274:	2301      	movs	r3, #1
 8012276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8012278:	e001      	b.n	801227e <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 801227a:	2300      	movs	r3, #0
 801227c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012280:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8012288:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 801228a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801228c:	4618      	mov	r0, r3
 801228e:	3740      	adds	r7, #64	@ 0x40
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08c      	sub	sp, #48	@ 0x30
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80122a0:	2300      	movs	r3, #0
 80122a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80122a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10b      	bne.n	80122c6 <xQueueReceive+0x32>
        __asm volatile
 80122ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	623b      	str	r3, [r7, #32]
    }
 80122c0:	bf00      	nop
 80122c2:	bf00      	nop
 80122c4:	e7fd      	b.n	80122c2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d103      	bne.n	80122d4 <xQueueReceive+0x40>
 80122cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d101      	bne.n	80122d8 <xQueueReceive+0x44>
 80122d4:	2301      	movs	r3, #1
 80122d6:	e000      	b.n	80122da <xQueueReceive+0x46>
 80122d8:	2300      	movs	r3, #0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d10b      	bne.n	80122f6 <xQueueReceive+0x62>
        __asm volatile
 80122de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e2:	f383 8811 	msr	BASEPRI, r3
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	61fb      	str	r3, [r7, #28]
    }
 80122f0:	bf00      	nop
 80122f2:	bf00      	nop
 80122f4:	e7fd      	b.n	80122f2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122f6:	f001 f8d7 	bl	80134a8 <xTaskGetSchedulerState>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d102      	bne.n	8012306 <xQueueReceive+0x72>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d101      	bne.n	801230a <xQueueReceive+0x76>
 8012306:	2301      	movs	r3, #1
 8012308:	e000      	b.n	801230c <xQueueReceive+0x78>
 801230a:	2300      	movs	r3, #0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d10b      	bne.n	8012328 <xQueueReceive+0x94>
        __asm volatile
 8012310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012314:	f383 8811 	msr	BASEPRI, r3
 8012318:	f3bf 8f6f 	isb	sy
 801231c:	f3bf 8f4f 	dsb	sy
 8012320:	61bb      	str	r3, [r7, #24]
    }
 8012322:	bf00      	nop
 8012324:	bf00      	nop
 8012326:	e7fd      	b.n	8012324 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8012328:	f001 ff28 	bl	801417c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012330:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012334:	2b00      	cmp	r3, #0
 8012336:	d01f      	beq.n	8012378 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012338:	68b9      	ldr	r1, [r7, #8]
 801233a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801233c:	f000 fa1e 	bl	801277c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	1e5a      	subs	r2, r3, #1
 8012344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012346:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801234a:	691b      	ldr	r3, [r3, #16]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00f      	beq.n	8012370 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012352:	3310      	adds	r3, #16
 8012354:	4618      	mov	r0, r3
 8012356:	f000 ff07 	bl	8013168 <xTaskRemoveFromEventList>
 801235a:	4603      	mov	r3, r0
 801235c:	2b00      	cmp	r3, #0
 801235e:	d007      	beq.n	8012370 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8012360:	4b3c      	ldr	r3, [pc, #240]	@ (8012454 <xQueueReceive+0x1c0>)
 8012362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012366:	601a      	str	r2, [r3, #0]
 8012368:	f3bf 8f4f 	dsb	sy
 801236c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8012370:	f001 ff36 	bl	80141e0 <vPortExitCritical>
                return pdPASS;
 8012374:	2301      	movs	r3, #1
 8012376:	e069      	b.n	801244c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d103      	bne.n	8012386 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 801237e:	f001 ff2f 	bl	80141e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8012382:	2300      	movs	r3, #0
 8012384:	e062      	b.n	801244c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012388:	2b00      	cmp	r3, #0
 801238a:	d106      	bne.n	801239a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801238c:	f107 0310 	add.w	r3, r7, #16
 8012390:	4618      	mov	r0, r3
 8012392:	f000 ff4d 	bl	8013230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012396:	2301      	movs	r3, #1
 8012398:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 801239a:	f001 ff21 	bl	80141e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801239e:	f000 fcbf 	bl	8012d20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80123a2:	f001 feeb 	bl	801417c <vPortEnterCritical>
 80123a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80123ac:	b25b      	sxtb	r3, r3
 80123ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b2:	d103      	bne.n	80123bc <xQueueReceive+0x128>
 80123b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123b6:	2200      	movs	r2, #0
 80123b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80123bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80123c2:	b25b      	sxtb	r3, r3
 80123c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123c8:	d103      	bne.n	80123d2 <xQueueReceive+0x13e>
 80123ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123cc:	2200      	movs	r2, #0
 80123ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80123d2:	f001 ff05 	bl	80141e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123d6:	1d3a      	adds	r2, r7, #4
 80123d8:	f107 0310 	add.w	r3, r7, #16
 80123dc:	4611      	mov	r1, r2
 80123de:	4618      	mov	r0, r3
 80123e0:	f000 ff3c 	bl	801325c <xTaskCheckForTimeOut>
 80123e4:	4603      	mov	r3, r0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d123      	bne.n	8012432 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123ec:	f000 fa3e 	bl	801286c <prvIsQueueEmpty>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d017      	beq.n	8012426 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80123f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f8:	3324      	adds	r3, #36	@ 0x24
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	4611      	mov	r1, r2
 80123fe:	4618      	mov	r0, r3
 8012400:	f000 fe60 	bl	80130c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8012404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012406:	f000 f9df 	bl	80127c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 801240a:	f000 fc97 	bl	8012d3c <xTaskResumeAll>
 801240e:	4603      	mov	r3, r0
 8012410:	2b00      	cmp	r3, #0
 8012412:	d189      	bne.n	8012328 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8012414:	4b0f      	ldr	r3, [pc, #60]	@ (8012454 <xQueueReceive+0x1c0>)
 8012416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801241a:	601a      	str	r2, [r3, #0]
 801241c:	f3bf 8f4f 	dsb	sy
 8012420:	f3bf 8f6f 	isb	sy
 8012424:	e780      	b.n	8012328 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8012426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012428:	f000 f9ce 	bl	80127c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801242c:	f000 fc86 	bl	8012d3c <xTaskResumeAll>
 8012430:	e77a      	b.n	8012328 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8012432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012434:	f000 f9c8 	bl	80127c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012438:	f000 fc80 	bl	8012d3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801243c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801243e:	f000 fa15 	bl	801286c <prvIsQueueEmpty>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	f43f af6f 	beq.w	8012328 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 801244a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 801244c:	4618      	mov	r0, r3
 801244e:	3730      	adds	r7, #48	@ 0x30
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	e000ed04 	.word	0xe000ed04

08012458 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b08e      	sub	sp, #56	@ 0x38
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8012462:	2300      	movs	r3, #0
 8012464:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 801246a:	2300      	movs	r3, #0
 801246c:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 801246e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012470:	2b00      	cmp	r3, #0
 8012472:	d10b      	bne.n	801248c <xQueueSemaphoreTake+0x34>
        __asm volatile
 8012474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	623b      	str	r3, [r7, #32]
    }
 8012486:	bf00      	nop
 8012488:	bf00      	nop
 801248a:	e7fd      	b.n	8012488 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 801248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00b      	beq.n	80124ac <xQueueSemaphoreTake+0x54>
        __asm volatile
 8012494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012498:	f383 8811 	msr	BASEPRI, r3
 801249c:	f3bf 8f6f 	isb	sy
 80124a0:	f3bf 8f4f 	dsb	sy
 80124a4:	61fb      	str	r3, [r7, #28]
    }
 80124a6:	bf00      	nop
 80124a8:	bf00      	nop
 80124aa:	e7fd      	b.n	80124a8 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124ac:	f000 fffc 	bl	80134a8 <xTaskGetSchedulerState>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d102      	bne.n	80124bc <xQueueSemaphoreTake+0x64>
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d101      	bne.n	80124c0 <xQueueSemaphoreTake+0x68>
 80124bc:	2301      	movs	r3, #1
 80124be:	e000      	b.n	80124c2 <xQueueSemaphoreTake+0x6a>
 80124c0:	2300      	movs	r3, #0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10b      	bne.n	80124de <xQueueSemaphoreTake+0x86>
        __asm volatile
 80124c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124ca:	f383 8811 	msr	BASEPRI, r3
 80124ce:	f3bf 8f6f 	isb	sy
 80124d2:	f3bf 8f4f 	dsb	sy
 80124d6:	61bb      	str	r3, [r7, #24]
    }
 80124d8:	bf00      	nop
 80124da:	bf00      	nop
 80124dc:	e7fd      	b.n	80124da <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80124de:	f001 fe4d 	bl	801417c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80124e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124e6:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80124e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d024      	beq.n	8012538 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80124ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f0:	1e5a      	subs	r2, r3, #1
 80124f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f4:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80124f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d104      	bne.n	8012508 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80124fe:	f001 f973 	bl	80137e8 <pvTaskIncrementMutexHeldCount>
 8012502:	4602      	mov	r2, r0
 8012504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012506:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250a:	691b      	ldr	r3, [r3, #16]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d00f      	beq.n	8012530 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012512:	3310      	adds	r3, #16
 8012514:	4618      	mov	r0, r3
 8012516:	f000 fe27 	bl	8013168 <xTaskRemoveFromEventList>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d007      	beq.n	8012530 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8012520:	4b54      	ldr	r3, [pc, #336]	@ (8012674 <xQueueSemaphoreTake+0x21c>)
 8012522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012526:	601a      	str	r2, [r3, #0]
 8012528:	f3bf 8f4f 	dsb	sy
 801252c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8012530:	f001 fe56 	bl	80141e0 <vPortExitCritical>
                return pdPASS;
 8012534:	2301      	movs	r3, #1
 8012536:	e098      	b.n	801266a <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d112      	bne.n	8012564 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 801253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012540:	2b00      	cmp	r3, #0
 8012542:	d00b      	beq.n	801255c <xQueueSemaphoreTake+0x104>
        __asm volatile
 8012544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012548:	f383 8811 	msr	BASEPRI, r3
 801254c:	f3bf 8f6f 	isb	sy
 8012550:	f3bf 8f4f 	dsb	sy
 8012554:	617b      	str	r3, [r7, #20]
    }
 8012556:	bf00      	nop
 8012558:	bf00      	nop
 801255a:	e7fd      	b.n	8012558 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 801255c:	f001 fe40 	bl	80141e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8012560:	2300      	movs	r3, #0
 8012562:	e082      	b.n	801266a <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801256a:	f107 030c 	add.w	r3, r7, #12
 801256e:	4618      	mov	r0, r3
 8012570:	f000 fe5e 	bl	8013230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012574:	2301      	movs	r3, #1
 8012576:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8012578:	f001 fe32 	bl	80141e0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801257c:	f000 fbd0 	bl	8012d20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012580:	f001 fdfc 	bl	801417c <vPortEnterCritical>
 8012584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012586:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801258a:	b25b      	sxtb	r3, r3
 801258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012590:	d103      	bne.n	801259a <xQueueSemaphoreTake+0x142>
 8012592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012594:	2200      	movs	r2, #0
 8012596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801259c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80125a0:	b25b      	sxtb	r3, r3
 80125a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a6:	d103      	bne.n	80125b0 <xQueueSemaphoreTake+0x158>
 80125a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125aa:	2200      	movs	r2, #0
 80125ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80125b0:	f001 fe16 	bl	80141e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125b4:	463a      	mov	r2, r7
 80125b6:	f107 030c 	add.w	r3, r7, #12
 80125ba:	4611      	mov	r1, r2
 80125bc:	4618      	mov	r0, r3
 80125be:	f000 fe4d 	bl	801325c <xTaskCheckForTimeOut>
 80125c2:	4603      	mov	r3, r0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d132      	bne.n	801262e <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125ca:	f000 f94f 	bl	801286c <prvIsQueueEmpty>
 80125ce:	4603      	mov	r3, r0
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d026      	beq.n	8012622 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80125d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d109      	bne.n	80125f0 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 80125dc:	f001 fdce 	bl	801417c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80125e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e2:	689b      	ldr	r3, [r3, #8]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f000 ff7d 	bl	80134e4 <xTaskPriorityInherit>
 80125ea:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 80125ec:	f001 fdf8 	bl	80141e0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80125f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f2:	3324      	adds	r3, #36	@ 0x24
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	4611      	mov	r1, r2
 80125f8:	4618      	mov	r0, r3
 80125fa:	f000 fd63 	bl	80130c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80125fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012600:	f000 f8e2 	bl	80127c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8012604:	f000 fb9a 	bl	8012d3c <xTaskResumeAll>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	f47f af67 	bne.w	80124de <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8012610:	4b18      	ldr	r3, [pc, #96]	@ (8012674 <xQueueSemaphoreTake+0x21c>)
 8012612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012616:	601a      	str	r2, [r3, #0]
 8012618:	f3bf 8f4f 	dsb	sy
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	e75d      	b.n	80124de <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8012622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012624:	f000 f8d0 	bl	80127c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012628:	f000 fb88 	bl	8012d3c <xTaskResumeAll>
 801262c:	e757      	b.n	80124de <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 801262e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012630:	f000 f8ca 	bl	80127c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012634:	f000 fb82 	bl	8012d3c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801263a:	f000 f917 	bl	801286c <prvIsQueueEmpty>
 801263e:	4603      	mov	r3, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	f43f af4c 	beq.w	80124de <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8012646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00d      	beq.n	8012668 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 801264c:	f001 fd96 	bl	801417c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012650:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012652:	f000 f811 	bl	8012678 <prvGetDisinheritPriorityAfterTimeout>
 8012656:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801265a:	689b      	ldr	r3, [r3, #8]
 801265c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801265e:	4618      	mov	r0, r3
 8012660:	f001 f832 	bl	80136c8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8012664:	f001 fdbc 	bl	80141e0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012668:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 801266a:	4618      	mov	r0, r3
 801266c:	3738      	adds	r7, #56	@ 0x38
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	e000ed04 	.word	0xe000ed04

08012678 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8012678:	b480      	push	{r7}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012684:	2b00      	cmp	r3, #0
 8012686:	d006      	beq.n	8012696 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f1c3 0305 	rsb	r3, r3, #5
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	e001      	b.n	801269a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012696:	2300      	movs	r3, #0
 8012698:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 801269a:	68fb      	ldr	r3, [r7, #12]
    }
 801269c:	4618      	mov	r0, r3
 801269e:	3714      	adds	r7, #20
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80126b4:	2300      	movs	r3, #0
 80126b6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126bc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10d      	bne.n	80126e2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d14d      	bne.n	801276a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	4618      	mov	r0, r3
 80126d4:	f000 ff7c 	bl	80135d0 <xTaskPriorityDisinherit>
 80126d8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2200      	movs	r2, #0
 80126de:	609a      	str	r2, [r3, #8]
 80126e0:	e043      	b.n	801276a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d119      	bne.n	801271c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	6858      	ldr	r0, [r3, #4]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126f0:	461a      	mov	r2, r3
 80126f2:	68b9      	ldr	r1, [r7, #8]
 80126f4:	f003 fa9d 	bl	8015c32 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	685a      	ldr	r2, [r3, #4]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012700:	441a      	add	r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	685a      	ldr	r2, [r3, #4]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	429a      	cmp	r2, r3
 8012710:	d32b      	bcc.n	801276a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	605a      	str	r2, [r3, #4]
 801271a:	e026      	b.n	801276a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	68d8      	ldr	r0, [r3, #12]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012724:	461a      	mov	r2, r3
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	f003 fa83 	bl	8015c32 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	68da      	ldr	r2, [r3, #12]
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012734:	425b      	negs	r3, r3
 8012736:	441a      	add	r2, r3
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	68da      	ldr	r2, [r3, #12]
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	429a      	cmp	r2, r3
 8012746:	d207      	bcs.n	8012758 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	689a      	ldr	r2, [r3, #8]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012750:	425b      	negs	r3, r3
 8012752:	441a      	add	r2, r3
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2b02      	cmp	r3, #2
 801275c:	d105      	bne.n	801276a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d002      	beq.n	801276a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	3b01      	subs	r3, #1
 8012768:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8012772:	697b      	ldr	r3, [r7, #20]
}
 8012774:	4618      	mov	r0, r3
 8012776:	3718      	adds	r7, #24
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801278a:	2b00      	cmp	r3, #0
 801278c:	d018      	beq.n	80127c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	68da      	ldr	r2, [r3, #12]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012796:	441a      	add	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	68da      	ldr	r2, [r3, #12]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d303      	bcc.n	80127b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	68d9      	ldr	r1, [r3, #12]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127b8:	461a      	mov	r2, r3
 80127ba:	6838      	ldr	r0, [r7, #0]
 80127bc:	f003 fa39 	bl	8015c32 <memcpy>
    }
}
 80127c0:	bf00      	nop
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80127d0:	f001 fcd4 	bl	801417c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80127da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80127dc:	e011      	b.n	8012802 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d012      	beq.n	801280c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	3324      	adds	r3, #36	@ 0x24
 80127ea:	4618      	mov	r0, r3
 80127ec:	f000 fcbc 	bl	8013168 <xTaskRemoveFromEventList>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d001      	beq.n	80127fa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80127f6:	f000 fd99 	bl	801332c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
 80127fc:	3b01      	subs	r3, #1
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012806:	2b00      	cmp	r3, #0
 8012808:	dce9      	bgt.n	80127de <prvUnlockQueue+0x16>
 801280a:	e000      	b.n	801280e <prvUnlockQueue+0x46>
                        break;
 801280c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	22ff      	movs	r2, #255	@ 0xff
 8012812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8012816:	f001 fce3 	bl	80141e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 801281a:	f001 fcaf 	bl	801417c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012824:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012826:	e011      	b.n	801284c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	691b      	ldr	r3, [r3, #16]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d012      	beq.n	8012856 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3310      	adds	r3, #16
 8012834:	4618      	mov	r0, r3
 8012836:	f000 fc97 	bl	8013168 <xTaskRemoveFromEventList>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d001      	beq.n	8012844 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8012840:	f000 fd74 	bl	801332c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8012844:	7bbb      	ldrb	r3, [r7, #14]
 8012846:	3b01      	subs	r3, #1
 8012848:	b2db      	uxtb	r3, r3
 801284a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 801284c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012850:	2b00      	cmp	r3, #0
 8012852:	dce9      	bgt.n	8012828 <prvUnlockQueue+0x60>
 8012854:	e000      	b.n	8012858 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8012856:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	22ff      	movs	r2, #255	@ 0xff
 801285c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8012860:	f001 fcbe 	bl	80141e0 <vPortExitCritical>
}
 8012864:	bf00      	nop
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012874:	f001 fc82 	bl	801417c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801287c:	2b00      	cmp	r3, #0
 801287e:	d102      	bne.n	8012886 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8012880:	2301      	movs	r3, #1
 8012882:	60fb      	str	r3, [r7, #12]
 8012884:	e001      	b.n	801288a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8012886:	2300      	movs	r3, #0
 8012888:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 801288a:	f001 fca9 	bl	80141e0 <vPortExitCritical>

    return xReturn;
 801288e:	68fb      	ldr	r3, [r7, #12]
}
 8012890:	4618      	mov	r0, r3
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80128a0:	f001 fc6c 	bl	801417c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d102      	bne.n	80128b6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80128b0:	2301      	movs	r3, #1
 80128b2:	60fb      	str	r3, [r7, #12]
 80128b4:	e001      	b.n	80128ba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80128b6:	2300      	movs	r3, #0
 80128b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80128ba:	f001 fc91 	bl	80141e0 <vPortExitCritical>

    return xReturn;
 80128be:	68fb      	ldr	r3, [r7, #12]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80128c8:	b480      	push	{r7}
 80128ca:	b085      	sub	sp, #20
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128d2:	2300      	movs	r3, #0
 80128d4:	60fb      	str	r3, [r7, #12]
 80128d6:	e014      	b.n	8012902 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80128d8:	4a0f      	ldr	r2, [pc, #60]	@ (8012918 <vQueueAddToRegistry+0x50>)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d10b      	bne.n	80128fc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80128e4:	490c      	ldr	r1, [pc, #48]	@ (8012918 <vQueueAddToRegistry+0x50>)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	683a      	ldr	r2, [r7, #0]
 80128ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80128ee:	4a0a      	ldr	r2, [pc, #40]	@ (8012918 <vQueueAddToRegistry+0x50>)
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	4413      	add	r3, r2
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80128fa:	e006      	b.n	801290a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	3301      	adds	r3, #1
 8012900:	60fb      	str	r3, [r7, #12]
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2b07      	cmp	r3, #7
 8012906:	d9e7      	bls.n	80128d8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8012908:	bf00      	nop
 801290a:	bf00      	nop
 801290c:	3714      	adds	r7, #20
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	20000504 	.word	0x20000504

0801291c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 801291c:	b580      	push	{r7, lr}
 801291e:	b086      	sub	sp, #24
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 801292c:	f001 fc26 	bl	801417c <vPortEnterCritical>
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012936:	b25b      	sxtb	r3, r3
 8012938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293c:	d103      	bne.n	8012946 <vQueueWaitForMessageRestricted+0x2a>
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	2200      	movs	r2, #0
 8012942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801294c:	b25b      	sxtb	r3, r3
 801294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012952:	d103      	bne.n	801295c <vQueueWaitForMessageRestricted+0x40>
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	2200      	movs	r2, #0
 8012958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801295c:	f001 fc40 	bl	80141e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012964:	2b00      	cmp	r3, #0
 8012966:	d106      	bne.n	8012976 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	3324      	adds	r3, #36	@ 0x24
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	68b9      	ldr	r1, [r7, #8]
 8012970:	4618      	mov	r0, r3
 8012972:	f000 fbcd 	bl	8013110 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8012976:	6978      	ldr	r0, [r7, #20]
 8012978:	f7ff ff26 	bl	80127c8 <prvUnlockQueue>
    }
 801297c:	bf00      	nop
 801297e:	3718      	adds	r7, #24
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8012984:	b580      	push	{r7, lr}
 8012986:	b08c      	sub	sp, #48	@ 0x30
 8012988:	af04      	add	r7, sp, #16
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	603b      	str	r3, [r7, #0]
 8012990:	4613      	mov	r3, r2
 8012992:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012994:	88fb      	ldrh	r3, [r7, #6]
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	4618      	mov	r0, r3
 801299a:	f001 fd19 	bl	80143d0 <pvPortMalloc>
 801299e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00e      	beq.n	80129c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80129a6:	2058      	movs	r0, #88	@ 0x58
 80129a8:	f001 fd12 	bl	80143d0 <pvPortMalloc>
 80129ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d003      	beq.n	80129bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	697a      	ldr	r2, [r7, #20]
 80129b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80129ba:	e005      	b.n	80129c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80129bc:	6978      	ldr	r0, [r7, #20]
 80129be:	f001 fde9 	bl	8014594 <vPortFree>
 80129c2:	e001      	b.n	80129c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80129c4:	2300      	movs	r3, #0
 80129c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d013      	beq.n	80129f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80129ce:	88fa      	ldrh	r2, [r7, #6]
 80129d0:	2300      	movs	r3, #0
 80129d2:	9303      	str	r3, [sp, #12]
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	9302      	str	r3, [sp, #8]
 80129d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129da:	9301      	str	r3, [sp, #4]
 80129dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129de:	9300      	str	r3, [sp, #0]
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	68b9      	ldr	r1, [r7, #8]
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	f000 f80e 	bl	8012a06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80129ea:	69f8      	ldr	r0, [r7, #28]
 80129ec:	f000 f8a2 	bl	8012b34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80129f0:	2301      	movs	r3, #1
 80129f2:	61bb      	str	r3, [r7, #24]
 80129f4:	e002      	b.n	80129fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80129f6:	f04f 33ff 	mov.w	r3, #4294967295
 80129fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80129fc:	69bb      	ldr	r3, [r7, #24]
    }
 80129fe:	4618      	mov	r0, r3
 8012a00:	3720      	adds	r7, #32
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b088      	sub	sp, #32
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	60f8      	str	r0, [r7, #12]
 8012a0e:	60b9      	str	r1, [r7, #8]
 8012a10:	607a      	str	r2, [r7, #4]
 8012a12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	21a5      	movs	r1, #165	@ 0xa5
 8012a20:	f003 f86a 	bl	8015af8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	4413      	add	r3, r2
 8012a34:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	f023 0307 	bic.w	r3, r3, #7
 8012a3c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	f003 0307 	and.w	r3, r3, #7
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d00b      	beq.n	8012a60 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8012a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a4c:	f383 8811 	msr	BASEPRI, r3
 8012a50:	f3bf 8f6f 	isb	sy
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	617b      	str	r3, [r7, #20]
    }
 8012a5a:	bf00      	nop
 8012a5c:	bf00      	nop
 8012a5e:	e7fd      	b.n	8012a5c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d01f      	beq.n	8012aa6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a66:	2300      	movs	r3, #0
 8012a68:	61fb      	str	r3, [r7, #28]
 8012a6a:	e012      	b.n	8012a92 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012a6c:	68ba      	ldr	r2, [r7, #8]
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	4413      	add	r3, r2
 8012a72:	7819      	ldrb	r1, [r3, #0]
 8012a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a76:	69fb      	ldr	r3, [r7, #28]
 8012a78:	4413      	add	r3, r2
 8012a7a:	3334      	adds	r3, #52	@ 0x34
 8012a7c:	460a      	mov	r2, r1
 8012a7e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8012a80:	68ba      	ldr	r2, [r7, #8]
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	4413      	add	r3, r2
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d006      	beq.n	8012a9a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	61fb      	str	r3, [r7, #28]
 8012a92:	69fb      	ldr	r3, [r7, #28]
 8012a94:	2b09      	cmp	r3, #9
 8012a96:	d9e9      	bls.n	8012a6c <prvInitialiseNewTask+0x66>
 8012a98:	e000      	b.n	8012a9c <prvInitialiseNewTask+0x96>
            {
                break;
 8012a9a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012aa4:	e003      	b.n	8012aae <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ab0:	2b04      	cmp	r3, #4
 8012ab2:	d901      	bls.n	8012ab8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012ab4:	2304      	movs	r3, #4
 8012ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8012ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012abc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8012abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ac2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012acc:	3304      	adds	r3, #4
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7ff f87a 	bl	8011bc8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ad6:	3318      	adds	r3, #24
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7ff f875 	bl	8011bc8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ae2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae6:	f1c3 0205 	rsb	r2, r3, #5
 8012aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012af2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8012af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012af6:	3350      	adds	r3, #80	@ 0x50
 8012af8:	2204      	movs	r2, #4
 8012afa:	2100      	movs	r1, #0
 8012afc:	4618      	mov	r0, r3
 8012afe:	f002 fffb 	bl	8015af8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8012b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b04:	3354      	adds	r3, #84	@ 0x54
 8012b06:	2201      	movs	r2, #1
 8012b08:	2100      	movs	r1, #0
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f002 fff4 	bl	8015af8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012b10:	683a      	ldr	r2, [r7, #0]
 8012b12:	68f9      	ldr	r1, [r7, #12]
 8012b14:	69b8      	ldr	r0, [r7, #24]
 8012b16:	f001 f9ff 	bl	8013f18 <pxPortInitialiseStack>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b1e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8012b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d002      	beq.n	8012b2c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b2a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012b2c:	bf00      	nop
 8012b2e:	3720      	adds	r7, #32
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8012b3c:	f001 fb1e 	bl	801417c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8012b40:	4b2c      	ldr	r3, [pc, #176]	@ (8012bf4 <prvAddNewTaskToReadyList+0xc0>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	3301      	adds	r3, #1
 8012b46:	4a2b      	ldr	r2, [pc, #172]	@ (8012bf4 <prvAddNewTaskToReadyList+0xc0>)
 8012b48:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8012b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8012bf8 <prvAddNewTaskToReadyList+0xc4>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d109      	bne.n	8012b66 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8012b52:	4a29      	ldr	r2, [pc, #164]	@ (8012bf8 <prvAddNewTaskToReadyList+0xc4>)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012b58:	4b26      	ldr	r3, [pc, #152]	@ (8012bf4 <prvAddNewTaskToReadyList+0xc0>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d110      	bne.n	8012b82 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8012b60:	f000 fc08 	bl	8013374 <prvInitialiseTaskLists>
 8012b64:	e00d      	b.n	8012b82 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8012b66:	4b25      	ldr	r3, [pc, #148]	@ (8012bfc <prvAddNewTaskToReadyList+0xc8>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d109      	bne.n	8012b82 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012b6e:	4b22      	ldr	r3, [pc, #136]	@ (8012bf8 <prvAddNewTaskToReadyList+0xc4>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d802      	bhi.n	8012b82 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8012b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8012bf8 <prvAddNewTaskToReadyList+0xc4>)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8012b82:	4b1f      	ldr	r3, [pc, #124]	@ (8012c00 <prvAddNewTaskToReadyList+0xcc>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	3301      	adds	r3, #1
 8012b88:	4a1d      	ldr	r2, [pc, #116]	@ (8012c00 <prvAddNewTaskToReadyList+0xcc>)
 8012b8a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8012c00 <prvAddNewTaskToReadyList+0xcc>)
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b98:	2201      	movs	r2, #1
 8012b9a:	409a      	lsls	r2, r3
 8012b9c:	4b19      	ldr	r3, [pc, #100]	@ (8012c04 <prvAddNewTaskToReadyList+0xd0>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4313      	orrs	r3, r2
 8012ba2:	4a18      	ldr	r2, [pc, #96]	@ (8012c04 <prvAddNewTaskToReadyList+0xd0>)
 8012ba4:	6013      	str	r3, [r2, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012baa:	4613      	mov	r3, r2
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	4413      	add	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	4a15      	ldr	r2, [pc, #84]	@ (8012c08 <prvAddNewTaskToReadyList+0xd4>)
 8012bb4:	441a      	add	r2, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	f7ff f810 	bl	8011be2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8012bc2:	f001 fb0d 	bl	80141e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8012bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012bfc <prvAddNewTaskToReadyList+0xc8>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00e      	beq.n	8012bec <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012bce:	4b0a      	ldr	r3, [pc, #40]	@ (8012bf8 <prvAddNewTaskToReadyList+0xc4>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d207      	bcs.n	8012bec <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8012bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8012c0c <prvAddNewTaskToReadyList+0xd8>)
 8012bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012be2:	601a      	str	r2, [r3, #0]
 8012be4:	f3bf 8f4f 	dsb	sy
 8012be8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012bec:	bf00      	nop
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	2000061c 	.word	0x2000061c
 8012bf8:	20000544 	.word	0x20000544
 8012bfc:	20000628 	.word	0x20000628
 8012c00:	20000638 	.word	0x20000638
 8012c04:	20000624 	.word	0x20000624
 8012c08:	20000548 	.word	0x20000548
 8012c0c:	e000ed04 	.word	0xe000ed04

08012c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d018      	beq.n	8012c54 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8012c22:	4b14      	ldr	r3, [pc, #80]	@ (8012c74 <vTaskDelay+0x64>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00b      	beq.n	8012c42 <vTaskDelay+0x32>
        __asm volatile
 8012c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c2e:	f383 8811 	msr	BASEPRI, r3
 8012c32:	f3bf 8f6f 	isb	sy
 8012c36:	f3bf 8f4f 	dsb	sy
 8012c3a:	60bb      	str	r3, [r7, #8]
    }
 8012c3c:	bf00      	nop
 8012c3e:	bf00      	nop
 8012c40:	e7fd      	b.n	8012c3e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8012c42:	f000 f86d 	bl	8012d20 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012c46:	2100      	movs	r1, #0
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f000 fde1 	bl	8013810 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8012c4e:	f000 f875 	bl	8012d3c <xTaskResumeAll>
 8012c52:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d107      	bne.n	8012c6a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8012c5a:	4b07      	ldr	r3, [pc, #28]	@ (8012c78 <vTaskDelay+0x68>)
 8012c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c60:	601a      	str	r2, [r3, #0]
 8012c62:	f3bf 8f4f 	dsb	sy
 8012c66:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8012c6a:	bf00      	nop
 8012c6c:	3710      	adds	r7, #16
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	20000644 	.word	0x20000644
 8012c78:	e000ed04 	.word	0xe000ed04

08012c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b086      	sub	sp, #24
 8012c80:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8012c82:	4b20      	ldr	r3, [pc, #128]	@ (8012d04 <vTaskStartScheduler+0x88>)
 8012c84:	9301      	str	r3, [sp, #4]
 8012c86:	2300      	movs	r3, #0
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	2282      	movs	r2, #130	@ 0x82
 8012c8e:	491e      	ldr	r1, [pc, #120]	@ (8012d08 <vTaskStartScheduler+0x8c>)
 8012c90:	481e      	ldr	r0, [pc, #120]	@ (8012d0c <vTaskStartScheduler+0x90>)
 8012c92:	f7ff fe77 	bl	8012984 <xTaskCreate>
 8012c96:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d102      	bne.n	8012ca4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8012c9e:	f000 fe1d 	bl	80138dc <xTimerCreateTimerTask>
 8012ca2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d116      	bne.n	8012cd8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8012caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cae:	f383 8811 	msr	BASEPRI, r3
 8012cb2:	f3bf 8f6f 	isb	sy
 8012cb6:	f3bf 8f4f 	dsb	sy
 8012cba:	60bb      	str	r3, [r7, #8]
    }
 8012cbc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8012cbe:	4b14      	ldr	r3, [pc, #80]	@ (8012d10 <vTaskStartScheduler+0x94>)
 8012cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8012cc4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8012cc6:	4b13      	ldr	r3, [pc, #76]	@ (8012d14 <vTaskStartScheduler+0x98>)
 8012cc8:	2201      	movs	r2, #1
 8012cca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012ccc:	4b12      	ldr	r3, [pc, #72]	@ (8012d18 <vTaskStartScheduler+0x9c>)
 8012cce:	2200      	movs	r2, #0
 8012cd0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8012cd2:	f001 f9af 	bl	8014034 <xPortStartScheduler>
 8012cd6:	e00f      	b.n	8012cf8 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cde:	d10b      	bne.n	8012cf8 <vTaskStartScheduler+0x7c>
        __asm volatile
 8012ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ce4:	f383 8811 	msr	BASEPRI, r3
 8012ce8:	f3bf 8f6f 	isb	sy
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	607b      	str	r3, [r7, #4]
    }
 8012cf2:	bf00      	nop
 8012cf4:	bf00      	nop
 8012cf6:	e7fd      	b.n	8012cf4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8012cf8:	4b08      	ldr	r3, [pc, #32]	@ (8012d1c <vTaskStartScheduler+0xa0>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
}
 8012cfc:	bf00      	nop
 8012cfe:	3710      	adds	r7, #16
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	20000640 	.word	0x20000640
 8012d08:	0801854c 	.word	0x0801854c
 8012d0c:	08013345 	.word	0x08013345
 8012d10:	2000063c 	.word	0x2000063c
 8012d14:	20000628 	.word	0x20000628
 8012d18:	20000620 	.word	0x20000620
 8012d1c:	0801a0b8 	.word	0x0801a0b8

08012d20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012d20:	b480      	push	{r7}
 8012d22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8012d24:	4b04      	ldr	r3, [pc, #16]	@ (8012d38 <vTaskSuspendAll+0x18>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	3301      	adds	r3, #1
 8012d2a:	4a03      	ldr	r2, [pc, #12]	@ (8012d38 <vTaskSuspendAll+0x18>)
 8012d2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8012d2e:	bf00      	nop
 8012d30:	46bd      	mov	sp, r7
 8012d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d36:	4770      	bx	lr
 8012d38:	20000644 	.word	0x20000644

08012d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8012d42:	2300      	movs	r3, #0
 8012d44:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8012d46:	2300      	movs	r3, #0
 8012d48:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8012d4a:	4b42      	ldr	r3, [pc, #264]	@ (8012e54 <xTaskResumeAll+0x118>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d10b      	bne.n	8012d6a <xTaskResumeAll+0x2e>
        __asm volatile
 8012d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d56:	f383 8811 	msr	BASEPRI, r3
 8012d5a:	f3bf 8f6f 	isb	sy
 8012d5e:	f3bf 8f4f 	dsb	sy
 8012d62:	603b      	str	r3, [r7, #0]
    }
 8012d64:	bf00      	nop
 8012d66:	bf00      	nop
 8012d68:	e7fd      	b.n	8012d66 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8012d6a:	f001 fa07 	bl	801417c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8012d6e:	4b39      	ldr	r3, [pc, #228]	@ (8012e54 <xTaskResumeAll+0x118>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	3b01      	subs	r3, #1
 8012d74:	4a37      	ldr	r2, [pc, #220]	@ (8012e54 <xTaskResumeAll+0x118>)
 8012d76:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d78:	4b36      	ldr	r3, [pc, #216]	@ (8012e54 <xTaskResumeAll+0x118>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d161      	bne.n	8012e44 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012d80:	4b35      	ldr	r3, [pc, #212]	@ (8012e58 <xTaskResumeAll+0x11c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d05d      	beq.n	8012e44 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d88:	e02e      	b.n	8012de8 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d8a:	4b34      	ldr	r3, [pc, #208]	@ (8012e5c <xTaskResumeAll+0x120>)
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	3318      	adds	r3, #24
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fe ff80 	bl	8011c9c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3304      	adds	r3, #4
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe ff7b 	bl	8011c9c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012daa:	2201      	movs	r2, #1
 8012dac:	409a      	lsls	r2, r3
 8012dae:	4b2c      	ldr	r3, [pc, #176]	@ (8012e60 <xTaskResumeAll+0x124>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	4313      	orrs	r3, r2
 8012db4:	4a2a      	ldr	r2, [pc, #168]	@ (8012e60 <xTaskResumeAll+0x124>)
 8012db6:	6013      	str	r3, [r2, #0]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	4413      	add	r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	4a27      	ldr	r2, [pc, #156]	@ (8012e64 <xTaskResumeAll+0x128>)
 8012dc6:	441a      	add	r2, r3
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	4619      	mov	r1, r3
 8012dce:	4610      	mov	r0, r2
 8012dd0:	f7fe ff07 	bl	8011be2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dd8:	4b23      	ldr	r3, [pc, #140]	@ (8012e68 <xTaskResumeAll+0x12c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d302      	bcc.n	8012de8 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8012de2:	4b22      	ldr	r3, [pc, #136]	@ (8012e6c <xTaskResumeAll+0x130>)
 8012de4:	2201      	movs	r2, #1
 8012de6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012de8:	4b1c      	ldr	r3, [pc, #112]	@ (8012e5c <xTaskResumeAll+0x120>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1cc      	bne.n	8012d8a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d001      	beq.n	8012dfa <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8012df6:	f000 fb3b 	bl	8013470 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8012e70 <xTaskResumeAll+0x134>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d010      	beq.n	8012e28 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8012e06:	f000 f847 	bl	8012e98 <xTaskIncrementTick>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8012e10:	4b16      	ldr	r3, [pc, #88]	@ (8012e6c <xTaskResumeAll+0x130>)
 8012e12:	2201      	movs	r2, #1
 8012e14:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	3b01      	subs	r3, #1
 8012e1a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d1f1      	bne.n	8012e06 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8012e22:	4b13      	ldr	r3, [pc, #76]	@ (8012e70 <xTaskResumeAll+0x134>)
 8012e24:	2200      	movs	r2, #0
 8012e26:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8012e28:	4b10      	ldr	r3, [pc, #64]	@ (8012e6c <xTaskResumeAll+0x130>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d009      	beq.n	8012e44 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8012e30:	2301      	movs	r3, #1
 8012e32:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8012e34:	4b0f      	ldr	r3, [pc, #60]	@ (8012e74 <xTaskResumeAll+0x138>)
 8012e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	f3bf 8f4f 	dsb	sy
 8012e40:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8012e44:	f001 f9cc 	bl	80141e0 <vPortExitCritical>

    return xAlreadyYielded;
 8012e48:	68bb      	ldr	r3, [r7, #8]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	20000644 	.word	0x20000644
 8012e58:	2000061c 	.word	0x2000061c
 8012e5c:	200005dc 	.word	0x200005dc
 8012e60:	20000624 	.word	0x20000624
 8012e64:	20000548 	.word	0x20000548
 8012e68:	20000544 	.word	0x20000544
 8012e6c:	20000630 	.word	0x20000630
 8012e70:	2000062c 	.word	0x2000062c
 8012e74:	e000ed04 	.word	0xe000ed04

08012e78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8012e7e:	4b05      	ldr	r3, [pc, #20]	@ (8012e94 <xTaskGetTickCount+0x1c>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8012e84:	687b      	ldr	r3, [r7, #4]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	370c      	adds	r7, #12
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop
 8012e94:	20000620 	.word	0x20000620

08012e98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b086      	sub	sp, #24
 8012e9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8012fe0 <xTaskIncrementTick+0x148>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f040 808f 	bne.w	8012fca <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012eac:	4b4d      	ldr	r3, [pc, #308]	@ (8012fe4 <xTaskIncrementTick+0x14c>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8012eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8012fe4 <xTaskIncrementTick+0x14c>)
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d121      	bne.n	8012f04 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8012ec0:	4b49      	ldr	r3, [pc, #292]	@ (8012fe8 <xTaskIncrementTick+0x150>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00b      	beq.n	8012ee2 <xTaskIncrementTick+0x4a>
        __asm volatile
 8012eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ece:	f383 8811 	msr	BASEPRI, r3
 8012ed2:	f3bf 8f6f 	isb	sy
 8012ed6:	f3bf 8f4f 	dsb	sy
 8012eda:	603b      	str	r3, [r7, #0]
    }
 8012edc:	bf00      	nop
 8012ede:	bf00      	nop
 8012ee0:	e7fd      	b.n	8012ede <xTaskIncrementTick+0x46>
 8012ee2:	4b41      	ldr	r3, [pc, #260]	@ (8012fe8 <xTaskIncrementTick+0x150>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	60fb      	str	r3, [r7, #12]
 8012ee8:	4b40      	ldr	r3, [pc, #256]	@ (8012fec <xTaskIncrementTick+0x154>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	4a3e      	ldr	r2, [pc, #248]	@ (8012fe8 <xTaskIncrementTick+0x150>)
 8012eee:	6013      	str	r3, [r2, #0]
 8012ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8012fec <xTaskIncrementTick+0x154>)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6013      	str	r3, [r2, #0]
 8012ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8012ff0 <xTaskIncrementTick+0x158>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	3301      	adds	r3, #1
 8012efc:	4a3c      	ldr	r2, [pc, #240]	@ (8012ff0 <xTaskIncrementTick+0x158>)
 8012efe:	6013      	str	r3, [r2, #0]
 8012f00:	f000 fab6 	bl	8013470 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8012f04:	4b3b      	ldr	r3, [pc, #236]	@ (8012ff4 <xTaskIncrementTick+0x15c>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	693a      	ldr	r2, [r7, #16]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d348      	bcc.n	8012fa0 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f0e:	4b36      	ldr	r3, [pc, #216]	@ (8012fe8 <xTaskIncrementTick+0x150>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d104      	bne.n	8012f22 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f18:	4b36      	ldr	r3, [pc, #216]	@ (8012ff4 <xTaskIncrementTick+0x15c>)
 8012f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f1e:	601a      	str	r2, [r3, #0]
                    break;
 8012f20:	e03e      	b.n	8012fa0 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f22:	4b31      	ldr	r3, [pc, #196]	@ (8012fe8 <xTaskIncrementTick+0x150>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8012f32:	693a      	ldr	r2, [r7, #16]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d203      	bcs.n	8012f42 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8012f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8012ff4 <xTaskIncrementTick+0x15c>)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012f40:	e02e      	b.n	8012fa0 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	3304      	adds	r3, #4
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7fe fea8 	bl	8011c9c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d004      	beq.n	8012f5e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	3318      	adds	r3, #24
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7fe fe9f 	bl	8011c9c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f62:	2201      	movs	r2, #1
 8012f64:	409a      	lsls	r2, r3
 8012f66:	4b24      	ldr	r3, [pc, #144]	@ (8012ff8 <xTaskIncrementTick+0x160>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	4a22      	ldr	r2, [pc, #136]	@ (8012ff8 <xTaskIncrementTick+0x160>)
 8012f6e:	6013      	str	r3, [r2, #0]
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f74:	4613      	mov	r3, r2
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	4413      	add	r3, r2
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8012ffc <xTaskIncrementTick+0x164>)
 8012f7e:	441a      	add	r2, r3
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	3304      	adds	r3, #4
 8012f84:	4619      	mov	r1, r3
 8012f86:	4610      	mov	r0, r2
 8012f88:	f7fe fe2b 	bl	8011be2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f90:	4b1b      	ldr	r3, [pc, #108]	@ (8013000 <xTaskIncrementTick+0x168>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d3b9      	bcc.n	8012f0e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f9e:	e7b6      	b.n	8012f0e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012fa0:	4b17      	ldr	r3, [pc, #92]	@ (8013000 <xTaskIncrementTick+0x168>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fa6:	4915      	ldr	r1, [pc, #84]	@ (8012ffc <xTaskIncrementTick+0x164>)
 8012fa8:	4613      	mov	r3, r2
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	4413      	add	r3, r2
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	440b      	add	r3, r1
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d901      	bls.n	8012fbc <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8012fbc:	4b11      	ldr	r3, [pc, #68]	@ (8013004 <xTaskIncrementTick+0x16c>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d007      	beq.n	8012fd4 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	617b      	str	r3, [r7, #20]
 8012fc8:	e004      	b.n	8012fd4 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8012fca:	4b0f      	ldr	r3, [pc, #60]	@ (8013008 <xTaskIncrementTick+0x170>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8013008 <xTaskIncrementTick+0x170>)
 8012fd2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8012fd4:	697b      	ldr	r3, [r7, #20]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3718      	adds	r7, #24
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	20000644 	.word	0x20000644
 8012fe4:	20000620 	.word	0x20000620
 8012fe8:	200005d4 	.word	0x200005d4
 8012fec:	200005d8 	.word	0x200005d8
 8012ff0:	20000634 	.word	0x20000634
 8012ff4:	2000063c 	.word	0x2000063c
 8012ff8:	20000624 	.word	0x20000624
 8012ffc:	20000548 	.word	0x20000548
 8013000:	20000544 	.word	0x20000544
 8013004:	20000630 	.word	0x20000630
 8013008:	2000062c 	.word	0x2000062c

0801300c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801300c:	b480      	push	{r7}
 801300e:	b087      	sub	sp, #28
 8013010:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013012:	4b27      	ldr	r3, [pc, #156]	@ (80130b0 <vTaskSwitchContext+0xa4>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d003      	beq.n	8013022 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 801301a:	4b26      	ldr	r3, [pc, #152]	@ (80130b4 <vTaskSwitchContext+0xa8>)
 801301c:	2201      	movs	r2, #1
 801301e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8013020:	e040      	b.n	80130a4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8013022:	4b24      	ldr	r3, [pc, #144]	@ (80130b4 <vTaskSwitchContext+0xa8>)
 8013024:	2200      	movs	r2, #0
 8013026:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013028:	4b23      	ldr	r3, [pc, #140]	@ (80130b8 <vTaskSwitchContext+0xac>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	fab3 f383 	clz	r3, r3
 8013034:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8013036:	7afb      	ldrb	r3, [r7, #11]
 8013038:	f1c3 031f 	rsb	r3, r3, #31
 801303c:	617b      	str	r3, [r7, #20]
 801303e:	491f      	ldr	r1, [pc, #124]	@ (80130bc <vTaskSwitchContext+0xb0>)
 8013040:	697a      	ldr	r2, [r7, #20]
 8013042:	4613      	mov	r3, r2
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	4413      	add	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	440b      	add	r3, r1
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d10b      	bne.n	801306a <vTaskSwitchContext+0x5e>
        __asm volatile
 8013052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013056:	f383 8811 	msr	BASEPRI, r3
 801305a:	f3bf 8f6f 	isb	sy
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	607b      	str	r3, [r7, #4]
    }
 8013064:	bf00      	nop
 8013066:	bf00      	nop
 8013068:	e7fd      	b.n	8013066 <vTaskSwitchContext+0x5a>
 801306a:	697a      	ldr	r2, [r7, #20]
 801306c:	4613      	mov	r3, r2
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	4413      	add	r3, r2
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	4a11      	ldr	r2, [pc, #68]	@ (80130bc <vTaskSwitchContext+0xb0>)
 8013076:	4413      	add	r3, r2
 8013078:	613b      	str	r3, [r7, #16]
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	685a      	ldr	r2, [r3, #4]
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	605a      	str	r2, [r3, #4]
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	685a      	ldr	r2, [r3, #4]
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	3308      	adds	r3, #8
 801308c:	429a      	cmp	r2, r3
 801308e:	d104      	bne.n	801309a <vTaskSwitchContext+0x8e>
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	685a      	ldr	r2, [r3, #4]
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	605a      	str	r2, [r3, #4]
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	4a07      	ldr	r2, [pc, #28]	@ (80130c0 <vTaskSwitchContext+0xb4>)
 80130a2:	6013      	str	r3, [r2, #0]
}
 80130a4:	bf00      	nop
 80130a6:	371c      	adds	r7, #28
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr
 80130b0:	20000644 	.word	0x20000644
 80130b4:	20000630 	.word	0x20000630
 80130b8:	20000624 	.word	0x20000624
 80130bc:	20000548 	.word	0x20000548
 80130c0:	20000544 	.word	0x20000544

080130c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b084      	sub	sp, #16
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10b      	bne.n	80130ec <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80130d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d8:	f383 8811 	msr	BASEPRI, r3
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	f3bf 8f4f 	dsb	sy
 80130e4:	60fb      	str	r3, [r7, #12]
    }
 80130e6:	bf00      	nop
 80130e8:	bf00      	nop
 80130ea:	e7fd      	b.n	80130e8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130ec:	4b07      	ldr	r3, [pc, #28]	@ (801310c <vTaskPlaceOnEventList+0x48>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	3318      	adds	r3, #24
 80130f2:	4619      	mov	r1, r3
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7fe fd98 	bl	8011c2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130fa:	2101      	movs	r1, #1
 80130fc:	6838      	ldr	r0, [r7, #0]
 80130fe:	f000 fb87 	bl	8013810 <prvAddCurrentTaskToDelayedList>
}
 8013102:	bf00      	nop
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	20000544 	.word	0x20000544

08013110 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8013110:	b580      	push	{r7, lr}
 8013112:	b086      	sub	sp, #24
 8013114:	af00      	add	r7, sp, #0
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d10b      	bne.n	801313a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8013122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013126:	f383 8811 	msr	BASEPRI, r3
 801312a:	f3bf 8f6f 	isb	sy
 801312e:	f3bf 8f4f 	dsb	sy
 8013132:	617b      	str	r3, [r7, #20]
    }
 8013134:	bf00      	nop
 8013136:	bf00      	nop
 8013138:	e7fd      	b.n	8013136 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801313a:	4b0a      	ldr	r3, [pc, #40]	@ (8013164 <vTaskPlaceOnEventListRestricted+0x54>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	3318      	adds	r3, #24
 8013140:	4619      	mov	r1, r3
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f7fe fd4d 	bl	8011be2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d002      	beq.n	8013154 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 801314e:	f04f 33ff 	mov.w	r3, #4294967295
 8013152:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013154:	6879      	ldr	r1, [r7, #4]
 8013156:	68b8      	ldr	r0, [r7, #8]
 8013158:	f000 fb5a 	bl	8013810 <prvAddCurrentTaskToDelayedList>
    }
 801315c:	bf00      	nop
 801315e:	3718      	adds	r7, #24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	20000544 	.word	0x20000544

08013168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b086      	sub	sp, #24
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d10b      	bne.n	8013196 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 801317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	60fb      	str	r3, [r7, #12]
    }
 8013190:	bf00      	nop
 8013192:	bf00      	nop
 8013194:	e7fd      	b.n	8013192 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	3318      	adds	r3, #24
 801319a:	4618      	mov	r0, r3
 801319c:	f7fe fd7e 	bl	8011c9c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131a0:	4b1d      	ldr	r3, [pc, #116]	@ (8013218 <xTaskRemoveFromEventList+0xb0>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d11c      	bne.n	80131e2 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	3304      	adds	r3, #4
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fe fd75 	bl	8011c9c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131b6:	2201      	movs	r2, #1
 80131b8:	409a      	lsls	r2, r3
 80131ba:	4b18      	ldr	r3, [pc, #96]	@ (801321c <xTaskRemoveFromEventList+0xb4>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4313      	orrs	r3, r2
 80131c0:	4a16      	ldr	r2, [pc, #88]	@ (801321c <xTaskRemoveFromEventList+0xb4>)
 80131c2:	6013      	str	r3, [r2, #0]
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c8:	4613      	mov	r3, r2
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	4a13      	ldr	r2, [pc, #76]	@ (8013220 <xTaskRemoveFromEventList+0xb8>)
 80131d2:	441a      	add	r2, r3
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	3304      	adds	r3, #4
 80131d8:	4619      	mov	r1, r3
 80131da:	4610      	mov	r0, r2
 80131dc:	f7fe fd01 	bl	8011be2 <vListInsertEnd>
 80131e0:	e005      	b.n	80131ee <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	3318      	adds	r3, #24
 80131e6:	4619      	mov	r1, r3
 80131e8:	480e      	ldr	r0, [pc, #56]	@ (8013224 <xTaskRemoveFromEventList+0xbc>)
 80131ea:	f7fe fcfa 	bl	8011be2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013228 <xTaskRemoveFromEventList+0xc0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d905      	bls.n	8013208 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80131fc:	2301      	movs	r3, #1
 80131fe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8013200:	4b0a      	ldr	r3, [pc, #40]	@ (801322c <xTaskRemoveFromEventList+0xc4>)
 8013202:	2201      	movs	r2, #1
 8013204:	601a      	str	r2, [r3, #0]
 8013206:	e001      	b.n	801320c <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8013208:	2300      	movs	r3, #0
 801320a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 801320c:	697b      	ldr	r3, [r7, #20]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3718      	adds	r7, #24
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	20000644 	.word	0x20000644
 801321c:	20000624 	.word	0x20000624
 8013220:	20000548 	.word	0x20000548
 8013224:	200005dc 	.word	0x200005dc
 8013228:	20000544 	.word	0x20000544
 801322c:	20000630 	.word	0x20000630

08013230 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013230:	b480      	push	{r7}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013238:	4b06      	ldr	r3, [pc, #24]	@ (8013254 <vTaskInternalSetTimeOutState+0x24>)
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8013240:	4b05      	ldr	r3, [pc, #20]	@ (8013258 <vTaskInternalSetTimeOutState+0x28>)
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	605a      	str	r2, [r3, #4]
}
 8013248:	bf00      	nop
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	20000634 	.word	0x20000634
 8013258:	20000620 	.word	0x20000620

0801325c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b088      	sub	sp, #32
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10b      	bne.n	8013284 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 801326c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	613b      	str	r3, [r7, #16]
    }
 801327e:	bf00      	nop
 8013280:	bf00      	nop
 8013282:	e7fd      	b.n	8013280 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d10b      	bne.n	80132a2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 801328a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801328e:	f383 8811 	msr	BASEPRI, r3
 8013292:	f3bf 8f6f 	isb	sy
 8013296:	f3bf 8f4f 	dsb	sy
 801329a:	60fb      	str	r3, [r7, #12]
    }
 801329c:	bf00      	nop
 801329e:	bf00      	nop
 80132a0:	e7fd      	b.n	801329e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80132a2:	f000 ff6b 	bl	801417c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80132a6:	4b1f      	ldr	r3, [pc, #124]	@ (8013324 <xTaskCheckForTimeOut+0xc8>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	69ba      	ldr	r2, [r7, #24]
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132be:	d102      	bne.n	80132c6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80132c0:	2300      	movs	r3, #0
 80132c2:	61fb      	str	r3, [r7, #28]
 80132c4:	e026      	b.n	8013314 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	4b17      	ldr	r3, [pc, #92]	@ (8013328 <xTaskCheckForTimeOut+0xcc>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d00a      	beq.n	80132e8 <xTaskCheckForTimeOut+0x8c>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	69ba      	ldr	r2, [r7, #24]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d305      	bcc.n	80132e8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80132dc:	2301      	movs	r3, #1
 80132de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	2200      	movs	r2, #0
 80132e4:	601a      	str	r2, [r3, #0]
 80132e6:	e015      	b.n	8013314 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d20b      	bcs.n	801330a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	1ad2      	subs	r2, r2, r3
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f7ff ff96 	bl	8013230 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8013304:	2300      	movs	r3, #0
 8013306:	61fb      	str	r3, [r7, #28]
 8013308:	e004      	b.n	8013314 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	2200      	movs	r2, #0
 801330e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8013310:	2301      	movs	r3, #1
 8013312:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8013314:	f000 ff64 	bl	80141e0 <vPortExitCritical>

    return xReturn;
 8013318:	69fb      	ldr	r3, [r7, #28]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3720      	adds	r7, #32
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	20000620 	.word	0x20000620
 8013328:	20000634 	.word	0x20000634

0801332c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801332c:	b480      	push	{r7}
 801332e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8013330:	4b03      	ldr	r3, [pc, #12]	@ (8013340 <vTaskMissedYield+0x14>)
 8013332:	2201      	movs	r2, #1
 8013334:	601a      	str	r2, [r3, #0]
}
 8013336:	bf00      	nop
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr
 8013340:	20000630 	.word	0x20000630

08013344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 801334c:	f000 f852 	bl	80133f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013350:	4b06      	ldr	r3, [pc, #24]	@ (801336c <prvIdleTask+0x28>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2b01      	cmp	r3, #1
 8013356:	d9f9      	bls.n	801334c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8013358:	4b05      	ldr	r3, [pc, #20]	@ (8013370 <prvIdleTask+0x2c>)
 801335a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801335e:	601a      	str	r2, [r3, #0]
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8013368:	e7f0      	b.n	801334c <prvIdleTask+0x8>
 801336a:	bf00      	nop
 801336c:	20000548 	.word	0x20000548
 8013370:	e000ed04 	.word	0xe000ed04

08013374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801337a:	2300      	movs	r3, #0
 801337c:	607b      	str	r3, [r7, #4]
 801337e:	e00c      	b.n	801339a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	4613      	mov	r3, r2
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	4413      	add	r3, r2
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	4a12      	ldr	r2, [pc, #72]	@ (80133d4 <prvInitialiseTaskLists+0x60>)
 801338c:	4413      	add	r3, r2
 801338e:	4618      	mov	r0, r3
 8013390:	f7fe fbfa 	bl	8011b88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3301      	adds	r3, #1
 8013398:	607b      	str	r3, [r7, #4]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b04      	cmp	r3, #4
 801339e:	d9ef      	bls.n	8013380 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80133a0:	480d      	ldr	r0, [pc, #52]	@ (80133d8 <prvInitialiseTaskLists+0x64>)
 80133a2:	f7fe fbf1 	bl	8011b88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80133a6:	480d      	ldr	r0, [pc, #52]	@ (80133dc <prvInitialiseTaskLists+0x68>)
 80133a8:	f7fe fbee 	bl	8011b88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80133ac:	480c      	ldr	r0, [pc, #48]	@ (80133e0 <prvInitialiseTaskLists+0x6c>)
 80133ae:	f7fe fbeb 	bl	8011b88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80133b2:	480c      	ldr	r0, [pc, #48]	@ (80133e4 <prvInitialiseTaskLists+0x70>)
 80133b4:	f7fe fbe8 	bl	8011b88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80133b8:	480b      	ldr	r0, [pc, #44]	@ (80133e8 <prvInitialiseTaskLists+0x74>)
 80133ba:	f7fe fbe5 	bl	8011b88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80133be:	4b0b      	ldr	r3, [pc, #44]	@ (80133ec <prvInitialiseTaskLists+0x78>)
 80133c0:	4a05      	ldr	r2, [pc, #20]	@ (80133d8 <prvInitialiseTaskLists+0x64>)
 80133c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80133c4:	4b0a      	ldr	r3, [pc, #40]	@ (80133f0 <prvInitialiseTaskLists+0x7c>)
 80133c6:	4a05      	ldr	r2, [pc, #20]	@ (80133dc <prvInitialiseTaskLists+0x68>)
 80133c8:	601a      	str	r2, [r3, #0]
}
 80133ca:	bf00      	nop
 80133cc:	3708      	adds	r7, #8
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}
 80133d2:	bf00      	nop
 80133d4:	20000548 	.word	0x20000548
 80133d8:	200005ac 	.word	0x200005ac
 80133dc:	200005c0 	.word	0x200005c0
 80133e0:	200005dc 	.word	0x200005dc
 80133e4:	200005f0 	.word	0x200005f0
 80133e8:	20000608 	.word	0x20000608
 80133ec:	200005d4 	.word	0x200005d4
 80133f0:	200005d8 	.word	0x200005d8

080133f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133fa:	e019      	b.n	8013430 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80133fc:	f000 febe 	bl	801417c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013400:	4b10      	ldr	r3, [pc, #64]	@ (8013444 <prvCheckTasksWaitingTermination+0x50>)
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	3304      	adds	r3, #4
 801340c:	4618      	mov	r0, r3
 801340e:	f7fe fc45 	bl	8011c9c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8013412:	4b0d      	ldr	r3, [pc, #52]	@ (8013448 <prvCheckTasksWaitingTermination+0x54>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	3b01      	subs	r3, #1
 8013418:	4a0b      	ldr	r2, [pc, #44]	@ (8013448 <prvCheckTasksWaitingTermination+0x54>)
 801341a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 801341c:	4b0b      	ldr	r3, [pc, #44]	@ (801344c <prvCheckTasksWaitingTermination+0x58>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	3b01      	subs	r3, #1
 8013422:	4a0a      	ldr	r2, [pc, #40]	@ (801344c <prvCheckTasksWaitingTermination+0x58>)
 8013424:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8013426:	f000 fedb 	bl	80141e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 f810 	bl	8013450 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013430:	4b06      	ldr	r3, [pc, #24]	@ (801344c <prvCheckTasksWaitingTermination+0x58>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d1e1      	bne.n	80133fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8013438:	bf00      	nop
 801343a:	bf00      	nop
 801343c:	3708      	adds	r7, #8
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	200005f0 	.word	0x200005f0
 8013448:	2000061c 	.word	0x2000061c
 801344c:	20000604 	.word	0x20000604

08013450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801345c:	4618      	mov	r0, r3
 801345e:	f001 f899 	bl	8014594 <vPortFree>
                vPortFree( pxTCB );
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f001 f896 	bl	8014594 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8013468:	bf00      	nop
 801346a:	3708      	adds	r7, #8
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}

08013470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013470:	b480      	push	{r7}
 8013472:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013474:	4b0a      	ldr	r3, [pc, #40]	@ (80134a0 <prvResetNextTaskUnblockTime+0x30>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d104      	bne.n	8013488 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 801347e:	4b09      	ldr	r3, [pc, #36]	@ (80134a4 <prvResetNextTaskUnblockTime+0x34>)
 8013480:	f04f 32ff 	mov.w	r2, #4294967295
 8013484:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8013486:	e005      	b.n	8013494 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013488:	4b05      	ldr	r3, [pc, #20]	@ (80134a0 <prvResetNextTaskUnblockTime+0x30>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a04      	ldr	r2, [pc, #16]	@ (80134a4 <prvResetNextTaskUnblockTime+0x34>)
 8013492:	6013      	str	r3, [r2, #0]
}
 8013494:	bf00      	nop
 8013496:	46bd      	mov	sp, r7
 8013498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349c:	4770      	bx	lr
 801349e:	bf00      	nop
 80134a0:	200005d4 	.word	0x200005d4
 80134a4:	2000063c 	.word	0x2000063c

080134a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80134ae:	4b0b      	ldr	r3, [pc, #44]	@ (80134dc <xTaskGetSchedulerState+0x34>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d102      	bne.n	80134bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80134b6:	2301      	movs	r3, #1
 80134b8:	607b      	str	r3, [r7, #4]
 80134ba:	e008      	b.n	80134ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134bc:	4b08      	ldr	r3, [pc, #32]	@ (80134e0 <xTaskGetSchedulerState+0x38>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d102      	bne.n	80134ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80134c4:	2302      	movs	r3, #2
 80134c6:	607b      	str	r3, [r7, #4]
 80134c8:	e001      	b.n	80134ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80134ca:	2300      	movs	r3, #0
 80134cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80134ce:	687b      	ldr	r3, [r7, #4]
    }
 80134d0:	4618      	mov	r0, r3
 80134d2:	370c      	adds	r7, #12
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	20000628 	.word	0x20000628
 80134e0:	20000644 	.word	0x20000644

080134e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80134f0:	2300      	movs	r3, #0
 80134f2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d05e      	beq.n	80135b8 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134fe:	4b31      	ldr	r3, [pc, #196]	@ (80135c4 <xTaskPriorityInherit+0xe0>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013504:	429a      	cmp	r2, r3
 8013506:	d24e      	bcs.n	80135a6 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	699b      	ldr	r3, [r3, #24]
 801350c:	2b00      	cmp	r3, #0
 801350e:	db06      	blt.n	801351e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013510:	4b2c      	ldr	r3, [pc, #176]	@ (80135c4 <xTaskPriorityInherit+0xe0>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013516:	f1c3 0205 	rsb	r2, r3, #5
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	6959      	ldr	r1, [r3, #20]
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013526:	4613      	mov	r3, r2
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	4413      	add	r3, r2
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	4a26      	ldr	r2, [pc, #152]	@ (80135c8 <xTaskPriorityInherit+0xe4>)
 8013530:	4413      	add	r3, r2
 8013532:	4299      	cmp	r1, r3
 8013534:	d12f      	bne.n	8013596 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	3304      	adds	r3, #4
 801353a:	4618      	mov	r0, r3
 801353c:	f7fe fbae 	bl	8011c9c <uxListRemove>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d10a      	bne.n	801355c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801354a:	2201      	movs	r2, #1
 801354c:	fa02 f303 	lsl.w	r3, r2, r3
 8013550:	43da      	mvns	r2, r3
 8013552:	4b1e      	ldr	r3, [pc, #120]	@ (80135cc <xTaskPriorityInherit+0xe8>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	4013      	ands	r3, r2
 8013558:	4a1c      	ldr	r2, [pc, #112]	@ (80135cc <xTaskPriorityInherit+0xe8>)
 801355a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801355c:	4b19      	ldr	r3, [pc, #100]	@ (80135c4 <xTaskPriorityInherit+0xe0>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801356a:	2201      	movs	r2, #1
 801356c:	409a      	lsls	r2, r3
 801356e:	4b17      	ldr	r3, [pc, #92]	@ (80135cc <xTaskPriorityInherit+0xe8>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4313      	orrs	r3, r2
 8013574:	4a15      	ldr	r2, [pc, #84]	@ (80135cc <xTaskPriorityInherit+0xe8>)
 8013576:	6013      	str	r3, [r2, #0]
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801357c:	4613      	mov	r3, r2
 801357e:	009b      	lsls	r3, r3, #2
 8013580:	4413      	add	r3, r2
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	4a10      	ldr	r2, [pc, #64]	@ (80135c8 <xTaskPriorityInherit+0xe4>)
 8013586:	441a      	add	r2, r3
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	3304      	adds	r3, #4
 801358c:	4619      	mov	r1, r3
 801358e:	4610      	mov	r0, r2
 8013590:	f7fe fb27 	bl	8011be2 <vListInsertEnd>
 8013594:	e004      	b.n	80135a0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013596:	4b0b      	ldr	r3, [pc, #44]	@ (80135c4 <xTaskPriorityInherit+0xe0>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80135a0:	2301      	movs	r3, #1
 80135a2:	60fb      	str	r3, [r7, #12]
 80135a4:	e008      	b.n	80135b8 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80135aa:	4b06      	ldr	r3, [pc, #24]	@ (80135c4 <xTaskPriorityInherit+0xe0>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d201      	bcs.n	80135b8 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80135b4:	2301      	movs	r3, #1
 80135b6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80135b8:	68fb      	ldr	r3, [r7, #12]
    }
 80135ba:	4618      	mov	r0, r3
 80135bc:	3710      	adds	r7, #16
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	20000544 	.word	0x20000544
 80135c8:	20000548 	.word	0x20000548
 80135cc:	20000624 	.word	0x20000624

080135d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b086      	sub	sp, #24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80135dc:	2300      	movs	r3, #0
 80135de:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d065      	beq.n	80136b2 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80135e6:	4b35      	ldr	r3, [pc, #212]	@ (80136bc <xTaskPriorityDisinherit+0xec>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	693a      	ldr	r2, [r7, #16]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d00b      	beq.n	8013608 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80135f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f4:	f383 8811 	msr	BASEPRI, r3
 80135f8:	f3bf 8f6f 	isb	sy
 80135fc:	f3bf 8f4f 	dsb	sy
 8013600:	60fb      	str	r3, [r7, #12]
    }
 8013602:	bf00      	nop
 8013604:	bf00      	nop
 8013606:	e7fd      	b.n	8013604 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d10b      	bne.n	8013628 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8013610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013614:	f383 8811 	msr	BASEPRI, r3
 8013618:	f3bf 8f6f 	isb	sy
 801361c:	f3bf 8f4f 	dsb	sy
 8013620:	60bb      	str	r3, [r7, #8]
    }
 8013622:	bf00      	nop
 8013624:	bf00      	nop
 8013626:	e7fd      	b.n	8013624 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801362c:	1e5a      	subs	r2, r3, #1
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801363a:	429a      	cmp	r2, r3
 801363c:	d039      	beq.n	80136b2 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013642:	2b00      	cmp	r3, #0
 8013644:	d135      	bne.n	80136b2 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	3304      	adds	r3, #4
 801364a:	4618      	mov	r0, r3
 801364c:	f7fe fb26 	bl	8011c9c <uxListRemove>
 8013650:	4603      	mov	r3, r0
 8013652:	2b00      	cmp	r3, #0
 8013654:	d10a      	bne.n	801366c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801365a:	2201      	movs	r2, #1
 801365c:	fa02 f303 	lsl.w	r3, r2, r3
 8013660:	43da      	mvns	r2, r3
 8013662:	4b17      	ldr	r3, [pc, #92]	@ (80136c0 <xTaskPriorityDisinherit+0xf0>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4013      	ands	r3, r2
 8013668:	4a15      	ldr	r2, [pc, #84]	@ (80136c0 <xTaskPriorityDisinherit+0xf0>)
 801366a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013678:	f1c3 0205 	rsb	r2, r3, #5
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013684:	2201      	movs	r2, #1
 8013686:	409a      	lsls	r2, r3
 8013688:	4b0d      	ldr	r3, [pc, #52]	@ (80136c0 <xTaskPriorityDisinherit+0xf0>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	4313      	orrs	r3, r2
 801368e:	4a0c      	ldr	r2, [pc, #48]	@ (80136c0 <xTaskPriorityDisinherit+0xf0>)
 8013690:	6013      	str	r3, [r2, #0]
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013696:	4613      	mov	r3, r2
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	4413      	add	r3, r2
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	4a09      	ldr	r2, [pc, #36]	@ (80136c4 <xTaskPriorityDisinherit+0xf4>)
 80136a0:	441a      	add	r2, r3
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	3304      	adds	r3, #4
 80136a6:	4619      	mov	r1, r3
 80136a8:	4610      	mov	r0, r2
 80136aa:	f7fe fa9a 	bl	8011be2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80136ae:	2301      	movs	r3, #1
 80136b0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80136b2:	697b      	ldr	r3, [r7, #20]
    }
 80136b4:	4618      	mov	r0, r3
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	20000544 	.word	0x20000544
 80136c0:	20000624 	.word	0x20000624
 80136c4:	20000548 	.word	0x20000548

080136c8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b088      	sub	sp, #32
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80136d6:	2301      	movs	r3, #1
 80136d8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d079      	beq.n	80137d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d10b      	bne.n	8013700 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80136e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ec:	f383 8811 	msr	BASEPRI, r3
 80136f0:	f3bf 8f6f 	isb	sy
 80136f4:	f3bf 8f4f 	dsb	sy
 80136f8:	60fb      	str	r3, [r7, #12]
    }
 80136fa:	bf00      	nop
 80136fc:	bf00      	nop
 80136fe:	e7fd      	b.n	80136fc <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	429a      	cmp	r2, r3
 8013708:	d902      	bls.n	8013710 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	61fb      	str	r3, [r7, #28]
 801370e:	e002      	b.n	8013716 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013714:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801371a:	69fa      	ldr	r2, [r7, #28]
 801371c:	429a      	cmp	r2, r3
 801371e:	d059      	beq.n	80137d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013724:	697a      	ldr	r2, [r7, #20]
 8013726:	429a      	cmp	r2, r3
 8013728:	d154      	bne.n	80137d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 801372a:	4b2c      	ldr	r3, [pc, #176]	@ (80137dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	69ba      	ldr	r2, [r7, #24]
 8013730:	429a      	cmp	r2, r3
 8013732:	d10b      	bne.n	801374c <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8013734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013738:	f383 8811 	msr	BASEPRI, r3
 801373c:	f3bf 8f6f 	isb	sy
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	60bb      	str	r3, [r7, #8]
    }
 8013746:	bf00      	nop
 8013748:	bf00      	nop
 801374a:	e7fd      	b.n	8013748 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013750:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	69fa      	ldr	r2, [r7, #28]
 8013756:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	699b      	ldr	r3, [r3, #24]
 801375c:	2b00      	cmp	r3, #0
 801375e:	db04      	blt.n	801376a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	f1c3 0205 	rsb	r2, r3, #5
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	6959      	ldr	r1, [r3, #20]
 801376e:	693a      	ldr	r2, [r7, #16]
 8013770:	4613      	mov	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	4413      	add	r3, r2
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	4a19      	ldr	r2, [pc, #100]	@ (80137e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801377a:	4413      	add	r3, r2
 801377c:	4299      	cmp	r1, r3
 801377e:	d129      	bne.n	80137d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	3304      	adds	r3, #4
 8013784:	4618      	mov	r0, r3
 8013786:	f7fe fa89 	bl	8011c9c <uxListRemove>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d10a      	bne.n	80137a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013790:	69bb      	ldr	r3, [r7, #24]
 8013792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013794:	2201      	movs	r2, #1
 8013796:	fa02 f303 	lsl.w	r3, r2, r3
 801379a:	43da      	mvns	r2, r3
 801379c:	4b11      	ldr	r3, [pc, #68]	@ (80137e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4013      	ands	r3, r2
 80137a2:	4a10      	ldr	r2, [pc, #64]	@ (80137e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80137a4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137aa:	2201      	movs	r2, #1
 80137ac:	409a      	lsls	r2, r3
 80137ae:	4b0d      	ldr	r3, [pc, #52]	@ (80137e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	4313      	orrs	r3, r2
 80137b4:	4a0b      	ldr	r2, [pc, #44]	@ (80137e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80137b6:	6013      	str	r3, [r2, #0]
 80137b8:	69bb      	ldr	r3, [r7, #24]
 80137ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137bc:	4613      	mov	r3, r2
 80137be:	009b      	lsls	r3, r3, #2
 80137c0:	4413      	add	r3, r2
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	4a06      	ldr	r2, [pc, #24]	@ (80137e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80137c6:	441a      	add	r2, r3
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	3304      	adds	r3, #4
 80137cc:	4619      	mov	r1, r3
 80137ce:	4610      	mov	r0, r2
 80137d0:	f7fe fa07 	bl	8011be2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80137d4:	bf00      	nop
 80137d6:	3720      	adds	r7, #32
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	20000544 	.word	0x20000544
 80137e0:	20000548 	.word	0x20000548
 80137e4:	20000624 	.word	0x20000624

080137e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80137e8:	b480      	push	{r7}
 80137ea:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80137ec:	4b07      	ldr	r3, [pc, #28]	@ (801380c <pvTaskIncrementMutexHeldCount+0x24>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d004      	beq.n	80137fe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80137f4:	4b05      	ldr	r3, [pc, #20]	@ (801380c <pvTaskIncrementMutexHeldCount+0x24>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80137fa:	3201      	adds	r2, #1
 80137fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80137fe:	4b03      	ldr	r3, [pc, #12]	@ (801380c <pvTaskIncrementMutexHeldCount+0x24>)
 8013800:	681b      	ldr	r3, [r3, #0]
    }
 8013802:	4618      	mov	r0, r3
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr
 801380c:	20000544 	.word	0x20000544

08013810 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b084      	sub	sp, #16
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 801381a:	4b29      	ldr	r3, [pc, #164]	@ (80138c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013820:	4b28      	ldr	r3, [pc, #160]	@ (80138c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	3304      	adds	r3, #4
 8013826:	4618      	mov	r0, r3
 8013828:	f7fe fa38 	bl	8011c9c <uxListRemove>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d10b      	bne.n	801384a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013832:	4b24      	ldr	r3, [pc, #144]	@ (80138c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013838:	2201      	movs	r2, #1
 801383a:	fa02 f303 	lsl.w	r3, r2, r3
 801383e:	43da      	mvns	r2, r3
 8013840:	4b21      	ldr	r3, [pc, #132]	@ (80138c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	4013      	ands	r3, r2
 8013846:	4a20      	ldr	r2, [pc, #128]	@ (80138c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013848:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013850:	d10a      	bne.n	8013868 <prvAddCurrentTaskToDelayedList+0x58>
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d007      	beq.n	8013868 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013858:	4b1a      	ldr	r3, [pc, #104]	@ (80138c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	3304      	adds	r3, #4
 801385e:	4619      	mov	r1, r3
 8013860:	481a      	ldr	r0, [pc, #104]	@ (80138cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8013862:	f7fe f9be 	bl	8011be2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8013866:	e026      	b.n	80138b6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8013868:	68fa      	ldr	r2, [r7, #12]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	4413      	add	r3, r2
 801386e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013870:	4b14      	ldr	r3, [pc, #80]	@ (80138c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	429a      	cmp	r2, r3
 801387e:	d209      	bcs.n	8013894 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013880:	4b13      	ldr	r3, [pc, #76]	@ (80138d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	4b0f      	ldr	r3, [pc, #60]	@ (80138c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	3304      	adds	r3, #4
 801388a:	4619      	mov	r1, r3
 801388c:	4610      	mov	r0, r2
 801388e:	f7fe f9cc 	bl	8011c2a <vListInsert>
}
 8013892:	e010      	b.n	80138b6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013894:	4b0f      	ldr	r3, [pc, #60]	@ (80138d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	4b0a      	ldr	r3, [pc, #40]	@ (80138c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	3304      	adds	r3, #4
 801389e:	4619      	mov	r1, r3
 80138a0:	4610      	mov	r0, r2
 80138a2:	f7fe f9c2 	bl	8011c2a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80138a6:	4b0c      	ldr	r3, [pc, #48]	@ (80138d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d202      	bcs.n	80138b6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80138b0:	4a09      	ldr	r2, [pc, #36]	@ (80138d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	6013      	str	r3, [r2, #0]
}
 80138b6:	bf00      	nop
 80138b8:	3710      	adds	r7, #16
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	20000620 	.word	0x20000620
 80138c4:	20000544 	.word	0x20000544
 80138c8:	20000624 	.word	0x20000624
 80138cc:	20000608 	.word	0x20000608
 80138d0:	200005d8 	.word	0x200005d8
 80138d4:	200005d4 	.word	0x200005d4
 80138d8:	2000063c 	.word	0x2000063c

080138dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80138e2:	2300      	movs	r3, #0
 80138e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80138e6:	f000 fae1 	bl	8013eac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80138ea:	4b12      	ldr	r3, [pc, #72]	@ (8013934 <xTimerCreateTimerTask+0x58>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d00b      	beq.n	801390a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80138f2:	4b11      	ldr	r3, [pc, #68]	@ (8013938 <xTimerCreateTimerTask+0x5c>)
 80138f4:	9301      	str	r3, [sp, #4]
 80138f6:	2302      	movs	r3, #2
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	2300      	movs	r3, #0
 80138fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013900:	490e      	ldr	r1, [pc, #56]	@ (801393c <xTimerCreateTimerTask+0x60>)
 8013902:	480f      	ldr	r0, [pc, #60]	@ (8013940 <xTimerCreateTimerTask+0x64>)
 8013904:	f7ff f83e 	bl	8012984 <xTaskCreate>
 8013908:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d10b      	bne.n	8013928 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8013910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013914:	f383 8811 	msr	BASEPRI, r3
 8013918:	f3bf 8f6f 	isb	sy
 801391c:	f3bf 8f4f 	dsb	sy
 8013920:	603b      	str	r3, [r7, #0]
    }
 8013922:	bf00      	nop
 8013924:	bf00      	nop
 8013926:	e7fd      	b.n	8013924 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8013928:	687b      	ldr	r3, [r7, #4]
    }
 801392a:	4618      	mov	r0, r3
 801392c:	3708      	adds	r7, #8
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	20000678 	.word	0x20000678
 8013938:	2000067c 	.word	0x2000067c
 801393c:	08018554 	.word	0x08018554
 8013940:	08013a7d 	.word	0x08013a7d

08013944 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8013944:	b580      	push	{r7, lr}
 8013946:	b08a      	sub	sp, #40	@ 0x28
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	607a      	str	r2, [r7, #4]
 8013950:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8013952:	2300      	movs	r3, #0
 8013954:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d10b      	bne.n	8013974 <xTimerGenericCommand+0x30>
        __asm volatile
 801395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013960:	f383 8811 	msr	BASEPRI, r3
 8013964:	f3bf 8f6f 	isb	sy
 8013968:	f3bf 8f4f 	dsb	sy
 801396c:	623b      	str	r3, [r7, #32]
    }
 801396e:	bf00      	nop
 8013970:	bf00      	nop
 8013972:	e7fd      	b.n	8013970 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8013974:	4b19      	ldr	r3, [pc, #100]	@ (80139dc <xTimerGenericCommand+0x98>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d02a      	beq.n	80139d2 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	2b05      	cmp	r3, #5
 801398c:	dc18      	bgt.n	80139c0 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801398e:	f7ff fd8b 	bl	80134a8 <xTaskGetSchedulerState>
 8013992:	4603      	mov	r3, r0
 8013994:	2b02      	cmp	r3, #2
 8013996:	d109      	bne.n	80139ac <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013998:	4b10      	ldr	r3, [pc, #64]	@ (80139dc <xTimerGenericCommand+0x98>)
 801399a:	6818      	ldr	r0, [r3, #0]
 801399c:	f107 0114 	add.w	r1, r7, #20
 80139a0:	2300      	movs	r3, #0
 80139a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139a4:	f7fe fac6 	bl	8011f34 <xQueueGenericSend>
 80139a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80139aa:	e012      	b.n	80139d2 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80139ac:	4b0b      	ldr	r3, [pc, #44]	@ (80139dc <xTimerGenericCommand+0x98>)
 80139ae:	6818      	ldr	r0, [r3, #0]
 80139b0:	f107 0114 	add.w	r1, r7, #20
 80139b4:	2300      	movs	r3, #0
 80139b6:	2200      	movs	r2, #0
 80139b8:	f7fe fabc 	bl	8011f34 <xQueueGenericSend>
 80139bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80139be:	e008      	b.n	80139d2 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80139c0:	4b06      	ldr	r3, [pc, #24]	@ (80139dc <xTimerGenericCommand+0x98>)
 80139c2:	6818      	ldr	r0, [r3, #0]
 80139c4:	f107 0114 	add.w	r1, r7, #20
 80139c8:	2300      	movs	r3, #0
 80139ca:	683a      	ldr	r2, [r7, #0]
 80139cc:	f7fe fbb4 	bl	8012138 <xQueueGenericSendFromISR>
 80139d0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80139d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80139d4:	4618      	mov	r0, r3
 80139d6:	3728      	adds	r7, #40	@ 0x28
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	20000678 	.word	0x20000678

080139e0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b088      	sub	sp, #32
 80139e4:	af02      	add	r7, sp, #8
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139ea:	4b23      	ldr	r3, [pc, #140]	@ (8013a78 <prvProcessExpiredTimer+0x98>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	68db      	ldr	r3, [r3, #12]
 80139f2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	3304      	adds	r3, #4
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fe f94f 	bl	8011c9c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013a04:	f003 0304 	and.w	r3, r3, #4
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d023      	beq.n	8013a54 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	699a      	ldr	r2, [r3, #24]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	18d1      	adds	r1, r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	6978      	ldr	r0, [r7, #20]
 8013a1a:	f000 f8d5 	bl	8013bc8 <prvInsertTimerInActiveList>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d020      	beq.n	8013a66 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013a24:	2300      	movs	r3, #0
 8013a26:	9300      	str	r3, [sp, #0]
 8013a28:	2300      	movs	r3, #0
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	6978      	ldr	r0, [r7, #20]
 8013a30:	f7ff ff88 	bl	8013944 <xTimerGenericCommand>
 8013a34:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d114      	bne.n	8013a66 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8013a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a40:	f383 8811 	msr	BASEPRI, r3
 8013a44:	f3bf 8f6f 	isb	sy
 8013a48:	f3bf 8f4f 	dsb	sy
 8013a4c:	60fb      	str	r3, [r7, #12]
    }
 8013a4e:	bf00      	nop
 8013a50:	bf00      	nop
 8013a52:	e7fd      	b.n	8013a50 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013a5a:	f023 0301 	bic.w	r3, r3, #1
 8013a5e:	b2da      	uxtb	r2, r3
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	6a1b      	ldr	r3, [r3, #32]
 8013a6a:	6978      	ldr	r0, [r7, #20]
 8013a6c:	4798      	blx	r3
    }
 8013a6e:	bf00      	nop
 8013a70:	3718      	adds	r7, #24
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	20000670 	.word	0x20000670

08013a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013a84:	f107 0308 	add.w	r3, r7, #8
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f000 f859 	bl	8013b40 <prvGetNextExpireTime>
 8013a8e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	4619      	mov	r1, r3
 8013a94:	68f8      	ldr	r0, [r7, #12]
 8013a96:	f000 f805 	bl	8013aa4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8013a9a:	f000 f8d7 	bl	8013c4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013a9e:	bf00      	nop
 8013aa0:	e7f0      	b.n	8013a84 <prvTimerTask+0x8>
	...

08013aa4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8013aae:	f7ff f937 	bl	8012d20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013ab2:	f107 0308 	add.w	r3, r7, #8
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f000 f866 	bl	8013b88 <prvSampleTimeNow>
 8013abc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d130      	bne.n	8013b26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d10a      	bne.n	8013ae0 <prvProcessTimerOrBlockTask+0x3c>
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	d806      	bhi.n	8013ae0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8013ad2:	f7ff f933 	bl	8012d3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013ad6:	68f9      	ldr	r1, [r7, #12]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f7ff ff81 	bl	80139e0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8013ade:	e024      	b.n	8013b2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d008      	beq.n	8013af8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013ae6:	4b13      	ldr	r3, [pc, #76]	@ (8013b34 <prvProcessTimerOrBlockTask+0x90>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d101      	bne.n	8013af4 <prvProcessTimerOrBlockTask+0x50>
 8013af0:	2301      	movs	r3, #1
 8013af2:	e000      	b.n	8013af6 <prvProcessTimerOrBlockTask+0x52>
 8013af4:	2300      	movs	r3, #0
 8013af6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013af8:	4b0f      	ldr	r3, [pc, #60]	@ (8013b38 <prvProcessTimerOrBlockTask+0x94>)
 8013afa:	6818      	ldr	r0, [r3, #0]
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	683a      	ldr	r2, [r7, #0]
 8013b04:	4619      	mov	r1, r3
 8013b06:	f7fe ff09 	bl	801291c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8013b0a:	f7ff f917 	bl	8012d3c <xTaskResumeAll>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d10a      	bne.n	8013b2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8013b14:	4b09      	ldr	r3, [pc, #36]	@ (8013b3c <prvProcessTimerOrBlockTask+0x98>)
 8013b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b1a:	601a      	str	r2, [r3, #0]
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	f3bf 8f6f 	isb	sy
    }
 8013b24:	e001      	b.n	8013b2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8013b26:	f7ff f909 	bl	8012d3c <xTaskResumeAll>
    }
 8013b2a:	bf00      	nop
 8013b2c:	3710      	adds	r7, #16
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	20000674 	.word	0x20000674
 8013b38:	20000678 	.word	0x20000678
 8013b3c:	e000ed04 	.word	0xe000ed04

08013b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8013b40:	b480      	push	{r7}
 8013b42:	b085      	sub	sp, #20
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013b48:	4b0e      	ldr	r3, [pc, #56]	@ (8013b84 <prvGetNextExpireTime+0x44>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <prvGetNextExpireTime+0x16>
 8013b52:	2201      	movs	r2, #1
 8013b54:	e000      	b.n	8013b58 <prvGetNextExpireTime+0x18>
 8013b56:	2200      	movs	r2, #0
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d105      	bne.n	8013b70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013b64:	4b07      	ldr	r3, [pc, #28]	@ (8013b84 <prvGetNextExpireTime+0x44>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	60fb      	str	r3, [r7, #12]
 8013b6e:	e001      	b.n	8013b74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8013b70:	2300      	movs	r3, #0
 8013b72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8013b74:	68fb      	ldr	r3, [r7, #12]
    }
 8013b76:	4618      	mov	r0, r3
 8013b78:	3714      	adds	r7, #20
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop
 8013b84:	20000670 	.word	0x20000670

08013b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8013b90:	f7ff f972 	bl	8012e78 <xTaskGetTickCount>
 8013b94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8013b96:	4b0b      	ldr	r3, [pc, #44]	@ (8013bc4 <prvSampleTimeNow+0x3c>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d205      	bcs.n	8013bac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8013ba0:	f000 f91e 	bl	8013de0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	e002      	b.n	8013bb2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8013bb2:	4a04      	ldr	r2, [pc, #16]	@ (8013bc4 <prvSampleTimeNow+0x3c>)
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
    }
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	20000680 	.word	0x20000680

08013bc8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b086      	sub	sp, #24
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	60f8      	str	r0, [r7, #12]
 8013bd0:	60b9      	str	r1, [r7, #8]
 8013bd2:	607a      	str	r2, [r7, #4]
 8013bd4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	68ba      	ldr	r2, [r7, #8]
 8013bde:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8013be6:	68ba      	ldr	r2, [r7, #8]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d812      	bhi.n	8013c14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	1ad2      	subs	r2, r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	699b      	ldr	r3, [r3, #24]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d302      	bcc.n	8013c02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	617b      	str	r3, [r7, #20]
 8013c00:	e01b      	b.n	8013c3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013c02:	4b10      	ldr	r3, [pc, #64]	@ (8013c44 <prvInsertTimerInActiveList+0x7c>)
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	f7fe f80c 	bl	8011c2a <vListInsert>
 8013c12:	e012      	b.n	8013c3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d206      	bcs.n	8013c2a <prvInsertTimerInActiveList+0x62>
 8013c1c:	68ba      	ldr	r2, [r7, #8]
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d302      	bcc.n	8013c2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8013c24:	2301      	movs	r3, #1
 8013c26:	617b      	str	r3, [r7, #20]
 8013c28:	e007      	b.n	8013c3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013c2a:	4b07      	ldr	r3, [pc, #28]	@ (8013c48 <prvInsertTimerInActiveList+0x80>)
 8013c2c:	681a      	ldr	r2, [r3, #0]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	3304      	adds	r3, #4
 8013c32:	4619      	mov	r1, r3
 8013c34:	4610      	mov	r0, r2
 8013c36:	f7fd fff8 	bl	8011c2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8013c3a:	697b      	ldr	r3, [r7, #20]
    }
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3718      	adds	r7, #24
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	20000674 	.word	0x20000674
 8013c48:	20000670 	.word	0x20000670

08013c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b08c      	sub	sp, #48	@ 0x30
 8013c50:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c52:	e0b2      	b.n	8013dba <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	f2c0 80af 	blt.w	8013dba <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c62:	695b      	ldr	r3, [r3, #20]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d004      	beq.n	8013c72 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c6a:	3304      	adds	r3, #4
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fe f815 	bl	8011c9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013c72:	1d3b      	adds	r3, r7, #4
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7ff ff87 	bl	8013b88 <prvSampleTimeNow>
 8013c7a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	2b09      	cmp	r3, #9
 8013c80:	f200 8098 	bhi.w	8013db4 <prvProcessReceivedCommands+0x168>
 8013c84:	a201      	add	r2, pc, #4	@ (adr r2, 8013c8c <prvProcessReceivedCommands+0x40>)
 8013c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c8a:	bf00      	nop
 8013c8c:	08013cb5 	.word	0x08013cb5
 8013c90:	08013cb5 	.word	0x08013cb5
 8013c94:	08013cb5 	.word	0x08013cb5
 8013c98:	08013d2b 	.word	0x08013d2b
 8013c9c:	08013d3f 	.word	0x08013d3f
 8013ca0:	08013d8b 	.word	0x08013d8b
 8013ca4:	08013cb5 	.word	0x08013cb5
 8013ca8:	08013cb5 	.word	0x08013cb5
 8013cac:	08013d2b 	.word	0x08013d2b
 8013cb0:	08013d3f 	.word	0x08013d3f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013cba:	f043 0301 	orr.w	r3, r3, #1
 8013cbe:	b2da      	uxtb	r2, r3
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cca:	699b      	ldr	r3, [r3, #24]
 8013ccc:	18d1      	adds	r1, r2, r3
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	6a3a      	ldr	r2, [r7, #32]
 8013cd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cd4:	f7ff ff78 	bl	8013bc8 <prvInsertTimerInActiveList>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d06c      	beq.n	8013db8 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce0:	6a1b      	ldr	r3, [r3, #32]
 8013ce2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ce4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013cec:	f003 0304 	and.w	r3, r3, #4
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d061      	beq.n	8013db8 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf8:	699b      	ldr	r3, [r3, #24]
 8013cfa:	441a      	add	r2, r3
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	2300      	movs	r3, #0
 8013d02:	2100      	movs	r1, #0
 8013d04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d06:	f7ff fe1d 	bl	8013944 <xTimerGenericCommand>
 8013d0a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d152      	bne.n	8013db8 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8013d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d16:	f383 8811 	msr	BASEPRI, r3
 8013d1a:	f3bf 8f6f 	isb	sy
 8013d1e:	f3bf 8f4f 	dsb	sy
 8013d22:	61bb      	str	r3, [r7, #24]
    }
 8013d24:	bf00      	nop
 8013d26:	bf00      	nop
 8013d28:	e7fd      	b.n	8013d26 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d30:	f023 0301 	bic.w	r3, r3, #1
 8013d34:	b2da      	uxtb	r2, r3
 8013d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8013d3c:	e03d      	b.n	8013dba <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d44:	f043 0301 	orr.w	r3, r3, #1
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d54:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d58:	699b      	ldr	r3, [r3, #24]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d10b      	bne.n	8013d76 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8013d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d62:	f383 8811 	msr	BASEPRI, r3
 8013d66:	f3bf 8f6f 	isb	sy
 8013d6a:	f3bf 8f4f 	dsb	sy
 8013d6e:	617b      	str	r3, [r7, #20]
    }
 8013d70:	bf00      	nop
 8013d72:	bf00      	nop
 8013d74:	e7fd      	b.n	8013d72 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d78:	699a      	ldr	r2, [r3, #24]
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	18d1      	adds	r1, r2, r3
 8013d7e:	6a3b      	ldr	r3, [r7, #32]
 8013d80:	6a3a      	ldr	r2, [r7, #32]
 8013d82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d84:	f7ff ff20 	bl	8013bc8 <prvInsertTimerInActiveList>
                        break;
 8013d88:	e017      	b.n	8013dba <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d90:	f003 0302 	and.w	r3, r3, #2
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d103      	bne.n	8013da0 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8013d98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d9a:	f000 fbfb 	bl	8014594 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8013d9e:	e00c      	b.n	8013dba <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013da6:	f023 0301 	bic.w	r3, r3, #1
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8013db2:	e002      	b.n	8013dba <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8013db4:	bf00      	nop
 8013db6:	e000      	b.n	8013dba <prvProcessReceivedCommands+0x16e>
                        break;
 8013db8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013dba:	4b08      	ldr	r3, [pc, #32]	@ (8013ddc <prvProcessReceivedCommands+0x190>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f107 0108 	add.w	r1, r7, #8
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fe fa65 	bl	8012294 <xQueueReceive>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f47f af41 	bne.w	8013c54 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8013dd2:	bf00      	nop
 8013dd4:	bf00      	nop
 8013dd6:	3728      	adds	r7, #40	@ 0x28
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	20000678 	.word	0x20000678

08013de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b088      	sub	sp, #32
 8013de4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013de6:	e049      	b.n	8013e7c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013de8:	4b2e      	ldr	r3, [pc, #184]	@ (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013df2:	4b2c      	ldr	r3, [pc, #176]	@ (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	3304      	adds	r3, #4
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7fd ff4b 	bl	8011c9c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	6a1b      	ldr	r3, [r3, #32]
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e14:	f003 0304 	and.w	r3, r3, #4
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d02f      	beq.n	8013e7c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	699b      	ldr	r3, [r3, #24]
 8013e20:	693a      	ldr	r2, [r7, #16]
 8013e22:	4413      	add	r3, r2
 8013e24:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8013e26:	68ba      	ldr	r2, [r7, #8]
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d90e      	bls.n	8013e4c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	68ba      	ldr	r2, [r7, #8]
 8013e32:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	3304      	adds	r3, #4
 8013e42:	4619      	mov	r1, r3
 8013e44:	4610      	mov	r0, r2
 8013e46:	f7fd fef0 	bl	8011c2a <vListInsert>
 8013e4a:	e017      	b.n	8013e7c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	2300      	movs	r3, #0
 8013e52:	693a      	ldr	r2, [r7, #16]
 8013e54:	2100      	movs	r1, #0
 8013e56:	68f8      	ldr	r0, [r7, #12]
 8013e58:	f7ff fd74 	bl	8013944 <xTimerGenericCommand>
 8013e5c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d10b      	bne.n	8013e7c <prvSwitchTimerLists+0x9c>
        __asm volatile
 8013e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e68:	f383 8811 	msr	BASEPRI, r3
 8013e6c:	f3bf 8f6f 	isb	sy
 8013e70:	f3bf 8f4f 	dsb	sy
 8013e74:	603b      	str	r3, [r7, #0]
    }
 8013e76:	bf00      	nop
 8013e78:	bf00      	nop
 8013e7a:	e7fd      	b.n	8013e78 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013e7c:	4b09      	ldr	r3, [pc, #36]	@ (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d1b0      	bne.n	8013de8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8013e86:	4b07      	ldr	r3, [pc, #28]	@ (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8013e8c:	4b06      	ldr	r3, [pc, #24]	@ (8013ea8 <prvSwitchTimerLists+0xc8>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a04      	ldr	r2, [pc, #16]	@ (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013e92:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8013e94:	4a04      	ldr	r2, [pc, #16]	@ (8013ea8 <prvSwitchTimerLists+0xc8>)
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	6013      	str	r3, [r2, #0]
    }
 8013e9a:	bf00      	nop
 8013e9c:	3718      	adds	r7, #24
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
 8013ea2:	bf00      	nop
 8013ea4:	20000670 	.word	0x20000670
 8013ea8:	20000674 	.word	0x20000674

08013eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8013eac:	b580      	push	{r7, lr}
 8013eae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8013eb0:	f000 f964 	bl	801417c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8013eb4:	4b12      	ldr	r3, [pc, #72]	@ (8013f00 <prvCheckForValidListAndQueue+0x54>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d11d      	bne.n	8013ef8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8013ebc:	4811      	ldr	r0, [pc, #68]	@ (8013f04 <prvCheckForValidListAndQueue+0x58>)
 8013ebe:	f7fd fe63 	bl	8011b88 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8013ec2:	4811      	ldr	r0, [pc, #68]	@ (8013f08 <prvCheckForValidListAndQueue+0x5c>)
 8013ec4:	f7fd fe60 	bl	8011b88 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8013ec8:	4b10      	ldr	r3, [pc, #64]	@ (8013f0c <prvCheckForValidListAndQueue+0x60>)
 8013eca:	4a0e      	ldr	r2, [pc, #56]	@ (8013f04 <prvCheckForValidListAndQueue+0x58>)
 8013ecc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8013ece:	4b10      	ldr	r3, [pc, #64]	@ (8013f10 <prvCheckForValidListAndQueue+0x64>)
 8013ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8013f08 <prvCheckForValidListAndQueue+0x5c>)
 8013ed2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	210c      	movs	r1, #12
 8013ed8:	200a      	movs	r0, #10
 8013eda:	f7fd ff73 	bl	8011dc4 <xQueueGenericCreate>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	4a07      	ldr	r2, [pc, #28]	@ (8013f00 <prvCheckForValidListAndQueue+0x54>)
 8013ee2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8013ee4:	4b06      	ldr	r3, [pc, #24]	@ (8013f00 <prvCheckForValidListAndQueue+0x54>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d005      	beq.n	8013ef8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013eec:	4b04      	ldr	r3, [pc, #16]	@ (8013f00 <prvCheckForValidListAndQueue+0x54>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4908      	ldr	r1, [pc, #32]	@ (8013f14 <prvCheckForValidListAndQueue+0x68>)
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fe fce8 	bl	80128c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8013ef8:	f000 f972 	bl	80141e0 <vPortExitCritical>
    }
 8013efc:	bf00      	nop
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	20000678 	.word	0x20000678
 8013f04:	20000648 	.word	0x20000648
 8013f08:	2000065c 	.word	0x2000065c
 8013f0c:	20000670 	.word	0x20000670
 8013f10:	20000674 	.word	0x20000674
 8013f14:	0801855c 	.word	0x0801855c

08013f18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	3b04      	subs	r3, #4
 8013f28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013f30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	3b04      	subs	r3, #4
 8013f36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	f023 0201 	bic.w	r2, r3, #1
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	3b04      	subs	r3, #4
 8013f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8013f48:	4a0c      	ldr	r2, [pc, #48]	@ (8013f7c <pxPortInitialiseStack+0x64>)
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	3b14      	subs	r3, #20
 8013f52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	3b04      	subs	r3, #4
 8013f5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	f06f 0202 	mvn.w	r2, #2
 8013f66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	3b20      	subs	r3, #32
 8013f6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3714      	adds	r7, #20
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr
 8013f7c:	08013f81 	.word	0x08013f81

08013f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013f80:	b480      	push	{r7}
 8013f82:	b085      	sub	sp, #20
 8013f84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8013f8a:	4b13      	ldr	r3, [pc, #76]	@ (8013fd8 <prvTaskExitError+0x58>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f92:	d00b      	beq.n	8013fac <prvTaskExitError+0x2c>
        __asm volatile
 8013f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f98:	f383 8811 	msr	BASEPRI, r3
 8013f9c:	f3bf 8f6f 	isb	sy
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	60fb      	str	r3, [r7, #12]
    }
 8013fa6:	bf00      	nop
 8013fa8:	bf00      	nop
 8013faa:	e7fd      	b.n	8013fa8 <prvTaskExitError+0x28>
        __asm volatile
 8013fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb0:	f383 8811 	msr	BASEPRI, r3
 8013fb4:	f3bf 8f6f 	isb	sy
 8013fb8:	f3bf 8f4f 	dsb	sy
 8013fbc:	60bb      	str	r3, [r7, #8]
    }
 8013fbe:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8013fc0:	bf00      	nop
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d0fc      	beq.n	8013fc2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8013fc8:	bf00      	nop
 8013fca:	bf00      	nop
 8013fcc:	3714      	adds	r7, #20
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr
 8013fd6:	bf00      	nop
 8013fd8:	2000002c 	.word	0x2000002c
 8013fdc:	00000000 	.word	0x00000000

08013fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8013fe0:	4b07      	ldr	r3, [pc, #28]	@ (8014000 <pxCurrentTCBConst2>)
 8013fe2:	6819      	ldr	r1, [r3, #0]
 8013fe4:	6808      	ldr	r0, [r1, #0]
 8013fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fea:	f380 8809 	msr	PSP, r0
 8013fee:	f3bf 8f6f 	isb	sy
 8013ff2:	f04f 0000 	mov.w	r0, #0
 8013ff6:	f380 8811 	msr	BASEPRI, r0
 8013ffa:	4770      	bx	lr
 8013ffc:	f3af 8000 	nop.w

08014000 <pxCurrentTCBConst2>:
 8014000:	20000544 	.word	0x20000544
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8014004:	bf00      	nop
 8014006:	bf00      	nop

08014008 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8014008:	4808      	ldr	r0, [pc, #32]	@ (801402c <prvPortStartFirstTask+0x24>)
 801400a:	6800      	ldr	r0, [r0, #0]
 801400c:	6800      	ldr	r0, [r0, #0]
 801400e:	f380 8808 	msr	MSP, r0
 8014012:	f04f 0000 	mov.w	r0, #0
 8014016:	f380 8814 	msr	CONTROL, r0
 801401a:	b662      	cpsie	i
 801401c:	b661      	cpsie	f
 801401e:	f3bf 8f4f 	dsb	sy
 8014022:	f3bf 8f6f 	isb	sy
 8014026:	df00      	svc	0
 8014028:	bf00      	nop
 801402a:	0000      	.short	0x0000
 801402c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8014030:	bf00      	nop
 8014032:	bf00      	nop

08014034 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801403a:	4b47      	ldr	r3, [pc, #284]	@ (8014158 <xPortStartScheduler+0x124>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	4a47      	ldr	r2, [pc, #284]	@ (801415c <xPortStartScheduler+0x128>)
 8014040:	4293      	cmp	r3, r2
 8014042:	d10b      	bne.n	801405c <xPortStartScheduler+0x28>
        __asm volatile
 8014044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014048:	f383 8811 	msr	BASEPRI, r3
 801404c:	f3bf 8f6f 	isb	sy
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	60fb      	str	r3, [r7, #12]
    }
 8014056:	bf00      	nop
 8014058:	bf00      	nop
 801405a:	e7fd      	b.n	8014058 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801405c:	4b3e      	ldr	r3, [pc, #248]	@ (8014158 <xPortStartScheduler+0x124>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4a3f      	ldr	r2, [pc, #252]	@ (8014160 <xPortStartScheduler+0x12c>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d10b      	bne.n	801407e <xPortStartScheduler+0x4a>
        __asm volatile
 8014066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801406a:	f383 8811 	msr	BASEPRI, r3
 801406e:	f3bf 8f6f 	isb	sy
 8014072:	f3bf 8f4f 	dsb	sy
 8014076:	613b      	str	r3, [r7, #16]
    }
 8014078:	bf00      	nop
 801407a:	bf00      	nop
 801407c:	e7fd      	b.n	801407a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801407e:	4b39      	ldr	r3, [pc, #228]	@ (8014164 <xPortStartScheduler+0x130>)
 8014080:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	b2db      	uxtb	r3, r3
 8014088:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	22ff      	movs	r2, #255	@ 0xff
 801408e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	b2db      	uxtb	r3, r3
 8014096:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014098:	78fb      	ldrb	r3, [r7, #3]
 801409a:	b2db      	uxtb	r3, r3
 801409c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80140a0:	b2da      	uxtb	r2, r3
 80140a2:	4b31      	ldr	r3, [pc, #196]	@ (8014168 <xPortStartScheduler+0x134>)
 80140a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80140a6:	4b31      	ldr	r3, [pc, #196]	@ (801416c <xPortStartScheduler+0x138>)
 80140a8:	2207      	movs	r2, #7
 80140aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80140ac:	e009      	b.n	80140c2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80140ae:	4b2f      	ldr	r3, [pc, #188]	@ (801416c <xPortStartScheduler+0x138>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	3b01      	subs	r3, #1
 80140b4:	4a2d      	ldr	r2, [pc, #180]	@ (801416c <xPortStartScheduler+0x138>)
 80140b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80140b8:	78fb      	ldrb	r3, [r7, #3]
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	005b      	lsls	r3, r3, #1
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80140c2:	78fb      	ldrb	r3, [r7, #3]
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80140ca:	2b80      	cmp	r3, #128	@ 0x80
 80140cc:	d0ef      	beq.n	80140ae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80140ce:	4b27      	ldr	r3, [pc, #156]	@ (801416c <xPortStartScheduler+0x138>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	f1c3 0307 	rsb	r3, r3, #7
 80140d6:	2b04      	cmp	r3, #4
 80140d8:	d00b      	beq.n	80140f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80140da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140de:	f383 8811 	msr	BASEPRI, r3
 80140e2:	f3bf 8f6f 	isb	sy
 80140e6:	f3bf 8f4f 	dsb	sy
 80140ea:	60bb      	str	r3, [r7, #8]
    }
 80140ec:	bf00      	nop
 80140ee:	bf00      	nop
 80140f0:	e7fd      	b.n	80140ee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80140f2:	4b1e      	ldr	r3, [pc, #120]	@ (801416c <xPortStartScheduler+0x138>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	021b      	lsls	r3, r3, #8
 80140f8:	4a1c      	ldr	r2, [pc, #112]	@ (801416c <xPortStartScheduler+0x138>)
 80140fa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80140fc:	4b1b      	ldr	r3, [pc, #108]	@ (801416c <xPortStartScheduler+0x138>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014104:	4a19      	ldr	r2, [pc, #100]	@ (801416c <xPortStartScheduler+0x138>)
 8014106:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	b2da      	uxtb	r2, r3
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8014110:	4b17      	ldr	r3, [pc, #92]	@ (8014170 <xPortStartScheduler+0x13c>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4a16      	ldr	r2, [pc, #88]	@ (8014170 <xPortStartScheduler+0x13c>)
 8014116:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801411a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801411c:	4b14      	ldr	r3, [pc, #80]	@ (8014170 <xPortStartScheduler+0x13c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	4a13      	ldr	r2, [pc, #76]	@ (8014170 <xPortStartScheduler+0x13c>)
 8014122:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014126:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8014128:	f000 f8e0 	bl	80142ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801412c:	4b11      	ldr	r3, [pc, #68]	@ (8014174 <xPortStartScheduler+0x140>)
 801412e:	2200      	movs	r2, #0
 8014130:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8014132:	f000 f8ff 	bl	8014334 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014136:	4b10      	ldr	r3, [pc, #64]	@ (8014178 <xPortStartScheduler+0x144>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	4a0f      	ldr	r2, [pc, #60]	@ (8014178 <xPortStartScheduler+0x144>)
 801413c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014140:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8014142:	f7ff ff61 	bl	8014008 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8014146:	f7fe ff61 	bl	801300c <vTaskSwitchContext>
    prvTaskExitError();
 801414a:	f7ff ff19 	bl	8013f80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3718      	adds	r7, #24
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	e000ed00 	.word	0xe000ed00
 801415c:	410fc271 	.word	0x410fc271
 8014160:	410fc270 	.word	0x410fc270
 8014164:	e000e400 	.word	0xe000e400
 8014168:	20000684 	.word	0x20000684
 801416c:	20000688 	.word	0x20000688
 8014170:	e000ed20 	.word	0xe000ed20
 8014174:	2000002c 	.word	0x2000002c
 8014178:	e000ef34 	.word	0xe000ef34

0801417c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801417c:	b480      	push	{r7}
 801417e:	b083      	sub	sp, #12
 8014180:	af00      	add	r7, sp, #0
        __asm volatile
 8014182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014186:	f383 8811 	msr	BASEPRI, r3
 801418a:	f3bf 8f6f 	isb	sy
 801418e:	f3bf 8f4f 	dsb	sy
 8014192:	607b      	str	r3, [r7, #4]
    }
 8014194:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8014196:	4b10      	ldr	r3, [pc, #64]	@ (80141d8 <vPortEnterCritical+0x5c>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	3301      	adds	r3, #1
 801419c:	4a0e      	ldr	r2, [pc, #56]	@ (80141d8 <vPortEnterCritical+0x5c>)
 801419e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80141a0:	4b0d      	ldr	r3, [pc, #52]	@ (80141d8 <vPortEnterCritical+0x5c>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d110      	bne.n	80141ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80141a8:	4b0c      	ldr	r3, [pc, #48]	@ (80141dc <vPortEnterCritical+0x60>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	b2db      	uxtb	r3, r3
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d00b      	beq.n	80141ca <vPortEnterCritical+0x4e>
        __asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b6:	f383 8811 	msr	BASEPRI, r3
 80141ba:	f3bf 8f6f 	isb	sy
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	603b      	str	r3, [r7, #0]
    }
 80141c4:	bf00      	nop
 80141c6:	bf00      	nop
 80141c8:	e7fd      	b.n	80141c6 <vPortEnterCritical+0x4a>
    }
}
 80141ca:	bf00      	nop
 80141cc:	370c      	adds	r7, #12
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop
 80141d8:	2000002c 	.word	0x2000002c
 80141dc:	e000ed04 	.word	0xe000ed04

080141e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80141e6:	4b12      	ldr	r3, [pc, #72]	@ (8014230 <vPortExitCritical+0x50>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d10b      	bne.n	8014206 <vPortExitCritical+0x26>
        __asm volatile
 80141ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141f2:	f383 8811 	msr	BASEPRI, r3
 80141f6:	f3bf 8f6f 	isb	sy
 80141fa:	f3bf 8f4f 	dsb	sy
 80141fe:	607b      	str	r3, [r7, #4]
    }
 8014200:	bf00      	nop
 8014202:	bf00      	nop
 8014204:	e7fd      	b.n	8014202 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8014206:	4b0a      	ldr	r3, [pc, #40]	@ (8014230 <vPortExitCritical+0x50>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	3b01      	subs	r3, #1
 801420c:	4a08      	ldr	r2, [pc, #32]	@ (8014230 <vPortExitCritical+0x50>)
 801420e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8014210:	4b07      	ldr	r3, [pc, #28]	@ (8014230 <vPortExitCritical+0x50>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d105      	bne.n	8014224 <vPortExitCritical+0x44>
 8014218:	2300      	movs	r3, #0
 801421a:	603b      	str	r3, [r7, #0]
        __asm volatile
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	f383 8811 	msr	BASEPRI, r3
    }
 8014222:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8014224:	bf00      	nop
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr
 8014230:	2000002c 	.word	0x2000002c
	...

08014240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8014240:	f3ef 8009 	mrs	r0, PSP
 8014244:	f3bf 8f6f 	isb	sy
 8014248:	4b15      	ldr	r3, [pc, #84]	@ (80142a0 <pxCurrentTCBConst>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	f01e 0f10 	tst.w	lr, #16
 8014250:	bf08      	it	eq
 8014252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425a:	6010      	str	r0, [r2, #0]
 801425c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014264:	f380 8811 	msr	BASEPRI, r0
 8014268:	f3bf 8f4f 	dsb	sy
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	f7fe fecc 	bl	801300c <vTaskSwitchContext>
 8014274:	f04f 0000 	mov.w	r0, #0
 8014278:	f380 8811 	msr	BASEPRI, r0
 801427c:	bc09      	pop	{r0, r3}
 801427e:	6819      	ldr	r1, [r3, #0]
 8014280:	6808      	ldr	r0, [r1, #0]
 8014282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014286:	f01e 0f10 	tst.w	lr, #16
 801428a:	bf08      	it	eq
 801428c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014290:	f380 8809 	msr	PSP, r0
 8014294:	f3bf 8f6f 	isb	sy
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop
 801429c:	f3af 8000 	nop.w

080142a0 <pxCurrentTCBConst>:
 80142a0:	20000544 	.word	0x20000544
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80142a4:	bf00      	nop
 80142a6:	bf00      	nop

080142a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
        __asm volatile
 80142ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b2:	f383 8811 	msr	BASEPRI, r3
 80142b6:	f3bf 8f6f 	isb	sy
 80142ba:	f3bf 8f4f 	dsb	sy
 80142be:	607b      	str	r3, [r7, #4]
    }
 80142c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80142c2:	f7fe fde9 	bl	8012e98 <xTaskIncrementTick>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d003      	beq.n	80142d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80142cc:	4b06      	ldr	r3, [pc, #24]	@ (80142e8 <SysTick_Handler+0x40>)
 80142ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142d2:	601a      	str	r2, [r3, #0]
 80142d4:	2300      	movs	r3, #0
 80142d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	f383 8811 	msr	BASEPRI, r3
    }
 80142de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80142e0:	bf00      	nop
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	e000ed04 	.word	0xe000ed04

080142ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80142ec:	b480      	push	{r7}
 80142ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80142f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014320 <vPortSetupTimerInterrupt+0x34>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80142f6:	4b0b      	ldr	r3, [pc, #44]	@ (8014324 <vPortSetupTimerInterrupt+0x38>)
 80142f8:	2200      	movs	r2, #0
 80142fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80142fc:	4b0a      	ldr	r3, [pc, #40]	@ (8014328 <vPortSetupTimerInterrupt+0x3c>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4a0a      	ldr	r2, [pc, #40]	@ (801432c <vPortSetupTimerInterrupt+0x40>)
 8014302:	fba2 2303 	umull	r2, r3, r2, r3
 8014306:	099b      	lsrs	r3, r3, #6
 8014308:	4a09      	ldr	r2, [pc, #36]	@ (8014330 <vPortSetupTimerInterrupt+0x44>)
 801430a:	3b01      	subs	r3, #1
 801430c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801430e:	4b04      	ldr	r3, [pc, #16]	@ (8014320 <vPortSetupTimerInterrupt+0x34>)
 8014310:	2207      	movs	r2, #7
 8014312:	601a      	str	r2, [r3, #0]
}
 8014314:	bf00      	nop
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop
 8014320:	e000e010 	.word	0xe000e010
 8014324:	e000e018 	.word	0xe000e018
 8014328:	20000020 	.word	0x20000020
 801432c:	10624dd3 	.word	0x10624dd3
 8014330:	e000e014 	.word	0xe000e014

08014334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8014334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014344 <vPortEnableVFP+0x10>
 8014338:	6801      	ldr	r1, [r0, #0]
 801433a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801433e:	6001      	str	r1, [r0, #0]
 8014340:	4770      	bx	lr
 8014342:	0000      	.short	0x0000
 8014344:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8014348:	bf00      	nop
 801434a:	bf00      	nop

0801434c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 801434c:	b480      	push	{r7}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8014352:	f3ef 8305 	mrs	r3, IPSR
 8014356:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	2b0f      	cmp	r3, #15
 801435c:	d915      	bls.n	801438a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801435e:	4a18      	ldr	r2, [pc, #96]	@ (80143c0 <vPortValidateInterruptPriority+0x74>)
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	4413      	add	r3, r2
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014368:	4b16      	ldr	r3, [pc, #88]	@ (80143c4 <vPortValidateInterruptPriority+0x78>)
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	7afa      	ldrb	r2, [r7, #11]
 801436e:	429a      	cmp	r2, r3
 8014370:	d20b      	bcs.n	801438a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8014372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014376:	f383 8811 	msr	BASEPRI, r3
 801437a:	f3bf 8f6f 	isb	sy
 801437e:	f3bf 8f4f 	dsb	sy
 8014382:	607b      	str	r3, [r7, #4]
    }
 8014384:	bf00      	nop
 8014386:	bf00      	nop
 8014388:	e7fd      	b.n	8014386 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801438a:	4b0f      	ldr	r3, [pc, #60]	@ (80143c8 <vPortValidateInterruptPriority+0x7c>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014392:	4b0e      	ldr	r3, [pc, #56]	@ (80143cc <vPortValidateInterruptPriority+0x80>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	429a      	cmp	r2, r3
 8014398:	d90b      	bls.n	80143b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 801439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801439e:	f383 8811 	msr	BASEPRI, r3
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	603b      	str	r3, [r7, #0]
    }
 80143ac:	bf00      	nop
 80143ae:	bf00      	nop
 80143b0:	e7fd      	b.n	80143ae <vPortValidateInterruptPriority+0x62>
    }
 80143b2:	bf00      	nop
 80143b4:	3714      	adds	r7, #20
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop
 80143c0:	e000e3f0 	.word	0xe000e3f0
 80143c4:	20000684 	.word	0x20000684
 80143c8:	e000ed0c 	.word	0xe000ed0c
 80143cc:	20000688 	.word	0x20000688

080143d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b08a      	sub	sp, #40	@ 0x28
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80143d8:	2300      	movs	r3, #0
 80143da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80143dc:	f7fe fca0 	bl	8012d20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80143e0:	4b66      	ldr	r3, [pc, #408]	@ (801457c <pvPortMalloc+0x1ac>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d101      	bne.n	80143ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80143e8:	f000 f938 	bl	801465c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80143ec:	4b64      	ldr	r3, [pc, #400]	@ (8014580 <pvPortMalloc+0x1b0>)
 80143ee:	681a      	ldr	r2, [r3, #0]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	4013      	ands	r3, r2
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	f040 80a9 	bne.w	801454c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d02e      	beq.n	801445e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8014400:	2208      	movs	r2, #8
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	429a      	cmp	r2, r3
 801440a:	d228      	bcs.n	801445e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 801440c:	2208      	movs	r2, #8
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	4413      	add	r3, r2
 8014412:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f003 0307 	and.w	r3, r3, #7
 801441a:	2b00      	cmp	r3, #0
 801441c:	d022      	beq.n	8014464 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f023 0307 	bic.w	r3, r3, #7
 8014424:	3308      	adds	r3, #8
 8014426:	687a      	ldr	r2, [r7, #4]
 8014428:	429a      	cmp	r2, r3
 801442a:	d215      	bcs.n	8014458 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f023 0307 	bic.w	r3, r3, #7
 8014432:	3308      	adds	r3, #8
 8014434:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f003 0307 	and.w	r3, r3, #7
 801443c:	2b00      	cmp	r3, #0
 801443e:	d011      	beq.n	8014464 <pvPortMalloc+0x94>
        __asm volatile
 8014440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014444:	f383 8811 	msr	BASEPRI, r3
 8014448:	f3bf 8f6f 	isb	sy
 801444c:	f3bf 8f4f 	dsb	sy
 8014450:	617b      	str	r3, [r7, #20]
    }
 8014452:	bf00      	nop
 8014454:	bf00      	nop
 8014456:	e7fd      	b.n	8014454 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8014458:	2300      	movs	r3, #0
 801445a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801445c:	e002      	b.n	8014464 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 801445e:	2300      	movs	r3, #0
 8014460:	607b      	str	r3, [r7, #4]
 8014462:	e000      	b.n	8014466 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014464:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d06f      	beq.n	801454c <pvPortMalloc+0x17c>
 801446c:	4b45      	ldr	r3, [pc, #276]	@ (8014584 <pvPortMalloc+0x1b4>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	429a      	cmp	r2, r3
 8014474:	d86a      	bhi.n	801454c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8014476:	4b44      	ldr	r3, [pc, #272]	@ (8014588 <pvPortMalloc+0x1b8>)
 8014478:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 801447a:	4b43      	ldr	r3, [pc, #268]	@ (8014588 <pvPortMalloc+0x1b8>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014480:	e004      	b.n	801448c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8014482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014484:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8014486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	687a      	ldr	r2, [r7, #4]
 8014492:	429a      	cmp	r2, r3
 8014494:	d903      	bls.n	801449e <pvPortMalloc+0xce>
 8014496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d1f1      	bne.n	8014482 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801449e:	4b37      	ldr	r3, [pc, #220]	@ (801457c <pvPortMalloc+0x1ac>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d051      	beq.n	801454c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80144a8:	6a3b      	ldr	r3, [r7, #32]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2208      	movs	r2, #8
 80144ae:	4413      	add	r3, r2
 80144b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80144b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	6a3b      	ldr	r3, [r7, #32]
 80144b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80144ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144bc:	685a      	ldr	r2, [r3, #4]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	1ad2      	subs	r2, r2, r3
 80144c2:	2308      	movs	r3, #8
 80144c4:	005b      	lsls	r3, r3, #1
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d920      	bls.n	801450c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80144ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	4413      	add	r3, r2
 80144d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	f003 0307 	and.w	r3, r3, #7
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d00b      	beq.n	80144f4 <pvPortMalloc+0x124>
        __asm volatile
 80144dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144e0:	f383 8811 	msr	BASEPRI, r3
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	613b      	str	r3, [r7, #16]
    }
 80144ee:	bf00      	nop
 80144f0:	bf00      	nop
 80144f2:	e7fd      	b.n	80144f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80144f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f6:	685a      	ldr	r2, [r3, #4]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	1ad2      	subs	r2, r2, r3
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8014500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014506:	69b8      	ldr	r0, [r7, #24]
 8014508:	f000 f90a 	bl	8014720 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801450c:	4b1d      	ldr	r3, [pc, #116]	@ (8014584 <pvPortMalloc+0x1b4>)
 801450e:	681a      	ldr	r2, [r3, #0]
 8014510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	4a1b      	ldr	r2, [pc, #108]	@ (8014584 <pvPortMalloc+0x1b4>)
 8014518:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801451a:	4b1a      	ldr	r3, [pc, #104]	@ (8014584 <pvPortMalloc+0x1b4>)
 801451c:	681a      	ldr	r2, [r3, #0]
 801451e:	4b1b      	ldr	r3, [pc, #108]	@ (801458c <pvPortMalloc+0x1bc>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	429a      	cmp	r2, r3
 8014524:	d203      	bcs.n	801452e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014526:	4b17      	ldr	r3, [pc, #92]	@ (8014584 <pvPortMalloc+0x1b4>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	4a18      	ldr	r2, [pc, #96]	@ (801458c <pvPortMalloc+0x1bc>)
 801452c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 801452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014530:	685a      	ldr	r2, [r3, #4]
 8014532:	4b13      	ldr	r3, [pc, #76]	@ (8014580 <pvPortMalloc+0x1b0>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	431a      	orrs	r2, r3
 8014538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801453a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 801453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801453e:	2200      	movs	r2, #0
 8014540:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8014542:	4b13      	ldr	r3, [pc, #76]	@ (8014590 <pvPortMalloc+0x1c0>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	3301      	adds	r3, #1
 8014548:	4a11      	ldr	r2, [pc, #68]	@ (8014590 <pvPortMalloc+0x1c0>)
 801454a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 801454c:	f7fe fbf6 	bl	8012d3c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	f003 0307 	and.w	r3, r3, #7
 8014556:	2b00      	cmp	r3, #0
 8014558:	d00b      	beq.n	8014572 <pvPortMalloc+0x1a2>
        __asm volatile
 801455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801455e:	f383 8811 	msr	BASEPRI, r3
 8014562:	f3bf 8f6f 	isb	sy
 8014566:	f3bf 8f4f 	dsb	sy
 801456a:	60fb      	str	r3, [r7, #12]
    }
 801456c:	bf00      	nop
 801456e:	bf00      	nop
 8014570:	e7fd      	b.n	801456e <pvPortMalloc+0x19e>
    return pvReturn;
 8014572:	69fb      	ldr	r3, [r7, #28]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3728      	adds	r7, #40	@ 0x28
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	20013294 	.word	0x20013294
 8014580:	200132a8 	.word	0x200132a8
 8014584:	20013298 	.word	0x20013298
 8014588:	2001328c 	.word	0x2001328c
 801458c:	2001329c 	.word	0x2001329c
 8014590:	200132a0 	.word	0x200132a0

08014594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b086      	sub	sp, #24
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d04f      	beq.n	8014646 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80145a6:	2308      	movs	r3, #8
 80145a8:	425b      	negs	r3, r3
 80145aa:	697a      	ldr	r2, [r7, #20]
 80145ac:	4413      	add	r3, r2
 80145ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	685a      	ldr	r2, [r3, #4]
 80145b8:	4b25      	ldr	r3, [pc, #148]	@ (8014650 <vPortFree+0xbc>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	4013      	ands	r3, r2
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d10b      	bne.n	80145da <vPortFree+0x46>
        __asm volatile
 80145c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	60fb      	str	r3, [r7, #12]
    }
 80145d4:	bf00      	nop
 80145d6:	bf00      	nop
 80145d8:	e7fd      	b.n	80145d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00b      	beq.n	80145fa <vPortFree+0x66>
        __asm volatile
 80145e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145e6:	f383 8811 	msr	BASEPRI, r3
 80145ea:	f3bf 8f6f 	isb	sy
 80145ee:	f3bf 8f4f 	dsb	sy
 80145f2:	60bb      	str	r3, [r7, #8]
    }
 80145f4:	bf00      	nop
 80145f6:	bf00      	nop
 80145f8:	e7fd      	b.n	80145f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	685a      	ldr	r2, [r3, #4]
 80145fe:	4b14      	ldr	r3, [pc, #80]	@ (8014650 <vPortFree+0xbc>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	4013      	ands	r3, r2
 8014604:	2b00      	cmp	r3, #0
 8014606:	d01e      	beq.n	8014646 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d11a      	bne.n	8014646 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	685a      	ldr	r2, [r3, #4]
 8014614:	4b0e      	ldr	r3, [pc, #56]	@ (8014650 <vPortFree+0xbc>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	43db      	mvns	r3, r3
 801461a:	401a      	ands	r2, r3
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8014620:	f7fe fb7e 	bl	8012d20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	685a      	ldr	r2, [r3, #4]
 8014628:	4b0a      	ldr	r3, [pc, #40]	@ (8014654 <vPortFree+0xc0>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	4413      	add	r3, r2
 801462e:	4a09      	ldr	r2, [pc, #36]	@ (8014654 <vPortFree+0xc0>)
 8014630:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014632:	6938      	ldr	r0, [r7, #16]
 8014634:	f000 f874 	bl	8014720 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8014638:	4b07      	ldr	r3, [pc, #28]	@ (8014658 <vPortFree+0xc4>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	3301      	adds	r3, #1
 801463e:	4a06      	ldr	r2, [pc, #24]	@ (8014658 <vPortFree+0xc4>)
 8014640:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8014642:	f7fe fb7b 	bl	8012d3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8014646:	bf00      	nop
 8014648:	3718      	adds	r7, #24
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	200132a8 	.word	0x200132a8
 8014654:	20013298 	.word	0x20013298
 8014658:	200132a4 	.word	0x200132a4

0801465c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801465c:	b480      	push	{r7}
 801465e:	b085      	sub	sp, #20
 8014660:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014662:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8014666:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8014668:	4b27      	ldr	r3, [pc, #156]	@ (8014708 <prvHeapInit+0xac>)
 801466a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f003 0307 	and.w	r3, r3, #7
 8014672:	2b00      	cmp	r3, #0
 8014674:	d00c      	beq.n	8014690 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	3307      	adds	r3, #7
 801467a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f023 0307 	bic.w	r3, r3, #7
 8014682:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014684:	68ba      	ldr	r2, [r7, #8]
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	1ad3      	subs	r3, r2, r3
 801468a:	4a1f      	ldr	r2, [pc, #124]	@ (8014708 <prvHeapInit+0xac>)
 801468c:	4413      	add	r3, r2
 801468e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014694:	4a1d      	ldr	r2, [pc, #116]	@ (801470c <prvHeapInit+0xb0>)
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 801469a:	4b1c      	ldr	r3, [pc, #112]	@ (801470c <prvHeapInit+0xb0>)
 801469c:	2200      	movs	r2, #0
 801469e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	68ba      	ldr	r2, [r7, #8]
 80146a4:	4413      	add	r3, r2
 80146a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80146a8:	2208      	movs	r2, #8
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	1a9b      	subs	r3, r3, r2
 80146ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f023 0307 	bic.w	r3, r3, #7
 80146b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	4a15      	ldr	r2, [pc, #84]	@ (8014710 <prvHeapInit+0xb4>)
 80146bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80146be:	4b14      	ldr	r3, [pc, #80]	@ (8014710 <prvHeapInit+0xb4>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2200      	movs	r2, #0
 80146c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80146c6:	4b12      	ldr	r3, [pc, #72]	@ (8014710 <prvHeapInit+0xb4>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2200      	movs	r2, #0
 80146cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	1ad2      	subs	r2, r2, r3
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80146dc:	4b0c      	ldr	r3, [pc, #48]	@ (8014710 <prvHeapInit+0xb4>)
 80146de:	681a      	ldr	r2, [r3, #0]
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	685b      	ldr	r3, [r3, #4]
 80146e8:	4a0a      	ldr	r2, [pc, #40]	@ (8014714 <prvHeapInit+0xb8>)
 80146ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	4a09      	ldr	r2, [pc, #36]	@ (8014718 <prvHeapInit+0xbc>)
 80146f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80146f4:	4b09      	ldr	r3, [pc, #36]	@ (801471c <prvHeapInit+0xc0>)
 80146f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80146fa:	601a      	str	r2, [r3, #0]
}
 80146fc:	bf00      	nop
 80146fe:	3714      	adds	r7, #20
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr
 8014708:	2000068c 	.word	0x2000068c
 801470c:	2001328c 	.word	0x2001328c
 8014710:	20013294 	.word	0x20013294
 8014714:	2001329c 	.word	0x2001329c
 8014718:	20013298 	.word	0x20013298
 801471c:	200132a8 	.word	0x200132a8

08014720 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8014720:	b480      	push	{r7}
 8014722:	b085      	sub	sp, #20
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014728:	4b28      	ldr	r3, [pc, #160]	@ (80147cc <prvInsertBlockIntoFreeList+0xac>)
 801472a:	60fb      	str	r3, [r7, #12]
 801472c:	e002      	b.n	8014734 <prvInsertBlockIntoFreeList+0x14>
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	60fb      	str	r3, [r7, #12]
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	429a      	cmp	r2, r3
 801473c:	d8f7      	bhi.n	801472e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	68ba      	ldr	r2, [r7, #8]
 8014748:	4413      	add	r3, r2
 801474a:	687a      	ldr	r2, [r7, #4]
 801474c:	429a      	cmp	r2, r3
 801474e:	d108      	bne.n	8014762 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	685a      	ldr	r2, [r3, #4]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	441a      	add	r2, r3
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	441a      	add	r2, r3
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	429a      	cmp	r2, r3
 8014774:	d118      	bne.n	80147a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	4b15      	ldr	r3, [pc, #84]	@ (80147d0 <prvInsertBlockIntoFreeList+0xb0>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	429a      	cmp	r2, r3
 8014780:	d00d      	beq.n	801479e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	685a      	ldr	r2, [r3, #4]
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	685b      	ldr	r3, [r3, #4]
 801478c:	441a      	add	r2, r3
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	681a      	ldr	r2, [r3, #0]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	601a      	str	r2, [r3, #0]
 801479c:	e008      	b.n	80147b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801479e:	4b0c      	ldr	r3, [pc, #48]	@ (80147d0 <prvInsertBlockIntoFreeList+0xb0>)
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	601a      	str	r2, [r3, #0]
 80147a6:	e003      	b.n	80147b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80147b0:	68fa      	ldr	r2, [r7, #12]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d002      	beq.n	80147be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80147be:	bf00      	nop
 80147c0:	3714      	adds	r7, #20
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	2001328c 	.word	0x2001328c
 80147d0:	20013294 	.word	0x20013294

080147d4 <malloc>:
 80147d4:	4b02      	ldr	r3, [pc, #8]	@ (80147e0 <malloc+0xc>)
 80147d6:	4601      	mov	r1, r0
 80147d8:	6818      	ldr	r0, [r3, #0]
 80147da:	f000 b82d 	b.w	8014838 <_malloc_r>
 80147de:	bf00      	nop
 80147e0:	200001a8 	.word	0x200001a8

080147e4 <free>:
 80147e4:	4b02      	ldr	r3, [pc, #8]	@ (80147f0 <free+0xc>)
 80147e6:	4601      	mov	r1, r0
 80147e8:	6818      	ldr	r0, [r3, #0]
 80147ea:	f001 ba39 	b.w	8015c60 <_free_r>
 80147ee:	bf00      	nop
 80147f0:	200001a8 	.word	0x200001a8

080147f4 <sbrk_aligned>:
 80147f4:	b570      	push	{r4, r5, r6, lr}
 80147f6:	4e0f      	ldr	r6, [pc, #60]	@ (8014834 <sbrk_aligned+0x40>)
 80147f8:	460c      	mov	r4, r1
 80147fa:	6831      	ldr	r1, [r6, #0]
 80147fc:	4605      	mov	r5, r0
 80147fe:	b911      	cbnz	r1, 8014806 <sbrk_aligned+0x12>
 8014800:	f001 f9c8 	bl	8015b94 <_sbrk_r>
 8014804:	6030      	str	r0, [r6, #0]
 8014806:	4621      	mov	r1, r4
 8014808:	4628      	mov	r0, r5
 801480a:	f001 f9c3 	bl	8015b94 <_sbrk_r>
 801480e:	1c43      	adds	r3, r0, #1
 8014810:	d103      	bne.n	801481a <sbrk_aligned+0x26>
 8014812:	f04f 34ff 	mov.w	r4, #4294967295
 8014816:	4620      	mov	r0, r4
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	1cc4      	adds	r4, r0, #3
 801481c:	f024 0403 	bic.w	r4, r4, #3
 8014820:	42a0      	cmp	r0, r4
 8014822:	d0f8      	beq.n	8014816 <sbrk_aligned+0x22>
 8014824:	1a21      	subs	r1, r4, r0
 8014826:	4628      	mov	r0, r5
 8014828:	f001 f9b4 	bl	8015b94 <_sbrk_r>
 801482c:	3001      	adds	r0, #1
 801482e:	d1f2      	bne.n	8014816 <sbrk_aligned+0x22>
 8014830:	e7ef      	b.n	8014812 <sbrk_aligned+0x1e>
 8014832:	bf00      	nop
 8014834:	200132ac 	.word	0x200132ac

08014838 <_malloc_r>:
 8014838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801483c:	1ccd      	adds	r5, r1, #3
 801483e:	f025 0503 	bic.w	r5, r5, #3
 8014842:	3508      	adds	r5, #8
 8014844:	2d0c      	cmp	r5, #12
 8014846:	bf38      	it	cc
 8014848:	250c      	movcc	r5, #12
 801484a:	2d00      	cmp	r5, #0
 801484c:	4606      	mov	r6, r0
 801484e:	db01      	blt.n	8014854 <_malloc_r+0x1c>
 8014850:	42a9      	cmp	r1, r5
 8014852:	d904      	bls.n	801485e <_malloc_r+0x26>
 8014854:	230c      	movs	r3, #12
 8014856:	6033      	str	r3, [r6, #0]
 8014858:	2000      	movs	r0, #0
 801485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801485e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014934 <_malloc_r+0xfc>
 8014862:	f000 f869 	bl	8014938 <__malloc_lock>
 8014866:	f8d8 3000 	ldr.w	r3, [r8]
 801486a:	461c      	mov	r4, r3
 801486c:	bb44      	cbnz	r4, 80148c0 <_malloc_r+0x88>
 801486e:	4629      	mov	r1, r5
 8014870:	4630      	mov	r0, r6
 8014872:	f7ff ffbf 	bl	80147f4 <sbrk_aligned>
 8014876:	1c43      	adds	r3, r0, #1
 8014878:	4604      	mov	r4, r0
 801487a:	d158      	bne.n	801492e <_malloc_r+0xf6>
 801487c:	f8d8 4000 	ldr.w	r4, [r8]
 8014880:	4627      	mov	r7, r4
 8014882:	2f00      	cmp	r7, #0
 8014884:	d143      	bne.n	801490e <_malloc_r+0xd6>
 8014886:	2c00      	cmp	r4, #0
 8014888:	d04b      	beq.n	8014922 <_malloc_r+0xea>
 801488a:	6823      	ldr	r3, [r4, #0]
 801488c:	4639      	mov	r1, r7
 801488e:	4630      	mov	r0, r6
 8014890:	eb04 0903 	add.w	r9, r4, r3
 8014894:	f001 f97e 	bl	8015b94 <_sbrk_r>
 8014898:	4581      	cmp	r9, r0
 801489a:	d142      	bne.n	8014922 <_malloc_r+0xea>
 801489c:	6821      	ldr	r1, [r4, #0]
 801489e:	1a6d      	subs	r5, r5, r1
 80148a0:	4629      	mov	r1, r5
 80148a2:	4630      	mov	r0, r6
 80148a4:	f7ff ffa6 	bl	80147f4 <sbrk_aligned>
 80148a8:	3001      	adds	r0, #1
 80148aa:	d03a      	beq.n	8014922 <_malloc_r+0xea>
 80148ac:	6823      	ldr	r3, [r4, #0]
 80148ae:	442b      	add	r3, r5
 80148b0:	6023      	str	r3, [r4, #0]
 80148b2:	f8d8 3000 	ldr.w	r3, [r8]
 80148b6:	685a      	ldr	r2, [r3, #4]
 80148b8:	bb62      	cbnz	r2, 8014914 <_malloc_r+0xdc>
 80148ba:	f8c8 7000 	str.w	r7, [r8]
 80148be:	e00f      	b.n	80148e0 <_malloc_r+0xa8>
 80148c0:	6822      	ldr	r2, [r4, #0]
 80148c2:	1b52      	subs	r2, r2, r5
 80148c4:	d420      	bmi.n	8014908 <_malloc_r+0xd0>
 80148c6:	2a0b      	cmp	r2, #11
 80148c8:	d917      	bls.n	80148fa <_malloc_r+0xc2>
 80148ca:	1961      	adds	r1, r4, r5
 80148cc:	42a3      	cmp	r3, r4
 80148ce:	6025      	str	r5, [r4, #0]
 80148d0:	bf18      	it	ne
 80148d2:	6059      	strne	r1, [r3, #4]
 80148d4:	6863      	ldr	r3, [r4, #4]
 80148d6:	bf08      	it	eq
 80148d8:	f8c8 1000 	streq.w	r1, [r8]
 80148dc:	5162      	str	r2, [r4, r5]
 80148de:	604b      	str	r3, [r1, #4]
 80148e0:	4630      	mov	r0, r6
 80148e2:	f000 f82f 	bl	8014944 <__malloc_unlock>
 80148e6:	f104 000b 	add.w	r0, r4, #11
 80148ea:	1d23      	adds	r3, r4, #4
 80148ec:	f020 0007 	bic.w	r0, r0, #7
 80148f0:	1ac2      	subs	r2, r0, r3
 80148f2:	bf1c      	itt	ne
 80148f4:	1a1b      	subne	r3, r3, r0
 80148f6:	50a3      	strne	r3, [r4, r2]
 80148f8:	e7af      	b.n	801485a <_malloc_r+0x22>
 80148fa:	6862      	ldr	r2, [r4, #4]
 80148fc:	42a3      	cmp	r3, r4
 80148fe:	bf0c      	ite	eq
 8014900:	f8c8 2000 	streq.w	r2, [r8]
 8014904:	605a      	strne	r2, [r3, #4]
 8014906:	e7eb      	b.n	80148e0 <_malloc_r+0xa8>
 8014908:	4623      	mov	r3, r4
 801490a:	6864      	ldr	r4, [r4, #4]
 801490c:	e7ae      	b.n	801486c <_malloc_r+0x34>
 801490e:	463c      	mov	r4, r7
 8014910:	687f      	ldr	r7, [r7, #4]
 8014912:	e7b6      	b.n	8014882 <_malloc_r+0x4a>
 8014914:	461a      	mov	r2, r3
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	42a3      	cmp	r3, r4
 801491a:	d1fb      	bne.n	8014914 <_malloc_r+0xdc>
 801491c:	2300      	movs	r3, #0
 801491e:	6053      	str	r3, [r2, #4]
 8014920:	e7de      	b.n	80148e0 <_malloc_r+0xa8>
 8014922:	230c      	movs	r3, #12
 8014924:	6033      	str	r3, [r6, #0]
 8014926:	4630      	mov	r0, r6
 8014928:	f000 f80c 	bl	8014944 <__malloc_unlock>
 801492c:	e794      	b.n	8014858 <_malloc_r+0x20>
 801492e:	6005      	str	r5, [r0, #0]
 8014930:	e7d6      	b.n	80148e0 <_malloc_r+0xa8>
 8014932:	bf00      	nop
 8014934:	200132b0 	.word	0x200132b0

08014938 <__malloc_lock>:
 8014938:	4801      	ldr	r0, [pc, #4]	@ (8014940 <__malloc_lock+0x8>)
 801493a:	f001 b978 	b.w	8015c2e <__retarget_lock_acquire_recursive>
 801493e:	bf00      	nop
 8014940:	200133f4 	.word	0x200133f4

08014944 <__malloc_unlock>:
 8014944:	4801      	ldr	r0, [pc, #4]	@ (801494c <__malloc_unlock+0x8>)
 8014946:	f001 b973 	b.w	8015c30 <__retarget_lock_release_recursive>
 801494a:	bf00      	nop
 801494c:	200133f4 	.word	0x200133f4

08014950 <realloc>:
 8014950:	4b02      	ldr	r3, [pc, #8]	@ (801495c <realloc+0xc>)
 8014952:	460a      	mov	r2, r1
 8014954:	4601      	mov	r1, r0
 8014956:	6818      	ldr	r0, [r3, #0]
 8014958:	f000 b802 	b.w	8014960 <_realloc_r>
 801495c:	200001a8 	.word	0x200001a8

08014960 <_realloc_r>:
 8014960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014964:	4607      	mov	r7, r0
 8014966:	4614      	mov	r4, r2
 8014968:	460d      	mov	r5, r1
 801496a:	b921      	cbnz	r1, 8014976 <_realloc_r+0x16>
 801496c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014970:	4611      	mov	r1, r2
 8014972:	f7ff bf61 	b.w	8014838 <_malloc_r>
 8014976:	b92a      	cbnz	r2, 8014984 <_realloc_r+0x24>
 8014978:	f001 f972 	bl	8015c60 <_free_r>
 801497c:	4625      	mov	r5, r4
 801497e:	4628      	mov	r0, r5
 8014980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014984:	f002 f9ac 	bl	8016ce0 <_malloc_usable_size_r>
 8014988:	4284      	cmp	r4, r0
 801498a:	4606      	mov	r6, r0
 801498c:	d802      	bhi.n	8014994 <_realloc_r+0x34>
 801498e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014992:	d8f4      	bhi.n	801497e <_realloc_r+0x1e>
 8014994:	4621      	mov	r1, r4
 8014996:	4638      	mov	r0, r7
 8014998:	f7ff ff4e 	bl	8014838 <_malloc_r>
 801499c:	4680      	mov	r8, r0
 801499e:	b908      	cbnz	r0, 80149a4 <_realloc_r+0x44>
 80149a0:	4645      	mov	r5, r8
 80149a2:	e7ec      	b.n	801497e <_realloc_r+0x1e>
 80149a4:	42b4      	cmp	r4, r6
 80149a6:	4622      	mov	r2, r4
 80149a8:	4629      	mov	r1, r5
 80149aa:	bf28      	it	cs
 80149ac:	4632      	movcs	r2, r6
 80149ae:	f001 f940 	bl	8015c32 <memcpy>
 80149b2:	4629      	mov	r1, r5
 80149b4:	4638      	mov	r0, r7
 80149b6:	f001 f953 	bl	8015c60 <_free_r>
 80149ba:	e7f1      	b.n	80149a0 <_realloc_r+0x40>

080149bc <sulp>:
 80149bc:	b570      	push	{r4, r5, r6, lr}
 80149be:	4604      	mov	r4, r0
 80149c0:	460d      	mov	r5, r1
 80149c2:	ec45 4b10 	vmov	d0, r4, r5
 80149c6:	4616      	mov	r6, r2
 80149c8:	f002 f84c 	bl	8016a64 <__ulp>
 80149cc:	ec51 0b10 	vmov	r0, r1, d0
 80149d0:	b17e      	cbz	r6, 80149f2 <sulp+0x36>
 80149d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80149d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80149da:	2b00      	cmp	r3, #0
 80149dc:	dd09      	ble.n	80149f2 <sulp+0x36>
 80149de:	051b      	lsls	r3, r3, #20
 80149e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80149e4:	2400      	movs	r4, #0
 80149e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80149ea:	4622      	mov	r2, r4
 80149ec:	462b      	mov	r3, r5
 80149ee:	f7f3 fe33 	bl	8008658 <__aeabi_dmul>
 80149f2:	ec41 0b10 	vmov	d0, r0, r1
 80149f6:	bd70      	pop	{r4, r5, r6, pc}

080149f8 <_strtod_l>:
 80149f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fc:	b09f      	sub	sp, #124	@ 0x7c
 80149fe:	460c      	mov	r4, r1
 8014a00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014a02:	2200      	movs	r2, #0
 8014a04:	921a      	str	r2, [sp, #104]	@ 0x68
 8014a06:	9005      	str	r0, [sp, #20]
 8014a08:	f04f 0a00 	mov.w	sl, #0
 8014a0c:	f04f 0b00 	mov.w	fp, #0
 8014a10:	460a      	mov	r2, r1
 8014a12:	9219      	str	r2, [sp, #100]	@ 0x64
 8014a14:	7811      	ldrb	r1, [r2, #0]
 8014a16:	292b      	cmp	r1, #43	@ 0x2b
 8014a18:	d04a      	beq.n	8014ab0 <_strtod_l+0xb8>
 8014a1a:	d838      	bhi.n	8014a8e <_strtod_l+0x96>
 8014a1c:	290d      	cmp	r1, #13
 8014a1e:	d832      	bhi.n	8014a86 <_strtod_l+0x8e>
 8014a20:	2908      	cmp	r1, #8
 8014a22:	d832      	bhi.n	8014a8a <_strtod_l+0x92>
 8014a24:	2900      	cmp	r1, #0
 8014a26:	d03b      	beq.n	8014aa0 <_strtod_l+0xa8>
 8014a28:	2200      	movs	r2, #0
 8014a2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8014a2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8014a2e:	782a      	ldrb	r2, [r5, #0]
 8014a30:	2a30      	cmp	r2, #48	@ 0x30
 8014a32:	f040 80b2 	bne.w	8014b9a <_strtod_l+0x1a2>
 8014a36:	786a      	ldrb	r2, [r5, #1]
 8014a38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014a3c:	2a58      	cmp	r2, #88	@ 0x58
 8014a3e:	d16e      	bne.n	8014b1e <_strtod_l+0x126>
 8014a40:	9302      	str	r3, [sp, #8]
 8014a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a44:	9301      	str	r3, [sp, #4]
 8014a46:	ab1a      	add	r3, sp, #104	@ 0x68
 8014a48:	9300      	str	r3, [sp, #0]
 8014a4a:	4a8f      	ldr	r2, [pc, #572]	@ (8014c88 <_strtod_l+0x290>)
 8014a4c:	9805      	ldr	r0, [sp, #20]
 8014a4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8014a50:	a919      	add	r1, sp, #100	@ 0x64
 8014a52:	f001 f9b7 	bl	8015dc4 <__gethex>
 8014a56:	f010 060f 	ands.w	r6, r0, #15
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	d005      	beq.n	8014a6a <_strtod_l+0x72>
 8014a5e:	2e06      	cmp	r6, #6
 8014a60:	d128      	bne.n	8014ab4 <_strtod_l+0xbc>
 8014a62:	3501      	adds	r5, #1
 8014a64:	2300      	movs	r3, #0
 8014a66:	9519      	str	r5, [sp, #100]	@ 0x64
 8014a68:	930e      	str	r3, [sp, #56]	@ 0x38
 8014a6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	f040 858e 	bne.w	801558e <_strtod_l+0xb96>
 8014a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a74:	b1cb      	cbz	r3, 8014aaa <_strtod_l+0xb2>
 8014a76:	4652      	mov	r2, sl
 8014a78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8014a7c:	ec43 2b10 	vmov	d0, r2, r3
 8014a80:	b01f      	add	sp, #124	@ 0x7c
 8014a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a86:	2920      	cmp	r1, #32
 8014a88:	d1ce      	bne.n	8014a28 <_strtod_l+0x30>
 8014a8a:	3201      	adds	r2, #1
 8014a8c:	e7c1      	b.n	8014a12 <_strtod_l+0x1a>
 8014a8e:	292d      	cmp	r1, #45	@ 0x2d
 8014a90:	d1ca      	bne.n	8014a28 <_strtod_l+0x30>
 8014a92:	2101      	movs	r1, #1
 8014a94:	910e      	str	r1, [sp, #56]	@ 0x38
 8014a96:	1c51      	adds	r1, r2, #1
 8014a98:	9119      	str	r1, [sp, #100]	@ 0x64
 8014a9a:	7852      	ldrb	r2, [r2, #1]
 8014a9c:	2a00      	cmp	r2, #0
 8014a9e:	d1c5      	bne.n	8014a2c <_strtod_l+0x34>
 8014aa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014aa2:	9419      	str	r4, [sp, #100]	@ 0x64
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	f040 8570 	bne.w	801558a <_strtod_l+0xb92>
 8014aaa:	4652      	mov	r2, sl
 8014aac:	465b      	mov	r3, fp
 8014aae:	e7e5      	b.n	8014a7c <_strtod_l+0x84>
 8014ab0:	2100      	movs	r1, #0
 8014ab2:	e7ef      	b.n	8014a94 <_strtod_l+0x9c>
 8014ab4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014ab6:	b13a      	cbz	r2, 8014ac8 <_strtod_l+0xd0>
 8014ab8:	2135      	movs	r1, #53	@ 0x35
 8014aba:	a81c      	add	r0, sp, #112	@ 0x70
 8014abc:	f002 f8cc 	bl	8016c58 <__copybits>
 8014ac0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014ac2:	9805      	ldr	r0, [sp, #20]
 8014ac4:	f001 fca2 	bl	801640c <_Bfree>
 8014ac8:	3e01      	subs	r6, #1
 8014aca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014acc:	2e04      	cmp	r6, #4
 8014ace:	d806      	bhi.n	8014ade <_strtod_l+0xe6>
 8014ad0:	e8df f006 	tbb	[pc, r6]
 8014ad4:	201d0314 	.word	0x201d0314
 8014ad8:	14          	.byte	0x14
 8014ad9:	00          	.byte	0x00
 8014ada:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8014ade:	05e1      	lsls	r1, r4, #23
 8014ae0:	bf48      	it	mi
 8014ae2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014ae6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014aea:	0d1b      	lsrs	r3, r3, #20
 8014aec:	051b      	lsls	r3, r3, #20
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d1bb      	bne.n	8014a6a <_strtod_l+0x72>
 8014af2:	f001 f871 	bl	8015bd8 <__errno>
 8014af6:	2322      	movs	r3, #34	@ 0x22
 8014af8:	6003      	str	r3, [r0, #0]
 8014afa:	e7b6      	b.n	8014a6a <_strtod_l+0x72>
 8014afc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8014b00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014b04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014b08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014b0c:	e7e7      	b.n	8014ade <_strtod_l+0xe6>
 8014b0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8014c90 <_strtod_l+0x298>
 8014b12:	e7e4      	b.n	8014ade <_strtod_l+0xe6>
 8014b14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014b18:	f04f 3aff 	mov.w	sl, #4294967295
 8014b1c:	e7df      	b.n	8014ade <_strtod_l+0xe6>
 8014b1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8014b24:	785b      	ldrb	r3, [r3, #1]
 8014b26:	2b30      	cmp	r3, #48	@ 0x30
 8014b28:	d0f9      	beq.n	8014b1e <_strtod_l+0x126>
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d09d      	beq.n	8014a6a <_strtod_l+0x72>
 8014b2e:	2301      	movs	r3, #1
 8014b30:	2700      	movs	r7, #0
 8014b32:	9308      	str	r3, [sp, #32]
 8014b34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8014b38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014b3a:	46b9      	mov	r9, r7
 8014b3c:	220a      	movs	r2, #10
 8014b3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8014b40:	7805      	ldrb	r5, [r0, #0]
 8014b42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8014b46:	b2d9      	uxtb	r1, r3
 8014b48:	2909      	cmp	r1, #9
 8014b4a:	d928      	bls.n	8014b9e <_strtod_l+0x1a6>
 8014b4c:	494f      	ldr	r1, [pc, #316]	@ (8014c8c <_strtod_l+0x294>)
 8014b4e:	2201      	movs	r2, #1
 8014b50:	f000 ffda 	bl	8015b08 <strncmp>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d032      	beq.n	8014bbe <_strtod_l+0x1c6>
 8014b58:	2000      	movs	r0, #0
 8014b5a:	462a      	mov	r2, r5
 8014b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8014b5e:	464d      	mov	r5, r9
 8014b60:	4603      	mov	r3, r0
 8014b62:	2a65      	cmp	r2, #101	@ 0x65
 8014b64:	d001      	beq.n	8014b6a <_strtod_l+0x172>
 8014b66:	2a45      	cmp	r2, #69	@ 0x45
 8014b68:	d114      	bne.n	8014b94 <_strtod_l+0x19c>
 8014b6a:	b91d      	cbnz	r5, 8014b74 <_strtod_l+0x17c>
 8014b6c:	9a08      	ldr	r2, [sp, #32]
 8014b6e:	4302      	orrs	r2, r0
 8014b70:	d096      	beq.n	8014aa0 <_strtod_l+0xa8>
 8014b72:	2500      	movs	r5, #0
 8014b74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8014b76:	1c62      	adds	r2, r4, #1
 8014b78:	9219      	str	r2, [sp, #100]	@ 0x64
 8014b7a:	7862      	ldrb	r2, [r4, #1]
 8014b7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8014b7e:	d07a      	beq.n	8014c76 <_strtod_l+0x27e>
 8014b80:	2a2d      	cmp	r2, #45	@ 0x2d
 8014b82:	d07e      	beq.n	8014c82 <_strtod_l+0x28a>
 8014b84:	f04f 0c00 	mov.w	ip, #0
 8014b88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014b8c:	2909      	cmp	r1, #9
 8014b8e:	f240 8085 	bls.w	8014c9c <_strtod_l+0x2a4>
 8014b92:	9419      	str	r4, [sp, #100]	@ 0x64
 8014b94:	f04f 0800 	mov.w	r8, #0
 8014b98:	e0a5      	b.n	8014ce6 <_strtod_l+0x2ee>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	e7c8      	b.n	8014b30 <_strtod_l+0x138>
 8014b9e:	f1b9 0f08 	cmp.w	r9, #8
 8014ba2:	bfd8      	it	le
 8014ba4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8014ba6:	f100 0001 	add.w	r0, r0, #1
 8014baa:	bfda      	itte	le
 8014bac:	fb02 3301 	mlale	r3, r2, r1, r3
 8014bb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8014bb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8014bb6:	f109 0901 	add.w	r9, r9, #1
 8014bba:	9019      	str	r0, [sp, #100]	@ 0x64
 8014bbc:	e7bf      	b.n	8014b3e <_strtod_l+0x146>
 8014bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014bc0:	1c5a      	adds	r2, r3, #1
 8014bc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8014bc4:	785a      	ldrb	r2, [r3, #1]
 8014bc6:	f1b9 0f00 	cmp.w	r9, #0
 8014bca:	d03b      	beq.n	8014c44 <_strtod_l+0x24c>
 8014bcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8014bce:	464d      	mov	r5, r9
 8014bd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8014bd4:	2b09      	cmp	r3, #9
 8014bd6:	d912      	bls.n	8014bfe <_strtod_l+0x206>
 8014bd8:	2301      	movs	r3, #1
 8014bda:	e7c2      	b.n	8014b62 <_strtod_l+0x16a>
 8014bdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014bde:	1c5a      	adds	r2, r3, #1
 8014be0:	9219      	str	r2, [sp, #100]	@ 0x64
 8014be2:	785a      	ldrb	r2, [r3, #1]
 8014be4:	3001      	adds	r0, #1
 8014be6:	2a30      	cmp	r2, #48	@ 0x30
 8014be8:	d0f8      	beq.n	8014bdc <_strtod_l+0x1e4>
 8014bea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014bee:	2b08      	cmp	r3, #8
 8014bf0:	f200 84d2 	bhi.w	8015598 <_strtod_l+0xba0>
 8014bf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014bf6:	900a      	str	r0, [sp, #40]	@ 0x28
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8014bfc:	4605      	mov	r5, r0
 8014bfe:	3a30      	subs	r2, #48	@ 0x30
 8014c00:	f100 0301 	add.w	r3, r0, #1
 8014c04:	d018      	beq.n	8014c38 <_strtod_l+0x240>
 8014c06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014c08:	4419      	add	r1, r3
 8014c0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8014c0c:	462e      	mov	r6, r5
 8014c0e:	f04f 0e0a 	mov.w	lr, #10
 8014c12:	1c71      	adds	r1, r6, #1
 8014c14:	eba1 0c05 	sub.w	ip, r1, r5
 8014c18:	4563      	cmp	r3, ip
 8014c1a:	dc15      	bgt.n	8014c48 <_strtod_l+0x250>
 8014c1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8014c20:	182b      	adds	r3, r5, r0
 8014c22:	2b08      	cmp	r3, #8
 8014c24:	f105 0501 	add.w	r5, r5, #1
 8014c28:	4405      	add	r5, r0
 8014c2a:	dc1a      	bgt.n	8014c62 <_strtod_l+0x26a>
 8014c2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014c2e:	230a      	movs	r3, #10
 8014c30:	fb03 2301 	mla	r3, r3, r1, r2
 8014c34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014c36:	2300      	movs	r3, #0
 8014c38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014c3a:	1c51      	adds	r1, r2, #1
 8014c3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8014c3e:	7852      	ldrb	r2, [r2, #1]
 8014c40:	4618      	mov	r0, r3
 8014c42:	e7c5      	b.n	8014bd0 <_strtod_l+0x1d8>
 8014c44:	4648      	mov	r0, r9
 8014c46:	e7ce      	b.n	8014be6 <_strtod_l+0x1ee>
 8014c48:	2e08      	cmp	r6, #8
 8014c4a:	dc05      	bgt.n	8014c58 <_strtod_l+0x260>
 8014c4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8014c4e:	fb0e f606 	mul.w	r6, lr, r6
 8014c52:	960b      	str	r6, [sp, #44]	@ 0x2c
 8014c54:	460e      	mov	r6, r1
 8014c56:	e7dc      	b.n	8014c12 <_strtod_l+0x21a>
 8014c58:	2910      	cmp	r1, #16
 8014c5a:	bfd8      	it	le
 8014c5c:	fb0e f707 	mulle.w	r7, lr, r7
 8014c60:	e7f8      	b.n	8014c54 <_strtod_l+0x25c>
 8014c62:	2b0f      	cmp	r3, #15
 8014c64:	bfdc      	itt	le
 8014c66:	230a      	movle	r3, #10
 8014c68:	fb03 2707 	mlale	r7, r3, r7, r2
 8014c6c:	e7e3      	b.n	8014c36 <_strtod_l+0x23e>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c72:	2301      	movs	r3, #1
 8014c74:	e77a      	b.n	8014b6c <_strtod_l+0x174>
 8014c76:	f04f 0c00 	mov.w	ip, #0
 8014c7a:	1ca2      	adds	r2, r4, #2
 8014c7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8014c7e:	78a2      	ldrb	r2, [r4, #2]
 8014c80:	e782      	b.n	8014b88 <_strtod_l+0x190>
 8014c82:	f04f 0c01 	mov.w	ip, #1
 8014c86:	e7f8      	b.n	8014c7a <_strtod_l+0x282>
 8014c88:	0801a254 	.word	0x0801a254
 8014c8c:	0801a0bc 	.word	0x0801a0bc
 8014c90:	7ff00000 	.word	0x7ff00000
 8014c94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014c96:	1c51      	adds	r1, r2, #1
 8014c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8014c9a:	7852      	ldrb	r2, [r2, #1]
 8014c9c:	2a30      	cmp	r2, #48	@ 0x30
 8014c9e:	d0f9      	beq.n	8014c94 <_strtod_l+0x29c>
 8014ca0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8014ca4:	2908      	cmp	r1, #8
 8014ca6:	f63f af75 	bhi.w	8014b94 <_strtod_l+0x19c>
 8014caa:	3a30      	subs	r2, #48	@ 0x30
 8014cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8014cae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014cb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014cb2:	f04f 080a 	mov.w	r8, #10
 8014cb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014cb8:	1c56      	adds	r6, r2, #1
 8014cba:	9619      	str	r6, [sp, #100]	@ 0x64
 8014cbc:	7852      	ldrb	r2, [r2, #1]
 8014cbe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014cc2:	f1be 0f09 	cmp.w	lr, #9
 8014cc6:	d939      	bls.n	8014d3c <_strtod_l+0x344>
 8014cc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014cca:	1a76      	subs	r6, r6, r1
 8014ccc:	2e08      	cmp	r6, #8
 8014cce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8014cd2:	dc03      	bgt.n	8014cdc <_strtod_l+0x2e4>
 8014cd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014cd6:	4588      	cmp	r8, r1
 8014cd8:	bfa8      	it	ge
 8014cda:	4688      	movge	r8, r1
 8014cdc:	f1bc 0f00 	cmp.w	ip, #0
 8014ce0:	d001      	beq.n	8014ce6 <_strtod_l+0x2ee>
 8014ce2:	f1c8 0800 	rsb	r8, r8, #0
 8014ce6:	2d00      	cmp	r5, #0
 8014ce8:	d14e      	bne.n	8014d88 <_strtod_l+0x390>
 8014cea:	9908      	ldr	r1, [sp, #32]
 8014cec:	4308      	orrs	r0, r1
 8014cee:	f47f aebc 	bne.w	8014a6a <_strtod_l+0x72>
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	f47f aed4 	bne.w	8014aa0 <_strtod_l+0xa8>
 8014cf8:	2a69      	cmp	r2, #105	@ 0x69
 8014cfa:	d028      	beq.n	8014d4e <_strtod_l+0x356>
 8014cfc:	dc25      	bgt.n	8014d4a <_strtod_l+0x352>
 8014cfe:	2a49      	cmp	r2, #73	@ 0x49
 8014d00:	d025      	beq.n	8014d4e <_strtod_l+0x356>
 8014d02:	2a4e      	cmp	r2, #78	@ 0x4e
 8014d04:	f47f aecc 	bne.w	8014aa0 <_strtod_l+0xa8>
 8014d08:	499a      	ldr	r1, [pc, #616]	@ (8014f74 <_strtod_l+0x57c>)
 8014d0a:	a819      	add	r0, sp, #100	@ 0x64
 8014d0c:	f001 fa7c 	bl	8016208 <__match>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	f43f aec5 	beq.w	8014aa0 <_strtod_l+0xa8>
 8014d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	2b28      	cmp	r3, #40	@ 0x28
 8014d1c:	d12e      	bne.n	8014d7c <_strtod_l+0x384>
 8014d1e:	4996      	ldr	r1, [pc, #600]	@ (8014f78 <_strtod_l+0x580>)
 8014d20:	aa1c      	add	r2, sp, #112	@ 0x70
 8014d22:	a819      	add	r0, sp, #100	@ 0x64
 8014d24:	f001 fa84 	bl	8016230 <__hexnan>
 8014d28:	2805      	cmp	r0, #5
 8014d2a:	d127      	bne.n	8014d7c <_strtod_l+0x384>
 8014d2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014d2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8014d32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8014d36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8014d3a:	e696      	b.n	8014a6a <_strtod_l+0x72>
 8014d3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014d3e:	fb08 2101 	mla	r1, r8, r1, r2
 8014d42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8014d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d48:	e7b5      	b.n	8014cb6 <_strtod_l+0x2be>
 8014d4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8014d4c:	e7da      	b.n	8014d04 <_strtod_l+0x30c>
 8014d4e:	498b      	ldr	r1, [pc, #556]	@ (8014f7c <_strtod_l+0x584>)
 8014d50:	a819      	add	r0, sp, #100	@ 0x64
 8014d52:	f001 fa59 	bl	8016208 <__match>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	f43f aea2 	beq.w	8014aa0 <_strtod_l+0xa8>
 8014d5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014d5e:	4988      	ldr	r1, [pc, #544]	@ (8014f80 <_strtod_l+0x588>)
 8014d60:	3b01      	subs	r3, #1
 8014d62:	a819      	add	r0, sp, #100	@ 0x64
 8014d64:	9319      	str	r3, [sp, #100]	@ 0x64
 8014d66:	f001 fa4f 	bl	8016208 <__match>
 8014d6a:	b910      	cbnz	r0, 8014d72 <_strtod_l+0x37a>
 8014d6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014d6e:	3301      	adds	r3, #1
 8014d70:	9319      	str	r3, [sp, #100]	@ 0x64
 8014d72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8014f90 <_strtod_l+0x598>
 8014d76:	f04f 0a00 	mov.w	sl, #0
 8014d7a:	e676      	b.n	8014a6a <_strtod_l+0x72>
 8014d7c:	4881      	ldr	r0, [pc, #516]	@ (8014f84 <_strtod_l+0x58c>)
 8014d7e:	f000 ff67 	bl	8015c50 <nan>
 8014d82:	ec5b ab10 	vmov	sl, fp, d0
 8014d86:	e670      	b.n	8014a6a <_strtod_l+0x72>
 8014d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014d8c:	eba8 0303 	sub.w	r3, r8, r3
 8014d90:	f1b9 0f00 	cmp.w	r9, #0
 8014d94:	bf08      	it	eq
 8014d96:	46a9      	moveq	r9, r5
 8014d98:	2d10      	cmp	r5, #16
 8014d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d9c:	462c      	mov	r4, r5
 8014d9e:	bfa8      	it	ge
 8014da0:	2410      	movge	r4, #16
 8014da2:	f7f3 fbdf 	bl	8008564 <__aeabi_ui2d>
 8014da6:	2d09      	cmp	r5, #9
 8014da8:	4682      	mov	sl, r0
 8014daa:	468b      	mov	fp, r1
 8014dac:	dc13      	bgt.n	8014dd6 <_strtod_l+0x3de>
 8014dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f43f ae5a 	beq.w	8014a6a <_strtod_l+0x72>
 8014db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014db8:	dd78      	ble.n	8014eac <_strtod_l+0x4b4>
 8014dba:	2b16      	cmp	r3, #22
 8014dbc:	dc5f      	bgt.n	8014e7e <_strtod_l+0x486>
 8014dbe:	4972      	ldr	r1, [pc, #456]	@ (8014f88 <_strtod_l+0x590>)
 8014dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dc8:	4652      	mov	r2, sl
 8014dca:	465b      	mov	r3, fp
 8014dcc:	f7f3 fc44 	bl	8008658 <__aeabi_dmul>
 8014dd0:	4682      	mov	sl, r0
 8014dd2:	468b      	mov	fp, r1
 8014dd4:	e649      	b.n	8014a6a <_strtod_l+0x72>
 8014dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8014f88 <_strtod_l+0x590>)
 8014dd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014ddc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8014de0:	f7f3 fc3a 	bl	8008658 <__aeabi_dmul>
 8014de4:	4682      	mov	sl, r0
 8014de6:	4638      	mov	r0, r7
 8014de8:	468b      	mov	fp, r1
 8014dea:	f7f3 fbbb 	bl	8008564 <__aeabi_ui2d>
 8014dee:	4602      	mov	r2, r0
 8014df0:	460b      	mov	r3, r1
 8014df2:	4650      	mov	r0, sl
 8014df4:	4659      	mov	r1, fp
 8014df6:	f7f3 fa79 	bl	80082ec <__adddf3>
 8014dfa:	2d0f      	cmp	r5, #15
 8014dfc:	4682      	mov	sl, r0
 8014dfe:	468b      	mov	fp, r1
 8014e00:	ddd5      	ble.n	8014dae <_strtod_l+0x3b6>
 8014e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e04:	1b2c      	subs	r4, r5, r4
 8014e06:	441c      	add	r4, r3
 8014e08:	2c00      	cmp	r4, #0
 8014e0a:	f340 8093 	ble.w	8014f34 <_strtod_l+0x53c>
 8014e0e:	f014 030f 	ands.w	r3, r4, #15
 8014e12:	d00a      	beq.n	8014e2a <_strtod_l+0x432>
 8014e14:	495c      	ldr	r1, [pc, #368]	@ (8014f88 <_strtod_l+0x590>)
 8014e16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e1a:	4652      	mov	r2, sl
 8014e1c:	465b      	mov	r3, fp
 8014e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e22:	f7f3 fc19 	bl	8008658 <__aeabi_dmul>
 8014e26:	4682      	mov	sl, r0
 8014e28:	468b      	mov	fp, r1
 8014e2a:	f034 040f 	bics.w	r4, r4, #15
 8014e2e:	d073      	beq.n	8014f18 <_strtod_l+0x520>
 8014e30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8014e34:	dd49      	ble.n	8014eca <_strtod_l+0x4d2>
 8014e36:	2400      	movs	r4, #0
 8014e38:	46a0      	mov	r8, r4
 8014e3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014e3c:	46a1      	mov	r9, r4
 8014e3e:	9a05      	ldr	r2, [sp, #20]
 8014e40:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8014f90 <_strtod_l+0x598>
 8014e44:	2322      	movs	r3, #34	@ 0x22
 8014e46:	6013      	str	r3, [r2, #0]
 8014e48:	f04f 0a00 	mov.w	sl, #0
 8014e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	f43f ae0b 	beq.w	8014a6a <_strtod_l+0x72>
 8014e54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014e56:	9805      	ldr	r0, [sp, #20]
 8014e58:	f001 fad8 	bl	801640c <_Bfree>
 8014e5c:	9805      	ldr	r0, [sp, #20]
 8014e5e:	4649      	mov	r1, r9
 8014e60:	f001 fad4 	bl	801640c <_Bfree>
 8014e64:	9805      	ldr	r0, [sp, #20]
 8014e66:	4641      	mov	r1, r8
 8014e68:	f001 fad0 	bl	801640c <_Bfree>
 8014e6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014e6e:	9805      	ldr	r0, [sp, #20]
 8014e70:	f001 facc 	bl	801640c <_Bfree>
 8014e74:	9805      	ldr	r0, [sp, #20]
 8014e76:	4621      	mov	r1, r4
 8014e78:	f001 fac8 	bl	801640c <_Bfree>
 8014e7c:	e5f5      	b.n	8014a6a <_strtod_l+0x72>
 8014e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8014e84:	4293      	cmp	r3, r2
 8014e86:	dbbc      	blt.n	8014e02 <_strtod_l+0x40a>
 8014e88:	4c3f      	ldr	r4, [pc, #252]	@ (8014f88 <_strtod_l+0x590>)
 8014e8a:	f1c5 050f 	rsb	r5, r5, #15
 8014e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014e92:	4652      	mov	r2, sl
 8014e94:	465b      	mov	r3, fp
 8014e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e9a:	f7f3 fbdd 	bl	8008658 <__aeabi_dmul>
 8014e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ea0:	1b5d      	subs	r5, r3, r5
 8014ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014eaa:	e78f      	b.n	8014dcc <_strtod_l+0x3d4>
 8014eac:	3316      	adds	r3, #22
 8014eae:	dba8      	blt.n	8014e02 <_strtod_l+0x40a>
 8014eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014eb2:	eba3 0808 	sub.w	r8, r3, r8
 8014eb6:	4b34      	ldr	r3, [pc, #208]	@ (8014f88 <_strtod_l+0x590>)
 8014eb8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8014ebc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8014ec0:	4650      	mov	r0, sl
 8014ec2:	4659      	mov	r1, fp
 8014ec4:	f7f3 fcf2 	bl	80088ac <__aeabi_ddiv>
 8014ec8:	e782      	b.n	8014dd0 <_strtod_l+0x3d8>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	4f2f      	ldr	r7, [pc, #188]	@ (8014f8c <_strtod_l+0x594>)
 8014ece:	1124      	asrs	r4, r4, #4
 8014ed0:	4650      	mov	r0, sl
 8014ed2:	4659      	mov	r1, fp
 8014ed4:	461e      	mov	r6, r3
 8014ed6:	2c01      	cmp	r4, #1
 8014ed8:	dc21      	bgt.n	8014f1e <_strtod_l+0x526>
 8014eda:	b10b      	cbz	r3, 8014ee0 <_strtod_l+0x4e8>
 8014edc:	4682      	mov	sl, r0
 8014ede:	468b      	mov	fp, r1
 8014ee0:	492a      	ldr	r1, [pc, #168]	@ (8014f8c <_strtod_l+0x594>)
 8014ee2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014ee6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8014eea:	4652      	mov	r2, sl
 8014eec:	465b      	mov	r3, fp
 8014eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ef2:	f7f3 fbb1 	bl	8008658 <__aeabi_dmul>
 8014ef6:	4b26      	ldr	r3, [pc, #152]	@ (8014f90 <_strtod_l+0x598>)
 8014ef8:	460a      	mov	r2, r1
 8014efa:	400b      	ands	r3, r1
 8014efc:	4925      	ldr	r1, [pc, #148]	@ (8014f94 <_strtod_l+0x59c>)
 8014efe:	428b      	cmp	r3, r1
 8014f00:	4682      	mov	sl, r0
 8014f02:	d898      	bhi.n	8014e36 <_strtod_l+0x43e>
 8014f04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8014f08:	428b      	cmp	r3, r1
 8014f0a:	bf86      	itte	hi
 8014f0c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8014f98 <_strtod_l+0x5a0>
 8014f10:	f04f 3aff 	movhi.w	sl, #4294967295
 8014f14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8014f18:	2300      	movs	r3, #0
 8014f1a:	9308      	str	r3, [sp, #32]
 8014f1c:	e076      	b.n	801500c <_strtod_l+0x614>
 8014f1e:	07e2      	lsls	r2, r4, #31
 8014f20:	d504      	bpl.n	8014f2c <_strtod_l+0x534>
 8014f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f26:	f7f3 fb97 	bl	8008658 <__aeabi_dmul>
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	3601      	adds	r6, #1
 8014f2e:	1064      	asrs	r4, r4, #1
 8014f30:	3708      	adds	r7, #8
 8014f32:	e7d0      	b.n	8014ed6 <_strtod_l+0x4de>
 8014f34:	d0f0      	beq.n	8014f18 <_strtod_l+0x520>
 8014f36:	4264      	negs	r4, r4
 8014f38:	f014 020f 	ands.w	r2, r4, #15
 8014f3c:	d00a      	beq.n	8014f54 <_strtod_l+0x55c>
 8014f3e:	4b12      	ldr	r3, [pc, #72]	@ (8014f88 <_strtod_l+0x590>)
 8014f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f44:	4650      	mov	r0, sl
 8014f46:	4659      	mov	r1, fp
 8014f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f4c:	f7f3 fcae 	bl	80088ac <__aeabi_ddiv>
 8014f50:	4682      	mov	sl, r0
 8014f52:	468b      	mov	fp, r1
 8014f54:	1124      	asrs	r4, r4, #4
 8014f56:	d0df      	beq.n	8014f18 <_strtod_l+0x520>
 8014f58:	2c1f      	cmp	r4, #31
 8014f5a:	dd1f      	ble.n	8014f9c <_strtod_l+0x5a4>
 8014f5c:	2400      	movs	r4, #0
 8014f5e:	46a0      	mov	r8, r4
 8014f60:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014f62:	46a1      	mov	r9, r4
 8014f64:	9a05      	ldr	r2, [sp, #20]
 8014f66:	2322      	movs	r3, #34	@ 0x22
 8014f68:	f04f 0a00 	mov.w	sl, #0
 8014f6c:	f04f 0b00 	mov.w	fp, #0
 8014f70:	6013      	str	r3, [r2, #0]
 8014f72:	e76b      	b.n	8014e4c <_strtod_l+0x454>
 8014f74:	0801a0c7 	.word	0x0801a0c7
 8014f78:	0801a240 	.word	0x0801a240
 8014f7c:	0801a0be 	.word	0x0801a0be
 8014f80:	0801a0c1 	.word	0x0801a0c1
 8014f84:	0801a23c 	.word	0x0801a23c
 8014f88:	0801a3c8 	.word	0x0801a3c8
 8014f8c:	0801a3a0 	.word	0x0801a3a0
 8014f90:	7ff00000 	.word	0x7ff00000
 8014f94:	7ca00000 	.word	0x7ca00000
 8014f98:	7fefffff 	.word	0x7fefffff
 8014f9c:	f014 0310 	ands.w	r3, r4, #16
 8014fa0:	bf18      	it	ne
 8014fa2:	236a      	movne	r3, #106	@ 0x6a
 8014fa4:	4ea9      	ldr	r6, [pc, #676]	@ (801524c <_strtod_l+0x854>)
 8014fa6:	9308      	str	r3, [sp, #32]
 8014fa8:	4650      	mov	r0, sl
 8014faa:	4659      	mov	r1, fp
 8014fac:	2300      	movs	r3, #0
 8014fae:	07e7      	lsls	r7, r4, #31
 8014fb0:	d504      	bpl.n	8014fbc <_strtod_l+0x5c4>
 8014fb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014fb6:	f7f3 fb4f 	bl	8008658 <__aeabi_dmul>
 8014fba:	2301      	movs	r3, #1
 8014fbc:	1064      	asrs	r4, r4, #1
 8014fbe:	f106 0608 	add.w	r6, r6, #8
 8014fc2:	d1f4      	bne.n	8014fae <_strtod_l+0x5b6>
 8014fc4:	b10b      	cbz	r3, 8014fca <_strtod_l+0x5d2>
 8014fc6:	4682      	mov	sl, r0
 8014fc8:	468b      	mov	fp, r1
 8014fca:	9b08      	ldr	r3, [sp, #32]
 8014fcc:	b1b3      	cbz	r3, 8014ffc <_strtod_l+0x604>
 8014fce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014fd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	4659      	mov	r1, fp
 8014fda:	dd0f      	ble.n	8014ffc <_strtod_l+0x604>
 8014fdc:	2b1f      	cmp	r3, #31
 8014fde:	dd56      	ble.n	801508e <_strtod_l+0x696>
 8014fe0:	2b34      	cmp	r3, #52	@ 0x34
 8014fe2:	bfde      	ittt	le
 8014fe4:	f04f 33ff 	movle.w	r3, #4294967295
 8014fe8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014fec:	4093      	lslle	r3, r2
 8014fee:	f04f 0a00 	mov.w	sl, #0
 8014ff2:	bfcc      	ite	gt
 8014ff4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014ff8:	ea03 0b01 	andle.w	fp, r3, r1
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	2300      	movs	r3, #0
 8015000:	4650      	mov	r0, sl
 8015002:	4659      	mov	r1, fp
 8015004:	f7f3 fd90 	bl	8008b28 <__aeabi_dcmpeq>
 8015008:	2800      	cmp	r0, #0
 801500a:	d1a7      	bne.n	8014f5c <_strtod_l+0x564>
 801500c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015012:	9805      	ldr	r0, [sp, #20]
 8015014:	462b      	mov	r3, r5
 8015016:	464a      	mov	r2, r9
 8015018:	f001 fa60 	bl	80164dc <__s2b>
 801501c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801501e:	2800      	cmp	r0, #0
 8015020:	f43f af09 	beq.w	8014e36 <_strtod_l+0x43e>
 8015024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015028:	2a00      	cmp	r2, #0
 801502a:	eba3 0308 	sub.w	r3, r3, r8
 801502e:	bfa8      	it	ge
 8015030:	2300      	movge	r3, #0
 8015032:	9312      	str	r3, [sp, #72]	@ 0x48
 8015034:	2400      	movs	r4, #0
 8015036:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801503a:	9316      	str	r3, [sp, #88]	@ 0x58
 801503c:	46a0      	mov	r8, r4
 801503e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015040:	9805      	ldr	r0, [sp, #20]
 8015042:	6859      	ldr	r1, [r3, #4]
 8015044:	f001 f9a2 	bl	801638c <_Balloc>
 8015048:	4681      	mov	r9, r0
 801504a:	2800      	cmp	r0, #0
 801504c:	f43f aef7 	beq.w	8014e3e <_strtod_l+0x446>
 8015050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015052:	691a      	ldr	r2, [r3, #16]
 8015054:	3202      	adds	r2, #2
 8015056:	f103 010c 	add.w	r1, r3, #12
 801505a:	0092      	lsls	r2, r2, #2
 801505c:	300c      	adds	r0, #12
 801505e:	f000 fde8 	bl	8015c32 <memcpy>
 8015062:	ec4b ab10 	vmov	d0, sl, fp
 8015066:	9805      	ldr	r0, [sp, #20]
 8015068:	aa1c      	add	r2, sp, #112	@ 0x70
 801506a:	a91b      	add	r1, sp, #108	@ 0x6c
 801506c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015070:	f001 fd68 	bl	8016b44 <__d2b>
 8015074:	901a      	str	r0, [sp, #104]	@ 0x68
 8015076:	2800      	cmp	r0, #0
 8015078:	f43f aee1 	beq.w	8014e3e <_strtod_l+0x446>
 801507c:	9805      	ldr	r0, [sp, #20]
 801507e:	2101      	movs	r1, #1
 8015080:	f001 fac2 	bl	8016608 <__i2b>
 8015084:	4680      	mov	r8, r0
 8015086:	b948      	cbnz	r0, 801509c <_strtod_l+0x6a4>
 8015088:	f04f 0800 	mov.w	r8, #0
 801508c:	e6d7      	b.n	8014e3e <_strtod_l+0x446>
 801508e:	f04f 32ff 	mov.w	r2, #4294967295
 8015092:	fa02 f303 	lsl.w	r3, r2, r3
 8015096:	ea03 0a0a 	and.w	sl, r3, sl
 801509a:	e7af      	b.n	8014ffc <_strtod_l+0x604>
 801509c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801509e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80150a0:	2d00      	cmp	r5, #0
 80150a2:	bfab      	itete	ge
 80150a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80150a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80150a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80150aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80150ac:	bfac      	ite	ge
 80150ae:	18ef      	addge	r7, r5, r3
 80150b0:	1b5e      	sublt	r6, r3, r5
 80150b2:	9b08      	ldr	r3, [sp, #32]
 80150b4:	1aed      	subs	r5, r5, r3
 80150b6:	4415      	add	r5, r2
 80150b8:	4b65      	ldr	r3, [pc, #404]	@ (8015250 <_strtod_l+0x858>)
 80150ba:	3d01      	subs	r5, #1
 80150bc:	429d      	cmp	r5, r3
 80150be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80150c2:	da50      	bge.n	8015166 <_strtod_l+0x76e>
 80150c4:	1b5b      	subs	r3, r3, r5
 80150c6:	2b1f      	cmp	r3, #31
 80150c8:	eba2 0203 	sub.w	r2, r2, r3
 80150cc:	f04f 0101 	mov.w	r1, #1
 80150d0:	dc3d      	bgt.n	801514e <_strtod_l+0x756>
 80150d2:	fa01 f303 	lsl.w	r3, r1, r3
 80150d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80150d8:	2300      	movs	r3, #0
 80150da:	9310      	str	r3, [sp, #64]	@ 0x40
 80150dc:	18bd      	adds	r5, r7, r2
 80150de:	9b08      	ldr	r3, [sp, #32]
 80150e0:	42af      	cmp	r7, r5
 80150e2:	4416      	add	r6, r2
 80150e4:	441e      	add	r6, r3
 80150e6:	463b      	mov	r3, r7
 80150e8:	bfa8      	it	ge
 80150ea:	462b      	movge	r3, r5
 80150ec:	42b3      	cmp	r3, r6
 80150ee:	bfa8      	it	ge
 80150f0:	4633      	movge	r3, r6
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	bfc2      	ittt	gt
 80150f6:	1aed      	subgt	r5, r5, r3
 80150f8:	1af6      	subgt	r6, r6, r3
 80150fa:	1aff      	subgt	r7, r7, r3
 80150fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80150fe:	2b00      	cmp	r3, #0
 8015100:	dd16      	ble.n	8015130 <_strtod_l+0x738>
 8015102:	4641      	mov	r1, r8
 8015104:	9805      	ldr	r0, [sp, #20]
 8015106:	461a      	mov	r2, r3
 8015108:	f001 fb36 	bl	8016778 <__pow5mult>
 801510c:	4680      	mov	r8, r0
 801510e:	2800      	cmp	r0, #0
 8015110:	d0ba      	beq.n	8015088 <_strtod_l+0x690>
 8015112:	4601      	mov	r1, r0
 8015114:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015116:	9805      	ldr	r0, [sp, #20]
 8015118:	f001 fa8c 	bl	8016634 <__multiply>
 801511c:	900a      	str	r0, [sp, #40]	@ 0x28
 801511e:	2800      	cmp	r0, #0
 8015120:	f43f ae8d 	beq.w	8014e3e <_strtod_l+0x446>
 8015124:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015126:	9805      	ldr	r0, [sp, #20]
 8015128:	f001 f970 	bl	801640c <_Bfree>
 801512c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801512e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015130:	2d00      	cmp	r5, #0
 8015132:	dc1d      	bgt.n	8015170 <_strtod_l+0x778>
 8015134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015136:	2b00      	cmp	r3, #0
 8015138:	dd23      	ble.n	8015182 <_strtod_l+0x78a>
 801513a:	4649      	mov	r1, r9
 801513c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801513e:	9805      	ldr	r0, [sp, #20]
 8015140:	f001 fb1a 	bl	8016778 <__pow5mult>
 8015144:	4681      	mov	r9, r0
 8015146:	b9e0      	cbnz	r0, 8015182 <_strtod_l+0x78a>
 8015148:	f04f 0900 	mov.w	r9, #0
 801514c:	e677      	b.n	8014e3e <_strtod_l+0x446>
 801514e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015152:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015156:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801515a:	35e2      	adds	r5, #226	@ 0xe2
 801515c:	fa01 f305 	lsl.w	r3, r1, r5
 8015160:	9310      	str	r3, [sp, #64]	@ 0x40
 8015162:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015164:	e7ba      	b.n	80150dc <_strtod_l+0x6e4>
 8015166:	2300      	movs	r3, #0
 8015168:	9310      	str	r3, [sp, #64]	@ 0x40
 801516a:	2301      	movs	r3, #1
 801516c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801516e:	e7b5      	b.n	80150dc <_strtod_l+0x6e4>
 8015170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015172:	9805      	ldr	r0, [sp, #20]
 8015174:	462a      	mov	r2, r5
 8015176:	f001 fb59 	bl	801682c <__lshift>
 801517a:	901a      	str	r0, [sp, #104]	@ 0x68
 801517c:	2800      	cmp	r0, #0
 801517e:	d1d9      	bne.n	8015134 <_strtod_l+0x73c>
 8015180:	e65d      	b.n	8014e3e <_strtod_l+0x446>
 8015182:	2e00      	cmp	r6, #0
 8015184:	dd07      	ble.n	8015196 <_strtod_l+0x79e>
 8015186:	4649      	mov	r1, r9
 8015188:	9805      	ldr	r0, [sp, #20]
 801518a:	4632      	mov	r2, r6
 801518c:	f001 fb4e 	bl	801682c <__lshift>
 8015190:	4681      	mov	r9, r0
 8015192:	2800      	cmp	r0, #0
 8015194:	d0d8      	beq.n	8015148 <_strtod_l+0x750>
 8015196:	2f00      	cmp	r7, #0
 8015198:	dd08      	ble.n	80151ac <_strtod_l+0x7b4>
 801519a:	4641      	mov	r1, r8
 801519c:	9805      	ldr	r0, [sp, #20]
 801519e:	463a      	mov	r2, r7
 80151a0:	f001 fb44 	bl	801682c <__lshift>
 80151a4:	4680      	mov	r8, r0
 80151a6:	2800      	cmp	r0, #0
 80151a8:	f43f ae49 	beq.w	8014e3e <_strtod_l+0x446>
 80151ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80151ae:	9805      	ldr	r0, [sp, #20]
 80151b0:	464a      	mov	r2, r9
 80151b2:	f001 fbc3 	bl	801693c <__mdiff>
 80151b6:	4604      	mov	r4, r0
 80151b8:	2800      	cmp	r0, #0
 80151ba:	f43f ae40 	beq.w	8014e3e <_strtod_l+0x446>
 80151be:	68c3      	ldr	r3, [r0, #12]
 80151c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80151c2:	2300      	movs	r3, #0
 80151c4:	60c3      	str	r3, [r0, #12]
 80151c6:	4641      	mov	r1, r8
 80151c8:	f001 fb9c 	bl	8016904 <__mcmp>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	da45      	bge.n	801525c <_strtod_l+0x864>
 80151d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151d2:	ea53 030a 	orrs.w	r3, r3, sl
 80151d6:	d16b      	bne.n	80152b0 <_strtod_l+0x8b8>
 80151d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d167      	bne.n	80152b0 <_strtod_l+0x8b8>
 80151e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80151e4:	0d1b      	lsrs	r3, r3, #20
 80151e6:	051b      	lsls	r3, r3, #20
 80151e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80151ec:	d960      	bls.n	80152b0 <_strtod_l+0x8b8>
 80151ee:	6963      	ldr	r3, [r4, #20]
 80151f0:	b913      	cbnz	r3, 80151f8 <_strtod_l+0x800>
 80151f2:	6923      	ldr	r3, [r4, #16]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	dd5b      	ble.n	80152b0 <_strtod_l+0x8b8>
 80151f8:	4621      	mov	r1, r4
 80151fa:	2201      	movs	r2, #1
 80151fc:	9805      	ldr	r0, [sp, #20]
 80151fe:	f001 fb15 	bl	801682c <__lshift>
 8015202:	4641      	mov	r1, r8
 8015204:	4604      	mov	r4, r0
 8015206:	f001 fb7d 	bl	8016904 <__mcmp>
 801520a:	2800      	cmp	r0, #0
 801520c:	dd50      	ble.n	80152b0 <_strtod_l+0x8b8>
 801520e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015212:	9a08      	ldr	r2, [sp, #32]
 8015214:	0d1b      	lsrs	r3, r3, #20
 8015216:	051b      	lsls	r3, r3, #20
 8015218:	2a00      	cmp	r2, #0
 801521a:	d06a      	beq.n	80152f2 <_strtod_l+0x8fa>
 801521c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015220:	d867      	bhi.n	80152f2 <_strtod_l+0x8fa>
 8015222:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015226:	f67f ae9d 	bls.w	8014f64 <_strtod_l+0x56c>
 801522a:	4b0a      	ldr	r3, [pc, #40]	@ (8015254 <_strtod_l+0x85c>)
 801522c:	4650      	mov	r0, sl
 801522e:	4659      	mov	r1, fp
 8015230:	2200      	movs	r2, #0
 8015232:	f7f3 fa11 	bl	8008658 <__aeabi_dmul>
 8015236:	4b08      	ldr	r3, [pc, #32]	@ (8015258 <_strtod_l+0x860>)
 8015238:	400b      	ands	r3, r1
 801523a:	4682      	mov	sl, r0
 801523c:	468b      	mov	fp, r1
 801523e:	2b00      	cmp	r3, #0
 8015240:	f47f ae08 	bne.w	8014e54 <_strtod_l+0x45c>
 8015244:	9a05      	ldr	r2, [sp, #20]
 8015246:	2322      	movs	r3, #34	@ 0x22
 8015248:	6013      	str	r3, [r2, #0]
 801524a:	e603      	b.n	8014e54 <_strtod_l+0x45c>
 801524c:	0801a268 	.word	0x0801a268
 8015250:	fffffc02 	.word	0xfffffc02
 8015254:	39500000 	.word	0x39500000
 8015258:	7ff00000 	.word	0x7ff00000
 801525c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015260:	d165      	bne.n	801532e <_strtod_l+0x936>
 8015262:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015268:	b35a      	cbz	r2, 80152c2 <_strtod_l+0x8ca>
 801526a:	4a9f      	ldr	r2, [pc, #636]	@ (80154e8 <_strtod_l+0xaf0>)
 801526c:	4293      	cmp	r3, r2
 801526e:	d12b      	bne.n	80152c8 <_strtod_l+0x8d0>
 8015270:	9b08      	ldr	r3, [sp, #32]
 8015272:	4651      	mov	r1, sl
 8015274:	b303      	cbz	r3, 80152b8 <_strtod_l+0x8c0>
 8015276:	4b9d      	ldr	r3, [pc, #628]	@ (80154ec <_strtod_l+0xaf4>)
 8015278:	465a      	mov	r2, fp
 801527a:	4013      	ands	r3, r2
 801527c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015280:	f04f 32ff 	mov.w	r2, #4294967295
 8015284:	d81b      	bhi.n	80152be <_strtod_l+0x8c6>
 8015286:	0d1b      	lsrs	r3, r3, #20
 8015288:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801528c:	fa02 f303 	lsl.w	r3, r2, r3
 8015290:	4299      	cmp	r1, r3
 8015292:	d119      	bne.n	80152c8 <_strtod_l+0x8d0>
 8015294:	4b96      	ldr	r3, [pc, #600]	@ (80154f0 <_strtod_l+0xaf8>)
 8015296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015298:	429a      	cmp	r2, r3
 801529a:	d102      	bne.n	80152a2 <_strtod_l+0x8aa>
 801529c:	3101      	adds	r1, #1
 801529e:	f43f adce 	beq.w	8014e3e <_strtod_l+0x446>
 80152a2:	4b92      	ldr	r3, [pc, #584]	@ (80154ec <_strtod_l+0xaf4>)
 80152a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80152a6:	401a      	ands	r2, r3
 80152a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80152ac:	f04f 0a00 	mov.w	sl, #0
 80152b0:	9b08      	ldr	r3, [sp, #32]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d1b9      	bne.n	801522a <_strtod_l+0x832>
 80152b6:	e5cd      	b.n	8014e54 <_strtod_l+0x45c>
 80152b8:	f04f 33ff 	mov.w	r3, #4294967295
 80152bc:	e7e8      	b.n	8015290 <_strtod_l+0x898>
 80152be:	4613      	mov	r3, r2
 80152c0:	e7e6      	b.n	8015290 <_strtod_l+0x898>
 80152c2:	ea53 030a 	orrs.w	r3, r3, sl
 80152c6:	d0a2      	beq.n	801520e <_strtod_l+0x816>
 80152c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80152ca:	b1db      	cbz	r3, 8015304 <_strtod_l+0x90c>
 80152cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80152ce:	4213      	tst	r3, r2
 80152d0:	d0ee      	beq.n	80152b0 <_strtod_l+0x8b8>
 80152d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152d4:	9a08      	ldr	r2, [sp, #32]
 80152d6:	4650      	mov	r0, sl
 80152d8:	4659      	mov	r1, fp
 80152da:	b1bb      	cbz	r3, 801530c <_strtod_l+0x914>
 80152dc:	f7ff fb6e 	bl	80149bc <sulp>
 80152e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80152e4:	ec53 2b10 	vmov	r2, r3, d0
 80152e8:	f7f3 f800 	bl	80082ec <__adddf3>
 80152ec:	4682      	mov	sl, r0
 80152ee:	468b      	mov	fp, r1
 80152f0:	e7de      	b.n	80152b0 <_strtod_l+0x8b8>
 80152f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80152f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80152fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80152fe:	f04f 3aff 	mov.w	sl, #4294967295
 8015302:	e7d5      	b.n	80152b0 <_strtod_l+0x8b8>
 8015304:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015306:	ea13 0f0a 	tst.w	r3, sl
 801530a:	e7e1      	b.n	80152d0 <_strtod_l+0x8d8>
 801530c:	f7ff fb56 	bl	80149bc <sulp>
 8015310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015314:	ec53 2b10 	vmov	r2, r3, d0
 8015318:	f7f2 ffe6 	bl	80082e8 <__aeabi_dsub>
 801531c:	2200      	movs	r2, #0
 801531e:	2300      	movs	r3, #0
 8015320:	4682      	mov	sl, r0
 8015322:	468b      	mov	fp, r1
 8015324:	f7f3 fc00 	bl	8008b28 <__aeabi_dcmpeq>
 8015328:	2800      	cmp	r0, #0
 801532a:	d0c1      	beq.n	80152b0 <_strtod_l+0x8b8>
 801532c:	e61a      	b.n	8014f64 <_strtod_l+0x56c>
 801532e:	4641      	mov	r1, r8
 8015330:	4620      	mov	r0, r4
 8015332:	f001 fc5f 	bl	8016bf4 <__ratio>
 8015336:	ec57 6b10 	vmov	r6, r7, d0
 801533a:	2200      	movs	r2, #0
 801533c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015340:	4630      	mov	r0, r6
 8015342:	4639      	mov	r1, r7
 8015344:	f7f3 fc04 	bl	8008b50 <__aeabi_dcmple>
 8015348:	2800      	cmp	r0, #0
 801534a:	d06f      	beq.n	801542c <_strtod_l+0xa34>
 801534c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801534e:	2b00      	cmp	r3, #0
 8015350:	d17a      	bne.n	8015448 <_strtod_l+0xa50>
 8015352:	f1ba 0f00 	cmp.w	sl, #0
 8015356:	d158      	bne.n	801540a <_strtod_l+0xa12>
 8015358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801535a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801535e:	2b00      	cmp	r3, #0
 8015360:	d15a      	bne.n	8015418 <_strtod_l+0xa20>
 8015362:	4b64      	ldr	r3, [pc, #400]	@ (80154f4 <_strtod_l+0xafc>)
 8015364:	2200      	movs	r2, #0
 8015366:	4630      	mov	r0, r6
 8015368:	4639      	mov	r1, r7
 801536a:	f7f3 fbe7 	bl	8008b3c <__aeabi_dcmplt>
 801536e:	2800      	cmp	r0, #0
 8015370:	d159      	bne.n	8015426 <_strtod_l+0xa2e>
 8015372:	4630      	mov	r0, r6
 8015374:	4639      	mov	r1, r7
 8015376:	4b60      	ldr	r3, [pc, #384]	@ (80154f8 <_strtod_l+0xb00>)
 8015378:	2200      	movs	r2, #0
 801537a:	f7f3 f96d 	bl	8008658 <__aeabi_dmul>
 801537e:	4606      	mov	r6, r0
 8015380:	460f      	mov	r7, r1
 8015382:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015386:	9606      	str	r6, [sp, #24]
 8015388:	9307      	str	r3, [sp, #28]
 801538a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801538e:	4d57      	ldr	r5, [pc, #348]	@ (80154ec <_strtod_l+0xaf4>)
 8015390:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015396:	401d      	ands	r5, r3
 8015398:	4b58      	ldr	r3, [pc, #352]	@ (80154fc <_strtod_l+0xb04>)
 801539a:	429d      	cmp	r5, r3
 801539c:	f040 80b2 	bne.w	8015504 <_strtod_l+0xb0c>
 80153a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80153a6:	ec4b ab10 	vmov	d0, sl, fp
 80153aa:	f001 fb5b 	bl	8016a64 <__ulp>
 80153ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153b2:	ec51 0b10 	vmov	r0, r1, d0
 80153b6:	f7f3 f94f 	bl	8008658 <__aeabi_dmul>
 80153ba:	4652      	mov	r2, sl
 80153bc:	465b      	mov	r3, fp
 80153be:	f7f2 ff95 	bl	80082ec <__adddf3>
 80153c2:	460b      	mov	r3, r1
 80153c4:	4949      	ldr	r1, [pc, #292]	@ (80154ec <_strtod_l+0xaf4>)
 80153c6:	4a4e      	ldr	r2, [pc, #312]	@ (8015500 <_strtod_l+0xb08>)
 80153c8:	4019      	ands	r1, r3
 80153ca:	4291      	cmp	r1, r2
 80153cc:	4682      	mov	sl, r0
 80153ce:	d942      	bls.n	8015456 <_strtod_l+0xa5e>
 80153d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80153d2:	4b47      	ldr	r3, [pc, #284]	@ (80154f0 <_strtod_l+0xaf8>)
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d103      	bne.n	80153e0 <_strtod_l+0x9e8>
 80153d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153da:	3301      	adds	r3, #1
 80153dc:	f43f ad2f 	beq.w	8014e3e <_strtod_l+0x446>
 80153e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80154f0 <_strtod_l+0xaf8>
 80153e4:	f04f 3aff 	mov.w	sl, #4294967295
 80153e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80153ea:	9805      	ldr	r0, [sp, #20]
 80153ec:	f001 f80e 	bl	801640c <_Bfree>
 80153f0:	9805      	ldr	r0, [sp, #20]
 80153f2:	4649      	mov	r1, r9
 80153f4:	f001 f80a 	bl	801640c <_Bfree>
 80153f8:	9805      	ldr	r0, [sp, #20]
 80153fa:	4641      	mov	r1, r8
 80153fc:	f001 f806 	bl	801640c <_Bfree>
 8015400:	9805      	ldr	r0, [sp, #20]
 8015402:	4621      	mov	r1, r4
 8015404:	f001 f802 	bl	801640c <_Bfree>
 8015408:	e619      	b.n	801503e <_strtod_l+0x646>
 801540a:	f1ba 0f01 	cmp.w	sl, #1
 801540e:	d103      	bne.n	8015418 <_strtod_l+0xa20>
 8015410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015412:	2b00      	cmp	r3, #0
 8015414:	f43f ada6 	beq.w	8014f64 <_strtod_l+0x56c>
 8015418:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80154c8 <_strtod_l+0xad0>
 801541c:	4f35      	ldr	r7, [pc, #212]	@ (80154f4 <_strtod_l+0xafc>)
 801541e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015422:	2600      	movs	r6, #0
 8015424:	e7b1      	b.n	801538a <_strtod_l+0x992>
 8015426:	4f34      	ldr	r7, [pc, #208]	@ (80154f8 <_strtod_l+0xb00>)
 8015428:	2600      	movs	r6, #0
 801542a:	e7aa      	b.n	8015382 <_strtod_l+0x98a>
 801542c:	4b32      	ldr	r3, [pc, #200]	@ (80154f8 <_strtod_l+0xb00>)
 801542e:	4630      	mov	r0, r6
 8015430:	4639      	mov	r1, r7
 8015432:	2200      	movs	r2, #0
 8015434:	f7f3 f910 	bl	8008658 <__aeabi_dmul>
 8015438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801543a:	4606      	mov	r6, r0
 801543c:	460f      	mov	r7, r1
 801543e:	2b00      	cmp	r3, #0
 8015440:	d09f      	beq.n	8015382 <_strtod_l+0x98a>
 8015442:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015446:	e7a0      	b.n	801538a <_strtod_l+0x992>
 8015448:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80154d0 <_strtod_l+0xad8>
 801544c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015450:	ec57 6b17 	vmov	r6, r7, d7
 8015454:	e799      	b.n	801538a <_strtod_l+0x992>
 8015456:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801545a:	9b08      	ldr	r3, [sp, #32]
 801545c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015460:	2b00      	cmp	r3, #0
 8015462:	d1c1      	bne.n	80153e8 <_strtod_l+0x9f0>
 8015464:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015468:	0d1b      	lsrs	r3, r3, #20
 801546a:	051b      	lsls	r3, r3, #20
 801546c:	429d      	cmp	r5, r3
 801546e:	d1bb      	bne.n	80153e8 <_strtod_l+0x9f0>
 8015470:	4630      	mov	r0, r6
 8015472:	4639      	mov	r1, r7
 8015474:	f7f3 fc00 	bl	8008c78 <__aeabi_d2lz>
 8015478:	f7f3 f8c0 	bl	80085fc <__aeabi_l2d>
 801547c:	4602      	mov	r2, r0
 801547e:	460b      	mov	r3, r1
 8015480:	4630      	mov	r0, r6
 8015482:	4639      	mov	r1, r7
 8015484:	f7f2 ff30 	bl	80082e8 <__aeabi_dsub>
 8015488:	460b      	mov	r3, r1
 801548a:	4602      	mov	r2, r0
 801548c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015490:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015496:	ea46 060a 	orr.w	r6, r6, sl
 801549a:	431e      	orrs	r6, r3
 801549c:	d06f      	beq.n	801557e <_strtod_l+0xb86>
 801549e:	a30e      	add	r3, pc, #56	@ (adr r3, 80154d8 <_strtod_l+0xae0>)
 80154a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a4:	f7f3 fb4a 	bl	8008b3c <__aeabi_dcmplt>
 80154a8:	2800      	cmp	r0, #0
 80154aa:	f47f acd3 	bne.w	8014e54 <_strtod_l+0x45c>
 80154ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80154e0 <_strtod_l+0xae8>)
 80154b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80154b8:	f7f3 fb5e 	bl	8008b78 <__aeabi_dcmpgt>
 80154bc:	2800      	cmp	r0, #0
 80154be:	d093      	beq.n	80153e8 <_strtod_l+0x9f0>
 80154c0:	e4c8      	b.n	8014e54 <_strtod_l+0x45c>
 80154c2:	bf00      	nop
 80154c4:	f3af 8000 	nop.w
 80154c8:	00000000 	.word	0x00000000
 80154cc:	bff00000 	.word	0xbff00000
 80154d0:	00000000 	.word	0x00000000
 80154d4:	3ff00000 	.word	0x3ff00000
 80154d8:	94a03595 	.word	0x94a03595
 80154dc:	3fdfffff 	.word	0x3fdfffff
 80154e0:	35afe535 	.word	0x35afe535
 80154e4:	3fe00000 	.word	0x3fe00000
 80154e8:	000fffff 	.word	0x000fffff
 80154ec:	7ff00000 	.word	0x7ff00000
 80154f0:	7fefffff 	.word	0x7fefffff
 80154f4:	3ff00000 	.word	0x3ff00000
 80154f8:	3fe00000 	.word	0x3fe00000
 80154fc:	7fe00000 	.word	0x7fe00000
 8015500:	7c9fffff 	.word	0x7c9fffff
 8015504:	9b08      	ldr	r3, [sp, #32]
 8015506:	b323      	cbz	r3, 8015552 <_strtod_l+0xb5a>
 8015508:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801550c:	d821      	bhi.n	8015552 <_strtod_l+0xb5a>
 801550e:	a328      	add	r3, pc, #160	@ (adr r3, 80155b0 <_strtod_l+0xbb8>)
 8015510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015514:	4630      	mov	r0, r6
 8015516:	4639      	mov	r1, r7
 8015518:	f7f3 fb1a 	bl	8008b50 <__aeabi_dcmple>
 801551c:	b1a0      	cbz	r0, 8015548 <_strtod_l+0xb50>
 801551e:	4639      	mov	r1, r7
 8015520:	4630      	mov	r0, r6
 8015522:	f7f3 fb71 	bl	8008c08 <__aeabi_d2uiz>
 8015526:	2801      	cmp	r0, #1
 8015528:	bf38      	it	cc
 801552a:	2001      	movcc	r0, #1
 801552c:	f7f3 f81a 	bl	8008564 <__aeabi_ui2d>
 8015530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015532:	4606      	mov	r6, r0
 8015534:	460f      	mov	r7, r1
 8015536:	b9fb      	cbnz	r3, 8015578 <_strtod_l+0xb80>
 8015538:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801553c:	9014      	str	r0, [sp, #80]	@ 0x50
 801553e:	9315      	str	r3, [sp, #84]	@ 0x54
 8015540:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015544:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015548:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801554a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801554e:	1b5b      	subs	r3, r3, r5
 8015550:	9311      	str	r3, [sp, #68]	@ 0x44
 8015552:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015556:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801555a:	f001 fa83 	bl	8016a64 <__ulp>
 801555e:	4650      	mov	r0, sl
 8015560:	ec53 2b10 	vmov	r2, r3, d0
 8015564:	4659      	mov	r1, fp
 8015566:	f7f3 f877 	bl	8008658 <__aeabi_dmul>
 801556a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801556e:	f7f2 febd 	bl	80082ec <__adddf3>
 8015572:	4682      	mov	sl, r0
 8015574:	468b      	mov	fp, r1
 8015576:	e770      	b.n	801545a <_strtod_l+0xa62>
 8015578:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801557c:	e7e0      	b.n	8015540 <_strtod_l+0xb48>
 801557e:	a30e      	add	r3, pc, #56	@ (adr r3, 80155b8 <_strtod_l+0xbc0>)
 8015580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015584:	f7f3 fada 	bl	8008b3c <__aeabi_dcmplt>
 8015588:	e798      	b.n	80154bc <_strtod_l+0xac4>
 801558a:	2300      	movs	r3, #0
 801558c:	930e      	str	r3, [sp, #56]	@ 0x38
 801558e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015592:	6013      	str	r3, [r2, #0]
 8015594:	f7ff ba6d 	b.w	8014a72 <_strtod_l+0x7a>
 8015598:	2a65      	cmp	r2, #101	@ 0x65
 801559a:	f43f ab68 	beq.w	8014c6e <_strtod_l+0x276>
 801559e:	2a45      	cmp	r2, #69	@ 0x45
 80155a0:	f43f ab65 	beq.w	8014c6e <_strtod_l+0x276>
 80155a4:	2301      	movs	r3, #1
 80155a6:	f7ff bba0 	b.w	8014cea <_strtod_l+0x2f2>
 80155aa:	bf00      	nop
 80155ac:	f3af 8000 	nop.w
 80155b0:	ffc00000 	.word	0xffc00000
 80155b4:	41dfffff 	.word	0x41dfffff
 80155b8:	94a03595 	.word	0x94a03595
 80155bc:	3fcfffff 	.word	0x3fcfffff

080155c0 <strtod>:
 80155c0:	460a      	mov	r2, r1
 80155c2:	4601      	mov	r1, r0
 80155c4:	4802      	ldr	r0, [pc, #8]	@ (80155d0 <strtod+0x10>)
 80155c6:	4b03      	ldr	r3, [pc, #12]	@ (80155d4 <strtod+0x14>)
 80155c8:	6800      	ldr	r0, [r0, #0]
 80155ca:	f7ff ba15 	b.w	80149f8 <_strtod_l>
 80155ce:	bf00      	nop
 80155d0:	200001a8 	.word	0x200001a8
 80155d4:	2000003c 	.word	0x2000003c

080155d8 <std>:
 80155d8:	2300      	movs	r3, #0
 80155da:	b510      	push	{r4, lr}
 80155dc:	4604      	mov	r4, r0
 80155de:	e9c0 3300 	strd	r3, r3, [r0]
 80155e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155e6:	6083      	str	r3, [r0, #8]
 80155e8:	8181      	strh	r1, [r0, #12]
 80155ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80155ec:	81c2      	strh	r2, [r0, #14]
 80155ee:	6183      	str	r3, [r0, #24]
 80155f0:	4619      	mov	r1, r3
 80155f2:	2208      	movs	r2, #8
 80155f4:	305c      	adds	r0, #92	@ 0x5c
 80155f6:	f000 fa7f 	bl	8015af8 <memset>
 80155fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015630 <std+0x58>)
 80155fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80155fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015634 <std+0x5c>)
 8015600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015602:	4b0d      	ldr	r3, [pc, #52]	@ (8015638 <std+0x60>)
 8015604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015606:	4b0d      	ldr	r3, [pc, #52]	@ (801563c <std+0x64>)
 8015608:	6323      	str	r3, [r4, #48]	@ 0x30
 801560a:	4b0d      	ldr	r3, [pc, #52]	@ (8015640 <std+0x68>)
 801560c:	6224      	str	r4, [r4, #32]
 801560e:	429c      	cmp	r4, r3
 8015610:	d006      	beq.n	8015620 <std+0x48>
 8015612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015616:	4294      	cmp	r4, r2
 8015618:	d002      	beq.n	8015620 <std+0x48>
 801561a:	33d0      	adds	r3, #208	@ 0xd0
 801561c:	429c      	cmp	r4, r3
 801561e:	d105      	bne.n	801562c <std+0x54>
 8015620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015628:	f000 bb00 	b.w	8015c2c <__retarget_lock_init_recursive>
 801562c:	bd10      	pop	{r4, pc}
 801562e:	bf00      	nop
 8015630:	08015945 	.word	0x08015945
 8015634:	0801596b 	.word	0x0801596b
 8015638:	080159a3 	.word	0x080159a3
 801563c:	080159c7 	.word	0x080159c7
 8015640:	200132b4 	.word	0x200132b4

08015644 <stdio_exit_handler>:
 8015644:	4a02      	ldr	r2, [pc, #8]	@ (8015650 <stdio_exit_handler+0xc>)
 8015646:	4903      	ldr	r1, [pc, #12]	@ (8015654 <stdio_exit_handler+0x10>)
 8015648:	4803      	ldr	r0, [pc, #12]	@ (8015658 <stdio_exit_handler+0x14>)
 801564a:	f000 b869 	b.w	8015720 <_fwalk_sglue>
 801564e:	bf00      	nop
 8015650:	20000030 	.word	0x20000030
 8015654:	08017c99 	.word	0x08017c99
 8015658:	200001ac 	.word	0x200001ac

0801565c <cleanup_stdio>:
 801565c:	6841      	ldr	r1, [r0, #4]
 801565e:	4b0c      	ldr	r3, [pc, #48]	@ (8015690 <cleanup_stdio+0x34>)
 8015660:	4299      	cmp	r1, r3
 8015662:	b510      	push	{r4, lr}
 8015664:	4604      	mov	r4, r0
 8015666:	d001      	beq.n	801566c <cleanup_stdio+0x10>
 8015668:	f002 fb16 	bl	8017c98 <_fflush_r>
 801566c:	68a1      	ldr	r1, [r4, #8]
 801566e:	4b09      	ldr	r3, [pc, #36]	@ (8015694 <cleanup_stdio+0x38>)
 8015670:	4299      	cmp	r1, r3
 8015672:	d002      	beq.n	801567a <cleanup_stdio+0x1e>
 8015674:	4620      	mov	r0, r4
 8015676:	f002 fb0f 	bl	8017c98 <_fflush_r>
 801567a:	68e1      	ldr	r1, [r4, #12]
 801567c:	4b06      	ldr	r3, [pc, #24]	@ (8015698 <cleanup_stdio+0x3c>)
 801567e:	4299      	cmp	r1, r3
 8015680:	d004      	beq.n	801568c <cleanup_stdio+0x30>
 8015682:	4620      	mov	r0, r4
 8015684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015688:	f002 bb06 	b.w	8017c98 <_fflush_r>
 801568c:	bd10      	pop	{r4, pc}
 801568e:	bf00      	nop
 8015690:	200132b4 	.word	0x200132b4
 8015694:	2001331c 	.word	0x2001331c
 8015698:	20013384 	.word	0x20013384

0801569c <global_stdio_init.part.0>:
 801569c:	b510      	push	{r4, lr}
 801569e:	4b0b      	ldr	r3, [pc, #44]	@ (80156cc <global_stdio_init.part.0+0x30>)
 80156a0:	4c0b      	ldr	r4, [pc, #44]	@ (80156d0 <global_stdio_init.part.0+0x34>)
 80156a2:	4a0c      	ldr	r2, [pc, #48]	@ (80156d4 <global_stdio_init.part.0+0x38>)
 80156a4:	601a      	str	r2, [r3, #0]
 80156a6:	4620      	mov	r0, r4
 80156a8:	2200      	movs	r2, #0
 80156aa:	2104      	movs	r1, #4
 80156ac:	f7ff ff94 	bl	80155d8 <std>
 80156b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80156b4:	2201      	movs	r2, #1
 80156b6:	2109      	movs	r1, #9
 80156b8:	f7ff ff8e 	bl	80155d8 <std>
 80156bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80156c0:	2202      	movs	r2, #2
 80156c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156c6:	2112      	movs	r1, #18
 80156c8:	f7ff bf86 	b.w	80155d8 <std>
 80156cc:	200133ec 	.word	0x200133ec
 80156d0:	200132b4 	.word	0x200132b4
 80156d4:	08015645 	.word	0x08015645

080156d8 <__sfp_lock_acquire>:
 80156d8:	4801      	ldr	r0, [pc, #4]	@ (80156e0 <__sfp_lock_acquire+0x8>)
 80156da:	f000 baa8 	b.w	8015c2e <__retarget_lock_acquire_recursive>
 80156de:	bf00      	nop
 80156e0:	200133f5 	.word	0x200133f5

080156e4 <__sfp_lock_release>:
 80156e4:	4801      	ldr	r0, [pc, #4]	@ (80156ec <__sfp_lock_release+0x8>)
 80156e6:	f000 baa3 	b.w	8015c30 <__retarget_lock_release_recursive>
 80156ea:	bf00      	nop
 80156ec:	200133f5 	.word	0x200133f5

080156f0 <__sinit>:
 80156f0:	b510      	push	{r4, lr}
 80156f2:	4604      	mov	r4, r0
 80156f4:	f7ff fff0 	bl	80156d8 <__sfp_lock_acquire>
 80156f8:	6a23      	ldr	r3, [r4, #32]
 80156fa:	b11b      	cbz	r3, 8015704 <__sinit+0x14>
 80156fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015700:	f7ff bff0 	b.w	80156e4 <__sfp_lock_release>
 8015704:	4b04      	ldr	r3, [pc, #16]	@ (8015718 <__sinit+0x28>)
 8015706:	6223      	str	r3, [r4, #32]
 8015708:	4b04      	ldr	r3, [pc, #16]	@ (801571c <__sinit+0x2c>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1f5      	bne.n	80156fc <__sinit+0xc>
 8015710:	f7ff ffc4 	bl	801569c <global_stdio_init.part.0>
 8015714:	e7f2      	b.n	80156fc <__sinit+0xc>
 8015716:	bf00      	nop
 8015718:	0801565d 	.word	0x0801565d
 801571c:	200133ec 	.word	0x200133ec

08015720 <_fwalk_sglue>:
 8015720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015724:	4607      	mov	r7, r0
 8015726:	4688      	mov	r8, r1
 8015728:	4614      	mov	r4, r2
 801572a:	2600      	movs	r6, #0
 801572c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015730:	f1b9 0901 	subs.w	r9, r9, #1
 8015734:	d505      	bpl.n	8015742 <_fwalk_sglue+0x22>
 8015736:	6824      	ldr	r4, [r4, #0]
 8015738:	2c00      	cmp	r4, #0
 801573a:	d1f7      	bne.n	801572c <_fwalk_sglue+0xc>
 801573c:	4630      	mov	r0, r6
 801573e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015742:	89ab      	ldrh	r3, [r5, #12]
 8015744:	2b01      	cmp	r3, #1
 8015746:	d907      	bls.n	8015758 <_fwalk_sglue+0x38>
 8015748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801574c:	3301      	adds	r3, #1
 801574e:	d003      	beq.n	8015758 <_fwalk_sglue+0x38>
 8015750:	4629      	mov	r1, r5
 8015752:	4638      	mov	r0, r7
 8015754:	47c0      	blx	r8
 8015756:	4306      	orrs	r6, r0
 8015758:	3568      	adds	r5, #104	@ 0x68
 801575a:	e7e9      	b.n	8015730 <_fwalk_sglue+0x10>

0801575c <iprintf>:
 801575c:	b40f      	push	{r0, r1, r2, r3}
 801575e:	b507      	push	{r0, r1, r2, lr}
 8015760:	4906      	ldr	r1, [pc, #24]	@ (801577c <iprintf+0x20>)
 8015762:	ab04      	add	r3, sp, #16
 8015764:	6808      	ldr	r0, [r1, #0]
 8015766:	f853 2b04 	ldr.w	r2, [r3], #4
 801576a:	6881      	ldr	r1, [r0, #8]
 801576c:	9301      	str	r3, [sp, #4]
 801576e:	f001 fe1d 	bl	80173ac <_vfiprintf_r>
 8015772:	b003      	add	sp, #12
 8015774:	f85d eb04 	ldr.w	lr, [sp], #4
 8015778:	b004      	add	sp, #16
 801577a:	4770      	bx	lr
 801577c:	200001a8 	.word	0x200001a8

08015780 <_puts_r>:
 8015780:	6a03      	ldr	r3, [r0, #32]
 8015782:	b570      	push	{r4, r5, r6, lr}
 8015784:	6884      	ldr	r4, [r0, #8]
 8015786:	4605      	mov	r5, r0
 8015788:	460e      	mov	r6, r1
 801578a:	b90b      	cbnz	r3, 8015790 <_puts_r+0x10>
 801578c:	f7ff ffb0 	bl	80156f0 <__sinit>
 8015790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015792:	07db      	lsls	r3, r3, #31
 8015794:	d405      	bmi.n	80157a2 <_puts_r+0x22>
 8015796:	89a3      	ldrh	r3, [r4, #12]
 8015798:	0598      	lsls	r0, r3, #22
 801579a:	d402      	bmi.n	80157a2 <_puts_r+0x22>
 801579c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801579e:	f000 fa46 	bl	8015c2e <__retarget_lock_acquire_recursive>
 80157a2:	89a3      	ldrh	r3, [r4, #12]
 80157a4:	0719      	lsls	r1, r3, #28
 80157a6:	d502      	bpl.n	80157ae <_puts_r+0x2e>
 80157a8:	6923      	ldr	r3, [r4, #16]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d135      	bne.n	801581a <_puts_r+0x9a>
 80157ae:	4621      	mov	r1, r4
 80157b0:	4628      	mov	r0, r5
 80157b2:	f000 f94b 	bl	8015a4c <__swsetup_r>
 80157b6:	b380      	cbz	r0, 801581a <_puts_r+0x9a>
 80157b8:	f04f 35ff 	mov.w	r5, #4294967295
 80157bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157be:	07da      	lsls	r2, r3, #31
 80157c0:	d405      	bmi.n	80157ce <_puts_r+0x4e>
 80157c2:	89a3      	ldrh	r3, [r4, #12]
 80157c4:	059b      	lsls	r3, r3, #22
 80157c6:	d402      	bmi.n	80157ce <_puts_r+0x4e>
 80157c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157ca:	f000 fa31 	bl	8015c30 <__retarget_lock_release_recursive>
 80157ce:	4628      	mov	r0, r5
 80157d0:	bd70      	pop	{r4, r5, r6, pc}
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	da04      	bge.n	80157e0 <_puts_r+0x60>
 80157d6:	69a2      	ldr	r2, [r4, #24]
 80157d8:	429a      	cmp	r2, r3
 80157da:	dc17      	bgt.n	801580c <_puts_r+0x8c>
 80157dc:	290a      	cmp	r1, #10
 80157de:	d015      	beq.n	801580c <_puts_r+0x8c>
 80157e0:	6823      	ldr	r3, [r4, #0]
 80157e2:	1c5a      	adds	r2, r3, #1
 80157e4:	6022      	str	r2, [r4, #0]
 80157e6:	7019      	strb	r1, [r3, #0]
 80157e8:	68a3      	ldr	r3, [r4, #8]
 80157ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80157ee:	3b01      	subs	r3, #1
 80157f0:	60a3      	str	r3, [r4, #8]
 80157f2:	2900      	cmp	r1, #0
 80157f4:	d1ed      	bne.n	80157d2 <_puts_r+0x52>
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	da11      	bge.n	801581e <_puts_r+0x9e>
 80157fa:	4622      	mov	r2, r4
 80157fc:	210a      	movs	r1, #10
 80157fe:	4628      	mov	r0, r5
 8015800:	f000 f8e5 	bl	80159ce <__swbuf_r>
 8015804:	3001      	adds	r0, #1
 8015806:	d0d7      	beq.n	80157b8 <_puts_r+0x38>
 8015808:	250a      	movs	r5, #10
 801580a:	e7d7      	b.n	80157bc <_puts_r+0x3c>
 801580c:	4622      	mov	r2, r4
 801580e:	4628      	mov	r0, r5
 8015810:	f000 f8dd 	bl	80159ce <__swbuf_r>
 8015814:	3001      	adds	r0, #1
 8015816:	d1e7      	bne.n	80157e8 <_puts_r+0x68>
 8015818:	e7ce      	b.n	80157b8 <_puts_r+0x38>
 801581a:	3e01      	subs	r6, #1
 801581c:	e7e4      	b.n	80157e8 <_puts_r+0x68>
 801581e:	6823      	ldr	r3, [r4, #0]
 8015820:	1c5a      	adds	r2, r3, #1
 8015822:	6022      	str	r2, [r4, #0]
 8015824:	220a      	movs	r2, #10
 8015826:	701a      	strb	r2, [r3, #0]
 8015828:	e7ee      	b.n	8015808 <_puts_r+0x88>
	...

0801582c <puts>:
 801582c:	4b02      	ldr	r3, [pc, #8]	@ (8015838 <puts+0xc>)
 801582e:	4601      	mov	r1, r0
 8015830:	6818      	ldr	r0, [r3, #0]
 8015832:	f7ff bfa5 	b.w	8015780 <_puts_r>
 8015836:	bf00      	nop
 8015838:	200001a8 	.word	0x200001a8

0801583c <sniprintf>:
 801583c:	b40c      	push	{r2, r3}
 801583e:	b530      	push	{r4, r5, lr}
 8015840:	4b18      	ldr	r3, [pc, #96]	@ (80158a4 <sniprintf+0x68>)
 8015842:	1e0c      	subs	r4, r1, #0
 8015844:	681d      	ldr	r5, [r3, #0]
 8015846:	b09d      	sub	sp, #116	@ 0x74
 8015848:	da08      	bge.n	801585c <sniprintf+0x20>
 801584a:	238b      	movs	r3, #139	@ 0x8b
 801584c:	602b      	str	r3, [r5, #0]
 801584e:	f04f 30ff 	mov.w	r0, #4294967295
 8015852:	b01d      	add	sp, #116	@ 0x74
 8015854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015858:	b002      	add	sp, #8
 801585a:	4770      	bx	lr
 801585c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015860:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015864:	f04f 0300 	mov.w	r3, #0
 8015868:	931b      	str	r3, [sp, #108]	@ 0x6c
 801586a:	bf14      	ite	ne
 801586c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015870:	4623      	moveq	r3, r4
 8015872:	9304      	str	r3, [sp, #16]
 8015874:	9307      	str	r3, [sp, #28]
 8015876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801587a:	9002      	str	r0, [sp, #8]
 801587c:	9006      	str	r0, [sp, #24]
 801587e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015882:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015884:	ab21      	add	r3, sp, #132	@ 0x84
 8015886:	a902      	add	r1, sp, #8
 8015888:	4628      	mov	r0, r5
 801588a:	9301      	str	r3, [sp, #4]
 801588c:	f001 fa98 	bl	8016dc0 <_svfiprintf_r>
 8015890:	1c43      	adds	r3, r0, #1
 8015892:	bfbc      	itt	lt
 8015894:	238b      	movlt	r3, #139	@ 0x8b
 8015896:	602b      	strlt	r3, [r5, #0]
 8015898:	2c00      	cmp	r4, #0
 801589a:	d0da      	beq.n	8015852 <sniprintf+0x16>
 801589c:	9b02      	ldr	r3, [sp, #8]
 801589e:	2200      	movs	r2, #0
 80158a0:	701a      	strb	r2, [r3, #0]
 80158a2:	e7d6      	b.n	8015852 <sniprintf+0x16>
 80158a4:	200001a8 	.word	0x200001a8

080158a8 <siprintf>:
 80158a8:	b40e      	push	{r1, r2, r3}
 80158aa:	b510      	push	{r4, lr}
 80158ac:	b09d      	sub	sp, #116	@ 0x74
 80158ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80158b0:	9002      	str	r0, [sp, #8]
 80158b2:	9006      	str	r0, [sp, #24]
 80158b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80158b8:	480a      	ldr	r0, [pc, #40]	@ (80158e4 <siprintf+0x3c>)
 80158ba:	9107      	str	r1, [sp, #28]
 80158bc:	9104      	str	r1, [sp, #16]
 80158be:	490a      	ldr	r1, [pc, #40]	@ (80158e8 <siprintf+0x40>)
 80158c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80158c4:	9105      	str	r1, [sp, #20]
 80158c6:	2400      	movs	r4, #0
 80158c8:	a902      	add	r1, sp, #8
 80158ca:	6800      	ldr	r0, [r0, #0]
 80158cc:	9301      	str	r3, [sp, #4]
 80158ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80158d0:	f001 fa76 	bl	8016dc0 <_svfiprintf_r>
 80158d4:	9b02      	ldr	r3, [sp, #8]
 80158d6:	701c      	strb	r4, [r3, #0]
 80158d8:	b01d      	add	sp, #116	@ 0x74
 80158da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158de:	b003      	add	sp, #12
 80158e0:	4770      	bx	lr
 80158e2:	bf00      	nop
 80158e4:	200001a8 	.word	0x200001a8
 80158e8:	ffff0208 	.word	0xffff0208

080158ec <siscanf>:
 80158ec:	b40e      	push	{r1, r2, r3}
 80158ee:	b570      	push	{r4, r5, r6, lr}
 80158f0:	b09d      	sub	sp, #116	@ 0x74
 80158f2:	ac21      	add	r4, sp, #132	@ 0x84
 80158f4:	2500      	movs	r5, #0
 80158f6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80158fa:	f854 6b04 	ldr.w	r6, [r4], #4
 80158fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015902:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015904:	9002      	str	r0, [sp, #8]
 8015906:	9006      	str	r0, [sp, #24]
 8015908:	f7f2 fc8c 	bl	8008224 <strlen>
 801590c:	4b0b      	ldr	r3, [pc, #44]	@ (801593c <siscanf+0x50>)
 801590e:	9003      	str	r0, [sp, #12]
 8015910:	9007      	str	r0, [sp, #28]
 8015912:	480b      	ldr	r0, [pc, #44]	@ (8015940 <siscanf+0x54>)
 8015914:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015916:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801591a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801591e:	4632      	mov	r2, r6
 8015920:	4623      	mov	r3, r4
 8015922:	a902      	add	r1, sp, #8
 8015924:	6800      	ldr	r0, [r0, #0]
 8015926:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015928:	9514      	str	r5, [sp, #80]	@ 0x50
 801592a:	9401      	str	r4, [sp, #4]
 801592c:	f001 fb9e 	bl	801706c <__ssvfiscanf_r>
 8015930:	b01d      	add	sp, #116	@ 0x74
 8015932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015936:	b003      	add	sp, #12
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop
 801593c:	08015967 	.word	0x08015967
 8015940:	200001a8 	.word	0x200001a8

08015944 <__sread>:
 8015944:	b510      	push	{r4, lr}
 8015946:	460c      	mov	r4, r1
 8015948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801594c:	f000 f910 	bl	8015b70 <_read_r>
 8015950:	2800      	cmp	r0, #0
 8015952:	bfab      	itete	ge
 8015954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015956:	89a3      	ldrhlt	r3, [r4, #12]
 8015958:	181b      	addge	r3, r3, r0
 801595a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801595e:	bfac      	ite	ge
 8015960:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015962:	81a3      	strhlt	r3, [r4, #12]
 8015964:	bd10      	pop	{r4, pc}

08015966 <__seofread>:
 8015966:	2000      	movs	r0, #0
 8015968:	4770      	bx	lr

0801596a <__swrite>:
 801596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801596e:	461f      	mov	r7, r3
 8015970:	898b      	ldrh	r3, [r1, #12]
 8015972:	05db      	lsls	r3, r3, #23
 8015974:	4605      	mov	r5, r0
 8015976:	460c      	mov	r4, r1
 8015978:	4616      	mov	r6, r2
 801597a:	d505      	bpl.n	8015988 <__swrite+0x1e>
 801597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015980:	2302      	movs	r3, #2
 8015982:	2200      	movs	r2, #0
 8015984:	f000 f8e2 	bl	8015b4c <_lseek_r>
 8015988:	89a3      	ldrh	r3, [r4, #12]
 801598a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801598e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015992:	81a3      	strh	r3, [r4, #12]
 8015994:	4632      	mov	r2, r6
 8015996:	463b      	mov	r3, r7
 8015998:	4628      	mov	r0, r5
 801599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801599e:	f000 b909 	b.w	8015bb4 <_write_r>

080159a2 <__sseek>:
 80159a2:	b510      	push	{r4, lr}
 80159a4:	460c      	mov	r4, r1
 80159a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159aa:	f000 f8cf 	bl	8015b4c <_lseek_r>
 80159ae:	1c43      	adds	r3, r0, #1
 80159b0:	89a3      	ldrh	r3, [r4, #12]
 80159b2:	bf15      	itete	ne
 80159b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80159b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80159ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80159be:	81a3      	strheq	r3, [r4, #12]
 80159c0:	bf18      	it	ne
 80159c2:	81a3      	strhne	r3, [r4, #12]
 80159c4:	bd10      	pop	{r4, pc}

080159c6 <__sclose>:
 80159c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ca:	f000 b8af 	b.w	8015b2c <_close_r>

080159ce <__swbuf_r>:
 80159ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d0:	460e      	mov	r6, r1
 80159d2:	4614      	mov	r4, r2
 80159d4:	4605      	mov	r5, r0
 80159d6:	b118      	cbz	r0, 80159e0 <__swbuf_r+0x12>
 80159d8:	6a03      	ldr	r3, [r0, #32]
 80159da:	b90b      	cbnz	r3, 80159e0 <__swbuf_r+0x12>
 80159dc:	f7ff fe88 	bl	80156f0 <__sinit>
 80159e0:	69a3      	ldr	r3, [r4, #24]
 80159e2:	60a3      	str	r3, [r4, #8]
 80159e4:	89a3      	ldrh	r3, [r4, #12]
 80159e6:	071a      	lsls	r2, r3, #28
 80159e8:	d501      	bpl.n	80159ee <__swbuf_r+0x20>
 80159ea:	6923      	ldr	r3, [r4, #16]
 80159ec:	b943      	cbnz	r3, 8015a00 <__swbuf_r+0x32>
 80159ee:	4621      	mov	r1, r4
 80159f0:	4628      	mov	r0, r5
 80159f2:	f000 f82b 	bl	8015a4c <__swsetup_r>
 80159f6:	b118      	cbz	r0, 8015a00 <__swbuf_r+0x32>
 80159f8:	f04f 37ff 	mov.w	r7, #4294967295
 80159fc:	4638      	mov	r0, r7
 80159fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	6922      	ldr	r2, [r4, #16]
 8015a04:	1a98      	subs	r0, r3, r2
 8015a06:	6963      	ldr	r3, [r4, #20]
 8015a08:	b2f6      	uxtb	r6, r6
 8015a0a:	4283      	cmp	r3, r0
 8015a0c:	4637      	mov	r7, r6
 8015a0e:	dc05      	bgt.n	8015a1c <__swbuf_r+0x4e>
 8015a10:	4621      	mov	r1, r4
 8015a12:	4628      	mov	r0, r5
 8015a14:	f002 f940 	bl	8017c98 <_fflush_r>
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d1ed      	bne.n	80159f8 <__swbuf_r+0x2a>
 8015a1c:	68a3      	ldr	r3, [r4, #8]
 8015a1e:	3b01      	subs	r3, #1
 8015a20:	60a3      	str	r3, [r4, #8]
 8015a22:	6823      	ldr	r3, [r4, #0]
 8015a24:	1c5a      	adds	r2, r3, #1
 8015a26:	6022      	str	r2, [r4, #0]
 8015a28:	701e      	strb	r6, [r3, #0]
 8015a2a:	6962      	ldr	r2, [r4, #20]
 8015a2c:	1c43      	adds	r3, r0, #1
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d004      	beq.n	8015a3c <__swbuf_r+0x6e>
 8015a32:	89a3      	ldrh	r3, [r4, #12]
 8015a34:	07db      	lsls	r3, r3, #31
 8015a36:	d5e1      	bpl.n	80159fc <__swbuf_r+0x2e>
 8015a38:	2e0a      	cmp	r6, #10
 8015a3a:	d1df      	bne.n	80159fc <__swbuf_r+0x2e>
 8015a3c:	4621      	mov	r1, r4
 8015a3e:	4628      	mov	r0, r5
 8015a40:	f002 f92a 	bl	8017c98 <_fflush_r>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	d0d9      	beq.n	80159fc <__swbuf_r+0x2e>
 8015a48:	e7d6      	b.n	80159f8 <__swbuf_r+0x2a>
	...

08015a4c <__swsetup_r>:
 8015a4c:	b538      	push	{r3, r4, r5, lr}
 8015a4e:	4b29      	ldr	r3, [pc, #164]	@ (8015af4 <__swsetup_r+0xa8>)
 8015a50:	4605      	mov	r5, r0
 8015a52:	6818      	ldr	r0, [r3, #0]
 8015a54:	460c      	mov	r4, r1
 8015a56:	b118      	cbz	r0, 8015a60 <__swsetup_r+0x14>
 8015a58:	6a03      	ldr	r3, [r0, #32]
 8015a5a:	b90b      	cbnz	r3, 8015a60 <__swsetup_r+0x14>
 8015a5c:	f7ff fe48 	bl	80156f0 <__sinit>
 8015a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a64:	0719      	lsls	r1, r3, #28
 8015a66:	d422      	bmi.n	8015aae <__swsetup_r+0x62>
 8015a68:	06da      	lsls	r2, r3, #27
 8015a6a:	d407      	bmi.n	8015a7c <__swsetup_r+0x30>
 8015a6c:	2209      	movs	r2, #9
 8015a6e:	602a      	str	r2, [r5, #0]
 8015a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a74:	81a3      	strh	r3, [r4, #12]
 8015a76:	f04f 30ff 	mov.w	r0, #4294967295
 8015a7a:	e033      	b.n	8015ae4 <__swsetup_r+0x98>
 8015a7c:	0758      	lsls	r0, r3, #29
 8015a7e:	d512      	bpl.n	8015aa6 <__swsetup_r+0x5a>
 8015a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a82:	b141      	cbz	r1, 8015a96 <__swsetup_r+0x4a>
 8015a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a88:	4299      	cmp	r1, r3
 8015a8a:	d002      	beq.n	8015a92 <__swsetup_r+0x46>
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	f000 f8e7 	bl	8015c60 <_free_r>
 8015a92:	2300      	movs	r3, #0
 8015a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a96:	89a3      	ldrh	r3, [r4, #12]
 8015a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015a9c:	81a3      	strh	r3, [r4, #12]
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	6063      	str	r3, [r4, #4]
 8015aa2:	6923      	ldr	r3, [r4, #16]
 8015aa4:	6023      	str	r3, [r4, #0]
 8015aa6:	89a3      	ldrh	r3, [r4, #12]
 8015aa8:	f043 0308 	orr.w	r3, r3, #8
 8015aac:	81a3      	strh	r3, [r4, #12]
 8015aae:	6923      	ldr	r3, [r4, #16]
 8015ab0:	b94b      	cbnz	r3, 8015ac6 <__swsetup_r+0x7a>
 8015ab2:	89a3      	ldrh	r3, [r4, #12]
 8015ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015abc:	d003      	beq.n	8015ac6 <__swsetup_r+0x7a>
 8015abe:	4621      	mov	r1, r4
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	f002 f937 	bl	8017d34 <__smakebuf_r>
 8015ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aca:	f013 0201 	ands.w	r2, r3, #1
 8015ace:	d00a      	beq.n	8015ae6 <__swsetup_r+0x9a>
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	60a2      	str	r2, [r4, #8]
 8015ad4:	6962      	ldr	r2, [r4, #20]
 8015ad6:	4252      	negs	r2, r2
 8015ad8:	61a2      	str	r2, [r4, #24]
 8015ada:	6922      	ldr	r2, [r4, #16]
 8015adc:	b942      	cbnz	r2, 8015af0 <__swsetup_r+0xa4>
 8015ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015ae2:	d1c5      	bne.n	8015a70 <__swsetup_r+0x24>
 8015ae4:	bd38      	pop	{r3, r4, r5, pc}
 8015ae6:	0799      	lsls	r1, r3, #30
 8015ae8:	bf58      	it	pl
 8015aea:	6962      	ldrpl	r2, [r4, #20]
 8015aec:	60a2      	str	r2, [r4, #8]
 8015aee:	e7f4      	b.n	8015ada <__swsetup_r+0x8e>
 8015af0:	2000      	movs	r0, #0
 8015af2:	e7f7      	b.n	8015ae4 <__swsetup_r+0x98>
 8015af4:	200001a8 	.word	0x200001a8

08015af8 <memset>:
 8015af8:	4402      	add	r2, r0
 8015afa:	4603      	mov	r3, r0
 8015afc:	4293      	cmp	r3, r2
 8015afe:	d100      	bne.n	8015b02 <memset+0xa>
 8015b00:	4770      	bx	lr
 8015b02:	f803 1b01 	strb.w	r1, [r3], #1
 8015b06:	e7f9      	b.n	8015afc <memset+0x4>

08015b08 <strncmp>:
 8015b08:	b510      	push	{r4, lr}
 8015b0a:	b16a      	cbz	r2, 8015b28 <strncmp+0x20>
 8015b0c:	3901      	subs	r1, #1
 8015b0e:	1884      	adds	r4, r0, r2
 8015b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d103      	bne.n	8015b24 <strncmp+0x1c>
 8015b1c:	42a0      	cmp	r0, r4
 8015b1e:	d001      	beq.n	8015b24 <strncmp+0x1c>
 8015b20:	2a00      	cmp	r2, #0
 8015b22:	d1f5      	bne.n	8015b10 <strncmp+0x8>
 8015b24:	1ad0      	subs	r0, r2, r3
 8015b26:	bd10      	pop	{r4, pc}
 8015b28:	4610      	mov	r0, r2
 8015b2a:	e7fc      	b.n	8015b26 <strncmp+0x1e>

08015b2c <_close_r>:
 8015b2c:	b538      	push	{r3, r4, r5, lr}
 8015b2e:	4d06      	ldr	r5, [pc, #24]	@ (8015b48 <_close_r+0x1c>)
 8015b30:	2300      	movs	r3, #0
 8015b32:	4604      	mov	r4, r0
 8015b34:	4608      	mov	r0, r1
 8015b36:	602b      	str	r3, [r5, #0]
 8015b38:	f7f7 fe5e 	bl	800d7f8 <_close>
 8015b3c:	1c43      	adds	r3, r0, #1
 8015b3e:	d102      	bne.n	8015b46 <_close_r+0x1a>
 8015b40:	682b      	ldr	r3, [r5, #0]
 8015b42:	b103      	cbz	r3, 8015b46 <_close_r+0x1a>
 8015b44:	6023      	str	r3, [r4, #0]
 8015b46:	bd38      	pop	{r3, r4, r5, pc}
 8015b48:	200133f0 	.word	0x200133f0

08015b4c <_lseek_r>:
 8015b4c:	b538      	push	{r3, r4, r5, lr}
 8015b4e:	4d07      	ldr	r5, [pc, #28]	@ (8015b6c <_lseek_r+0x20>)
 8015b50:	4604      	mov	r4, r0
 8015b52:	4608      	mov	r0, r1
 8015b54:	4611      	mov	r1, r2
 8015b56:	2200      	movs	r2, #0
 8015b58:	602a      	str	r2, [r5, #0]
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	f7f7 fe73 	bl	800d846 <_lseek>
 8015b60:	1c43      	adds	r3, r0, #1
 8015b62:	d102      	bne.n	8015b6a <_lseek_r+0x1e>
 8015b64:	682b      	ldr	r3, [r5, #0]
 8015b66:	b103      	cbz	r3, 8015b6a <_lseek_r+0x1e>
 8015b68:	6023      	str	r3, [r4, #0]
 8015b6a:	bd38      	pop	{r3, r4, r5, pc}
 8015b6c:	200133f0 	.word	0x200133f0

08015b70 <_read_r>:
 8015b70:	b538      	push	{r3, r4, r5, lr}
 8015b72:	4d07      	ldr	r5, [pc, #28]	@ (8015b90 <_read_r+0x20>)
 8015b74:	4604      	mov	r4, r0
 8015b76:	4608      	mov	r0, r1
 8015b78:	4611      	mov	r1, r2
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	602a      	str	r2, [r5, #0]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	f7f7 fe01 	bl	800d786 <_read>
 8015b84:	1c43      	adds	r3, r0, #1
 8015b86:	d102      	bne.n	8015b8e <_read_r+0x1e>
 8015b88:	682b      	ldr	r3, [r5, #0]
 8015b8a:	b103      	cbz	r3, 8015b8e <_read_r+0x1e>
 8015b8c:	6023      	str	r3, [r4, #0]
 8015b8e:	bd38      	pop	{r3, r4, r5, pc}
 8015b90:	200133f0 	.word	0x200133f0

08015b94 <_sbrk_r>:
 8015b94:	b538      	push	{r3, r4, r5, lr}
 8015b96:	4d06      	ldr	r5, [pc, #24]	@ (8015bb0 <_sbrk_r+0x1c>)
 8015b98:	2300      	movs	r3, #0
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	4608      	mov	r0, r1
 8015b9e:	602b      	str	r3, [r5, #0]
 8015ba0:	f002 fb30 	bl	8018204 <_sbrk>
 8015ba4:	1c43      	adds	r3, r0, #1
 8015ba6:	d102      	bne.n	8015bae <_sbrk_r+0x1a>
 8015ba8:	682b      	ldr	r3, [r5, #0]
 8015baa:	b103      	cbz	r3, 8015bae <_sbrk_r+0x1a>
 8015bac:	6023      	str	r3, [r4, #0]
 8015bae:	bd38      	pop	{r3, r4, r5, pc}
 8015bb0:	200133f0 	.word	0x200133f0

08015bb4 <_write_r>:
 8015bb4:	b538      	push	{r3, r4, r5, lr}
 8015bb6:	4d07      	ldr	r5, [pc, #28]	@ (8015bd4 <_write_r+0x20>)
 8015bb8:	4604      	mov	r4, r0
 8015bba:	4608      	mov	r0, r1
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	602a      	str	r2, [r5, #0]
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	f7f7 fdfc 	bl	800d7c0 <_write>
 8015bc8:	1c43      	adds	r3, r0, #1
 8015bca:	d102      	bne.n	8015bd2 <_write_r+0x1e>
 8015bcc:	682b      	ldr	r3, [r5, #0]
 8015bce:	b103      	cbz	r3, 8015bd2 <_write_r+0x1e>
 8015bd0:	6023      	str	r3, [r4, #0]
 8015bd2:	bd38      	pop	{r3, r4, r5, pc}
 8015bd4:	200133f0 	.word	0x200133f0

08015bd8 <__errno>:
 8015bd8:	4b01      	ldr	r3, [pc, #4]	@ (8015be0 <__errno+0x8>)
 8015bda:	6818      	ldr	r0, [r3, #0]
 8015bdc:	4770      	bx	lr
 8015bde:	bf00      	nop
 8015be0:	200001a8 	.word	0x200001a8

08015be4 <__libc_init_array>:
 8015be4:	b570      	push	{r4, r5, r6, lr}
 8015be6:	4d0d      	ldr	r5, [pc, #52]	@ (8015c1c <__libc_init_array+0x38>)
 8015be8:	4c0d      	ldr	r4, [pc, #52]	@ (8015c20 <__libc_init_array+0x3c>)
 8015bea:	1b64      	subs	r4, r4, r5
 8015bec:	10a4      	asrs	r4, r4, #2
 8015bee:	2600      	movs	r6, #0
 8015bf0:	42a6      	cmp	r6, r4
 8015bf2:	d109      	bne.n	8015c08 <__libc_init_array+0x24>
 8015bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8015c24 <__libc_init_array+0x40>)
 8015bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8015c28 <__libc_init_array+0x44>)
 8015bf8:	f002 fb12 	bl	8018220 <_init>
 8015bfc:	1b64      	subs	r4, r4, r5
 8015bfe:	10a4      	asrs	r4, r4, #2
 8015c00:	2600      	movs	r6, #0
 8015c02:	42a6      	cmp	r6, r4
 8015c04:	d105      	bne.n	8015c12 <__libc_init_array+0x2e>
 8015c06:	bd70      	pop	{r4, r5, r6, pc}
 8015c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c0c:	4798      	blx	r3
 8015c0e:	3601      	adds	r6, #1
 8015c10:	e7ee      	b.n	8015bf0 <__libc_init_array+0xc>
 8015c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c16:	4798      	blx	r3
 8015c18:	3601      	adds	r6, #1
 8015c1a:	e7f2      	b.n	8015c02 <__libc_init_array+0x1e>
 8015c1c:	0801a498 	.word	0x0801a498
 8015c20:	0801a498 	.word	0x0801a498
 8015c24:	0801a498 	.word	0x0801a498
 8015c28:	0801a49c 	.word	0x0801a49c

08015c2c <__retarget_lock_init_recursive>:
 8015c2c:	4770      	bx	lr

08015c2e <__retarget_lock_acquire_recursive>:
 8015c2e:	4770      	bx	lr

08015c30 <__retarget_lock_release_recursive>:
 8015c30:	4770      	bx	lr

08015c32 <memcpy>:
 8015c32:	440a      	add	r2, r1
 8015c34:	4291      	cmp	r1, r2
 8015c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8015c3a:	d100      	bne.n	8015c3e <memcpy+0xc>
 8015c3c:	4770      	bx	lr
 8015c3e:	b510      	push	{r4, lr}
 8015c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c48:	4291      	cmp	r1, r2
 8015c4a:	d1f9      	bne.n	8015c40 <memcpy+0xe>
 8015c4c:	bd10      	pop	{r4, pc}
	...

08015c50 <nan>:
 8015c50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015c58 <nan+0x8>
 8015c54:	4770      	bx	lr
 8015c56:	bf00      	nop
 8015c58:	00000000 	.word	0x00000000
 8015c5c:	7ff80000 	.word	0x7ff80000

08015c60 <_free_r>:
 8015c60:	b538      	push	{r3, r4, r5, lr}
 8015c62:	4605      	mov	r5, r0
 8015c64:	2900      	cmp	r1, #0
 8015c66:	d041      	beq.n	8015cec <_free_r+0x8c>
 8015c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c6c:	1f0c      	subs	r4, r1, #4
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	bfb8      	it	lt
 8015c72:	18e4      	addlt	r4, r4, r3
 8015c74:	f7fe fe60 	bl	8014938 <__malloc_lock>
 8015c78:	4a1d      	ldr	r2, [pc, #116]	@ (8015cf0 <_free_r+0x90>)
 8015c7a:	6813      	ldr	r3, [r2, #0]
 8015c7c:	b933      	cbnz	r3, 8015c8c <_free_r+0x2c>
 8015c7e:	6063      	str	r3, [r4, #4]
 8015c80:	6014      	str	r4, [r2, #0]
 8015c82:	4628      	mov	r0, r5
 8015c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c88:	f7fe be5c 	b.w	8014944 <__malloc_unlock>
 8015c8c:	42a3      	cmp	r3, r4
 8015c8e:	d908      	bls.n	8015ca2 <_free_r+0x42>
 8015c90:	6820      	ldr	r0, [r4, #0]
 8015c92:	1821      	adds	r1, r4, r0
 8015c94:	428b      	cmp	r3, r1
 8015c96:	bf01      	itttt	eq
 8015c98:	6819      	ldreq	r1, [r3, #0]
 8015c9a:	685b      	ldreq	r3, [r3, #4]
 8015c9c:	1809      	addeq	r1, r1, r0
 8015c9e:	6021      	streq	r1, [r4, #0]
 8015ca0:	e7ed      	b.n	8015c7e <_free_r+0x1e>
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	b10b      	cbz	r3, 8015cac <_free_r+0x4c>
 8015ca8:	42a3      	cmp	r3, r4
 8015caa:	d9fa      	bls.n	8015ca2 <_free_r+0x42>
 8015cac:	6811      	ldr	r1, [r2, #0]
 8015cae:	1850      	adds	r0, r2, r1
 8015cb0:	42a0      	cmp	r0, r4
 8015cb2:	d10b      	bne.n	8015ccc <_free_r+0x6c>
 8015cb4:	6820      	ldr	r0, [r4, #0]
 8015cb6:	4401      	add	r1, r0
 8015cb8:	1850      	adds	r0, r2, r1
 8015cba:	4283      	cmp	r3, r0
 8015cbc:	6011      	str	r1, [r2, #0]
 8015cbe:	d1e0      	bne.n	8015c82 <_free_r+0x22>
 8015cc0:	6818      	ldr	r0, [r3, #0]
 8015cc2:	685b      	ldr	r3, [r3, #4]
 8015cc4:	6053      	str	r3, [r2, #4]
 8015cc6:	4408      	add	r0, r1
 8015cc8:	6010      	str	r0, [r2, #0]
 8015cca:	e7da      	b.n	8015c82 <_free_r+0x22>
 8015ccc:	d902      	bls.n	8015cd4 <_free_r+0x74>
 8015cce:	230c      	movs	r3, #12
 8015cd0:	602b      	str	r3, [r5, #0]
 8015cd2:	e7d6      	b.n	8015c82 <_free_r+0x22>
 8015cd4:	6820      	ldr	r0, [r4, #0]
 8015cd6:	1821      	adds	r1, r4, r0
 8015cd8:	428b      	cmp	r3, r1
 8015cda:	bf04      	itt	eq
 8015cdc:	6819      	ldreq	r1, [r3, #0]
 8015cde:	685b      	ldreq	r3, [r3, #4]
 8015ce0:	6063      	str	r3, [r4, #4]
 8015ce2:	bf04      	itt	eq
 8015ce4:	1809      	addeq	r1, r1, r0
 8015ce6:	6021      	streq	r1, [r4, #0]
 8015ce8:	6054      	str	r4, [r2, #4]
 8015cea:	e7ca      	b.n	8015c82 <_free_r+0x22>
 8015cec:	bd38      	pop	{r3, r4, r5, pc}
 8015cee:	bf00      	nop
 8015cf0:	200132b0 	.word	0x200132b0

08015cf4 <rshift>:
 8015cf4:	6903      	ldr	r3, [r0, #16]
 8015cf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015d02:	f100 0414 	add.w	r4, r0, #20
 8015d06:	dd45      	ble.n	8015d94 <rshift+0xa0>
 8015d08:	f011 011f 	ands.w	r1, r1, #31
 8015d0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015d10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015d14:	d10c      	bne.n	8015d30 <rshift+0x3c>
 8015d16:	f100 0710 	add.w	r7, r0, #16
 8015d1a:	4629      	mov	r1, r5
 8015d1c:	42b1      	cmp	r1, r6
 8015d1e:	d334      	bcc.n	8015d8a <rshift+0x96>
 8015d20:	1a9b      	subs	r3, r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	1eea      	subs	r2, r5, #3
 8015d26:	4296      	cmp	r6, r2
 8015d28:	bf38      	it	cc
 8015d2a:	2300      	movcc	r3, #0
 8015d2c:	4423      	add	r3, r4
 8015d2e:	e015      	b.n	8015d5c <rshift+0x68>
 8015d30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015d34:	f1c1 0820 	rsb	r8, r1, #32
 8015d38:	40cf      	lsrs	r7, r1
 8015d3a:	f105 0e04 	add.w	lr, r5, #4
 8015d3e:	46a1      	mov	r9, r4
 8015d40:	4576      	cmp	r6, lr
 8015d42:	46f4      	mov	ip, lr
 8015d44:	d815      	bhi.n	8015d72 <rshift+0x7e>
 8015d46:	1a9a      	subs	r2, r3, r2
 8015d48:	0092      	lsls	r2, r2, #2
 8015d4a:	3a04      	subs	r2, #4
 8015d4c:	3501      	adds	r5, #1
 8015d4e:	42ae      	cmp	r6, r5
 8015d50:	bf38      	it	cc
 8015d52:	2200      	movcc	r2, #0
 8015d54:	18a3      	adds	r3, r4, r2
 8015d56:	50a7      	str	r7, [r4, r2]
 8015d58:	b107      	cbz	r7, 8015d5c <rshift+0x68>
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	1b1a      	subs	r2, r3, r4
 8015d5e:	42a3      	cmp	r3, r4
 8015d60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015d64:	bf08      	it	eq
 8015d66:	2300      	moveq	r3, #0
 8015d68:	6102      	str	r2, [r0, #16]
 8015d6a:	bf08      	it	eq
 8015d6c:	6143      	streq	r3, [r0, #20]
 8015d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d72:	f8dc c000 	ldr.w	ip, [ip]
 8015d76:	fa0c fc08 	lsl.w	ip, ip, r8
 8015d7a:	ea4c 0707 	orr.w	r7, ip, r7
 8015d7e:	f849 7b04 	str.w	r7, [r9], #4
 8015d82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015d86:	40cf      	lsrs	r7, r1
 8015d88:	e7da      	b.n	8015d40 <rshift+0x4c>
 8015d8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8015d8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015d92:	e7c3      	b.n	8015d1c <rshift+0x28>
 8015d94:	4623      	mov	r3, r4
 8015d96:	e7e1      	b.n	8015d5c <rshift+0x68>

08015d98 <__hexdig_fun>:
 8015d98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015d9c:	2b09      	cmp	r3, #9
 8015d9e:	d802      	bhi.n	8015da6 <__hexdig_fun+0xe>
 8015da0:	3820      	subs	r0, #32
 8015da2:	b2c0      	uxtb	r0, r0
 8015da4:	4770      	bx	lr
 8015da6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015daa:	2b05      	cmp	r3, #5
 8015dac:	d801      	bhi.n	8015db2 <__hexdig_fun+0x1a>
 8015dae:	3847      	subs	r0, #71	@ 0x47
 8015db0:	e7f7      	b.n	8015da2 <__hexdig_fun+0xa>
 8015db2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015db6:	2b05      	cmp	r3, #5
 8015db8:	d801      	bhi.n	8015dbe <__hexdig_fun+0x26>
 8015dba:	3827      	subs	r0, #39	@ 0x27
 8015dbc:	e7f1      	b.n	8015da2 <__hexdig_fun+0xa>
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	4770      	bx	lr
	...

08015dc4 <__gethex>:
 8015dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dc8:	b085      	sub	sp, #20
 8015dca:	468a      	mov	sl, r1
 8015dcc:	9302      	str	r3, [sp, #8]
 8015dce:	680b      	ldr	r3, [r1, #0]
 8015dd0:	9001      	str	r0, [sp, #4]
 8015dd2:	4690      	mov	r8, r2
 8015dd4:	1c9c      	adds	r4, r3, #2
 8015dd6:	46a1      	mov	r9, r4
 8015dd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015ddc:	2830      	cmp	r0, #48	@ 0x30
 8015dde:	d0fa      	beq.n	8015dd6 <__gethex+0x12>
 8015de0:	eba9 0303 	sub.w	r3, r9, r3
 8015de4:	f1a3 0b02 	sub.w	fp, r3, #2
 8015de8:	f7ff ffd6 	bl	8015d98 <__hexdig_fun>
 8015dec:	4605      	mov	r5, r0
 8015dee:	2800      	cmp	r0, #0
 8015df0:	d168      	bne.n	8015ec4 <__gethex+0x100>
 8015df2:	49a0      	ldr	r1, [pc, #640]	@ (8016074 <__gethex+0x2b0>)
 8015df4:	2201      	movs	r2, #1
 8015df6:	4648      	mov	r0, r9
 8015df8:	f7ff fe86 	bl	8015b08 <strncmp>
 8015dfc:	4607      	mov	r7, r0
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	d167      	bne.n	8015ed2 <__gethex+0x10e>
 8015e02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015e06:	4626      	mov	r6, r4
 8015e08:	f7ff ffc6 	bl	8015d98 <__hexdig_fun>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	d062      	beq.n	8015ed6 <__gethex+0x112>
 8015e10:	4623      	mov	r3, r4
 8015e12:	7818      	ldrb	r0, [r3, #0]
 8015e14:	2830      	cmp	r0, #48	@ 0x30
 8015e16:	4699      	mov	r9, r3
 8015e18:	f103 0301 	add.w	r3, r3, #1
 8015e1c:	d0f9      	beq.n	8015e12 <__gethex+0x4e>
 8015e1e:	f7ff ffbb 	bl	8015d98 <__hexdig_fun>
 8015e22:	fab0 f580 	clz	r5, r0
 8015e26:	096d      	lsrs	r5, r5, #5
 8015e28:	f04f 0b01 	mov.w	fp, #1
 8015e2c:	464a      	mov	r2, r9
 8015e2e:	4616      	mov	r6, r2
 8015e30:	3201      	adds	r2, #1
 8015e32:	7830      	ldrb	r0, [r6, #0]
 8015e34:	f7ff ffb0 	bl	8015d98 <__hexdig_fun>
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	d1f8      	bne.n	8015e2e <__gethex+0x6a>
 8015e3c:	498d      	ldr	r1, [pc, #564]	@ (8016074 <__gethex+0x2b0>)
 8015e3e:	2201      	movs	r2, #1
 8015e40:	4630      	mov	r0, r6
 8015e42:	f7ff fe61 	bl	8015b08 <strncmp>
 8015e46:	2800      	cmp	r0, #0
 8015e48:	d13f      	bne.n	8015eca <__gethex+0x106>
 8015e4a:	b944      	cbnz	r4, 8015e5e <__gethex+0x9a>
 8015e4c:	1c74      	adds	r4, r6, #1
 8015e4e:	4622      	mov	r2, r4
 8015e50:	4616      	mov	r6, r2
 8015e52:	3201      	adds	r2, #1
 8015e54:	7830      	ldrb	r0, [r6, #0]
 8015e56:	f7ff ff9f 	bl	8015d98 <__hexdig_fun>
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	d1f8      	bne.n	8015e50 <__gethex+0x8c>
 8015e5e:	1ba4      	subs	r4, r4, r6
 8015e60:	00a7      	lsls	r7, r4, #2
 8015e62:	7833      	ldrb	r3, [r6, #0]
 8015e64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015e68:	2b50      	cmp	r3, #80	@ 0x50
 8015e6a:	d13e      	bne.n	8015eea <__gethex+0x126>
 8015e6c:	7873      	ldrb	r3, [r6, #1]
 8015e6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015e70:	d033      	beq.n	8015eda <__gethex+0x116>
 8015e72:	2b2d      	cmp	r3, #45	@ 0x2d
 8015e74:	d034      	beq.n	8015ee0 <__gethex+0x11c>
 8015e76:	1c71      	adds	r1, r6, #1
 8015e78:	2400      	movs	r4, #0
 8015e7a:	7808      	ldrb	r0, [r1, #0]
 8015e7c:	f7ff ff8c 	bl	8015d98 <__hexdig_fun>
 8015e80:	1e43      	subs	r3, r0, #1
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	2b18      	cmp	r3, #24
 8015e86:	d830      	bhi.n	8015eea <__gethex+0x126>
 8015e88:	f1a0 0210 	sub.w	r2, r0, #16
 8015e8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015e90:	f7ff ff82 	bl	8015d98 <__hexdig_fun>
 8015e94:	f100 3cff 	add.w	ip, r0, #4294967295
 8015e98:	fa5f fc8c 	uxtb.w	ip, ip
 8015e9c:	f1bc 0f18 	cmp.w	ip, #24
 8015ea0:	f04f 030a 	mov.w	r3, #10
 8015ea4:	d91e      	bls.n	8015ee4 <__gethex+0x120>
 8015ea6:	b104      	cbz	r4, 8015eaa <__gethex+0xe6>
 8015ea8:	4252      	negs	r2, r2
 8015eaa:	4417      	add	r7, r2
 8015eac:	f8ca 1000 	str.w	r1, [sl]
 8015eb0:	b1ed      	cbz	r5, 8015eee <__gethex+0x12a>
 8015eb2:	f1bb 0f00 	cmp.w	fp, #0
 8015eb6:	bf0c      	ite	eq
 8015eb8:	2506      	moveq	r5, #6
 8015eba:	2500      	movne	r5, #0
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	b005      	add	sp, #20
 8015ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec4:	2500      	movs	r5, #0
 8015ec6:	462c      	mov	r4, r5
 8015ec8:	e7b0      	b.n	8015e2c <__gethex+0x68>
 8015eca:	2c00      	cmp	r4, #0
 8015ecc:	d1c7      	bne.n	8015e5e <__gethex+0x9a>
 8015ece:	4627      	mov	r7, r4
 8015ed0:	e7c7      	b.n	8015e62 <__gethex+0x9e>
 8015ed2:	464e      	mov	r6, r9
 8015ed4:	462f      	mov	r7, r5
 8015ed6:	2501      	movs	r5, #1
 8015ed8:	e7c3      	b.n	8015e62 <__gethex+0x9e>
 8015eda:	2400      	movs	r4, #0
 8015edc:	1cb1      	adds	r1, r6, #2
 8015ede:	e7cc      	b.n	8015e7a <__gethex+0xb6>
 8015ee0:	2401      	movs	r4, #1
 8015ee2:	e7fb      	b.n	8015edc <__gethex+0x118>
 8015ee4:	fb03 0002 	mla	r0, r3, r2, r0
 8015ee8:	e7ce      	b.n	8015e88 <__gethex+0xc4>
 8015eea:	4631      	mov	r1, r6
 8015eec:	e7de      	b.n	8015eac <__gethex+0xe8>
 8015eee:	eba6 0309 	sub.w	r3, r6, r9
 8015ef2:	3b01      	subs	r3, #1
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	2b07      	cmp	r3, #7
 8015ef8:	dc0a      	bgt.n	8015f10 <__gethex+0x14c>
 8015efa:	9801      	ldr	r0, [sp, #4]
 8015efc:	f000 fa46 	bl	801638c <_Balloc>
 8015f00:	4604      	mov	r4, r0
 8015f02:	b940      	cbnz	r0, 8015f16 <__gethex+0x152>
 8015f04:	4b5c      	ldr	r3, [pc, #368]	@ (8016078 <__gethex+0x2b4>)
 8015f06:	4602      	mov	r2, r0
 8015f08:	21e4      	movs	r1, #228	@ 0xe4
 8015f0a:	485c      	ldr	r0, [pc, #368]	@ (801607c <__gethex+0x2b8>)
 8015f0c:	f001 fffe 	bl	8017f0c <__assert_func>
 8015f10:	3101      	adds	r1, #1
 8015f12:	105b      	asrs	r3, r3, #1
 8015f14:	e7ef      	b.n	8015ef6 <__gethex+0x132>
 8015f16:	f100 0a14 	add.w	sl, r0, #20
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	4655      	mov	r5, sl
 8015f1e:	469b      	mov	fp, r3
 8015f20:	45b1      	cmp	r9, r6
 8015f22:	d337      	bcc.n	8015f94 <__gethex+0x1d0>
 8015f24:	f845 bb04 	str.w	fp, [r5], #4
 8015f28:	eba5 050a 	sub.w	r5, r5, sl
 8015f2c:	10ad      	asrs	r5, r5, #2
 8015f2e:	6125      	str	r5, [r4, #16]
 8015f30:	4658      	mov	r0, fp
 8015f32:	f000 fb1d 	bl	8016570 <__hi0bits>
 8015f36:	016d      	lsls	r5, r5, #5
 8015f38:	f8d8 6000 	ldr.w	r6, [r8]
 8015f3c:	1a2d      	subs	r5, r5, r0
 8015f3e:	42b5      	cmp	r5, r6
 8015f40:	dd54      	ble.n	8015fec <__gethex+0x228>
 8015f42:	1bad      	subs	r5, r5, r6
 8015f44:	4629      	mov	r1, r5
 8015f46:	4620      	mov	r0, r4
 8015f48:	f000 fea9 	bl	8016c9e <__any_on>
 8015f4c:	4681      	mov	r9, r0
 8015f4e:	b178      	cbz	r0, 8015f70 <__gethex+0x1ac>
 8015f50:	1e6b      	subs	r3, r5, #1
 8015f52:	1159      	asrs	r1, r3, #5
 8015f54:	f003 021f 	and.w	r2, r3, #31
 8015f58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015f5c:	f04f 0901 	mov.w	r9, #1
 8015f60:	fa09 f202 	lsl.w	r2, r9, r2
 8015f64:	420a      	tst	r2, r1
 8015f66:	d003      	beq.n	8015f70 <__gethex+0x1ac>
 8015f68:	454b      	cmp	r3, r9
 8015f6a:	dc36      	bgt.n	8015fda <__gethex+0x216>
 8015f6c:	f04f 0902 	mov.w	r9, #2
 8015f70:	4629      	mov	r1, r5
 8015f72:	4620      	mov	r0, r4
 8015f74:	f7ff febe 	bl	8015cf4 <rshift>
 8015f78:	442f      	add	r7, r5
 8015f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f7e:	42bb      	cmp	r3, r7
 8015f80:	da42      	bge.n	8016008 <__gethex+0x244>
 8015f82:	9801      	ldr	r0, [sp, #4]
 8015f84:	4621      	mov	r1, r4
 8015f86:	f000 fa41 	bl	801640c <_Bfree>
 8015f8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	6013      	str	r3, [r2, #0]
 8015f90:	25a3      	movs	r5, #163	@ 0xa3
 8015f92:	e793      	b.n	8015ebc <__gethex+0xf8>
 8015f94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015f98:	2a2e      	cmp	r2, #46	@ 0x2e
 8015f9a:	d012      	beq.n	8015fc2 <__gethex+0x1fe>
 8015f9c:	2b20      	cmp	r3, #32
 8015f9e:	d104      	bne.n	8015faa <__gethex+0x1e6>
 8015fa0:	f845 bb04 	str.w	fp, [r5], #4
 8015fa4:	f04f 0b00 	mov.w	fp, #0
 8015fa8:	465b      	mov	r3, fp
 8015faa:	7830      	ldrb	r0, [r6, #0]
 8015fac:	9303      	str	r3, [sp, #12]
 8015fae:	f7ff fef3 	bl	8015d98 <__hexdig_fun>
 8015fb2:	9b03      	ldr	r3, [sp, #12]
 8015fb4:	f000 000f 	and.w	r0, r0, #15
 8015fb8:	4098      	lsls	r0, r3
 8015fba:	ea4b 0b00 	orr.w	fp, fp, r0
 8015fbe:	3304      	adds	r3, #4
 8015fc0:	e7ae      	b.n	8015f20 <__gethex+0x15c>
 8015fc2:	45b1      	cmp	r9, r6
 8015fc4:	d8ea      	bhi.n	8015f9c <__gethex+0x1d8>
 8015fc6:	492b      	ldr	r1, [pc, #172]	@ (8016074 <__gethex+0x2b0>)
 8015fc8:	9303      	str	r3, [sp, #12]
 8015fca:	2201      	movs	r2, #1
 8015fcc:	4630      	mov	r0, r6
 8015fce:	f7ff fd9b 	bl	8015b08 <strncmp>
 8015fd2:	9b03      	ldr	r3, [sp, #12]
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d1e1      	bne.n	8015f9c <__gethex+0x1d8>
 8015fd8:	e7a2      	b.n	8015f20 <__gethex+0x15c>
 8015fda:	1ea9      	subs	r1, r5, #2
 8015fdc:	4620      	mov	r0, r4
 8015fde:	f000 fe5e 	bl	8016c9e <__any_on>
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	d0c2      	beq.n	8015f6c <__gethex+0x1a8>
 8015fe6:	f04f 0903 	mov.w	r9, #3
 8015fea:	e7c1      	b.n	8015f70 <__gethex+0x1ac>
 8015fec:	da09      	bge.n	8016002 <__gethex+0x23e>
 8015fee:	1b75      	subs	r5, r6, r5
 8015ff0:	4621      	mov	r1, r4
 8015ff2:	9801      	ldr	r0, [sp, #4]
 8015ff4:	462a      	mov	r2, r5
 8015ff6:	f000 fc19 	bl	801682c <__lshift>
 8015ffa:	1b7f      	subs	r7, r7, r5
 8015ffc:	4604      	mov	r4, r0
 8015ffe:	f100 0a14 	add.w	sl, r0, #20
 8016002:	f04f 0900 	mov.w	r9, #0
 8016006:	e7b8      	b.n	8015f7a <__gethex+0x1b6>
 8016008:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801600c:	42bd      	cmp	r5, r7
 801600e:	dd6f      	ble.n	80160f0 <__gethex+0x32c>
 8016010:	1bed      	subs	r5, r5, r7
 8016012:	42ae      	cmp	r6, r5
 8016014:	dc34      	bgt.n	8016080 <__gethex+0x2bc>
 8016016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801601a:	2b02      	cmp	r3, #2
 801601c:	d022      	beq.n	8016064 <__gethex+0x2a0>
 801601e:	2b03      	cmp	r3, #3
 8016020:	d024      	beq.n	801606c <__gethex+0x2a8>
 8016022:	2b01      	cmp	r3, #1
 8016024:	d115      	bne.n	8016052 <__gethex+0x28e>
 8016026:	42ae      	cmp	r6, r5
 8016028:	d113      	bne.n	8016052 <__gethex+0x28e>
 801602a:	2e01      	cmp	r6, #1
 801602c:	d10b      	bne.n	8016046 <__gethex+0x282>
 801602e:	9a02      	ldr	r2, [sp, #8]
 8016030:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016034:	6013      	str	r3, [r2, #0]
 8016036:	2301      	movs	r3, #1
 8016038:	6123      	str	r3, [r4, #16]
 801603a:	f8ca 3000 	str.w	r3, [sl]
 801603e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016040:	2562      	movs	r5, #98	@ 0x62
 8016042:	601c      	str	r4, [r3, #0]
 8016044:	e73a      	b.n	8015ebc <__gethex+0xf8>
 8016046:	1e71      	subs	r1, r6, #1
 8016048:	4620      	mov	r0, r4
 801604a:	f000 fe28 	bl	8016c9e <__any_on>
 801604e:	2800      	cmp	r0, #0
 8016050:	d1ed      	bne.n	801602e <__gethex+0x26a>
 8016052:	9801      	ldr	r0, [sp, #4]
 8016054:	4621      	mov	r1, r4
 8016056:	f000 f9d9 	bl	801640c <_Bfree>
 801605a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801605c:	2300      	movs	r3, #0
 801605e:	6013      	str	r3, [r2, #0]
 8016060:	2550      	movs	r5, #80	@ 0x50
 8016062:	e72b      	b.n	8015ebc <__gethex+0xf8>
 8016064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016066:	2b00      	cmp	r3, #0
 8016068:	d1f3      	bne.n	8016052 <__gethex+0x28e>
 801606a:	e7e0      	b.n	801602e <__gethex+0x26a>
 801606c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1dd      	bne.n	801602e <__gethex+0x26a>
 8016072:	e7ee      	b.n	8016052 <__gethex+0x28e>
 8016074:	0801a0bc 	.word	0x0801a0bc
 8016078:	0801a0d2 	.word	0x0801a0d2
 801607c:	0801a0e3 	.word	0x0801a0e3
 8016080:	1e6f      	subs	r7, r5, #1
 8016082:	f1b9 0f00 	cmp.w	r9, #0
 8016086:	d130      	bne.n	80160ea <__gethex+0x326>
 8016088:	b127      	cbz	r7, 8016094 <__gethex+0x2d0>
 801608a:	4639      	mov	r1, r7
 801608c:	4620      	mov	r0, r4
 801608e:	f000 fe06 	bl	8016c9e <__any_on>
 8016092:	4681      	mov	r9, r0
 8016094:	117a      	asrs	r2, r7, #5
 8016096:	2301      	movs	r3, #1
 8016098:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801609c:	f007 071f 	and.w	r7, r7, #31
 80160a0:	40bb      	lsls	r3, r7
 80160a2:	4213      	tst	r3, r2
 80160a4:	4629      	mov	r1, r5
 80160a6:	4620      	mov	r0, r4
 80160a8:	bf18      	it	ne
 80160aa:	f049 0902 	orrne.w	r9, r9, #2
 80160ae:	f7ff fe21 	bl	8015cf4 <rshift>
 80160b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80160b6:	1b76      	subs	r6, r6, r5
 80160b8:	2502      	movs	r5, #2
 80160ba:	f1b9 0f00 	cmp.w	r9, #0
 80160be:	d047      	beq.n	8016150 <__gethex+0x38c>
 80160c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80160c4:	2b02      	cmp	r3, #2
 80160c6:	d015      	beq.n	80160f4 <__gethex+0x330>
 80160c8:	2b03      	cmp	r3, #3
 80160ca:	d017      	beq.n	80160fc <__gethex+0x338>
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d109      	bne.n	80160e4 <__gethex+0x320>
 80160d0:	f019 0f02 	tst.w	r9, #2
 80160d4:	d006      	beq.n	80160e4 <__gethex+0x320>
 80160d6:	f8da 3000 	ldr.w	r3, [sl]
 80160da:	ea49 0903 	orr.w	r9, r9, r3
 80160de:	f019 0f01 	tst.w	r9, #1
 80160e2:	d10e      	bne.n	8016102 <__gethex+0x33e>
 80160e4:	f045 0510 	orr.w	r5, r5, #16
 80160e8:	e032      	b.n	8016150 <__gethex+0x38c>
 80160ea:	f04f 0901 	mov.w	r9, #1
 80160ee:	e7d1      	b.n	8016094 <__gethex+0x2d0>
 80160f0:	2501      	movs	r5, #1
 80160f2:	e7e2      	b.n	80160ba <__gethex+0x2f6>
 80160f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160f6:	f1c3 0301 	rsb	r3, r3, #1
 80160fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80160fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d0f0      	beq.n	80160e4 <__gethex+0x320>
 8016102:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016106:	f104 0314 	add.w	r3, r4, #20
 801610a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801610e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016112:	f04f 0c00 	mov.w	ip, #0
 8016116:	4618      	mov	r0, r3
 8016118:	f853 2b04 	ldr.w	r2, [r3], #4
 801611c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016120:	d01b      	beq.n	801615a <__gethex+0x396>
 8016122:	3201      	adds	r2, #1
 8016124:	6002      	str	r2, [r0, #0]
 8016126:	2d02      	cmp	r5, #2
 8016128:	f104 0314 	add.w	r3, r4, #20
 801612c:	d13c      	bne.n	80161a8 <__gethex+0x3e4>
 801612e:	f8d8 2000 	ldr.w	r2, [r8]
 8016132:	3a01      	subs	r2, #1
 8016134:	42b2      	cmp	r2, r6
 8016136:	d109      	bne.n	801614c <__gethex+0x388>
 8016138:	1171      	asrs	r1, r6, #5
 801613a:	2201      	movs	r2, #1
 801613c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016140:	f006 061f 	and.w	r6, r6, #31
 8016144:	fa02 f606 	lsl.w	r6, r2, r6
 8016148:	421e      	tst	r6, r3
 801614a:	d13a      	bne.n	80161c2 <__gethex+0x3fe>
 801614c:	f045 0520 	orr.w	r5, r5, #32
 8016150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016152:	601c      	str	r4, [r3, #0]
 8016154:	9b02      	ldr	r3, [sp, #8]
 8016156:	601f      	str	r7, [r3, #0]
 8016158:	e6b0      	b.n	8015ebc <__gethex+0xf8>
 801615a:	4299      	cmp	r1, r3
 801615c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016160:	d8d9      	bhi.n	8016116 <__gethex+0x352>
 8016162:	68a3      	ldr	r3, [r4, #8]
 8016164:	459b      	cmp	fp, r3
 8016166:	db17      	blt.n	8016198 <__gethex+0x3d4>
 8016168:	6861      	ldr	r1, [r4, #4]
 801616a:	9801      	ldr	r0, [sp, #4]
 801616c:	3101      	adds	r1, #1
 801616e:	f000 f90d 	bl	801638c <_Balloc>
 8016172:	4681      	mov	r9, r0
 8016174:	b918      	cbnz	r0, 801617e <__gethex+0x3ba>
 8016176:	4b1a      	ldr	r3, [pc, #104]	@ (80161e0 <__gethex+0x41c>)
 8016178:	4602      	mov	r2, r0
 801617a:	2184      	movs	r1, #132	@ 0x84
 801617c:	e6c5      	b.n	8015f0a <__gethex+0x146>
 801617e:	6922      	ldr	r2, [r4, #16]
 8016180:	3202      	adds	r2, #2
 8016182:	f104 010c 	add.w	r1, r4, #12
 8016186:	0092      	lsls	r2, r2, #2
 8016188:	300c      	adds	r0, #12
 801618a:	f7ff fd52 	bl	8015c32 <memcpy>
 801618e:	4621      	mov	r1, r4
 8016190:	9801      	ldr	r0, [sp, #4]
 8016192:	f000 f93b 	bl	801640c <_Bfree>
 8016196:	464c      	mov	r4, r9
 8016198:	6923      	ldr	r3, [r4, #16]
 801619a:	1c5a      	adds	r2, r3, #1
 801619c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80161a0:	6122      	str	r2, [r4, #16]
 80161a2:	2201      	movs	r2, #1
 80161a4:	615a      	str	r2, [r3, #20]
 80161a6:	e7be      	b.n	8016126 <__gethex+0x362>
 80161a8:	6922      	ldr	r2, [r4, #16]
 80161aa:	455a      	cmp	r2, fp
 80161ac:	dd0b      	ble.n	80161c6 <__gethex+0x402>
 80161ae:	2101      	movs	r1, #1
 80161b0:	4620      	mov	r0, r4
 80161b2:	f7ff fd9f 	bl	8015cf4 <rshift>
 80161b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80161ba:	3701      	adds	r7, #1
 80161bc:	42bb      	cmp	r3, r7
 80161be:	f6ff aee0 	blt.w	8015f82 <__gethex+0x1be>
 80161c2:	2501      	movs	r5, #1
 80161c4:	e7c2      	b.n	801614c <__gethex+0x388>
 80161c6:	f016 061f 	ands.w	r6, r6, #31
 80161ca:	d0fa      	beq.n	80161c2 <__gethex+0x3fe>
 80161cc:	4453      	add	r3, sl
 80161ce:	f1c6 0620 	rsb	r6, r6, #32
 80161d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80161d6:	f000 f9cb 	bl	8016570 <__hi0bits>
 80161da:	42b0      	cmp	r0, r6
 80161dc:	dbe7      	blt.n	80161ae <__gethex+0x3ea>
 80161de:	e7f0      	b.n	80161c2 <__gethex+0x3fe>
 80161e0:	0801a0d2 	.word	0x0801a0d2

080161e4 <L_shift>:
 80161e4:	f1c2 0208 	rsb	r2, r2, #8
 80161e8:	0092      	lsls	r2, r2, #2
 80161ea:	b570      	push	{r4, r5, r6, lr}
 80161ec:	f1c2 0620 	rsb	r6, r2, #32
 80161f0:	6843      	ldr	r3, [r0, #4]
 80161f2:	6804      	ldr	r4, [r0, #0]
 80161f4:	fa03 f506 	lsl.w	r5, r3, r6
 80161f8:	432c      	orrs	r4, r5
 80161fa:	40d3      	lsrs	r3, r2
 80161fc:	6004      	str	r4, [r0, #0]
 80161fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8016202:	4288      	cmp	r0, r1
 8016204:	d3f4      	bcc.n	80161f0 <L_shift+0xc>
 8016206:	bd70      	pop	{r4, r5, r6, pc}

08016208 <__match>:
 8016208:	b530      	push	{r4, r5, lr}
 801620a:	6803      	ldr	r3, [r0, #0]
 801620c:	3301      	adds	r3, #1
 801620e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016212:	b914      	cbnz	r4, 801621a <__match+0x12>
 8016214:	6003      	str	r3, [r0, #0]
 8016216:	2001      	movs	r0, #1
 8016218:	bd30      	pop	{r4, r5, pc}
 801621a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801621e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016222:	2d19      	cmp	r5, #25
 8016224:	bf98      	it	ls
 8016226:	3220      	addls	r2, #32
 8016228:	42a2      	cmp	r2, r4
 801622a:	d0f0      	beq.n	801620e <__match+0x6>
 801622c:	2000      	movs	r0, #0
 801622e:	e7f3      	b.n	8016218 <__match+0x10>

08016230 <__hexnan>:
 8016230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016234:	680b      	ldr	r3, [r1, #0]
 8016236:	6801      	ldr	r1, [r0, #0]
 8016238:	115e      	asrs	r6, r3, #5
 801623a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801623e:	f013 031f 	ands.w	r3, r3, #31
 8016242:	b087      	sub	sp, #28
 8016244:	bf18      	it	ne
 8016246:	3604      	addne	r6, #4
 8016248:	2500      	movs	r5, #0
 801624a:	1f37      	subs	r7, r6, #4
 801624c:	4682      	mov	sl, r0
 801624e:	4690      	mov	r8, r2
 8016250:	9301      	str	r3, [sp, #4]
 8016252:	f846 5c04 	str.w	r5, [r6, #-4]
 8016256:	46b9      	mov	r9, r7
 8016258:	463c      	mov	r4, r7
 801625a:	9502      	str	r5, [sp, #8]
 801625c:	46ab      	mov	fp, r5
 801625e:	784a      	ldrb	r2, [r1, #1]
 8016260:	1c4b      	adds	r3, r1, #1
 8016262:	9303      	str	r3, [sp, #12]
 8016264:	b342      	cbz	r2, 80162b8 <__hexnan+0x88>
 8016266:	4610      	mov	r0, r2
 8016268:	9105      	str	r1, [sp, #20]
 801626a:	9204      	str	r2, [sp, #16]
 801626c:	f7ff fd94 	bl	8015d98 <__hexdig_fun>
 8016270:	2800      	cmp	r0, #0
 8016272:	d151      	bne.n	8016318 <__hexnan+0xe8>
 8016274:	9a04      	ldr	r2, [sp, #16]
 8016276:	9905      	ldr	r1, [sp, #20]
 8016278:	2a20      	cmp	r2, #32
 801627a:	d818      	bhi.n	80162ae <__hexnan+0x7e>
 801627c:	9b02      	ldr	r3, [sp, #8]
 801627e:	459b      	cmp	fp, r3
 8016280:	dd13      	ble.n	80162aa <__hexnan+0x7a>
 8016282:	454c      	cmp	r4, r9
 8016284:	d206      	bcs.n	8016294 <__hexnan+0x64>
 8016286:	2d07      	cmp	r5, #7
 8016288:	dc04      	bgt.n	8016294 <__hexnan+0x64>
 801628a:	462a      	mov	r2, r5
 801628c:	4649      	mov	r1, r9
 801628e:	4620      	mov	r0, r4
 8016290:	f7ff ffa8 	bl	80161e4 <L_shift>
 8016294:	4544      	cmp	r4, r8
 8016296:	d952      	bls.n	801633e <__hexnan+0x10e>
 8016298:	2300      	movs	r3, #0
 801629a:	f1a4 0904 	sub.w	r9, r4, #4
 801629e:	f844 3c04 	str.w	r3, [r4, #-4]
 80162a2:	f8cd b008 	str.w	fp, [sp, #8]
 80162a6:	464c      	mov	r4, r9
 80162a8:	461d      	mov	r5, r3
 80162aa:	9903      	ldr	r1, [sp, #12]
 80162ac:	e7d7      	b.n	801625e <__hexnan+0x2e>
 80162ae:	2a29      	cmp	r2, #41	@ 0x29
 80162b0:	d157      	bne.n	8016362 <__hexnan+0x132>
 80162b2:	3102      	adds	r1, #2
 80162b4:	f8ca 1000 	str.w	r1, [sl]
 80162b8:	f1bb 0f00 	cmp.w	fp, #0
 80162bc:	d051      	beq.n	8016362 <__hexnan+0x132>
 80162be:	454c      	cmp	r4, r9
 80162c0:	d206      	bcs.n	80162d0 <__hexnan+0xa0>
 80162c2:	2d07      	cmp	r5, #7
 80162c4:	dc04      	bgt.n	80162d0 <__hexnan+0xa0>
 80162c6:	462a      	mov	r2, r5
 80162c8:	4649      	mov	r1, r9
 80162ca:	4620      	mov	r0, r4
 80162cc:	f7ff ff8a 	bl	80161e4 <L_shift>
 80162d0:	4544      	cmp	r4, r8
 80162d2:	d936      	bls.n	8016342 <__hexnan+0x112>
 80162d4:	f1a8 0204 	sub.w	r2, r8, #4
 80162d8:	4623      	mov	r3, r4
 80162da:	f853 1b04 	ldr.w	r1, [r3], #4
 80162de:	f842 1f04 	str.w	r1, [r2, #4]!
 80162e2:	429f      	cmp	r7, r3
 80162e4:	d2f9      	bcs.n	80162da <__hexnan+0xaa>
 80162e6:	1b3b      	subs	r3, r7, r4
 80162e8:	f023 0303 	bic.w	r3, r3, #3
 80162ec:	3304      	adds	r3, #4
 80162ee:	3401      	adds	r4, #1
 80162f0:	3e03      	subs	r6, #3
 80162f2:	42b4      	cmp	r4, r6
 80162f4:	bf88      	it	hi
 80162f6:	2304      	movhi	r3, #4
 80162f8:	4443      	add	r3, r8
 80162fa:	2200      	movs	r2, #0
 80162fc:	f843 2b04 	str.w	r2, [r3], #4
 8016300:	429f      	cmp	r7, r3
 8016302:	d2fb      	bcs.n	80162fc <__hexnan+0xcc>
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	b91b      	cbnz	r3, 8016310 <__hexnan+0xe0>
 8016308:	4547      	cmp	r7, r8
 801630a:	d128      	bne.n	801635e <__hexnan+0x12e>
 801630c:	2301      	movs	r3, #1
 801630e:	603b      	str	r3, [r7, #0]
 8016310:	2005      	movs	r0, #5
 8016312:	b007      	add	sp, #28
 8016314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016318:	3501      	adds	r5, #1
 801631a:	2d08      	cmp	r5, #8
 801631c:	f10b 0b01 	add.w	fp, fp, #1
 8016320:	dd06      	ble.n	8016330 <__hexnan+0x100>
 8016322:	4544      	cmp	r4, r8
 8016324:	d9c1      	bls.n	80162aa <__hexnan+0x7a>
 8016326:	2300      	movs	r3, #0
 8016328:	f844 3c04 	str.w	r3, [r4, #-4]
 801632c:	2501      	movs	r5, #1
 801632e:	3c04      	subs	r4, #4
 8016330:	6822      	ldr	r2, [r4, #0]
 8016332:	f000 000f 	and.w	r0, r0, #15
 8016336:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801633a:	6020      	str	r0, [r4, #0]
 801633c:	e7b5      	b.n	80162aa <__hexnan+0x7a>
 801633e:	2508      	movs	r5, #8
 8016340:	e7b3      	b.n	80162aa <__hexnan+0x7a>
 8016342:	9b01      	ldr	r3, [sp, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d0dd      	beq.n	8016304 <__hexnan+0xd4>
 8016348:	f1c3 0320 	rsb	r3, r3, #32
 801634c:	f04f 32ff 	mov.w	r2, #4294967295
 8016350:	40da      	lsrs	r2, r3
 8016352:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016356:	4013      	ands	r3, r2
 8016358:	f846 3c04 	str.w	r3, [r6, #-4]
 801635c:	e7d2      	b.n	8016304 <__hexnan+0xd4>
 801635e:	3f04      	subs	r7, #4
 8016360:	e7d0      	b.n	8016304 <__hexnan+0xd4>
 8016362:	2004      	movs	r0, #4
 8016364:	e7d5      	b.n	8016312 <__hexnan+0xe2>

08016366 <__ascii_mbtowc>:
 8016366:	b082      	sub	sp, #8
 8016368:	b901      	cbnz	r1, 801636c <__ascii_mbtowc+0x6>
 801636a:	a901      	add	r1, sp, #4
 801636c:	b142      	cbz	r2, 8016380 <__ascii_mbtowc+0x1a>
 801636e:	b14b      	cbz	r3, 8016384 <__ascii_mbtowc+0x1e>
 8016370:	7813      	ldrb	r3, [r2, #0]
 8016372:	600b      	str	r3, [r1, #0]
 8016374:	7812      	ldrb	r2, [r2, #0]
 8016376:	1e10      	subs	r0, r2, #0
 8016378:	bf18      	it	ne
 801637a:	2001      	movne	r0, #1
 801637c:	b002      	add	sp, #8
 801637e:	4770      	bx	lr
 8016380:	4610      	mov	r0, r2
 8016382:	e7fb      	b.n	801637c <__ascii_mbtowc+0x16>
 8016384:	f06f 0001 	mvn.w	r0, #1
 8016388:	e7f8      	b.n	801637c <__ascii_mbtowc+0x16>
	...

0801638c <_Balloc>:
 801638c:	b570      	push	{r4, r5, r6, lr}
 801638e:	69c6      	ldr	r6, [r0, #28]
 8016390:	4604      	mov	r4, r0
 8016392:	460d      	mov	r5, r1
 8016394:	b976      	cbnz	r6, 80163b4 <_Balloc+0x28>
 8016396:	2010      	movs	r0, #16
 8016398:	f7fe fa1c 	bl	80147d4 <malloc>
 801639c:	4602      	mov	r2, r0
 801639e:	61e0      	str	r0, [r4, #28]
 80163a0:	b920      	cbnz	r0, 80163ac <_Balloc+0x20>
 80163a2:	4b18      	ldr	r3, [pc, #96]	@ (8016404 <_Balloc+0x78>)
 80163a4:	4818      	ldr	r0, [pc, #96]	@ (8016408 <_Balloc+0x7c>)
 80163a6:	216b      	movs	r1, #107	@ 0x6b
 80163a8:	f001 fdb0 	bl	8017f0c <__assert_func>
 80163ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80163b0:	6006      	str	r6, [r0, #0]
 80163b2:	60c6      	str	r6, [r0, #12]
 80163b4:	69e6      	ldr	r6, [r4, #28]
 80163b6:	68f3      	ldr	r3, [r6, #12]
 80163b8:	b183      	cbz	r3, 80163dc <_Balloc+0x50>
 80163ba:	69e3      	ldr	r3, [r4, #28]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80163c2:	b9b8      	cbnz	r0, 80163f4 <_Balloc+0x68>
 80163c4:	2101      	movs	r1, #1
 80163c6:	fa01 f605 	lsl.w	r6, r1, r5
 80163ca:	1d72      	adds	r2, r6, #5
 80163cc:	0092      	lsls	r2, r2, #2
 80163ce:	4620      	mov	r0, r4
 80163d0:	f001 fdba 	bl	8017f48 <_calloc_r>
 80163d4:	b160      	cbz	r0, 80163f0 <_Balloc+0x64>
 80163d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80163da:	e00e      	b.n	80163fa <_Balloc+0x6e>
 80163dc:	2221      	movs	r2, #33	@ 0x21
 80163de:	2104      	movs	r1, #4
 80163e0:	4620      	mov	r0, r4
 80163e2:	f001 fdb1 	bl	8017f48 <_calloc_r>
 80163e6:	69e3      	ldr	r3, [r4, #28]
 80163e8:	60f0      	str	r0, [r6, #12]
 80163ea:	68db      	ldr	r3, [r3, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d1e4      	bne.n	80163ba <_Balloc+0x2e>
 80163f0:	2000      	movs	r0, #0
 80163f2:	bd70      	pop	{r4, r5, r6, pc}
 80163f4:	6802      	ldr	r2, [r0, #0]
 80163f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163fa:	2300      	movs	r3, #0
 80163fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016400:	e7f7      	b.n	80163f2 <_Balloc+0x66>
 8016402:	bf00      	nop
 8016404:	0801a143 	.word	0x0801a143
 8016408:	0801a15a 	.word	0x0801a15a

0801640c <_Bfree>:
 801640c:	b570      	push	{r4, r5, r6, lr}
 801640e:	69c6      	ldr	r6, [r0, #28]
 8016410:	4605      	mov	r5, r0
 8016412:	460c      	mov	r4, r1
 8016414:	b976      	cbnz	r6, 8016434 <_Bfree+0x28>
 8016416:	2010      	movs	r0, #16
 8016418:	f7fe f9dc 	bl	80147d4 <malloc>
 801641c:	4602      	mov	r2, r0
 801641e:	61e8      	str	r0, [r5, #28]
 8016420:	b920      	cbnz	r0, 801642c <_Bfree+0x20>
 8016422:	4b09      	ldr	r3, [pc, #36]	@ (8016448 <_Bfree+0x3c>)
 8016424:	4809      	ldr	r0, [pc, #36]	@ (801644c <_Bfree+0x40>)
 8016426:	218f      	movs	r1, #143	@ 0x8f
 8016428:	f001 fd70 	bl	8017f0c <__assert_func>
 801642c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016430:	6006      	str	r6, [r0, #0]
 8016432:	60c6      	str	r6, [r0, #12]
 8016434:	b13c      	cbz	r4, 8016446 <_Bfree+0x3a>
 8016436:	69eb      	ldr	r3, [r5, #28]
 8016438:	6862      	ldr	r2, [r4, #4]
 801643a:	68db      	ldr	r3, [r3, #12]
 801643c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016440:	6021      	str	r1, [r4, #0]
 8016442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016446:	bd70      	pop	{r4, r5, r6, pc}
 8016448:	0801a143 	.word	0x0801a143
 801644c:	0801a15a 	.word	0x0801a15a

08016450 <__multadd>:
 8016450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016454:	690d      	ldr	r5, [r1, #16]
 8016456:	4607      	mov	r7, r0
 8016458:	460c      	mov	r4, r1
 801645a:	461e      	mov	r6, r3
 801645c:	f101 0c14 	add.w	ip, r1, #20
 8016460:	2000      	movs	r0, #0
 8016462:	f8dc 3000 	ldr.w	r3, [ip]
 8016466:	b299      	uxth	r1, r3
 8016468:	fb02 6101 	mla	r1, r2, r1, r6
 801646c:	0c1e      	lsrs	r6, r3, #16
 801646e:	0c0b      	lsrs	r3, r1, #16
 8016470:	fb02 3306 	mla	r3, r2, r6, r3
 8016474:	b289      	uxth	r1, r1
 8016476:	3001      	adds	r0, #1
 8016478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801647c:	4285      	cmp	r5, r0
 801647e:	f84c 1b04 	str.w	r1, [ip], #4
 8016482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016486:	dcec      	bgt.n	8016462 <__multadd+0x12>
 8016488:	b30e      	cbz	r6, 80164ce <__multadd+0x7e>
 801648a:	68a3      	ldr	r3, [r4, #8]
 801648c:	42ab      	cmp	r3, r5
 801648e:	dc19      	bgt.n	80164c4 <__multadd+0x74>
 8016490:	6861      	ldr	r1, [r4, #4]
 8016492:	4638      	mov	r0, r7
 8016494:	3101      	adds	r1, #1
 8016496:	f7ff ff79 	bl	801638c <_Balloc>
 801649a:	4680      	mov	r8, r0
 801649c:	b928      	cbnz	r0, 80164aa <__multadd+0x5a>
 801649e:	4602      	mov	r2, r0
 80164a0:	4b0c      	ldr	r3, [pc, #48]	@ (80164d4 <__multadd+0x84>)
 80164a2:	480d      	ldr	r0, [pc, #52]	@ (80164d8 <__multadd+0x88>)
 80164a4:	21ba      	movs	r1, #186	@ 0xba
 80164a6:	f001 fd31 	bl	8017f0c <__assert_func>
 80164aa:	6922      	ldr	r2, [r4, #16]
 80164ac:	3202      	adds	r2, #2
 80164ae:	f104 010c 	add.w	r1, r4, #12
 80164b2:	0092      	lsls	r2, r2, #2
 80164b4:	300c      	adds	r0, #12
 80164b6:	f7ff fbbc 	bl	8015c32 <memcpy>
 80164ba:	4621      	mov	r1, r4
 80164bc:	4638      	mov	r0, r7
 80164be:	f7ff ffa5 	bl	801640c <_Bfree>
 80164c2:	4644      	mov	r4, r8
 80164c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80164c8:	3501      	adds	r5, #1
 80164ca:	615e      	str	r6, [r3, #20]
 80164cc:	6125      	str	r5, [r4, #16]
 80164ce:	4620      	mov	r0, r4
 80164d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d4:	0801a0d2 	.word	0x0801a0d2
 80164d8:	0801a15a 	.word	0x0801a15a

080164dc <__s2b>:
 80164dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164e0:	460c      	mov	r4, r1
 80164e2:	4615      	mov	r5, r2
 80164e4:	461f      	mov	r7, r3
 80164e6:	2209      	movs	r2, #9
 80164e8:	3308      	adds	r3, #8
 80164ea:	4606      	mov	r6, r0
 80164ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80164f0:	2100      	movs	r1, #0
 80164f2:	2201      	movs	r2, #1
 80164f4:	429a      	cmp	r2, r3
 80164f6:	db09      	blt.n	801650c <__s2b+0x30>
 80164f8:	4630      	mov	r0, r6
 80164fa:	f7ff ff47 	bl	801638c <_Balloc>
 80164fe:	b940      	cbnz	r0, 8016512 <__s2b+0x36>
 8016500:	4602      	mov	r2, r0
 8016502:	4b19      	ldr	r3, [pc, #100]	@ (8016568 <__s2b+0x8c>)
 8016504:	4819      	ldr	r0, [pc, #100]	@ (801656c <__s2b+0x90>)
 8016506:	21d3      	movs	r1, #211	@ 0xd3
 8016508:	f001 fd00 	bl	8017f0c <__assert_func>
 801650c:	0052      	lsls	r2, r2, #1
 801650e:	3101      	adds	r1, #1
 8016510:	e7f0      	b.n	80164f4 <__s2b+0x18>
 8016512:	9b08      	ldr	r3, [sp, #32]
 8016514:	6143      	str	r3, [r0, #20]
 8016516:	2d09      	cmp	r5, #9
 8016518:	f04f 0301 	mov.w	r3, #1
 801651c:	6103      	str	r3, [r0, #16]
 801651e:	dd16      	ble.n	801654e <__s2b+0x72>
 8016520:	f104 0909 	add.w	r9, r4, #9
 8016524:	46c8      	mov	r8, r9
 8016526:	442c      	add	r4, r5
 8016528:	f818 3b01 	ldrb.w	r3, [r8], #1
 801652c:	4601      	mov	r1, r0
 801652e:	3b30      	subs	r3, #48	@ 0x30
 8016530:	220a      	movs	r2, #10
 8016532:	4630      	mov	r0, r6
 8016534:	f7ff ff8c 	bl	8016450 <__multadd>
 8016538:	45a0      	cmp	r8, r4
 801653a:	d1f5      	bne.n	8016528 <__s2b+0x4c>
 801653c:	f1a5 0408 	sub.w	r4, r5, #8
 8016540:	444c      	add	r4, r9
 8016542:	1b2d      	subs	r5, r5, r4
 8016544:	1963      	adds	r3, r4, r5
 8016546:	42bb      	cmp	r3, r7
 8016548:	db04      	blt.n	8016554 <__s2b+0x78>
 801654a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801654e:	340a      	adds	r4, #10
 8016550:	2509      	movs	r5, #9
 8016552:	e7f6      	b.n	8016542 <__s2b+0x66>
 8016554:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016558:	4601      	mov	r1, r0
 801655a:	3b30      	subs	r3, #48	@ 0x30
 801655c:	220a      	movs	r2, #10
 801655e:	4630      	mov	r0, r6
 8016560:	f7ff ff76 	bl	8016450 <__multadd>
 8016564:	e7ee      	b.n	8016544 <__s2b+0x68>
 8016566:	bf00      	nop
 8016568:	0801a0d2 	.word	0x0801a0d2
 801656c:	0801a15a 	.word	0x0801a15a

08016570 <__hi0bits>:
 8016570:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016574:	4603      	mov	r3, r0
 8016576:	bf36      	itet	cc
 8016578:	0403      	lslcc	r3, r0, #16
 801657a:	2000      	movcs	r0, #0
 801657c:	2010      	movcc	r0, #16
 801657e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016582:	bf3c      	itt	cc
 8016584:	021b      	lslcc	r3, r3, #8
 8016586:	3008      	addcc	r0, #8
 8016588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801658c:	bf3c      	itt	cc
 801658e:	011b      	lslcc	r3, r3, #4
 8016590:	3004      	addcc	r0, #4
 8016592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016596:	bf3c      	itt	cc
 8016598:	009b      	lslcc	r3, r3, #2
 801659a:	3002      	addcc	r0, #2
 801659c:	2b00      	cmp	r3, #0
 801659e:	db05      	blt.n	80165ac <__hi0bits+0x3c>
 80165a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80165a4:	f100 0001 	add.w	r0, r0, #1
 80165a8:	bf08      	it	eq
 80165aa:	2020      	moveq	r0, #32
 80165ac:	4770      	bx	lr

080165ae <__lo0bits>:
 80165ae:	6803      	ldr	r3, [r0, #0]
 80165b0:	4602      	mov	r2, r0
 80165b2:	f013 0007 	ands.w	r0, r3, #7
 80165b6:	d00b      	beq.n	80165d0 <__lo0bits+0x22>
 80165b8:	07d9      	lsls	r1, r3, #31
 80165ba:	d421      	bmi.n	8016600 <__lo0bits+0x52>
 80165bc:	0798      	lsls	r0, r3, #30
 80165be:	bf49      	itett	mi
 80165c0:	085b      	lsrmi	r3, r3, #1
 80165c2:	089b      	lsrpl	r3, r3, #2
 80165c4:	2001      	movmi	r0, #1
 80165c6:	6013      	strmi	r3, [r2, #0]
 80165c8:	bf5c      	itt	pl
 80165ca:	6013      	strpl	r3, [r2, #0]
 80165cc:	2002      	movpl	r0, #2
 80165ce:	4770      	bx	lr
 80165d0:	b299      	uxth	r1, r3
 80165d2:	b909      	cbnz	r1, 80165d8 <__lo0bits+0x2a>
 80165d4:	0c1b      	lsrs	r3, r3, #16
 80165d6:	2010      	movs	r0, #16
 80165d8:	b2d9      	uxtb	r1, r3
 80165da:	b909      	cbnz	r1, 80165e0 <__lo0bits+0x32>
 80165dc:	3008      	adds	r0, #8
 80165de:	0a1b      	lsrs	r3, r3, #8
 80165e0:	0719      	lsls	r1, r3, #28
 80165e2:	bf04      	itt	eq
 80165e4:	091b      	lsreq	r3, r3, #4
 80165e6:	3004      	addeq	r0, #4
 80165e8:	0799      	lsls	r1, r3, #30
 80165ea:	bf04      	itt	eq
 80165ec:	089b      	lsreq	r3, r3, #2
 80165ee:	3002      	addeq	r0, #2
 80165f0:	07d9      	lsls	r1, r3, #31
 80165f2:	d403      	bmi.n	80165fc <__lo0bits+0x4e>
 80165f4:	085b      	lsrs	r3, r3, #1
 80165f6:	f100 0001 	add.w	r0, r0, #1
 80165fa:	d003      	beq.n	8016604 <__lo0bits+0x56>
 80165fc:	6013      	str	r3, [r2, #0]
 80165fe:	4770      	bx	lr
 8016600:	2000      	movs	r0, #0
 8016602:	4770      	bx	lr
 8016604:	2020      	movs	r0, #32
 8016606:	4770      	bx	lr

08016608 <__i2b>:
 8016608:	b510      	push	{r4, lr}
 801660a:	460c      	mov	r4, r1
 801660c:	2101      	movs	r1, #1
 801660e:	f7ff febd 	bl	801638c <_Balloc>
 8016612:	4602      	mov	r2, r0
 8016614:	b928      	cbnz	r0, 8016622 <__i2b+0x1a>
 8016616:	4b05      	ldr	r3, [pc, #20]	@ (801662c <__i2b+0x24>)
 8016618:	4805      	ldr	r0, [pc, #20]	@ (8016630 <__i2b+0x28>)
 801661a:	f240 1145 	movw	r1, #325	@ 0x145
 801661e:	f001 fc75 	bl	8017f0c <__assert_func>
 8016622:	2301      	movs	r3, #1
 8016624:	6144      	str	r4, [r0, #20]
 8016626:	6103      	str	r3, [r0, #16]
 8016628:	bd10      	pop	{r4, pc}
 801662a:	bf00      	nop
 801662c:	0801a0d2 	.word	0x0801a0d2
 8016630:	0801a15a 	.word	0x0801a15a

08016634 <__multiply>:
 8016634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016638:	4617      	mov	r7, r2
 801663a:	690a      	ldr	r2, [r1, #16]
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	429a      	cmp	r2, r3
 8016640:	bfa8      	it	ge
 8016642:	463b      	movge	r3, r7
 8016644:	4689      	mov	r9, r1
 8016646:	bfa4      	itt	ge
 8016648:	460f      	movge	r7, r1
 801664a:	4699      	movge	r9, r3
 801664c:	693d      	ldr	r5, [r7, #16]
 801664e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	6879      	ldr	r1, [r7, #4]
 8016656:	eb05 060a 	add.w	r6, r5, sl
 801665a:	42b3      	cmp	r3, r6
 801665c:	b085      	sub	sp, #20
 801665e:	bfb8      	it	lt
 8016660:	3101      	addlt	r1, #1
 8016662:	f7ff fe93 	bl	801638c <_Balloc>
 8016666:	b930      	cbnz	r0, 8016676 <__multiply+0x42>
 8016668:	4602      	mov	r2, r0
 801666a:	4b41      	ldr	r3, [pc, #260]	@ (8016770 <__multiply+0x13c>)
 801666c:	4841      	ldr	r0, [pc, #260]	@ (8016774 <__multiply+0x140>)
 801666e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016672:	f001 fc4b 	bl	8017f0c <__assert_func>
 8016676:	f100 0414 	add.w	r4, r0, #20
 801667a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801667e:	4623      	mov	r3, r4
 8016680:	2200      	movs	r2, #0
 8016682:	4573      	cmp	r3, lr
 8016684:	d320      	bcc.n	80166c8 <__multiply+0x94>
 8016686:	f107 0814 	add.w	r8, r7, #20
 801668a:	f109 0114 	add.w	r1, r9, #20
 801668e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016692:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016696:	9302      	str	r3, [sp, #8]
 8016698:	1beb      	subs	r3, r5, r7
 801669a:	3b15      	subs	r3, #21
 801669c:	f023 0303 	bic.w	r3, r3, #3
 80166a0:	3304      	adds	r3, #4
 80166a2:	3715      	adds	r7, #21
 80166a4:	42bd      	cmp	r5, r7
 80166a6:	bf38      	it	cc
 80166a8:	2304      	movcc	r3, #4
 80166aa:	9301      	str	r3, [sp, #4]
 80166ac:	9b02      	ldr	r3, [sp, #8]
 80166ae:	9103      	str	r1, [sp, #12]
 80166b0:	428b      	cmp	r3, r1
 80166b2:	d80c      	bhi.n	80166ce <__multiply+0x9a>
 80166b4:	2e00      	cmp	r6, #0
 80166b6:	dd03      	ble.n	80166c0 <__multiply+0x8c>
 80166b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d055      	beq.n	801676c <__multiply+0x138>
 80166c0:	6106      	str	r6, [r0, #16]
 80166c2:	b005      	add	sp, #20
 80166c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c8:	f843 2b04 	str.w	r2, [r3], #4
 80166cc:	e7d9      	b.n	8016682 <__multiply+0x4e>
 80166ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80166d2:	f1ba 0f00 	cmp.w	sl, #0
 80166d6:	d01f      	beq.n	8016718 <__multiply+0xe4>
 80166d8:	46c4      	mov	ip, r8
 80166da:	46a1      	mov	r9, r4
 80166dc:	2700      	movs	r7, #0
 80166de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80166e2:	f8d9 3000 	ldr.w	r3, [r9]
 80166e6:	fa1f fb82 	uxth.w	fp, r2
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80166f0:	443b      	add	r3, r7
 80166f2:	f8d9 7000 	ldr.w	r7, [r9]
 80166f6:	0c12      	lsrs	r2, r2, #16
 80166f8:	0c3f      	lsrs	r7, r7, #16
 80166fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80166fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016702:	b29b      	uxth	r3, r3
 8016704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016708:	4565      	cmp	r5, ip
 801670a:	f849 3b04 	str.w	r3, [r9], #4
 801670e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016712:	d8e4      	bhi.n	80166de <__multiply+0xaa>
 8016714:	9b01      	ldr	r3, [sp, #4]
 8016716:	50e7      	str	r7, [r4, r3]
 8016718:	9b03      	ldr	r3, [sp, #12]
 801671a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801671e:	3104      	adds	r1, #4
 8016720:	f1b9 0f00 	cmp.w	r9, #0
 8016724:	d020      	beq.n	8016768 <__multiply+0x134>
 8016726:	6823      	ldr	r3, [r4, #0]
 8016728:	4647      	mov	r7, r8
 801672a:	46a4      	mov	ip, r4
 801672c:	f04f 0a00 	mov.w	sl, #0
 8016730:	f8b7 b000 	ldrh.w	fp, [r7]
 8016734:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016738:	fb09 220b 	mla	r2, r9, fp, r2
 801673c:	4452      	add	r2, sl
 801673e:	b29b      	uxth	r3, r3
 8016740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016744:	f84c 3b04 	str.w	r3, [ip], #4
 8016748:	f857 3b04 	ldr.w	r3, [r7], #4
 801674c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016750:	f8bc 3000 	ldrh.w	r3, [ip]
 8016754:	fb09 330a 	mla	r3, r9, sl, r3
 8016758:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801675c:	42bd      	cmp	r5, r7
 801675e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016762:	d8e5      	bhi.n	8016730 <__multiply+0xfc>
 8016764:	9a01      	ldr	r2, [sp, #4]
 8016766:	50a3      	str	r3, [r4, r2]
 8016768:	3404      	adds	r4, #4
 801676a:	e79f      	b.n	80166ac <__multiply+0x78>
 801676c:	3e01      	subs	r6, #1
 801676e:	e7a1      	b.n	80166b4 <__multiply+0x80>
 8016770:	0801a0d2 	.word	0x0801a0d2
 8016774:	0801a15a 	.word	0x0801a15a

08016778 <__pow5mult>:
 8016778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801677c:	4615      	mov	r5, r2
 801677e:	f012 0203 	ands.w	r2, r2, #3
 8016782:	4607      	mov	r7, r0
 8016784:	460e      	mov	r6, r1
 8016786:	d007      	beq.n	8016798 <__pow5mult+0x20>
 8016788:	4c25      	ldr	r4, [pc, #148]	@ (8016820 <__pow5mult+0xa8>)
 801678a:	3a01      	subs	r2, #1
 801678c:	2300      	movs	r3, #0
 801678e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016792:	f7ff fe5d 	bl	8016450 <__multadd>
 8016796:	4606      	mov	r6, r0
 8016798:	10ad      	asrs	r5, r5, #2
 801679a:	d03d      	beq.n	8016818 <__pow5mult+0xa0>
 801679c:	69fc      	ldr	r4, [r7, #28]
 801679e:	b97c      	cbnz	r4, 80167c0 <__pow5mult+0x48>
 80167a0:	2010      	movs	r0, #16
 80167a2:	f7fe f817 	bl	80147d4 <malloc>
 80167a6:	4602      	mov	r2, r0
 80167a8:	61f8      	str	r0, [r7, #28]
 80167aa:	b928      	cbnz	r0, 80167b8 <__pow5mult+0x40>
 80167ac:	4b1d      	ldr	r3, [pc, #116]	@ (8016824 <__pow5mult+0xac>)
 80167ae:	481e      	ldr	r0, [pc, #120]	@ (8016828 <__pow5mult+0xb0>)
 80167b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80167b4:	f001 fbaa 	bl	8017f0c <__assert_func>
 80167b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167bc:	6004      	str	r4, [r0, #0]
 80167be:	60c4      	str	r4, [r0, #12]
 80167c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80167c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80167c8:	b94c      	cbnz	r4, 80167de <__pow5mult+0x66>
 80167ca:	f240 2171 	movw	r1, #625	@ 0x271
 80167ce:	4638      	mov	r0, r7
 80167d0:	f7ff ff1a 	bl	8016608 <__i2b>
 80167d4:	2300      	movs	r3, #0
 80167d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80167da:	4604      	mov	r4, r0
 80167dc:	6003      	str	r3, [r0, #0]
 80167de:	f04f 0900 	mov.w	r9, #0
 80167e2:	07eb      	lsls	r3, r5, #31
 80167e4:	d50a      	bpl.n	80167fc <__pow5mult+0x84>
 80167e6:	4631      	mov	r1, r6
 80167e8:	4622      	mov	r2, r4
 80167ea:	4638      	mov	r0, r7
 80167ec:	f7ff ff22 	bl	8016634 <__multiply>
 80167f0:	4631      	mov	r1, r6
 80167f2:	4680      	mov	r8, r0
 80167f4:	4638      	mov	r0, r7
 80167f6:	f7ff fe09 	bl	801640c <_Bfree>
 80167fa:	4646      	mov	r6, r8
 80167fc:	106d      	asrs	r5, r5, #1
 80167fe:	d00b      	beq.n	8016818 <__pow5mult+0xa0>
 8016800:	6820      	ldr	r0, [r4, #0]
 8016802:	b938      	cbnz	r0, 8016814 <__pow5mult+0x9c>
 8016804:	4622      	mov	r2, r4
 8016806:	4621      	mov	r1, r4
 8016808:	4638      	mov	r0, r7
 801680a:	f7ff ff13 	bl	8016634 <__multiply>
 801680e:	6020      	str	r0, [r4, #0]
 8016810:	f8c0 9000 	str.w	r9, [r0]
 8016814:	4604      	mov	r4, r0
 8016816:	e7e4      	b.n	80167e2 <__pow5mult+0x6a>
 8016818:	4630      	mov	r0, r6
 801681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801681e:	bf00      	nop
 8016820:	0801a394 	.word	0x0801a394
 8016824:	0801a143 	.word	0x0801a143
 8016828:	0801a15a 	.word	0x0801a15a

0801682c <__lshift>:
 801682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016830:	460c      	mov	r4, r1
 8016832:	6849      	ldr	r1, [r1, #4]
 8016834:	6923      	ldr	r3, [r4, #16]
 8016836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801683a:	68a3      	ldr	r3, [r4, #8]
 801683c:	4607      	mov	r7, r0
 801683e:	4691      	mov	r9, r2
 8016840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016844:	f108 0601 	add.w	r6, r8, #1
 8016848:	42b3      	cmp	r3, r6
 801684a:	db0b      	blt.n	8016864 <__lshift+0x38>
 801684c:	4638      	mov	r0, r7
 801684e:	f7ff fd9d 	bl	801638c <_Balloc>
 8016852:	4605      	mov	r5, r0
 8016854:	b948      	cbnz	r0, 801686a <__lshift+0x3e>
 8016856:	4602      	mov	r2, r0
 8016858:	4b28      	ldr	r3, [pc, #160]	@ (80168fc <__lshift+0xd0>)
 801685a:	4829      	ldr	r0, [pc, #164]	@ (8016900 <__lshift+0xd4>)
 801685c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016860:	f001 fb54 	bl	8017f0c <__assert_func>
 8016864:	3101      	adds	r1, #1
 8016866:	005b      	lsls	r3, r3, #1
 8016868:	e7ee      	b.n	8016848 <__lshift+0x1c>
 801686a:	2300      	movs	r3, #0
 801686c:	f100 0114 	add.w	r1, r0, #20
 8016870:	f100 0210 	add.w	r2, r0, #16
 8016874:	4618      	mov	r0, r3
 8016876:	4553      	cmp	r3, sl
 8016878:	db33      	blt.n	80168e2 <__lshift+0xb6>
 801687a:	6920      	ldr	r0, [r4, #16]
 801687c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016880:	f104 0314 	add.w	r3, r4, #20
 8016884:	f019 091f 	ands.w	r9, r9, #31
 8016888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801688c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016890:	d02b      	beq.n	80168ea <__lshift+0xbe>
 8016892:	f1c9 0e20 	rsb	lr, r9, #32
 8016896:	468a      	mov	sl, r1
 8016898:	2200      	movs	r2, #0
 801689a:	6818      	ldr	r0, [r3, #0]
 801689c:	fa00 f009 	lsl.w	r0, r0, r9
 80168a0:	4310      	orrs	r0, r2
 80168a2:	f84a 0b04 	str.w	r0, [sl], #4
 80168a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168aa:	459c      	cmp	ip, r3
 80168ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80168b0:	d8f3      	bhi.n	801689a <__lshift+0x6e>
 80168b2:	ebac 0304 	sub.w	r3, ip, r4
 80168b6:	3b15      	subs	r3, #21
 80168b8:	f023 0303 	bic.w	r3, r3, #3
 80168bc:	3304      	adds	r3, #4
 80168be:	f104 0015 	add.w	r0, r4, #21
 80168c2:	4560      	cmp	r0, ip
 80168c4:	bf88      	it	hi
 80168c6:	2304      	movhi	r3, #4
 80168c8:	50ca      	str	r2, [r1, r3]
 80168ca:	b10a      	cbz	r2, 80168d0 <__lshift+0xa4>
 80168cc:	f108 0602 	add.w	r6, r8, #2
 80168d0:	3e01      	subs	r6, #1
 80168d2:	4638      	mov	r0, r7
 80168d4:	612e      	str	r6, [r5, #16]
 80168d6:	4621      	mov	r1, r4
 80168d8:	f7ff fd98 	bl	801640c <_Bfree>
 80168dc:	4628      	mov	r0, r5
 80168de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80168e6:	3301      	adds	r3, #1
 80168e8:	e7c5      	b.n	8016876 <__lshift+0x4a>
 80168ea:	3904      	subs	r1, #4
 80168ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80168f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80168f4:	459c      	cmp	ip, r3
 80168f6:	d8f9      	bhi.n	80168ec <__lshift+0xc0>
 80168f8:	e7ea      	b.n	80168d0 <__lshift+0xa4>
 80168fa:	bf00      	nop
 80168fc:	0801a0d2 	.word	0x0801a0d2
 8016900:	0801a15a 	.word	0x0801a15a

08016904 <__mcmp>:
 8016904:	690a      	ldr	r2, [r1, #16]
 8016906:	4603      	mov	r3, r0
 8016908:	6900      	ldr	r0, [r0, #16]
 801690a:	1a80      	subs	r0, r0, r2
 801690c:	b530      	push	{r4, r5, lr}
 801690e:	d10e      	bne.n	801692e <__mcmp+0x2a>
 8016910:	3314      	adds	r3, #20
 8016912:	3114      	adds	r1, #20
 8016914:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016918:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801691c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016924:	4295      	cmp	r5, r2
 8016926:	d003      	beq.n	8016930 <__mcmp+0x2c>
 8016928:	d205      	bcs.n	8016936 <__mcmp+0x32>
 801692a:	f04f 30ff 	mov.w	r0, #4294967295
 801692e:	bd30      	pop	{r4, r5, pc}
 8016930:	42a3      	cmp	r3, r4
 8016932:	d3f3      	bcc.n	801691c <__mcmp+0x18>
 8016934:	e7fb      	b.n	801692e <__mcmp+0x2a>
 8016936:	2001      	movs	r0, #1
 8016938:	e7f9      	b.n	801692e <__mcmp+0x2a>
	...

0801693c <__mdiff>:
 801693c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016940:	4689      	mov	r9, r1
 8016942:	4606      	mov	r6, r0
 8016944:	4611      	mov	r1, r2
 8016946:	4648      	mov	r0, r9
 8016948:	4614      	mov	r4, r2
 801694a:	f7ff ffdb 	bl	8016904 <__mcmp>
 801694e:	1e05      	subs	r5, r0, #0
 8016950:	d112      	bne.n	8016978 <__mdiff+0x3c>
 8016952:	4629      	mov	r1, r5
 8016954:	4630      	mov	r0, r6
 8016956:	f7ff fd19 	bl	801638c <_Balloc>
 801695a:	4602      	mov	r2, r0
 801695c:	b928      	cbnz	r0, 801696a <__mdiff+0x2e>
 801695e:	4b3f      	ldr	r3, [pc, #252]	@ (8016a5c <__mdiff+0x120>)
 8016960:	f240 2137 	movw	r1, #567	@ 0x237
 8016964:	483e      	ldr	r0, [pc, #248]	@ (8016a60 <__mdiff+0x124>)
 8016966:	f001 fad1 	bl	8017f0c <__assert_func>
 801696a:	2301      	movs	r3, #1
 801696c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016970:	4610      	mov	r0, r2
 8016972:	b003      	add	sp, #12
 8016974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016978:	bfbc      	itt	lt
 801697a:	464b      	movlt	r3, r9
 801697c:	46a1      	movlt	r9, r4
 801697e:	4630      	mov	r0, r6
 8016980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016984:	bfba      	itte	lt
 8016986:	461c      	movlt	r4, r3
 8016988:	2501      	movlt	r5, #1
 801698a:	2500      	movge	r5, #0
 801698c:	f7ff fcfe 	bl	801638c <_Balloc>
 8016990:	4602      	mov	r2, r0
 8016992:	b918      	cbnz	r0, 801699c <__mdiff+0x60>
 8016994:	4b31      	ldr	r3, [pc, #196]	@ (8016a5c <__mdiff+0x120>)
 8016996:	f240 2145 	movw	r1, #581	@ 0x245
 801699a:	e7e3      	b.n	8016964 <__mdiff+0x28>
 801699c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80169a0:	6926      	ldr	r6, [r4, #16]
 80169a2:	60c5      	str	r5, [r0, #12]
 80169a4:	f109 0310 	add.w	r3, r9, #16
 80169a8:	f109 0514 	add.w	r5, r9, #20
 80169ac:	f104 0e14 	add.w	lr, r4, #20
 80169b0:	f100 0b14 	add.w	fp, r0, #20
 80169b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80169b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80169bc:	9301      	str	r3, [sp, #4]
 80169be:	46d9      	mov	r9, fp
 80169c0:	f04f 0c00 	mov.w	ip, #0
 80169c4:	9b01      	ldr	r3, [sp, #4]
 80169c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80169ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80169ce:	9301      	str	r3, [sp, #4]
 80169d0:	fa1f f38a 	uxth.w	r3, sl
 80169d4:	4619      	mov	r1, r3
 80169d6:	b283      	uxth	r3, r0
 80169d8:	1acb      	subs	r3, r1, r3
 80169da:	0c00      	lsrs	r0, r0, #16
 80169dc:	4463      	add	r3, ip
 80169de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80169e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80169ec:	4576      	cmp	r6, lr
 80169ee:	f849 3b04 	str.w	r3, [r9], #4
 80169f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80169f6:	d8e5      	bhi.n	80169c4 <__mdiff+0x88>
 80169f8:	1b33      	subs	r3, r6, r4
 80169fa:	3b15      	subs	r3, #21
 80169fc:	f023 0303 	bic.w	r3, r3, #3
 8016a00:	3415      	adds	r4, #21
 8016a02:	3304      	adds	r3, #4
 8016a04:	42a6      	cmp	r6, r4
 8016a06:	bf38      	it	cc
 8016a08:	2304      	movcc	r3, #4
 8016a0a:	441d      	add	r5, r3
 8016a0c:	445b      	add	r3, fp
 8016a0e:	461e      	mov	r6, r3
 8016a10:	462c      	mov	r4, r5
 8016a12:	4544      	cmp	r4, r8
 8016a14:	d30e      	bcc.n	8016a34 <__mdiff+0xf8>
 8016a16:	f108 0103 	add.w	r1, r8, #3
 8016a1a:	1b49      	subs	r1, r1, r5
 8016a1c:	f021 0103 	bic.w	r1, r1, #3
 8016a20:	3d03      	subs	r5, #3
 8016a22:	45a8      	cmp	r8, r5
 8016a24:	bf38      	it	cc
 8016a26:	2100      	movcc	r1, #0
 8016a28:	440b      	add	r3, r1
 8016a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016a2e:	b191      	cbz	r1, 8016a56 <__mdiff+0x11a>
 8016a30:	6117      	str	r7, [r2, #16]
 8016a32:	e79d      	b.n	8016970 <__mdiff+0x34>
 8016a34:	f854 1b04 	ldr.w	r1, [r4], #4
 8016a38:	46e6      	mov	lr, ip
 8016a3a:	0c08      	lsrs	r0, r1, #16
 8016a3c:	fa1c fc81 	uxtah	ip, ip, r1
 8016a40:	4471      	add	r1, lr
 8016a42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016a46:	b289      	uxth	r1, r1
 8016a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016a4c:	f846 1b04 	str.w	r1, [r6], #4
 8016a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016a54:	e7dd      	b.n	8016a12 <__mdiff+0xd6>
 8016a56:	3f01      	subs	r7, #1
 8016a58:	e7e7      	b.n	8016a2a <__mdiff+0xee>
 8016a5a:	bf00      	nop
 8016a5c:	0801a0d2 	.word	0x0801a0d2
 8016a60:	0801a15a 	.word	0x0801a15a

08016a64 <__ulp>:
 8016a64:	b082      	sub	sp, #8
 8016a66:	ed8d 0b00 	vstr	d0, [sp]
 8016a6a:	9a01      	ldr	r2, [sp, #4]
 8016a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8016aac <__ulp+0x48>)
 8016a6e:	4013      	ands	r3, r2
 8016a70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	dc08      	bgt.n	8016a8a <__ulp+0x26>
 8016a78:	425b      	negs	r3, r3
 8016a7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016a7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016a82:	da04      	bge.n	8016a8e <__ulp+0x2a>
 8016a84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016a88:	4113      	asrs	r3, r2
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	e008      	b.n	8016aa0 <__ulp+0x3c>
 8016a8e:	f1a2 0314 	sub.w	r3, r2, #20
 8016a92:	2b1e      	cmp	r3, #30
 8016a94:	bfda      	itte	le
 8016a96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016a9a:	40da      	lsrle	r2, r3
 8016a9c:	2201      	movgt	r2, #1
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	4619      	mov	r1, r3
 8016aa2:	4610      	mov	r0, r2
 8016aa4:	ec41 0b10 	vmov	d0, r0, r1
 8016aa8:	b002      	add	sp, #8
 8016aaa:	4770      	bx	lr
 8016aac:	7ff00000 	.word	0x7ff00000

08016ab0 <__b2d>:
 8016ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab4:	6906      	ldr	r6, [r0, #16]
 8016ab6:	f100 0814 	add.w	r8, r0, #20
 8016aba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016abe:	1f37      	subs	r7, r6, #4
 8016ac0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016ac4:	4610      	mov	r0, r2
 8016ac6:	f7ff fd53 	bl	8016570 <__hi0bits>
 8016aca:	f1c0 0320 	rsb	r3, r0, #32
 8016ace:	280a      	cmp	r0, #10
 8016ad0:	600b      	str	r3, [r1, #0]
 8016ad2:	491b      	ldr	r1, [pc, #108]	@ (8016b40 <__b2d+0x90>)
 8016ad4:	dc15      	bgt.n	8016b02 <__b2d+0x52>
 8016ad6:	f1c0 0c0b 	rsb	ip, r0, #11
 8016ada:	fa22 f30c 	lsr.w	r3, r2, ip
 8016ade:	45b8      	cmp	r8, r7
 8016ae0:	ea43 0501 	orr.w	r5, r3, r1
 8016ae4:	bf34      	ite	cc
 8016ae6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016aea:	2300      	movcs	r3, #0
 8016aec:	3015      	adds	r0, #21
 8016aee:	fa02 f000 	lsl.w	r0, r2, r0
 8016af2:	fa23 f30c 	lsr.w	r3, r3, ip
 8016af6:	4303      	orrs	r3, r0
 8016af8:	461c      	mov	r4, r3
 8016afa:	ec45 4b10 	vmov	d0, r4, r5
 8016afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b02:	45b8      	cmp	r8, r7
 8016b04:	bf3a      	itte	cc
 8016b06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016b0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016b0e:	2300      	movcs	r3, #0
 8016b10:	380b      	subs	r0, #11
 8016b12:	d012      	beq.n	8016b3a <__b2d+0x8a>
 8016b14:	f1c0 0120 	rsb	r1, r0, #32
 8016b18:	fa23 f401 	lsr.w	r4, r3, r1
 8016b1c:	4082      	lsls	r2, r0
 8016b1e:	4322      	orrs	r2, r4
 8016b20:	4547      	cmp	r7, r8
 8016b22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016b26:	bf8c      	ite	hi
 8016b28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016b2c:	2200      	movls	r2, #0
 8016b2e:	4083      	lsls	r3, r0
 8016b30:	40ca      	lsrs	r2, r1
 8016b32:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016b36:	4313      	orrs	r3, r2
 8016b38:	e7de      	b.n	8016af8 <__b2d+0x48>
 8016b3a:	ea42 0501 	orr.w	r5, r2, r1
 8016b3e:	e7db      	b.n	8016af8 <__b2d+0x48>
 8016b40:	3ff00000 	.word	0x3ff00000

08016b44 <__d2b>:
 8016b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b48:	460f      	mov	r7, r1
 8016b4a:	2101      	movs	r1, #1
 8016b4c:	ec59 8b10 	vmov	r8, r9, d0
 8016b50:	4616      	mov	r6, r2
 8016b52:	f7ff fc1b 	bl	801638c <_Balloc>
 8016b56:	4604      	mov	r4, r0
 8016b58:	b930      	cbnz	r0, 8016b68 <__d2b+0x24>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	4b23      	ldr	r3, [pc, #140]	@ (8016bec <__d2b+0xa8>)
 8016b5e:	4824      	ldr	r0, [pc, #144]	@ (8016bf0 <__d2b+0xac>)
 8016b60:	f240 310f 	movw	r1, #783	@ 0x30f
 8016b64:	f001 f9d2 	bl	8017f0c <__assert_func>
 8016b68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016b6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b70:	b10d      	cbz	r5, 8016b76 <__d2b+0x32>
 8016b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016b76:	9301      	str	r3, [sp, #4]
 8016b78:	f1b8 0300 	subs.w	r3, r8, #0
 8016b7c:	d023      	beq.n	8016bc6 <__d2b+0x82>
 8016b7e:	4668      	mov	r0, sp
 8016b80:	9300      	str	r3, [sp, #0]
 8016b82:	f7ff fd14 	bl	80165ae <__lo0bits>
 8016b86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016b8a:	b1d0      	cbz	r0, 8016bc2 <__d2b+0x7e>
 8016b8c:	f1c0 0320 	rsb	r3, r0, #32
 8016b90:	fa02 f303 	lsl.w	r3, r2, r3
 8016b94:	430b      	orrs	r3, r1
 8016b96:	40c2      	lsrs	r2, r0
 8016b98:	6163      	str	r3, [r4, #20]
 8016b9a:	9201      	str	r2, [sp, #4]
 8016b9c:	9b01      	ldr	r3, [sp, #4]
 8016b9e:	61a3      	str	r3, [r4, #24]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	bf0c      	ite	eq
 8016ba4:	2201      	moveq	r2, #1
 8016ba6:	2202      	movne	r2, #2
 8016ba8:	6122      	str	r2, [r4, #16]
 8016baa:	b1a5      	cbz	r5, 8016bd6 <__d2b+0x92>
 8016bac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016bb0:	4405      	add	r5, r0
 8016bb2:	603d      	str	r5, [r7, #0]
 8016bb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016bb8:	6030      	str	r0, [r6, #0]
 8016bba:	4620      	mov	r0, r4
 8016bbc:	b003      	add	sp, #12
 8016bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bc2:	6161      	str	r1, [r4, #20]
 8016bc4:	e7ea      	b.n	8016b9c <__d2b+0x58>
 8016bc6:	a801      	add	r0, sp, #4
 8016bc8:	f7ff fcf1 	bl	80165ae <__lo0bits>
 8016bcc:	9b01      	ldr	r3, [sp, #4]
 8016bce:	6163      	str	r3, [r4, #20]
 8016bd0:	3020      	adds	r0, #32
 8016bd2:	2201      	movs	r2, #1
 8016bd4:	e7e8      	b.n	8016ba8 <__d2b+0x64>
 8016bd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016bda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016bde:	6038      	str	r0, [r7, #0]
 8016be0:	6918      	ldr	r0, [r3, #16]
 8016be2:	f7ff fcc5 	bl	8016570 <__hi0bits>
 8016be6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016bea:	e7e5      	b.n	8016bb8 <__d2b+0x74>
 8016bec:	0801a0d2 	.word	0x0801a0d2
 8016bf0:	0801a15a 	.word	0x0801a15a

08016bf4 <__ratio>:
 8016bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf8:	b085      	sub	sp, #20
 8016bfa:	e9cd 1000 	strd	r1, r0, [sp]
 8016bfe:	a902      	add	r1, sp, #8
 8016c00:	f7ff ff56 	bl	8016ab0 <__b2d>
 8016c04:	9800      	ldr	r0, [sp, #0]
 8016c06:	a903      	add	r1, sp, #12
 8016c08:	ec55 4b10 	vmov	r4, r5, d0
 8016c0c:	f7ff ff50 	bl	8016ab0 <__b2d>
 8016c10:	9b01      	ldr	r3, [sp, #4]
 8016c12:	6919      	ldr	r1, [r3, #16]
 8016c14:	9b00      	ldr	r3, [sp, #0]
 8016c16:	691b      	ldr	r3, [r3, #16]
 8016c18:	1ac9      	subs	r1, r1, r3
 8016c1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016c1e:	1a9b      	subs	r3, r3, r2
 8016c20:	ec5b ab10 	vmov	sl, fp, d0
 8016c24:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	bfce      	itee	gt
 8016c2c:	462a      	movgt	r2, r5
 8016c2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016c32:	465a      	movle	r2, fp
 8016c34:	462f      	mov	r7, r5
 8016c36:	46d9      	mov	r9, fp
 8016c38:	bfcc      	ite	gt
 8016c3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016c3e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016c42:	464b      	mov	r3, r9
 8016c44:	4652      	mov	r2, sl
 8016c46:	4620      	mov	r0, r4
 8016c48:	4639      	mov	r1, r7
 8016c4a:	f7f1 fe2f 	bl	80088ac <__aeabi_ddiv>
 8016c4e:	ec41 0b10 	vmov	d0, r0, r1
 8016c52:	b005      	add	sp, #20
 8016c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c58 <__copybits>:
 8016c58:	3901      	subs	r1, #1
 8016c5a:	b570      	push	{r4, r5, r6, lr}
 8016c5c:	1149      	asrs	r1, r1, #5
 8016c5e:	6914      	ldr	r4, [r2, #16]
 8016c60:	3101      	adds	r1, #1
 8016c62:	f102 0314 	add.w	r3, r2, #20
 8016c66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016c6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016c6e:	1f05      	subs	r5, r0, #4
 8016c70:	42a3      	cmp	r3, r4
 8016c72:	d30c      	bcc.n	8016c8e <__copybits+0x36>
 8016c74:	1aa3      	subs	r3, r4, r2
 8016c76:	3b11      	subs	r3, #17
 8016c78:	f023 0303 	bic.w	r3, r3, #3
 8016c7c:	3211      	adds	r2, #17
 8016c7e:	42a2      	cmp	r2, r4
 8016c80:	bf88      	it	hi
 8016c82:	2300      	movhi	r3, #0
 8016c84:	4418      	add	r0, r3
 8016c86:	2300      	movs	r3, #0
 8016c88:	4288      	cmp	r0, r1
 8016c8a:	d305      	bcc.n	8016c98 <__copybits+0x40>
 8016c8c:	bd70      	pop	{r4, r5, r6, pc}
 8016c8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8016c92:	f845 6f04 	str.w	r6, [r5, #4]!
 8016c96:	e7eb      	b.n	8016c70 <__copybits+0x18>
 8016c98:	f840 3b04 	str.w	r3, [r0], #4
 8016c9c:	e7f4      	b.n	8016c88 <__copybits+0x30>

08016c9e <__any_on>:
 8016c9e:	f100 0214 	add.w	r2, r0, #20
 8016ca2:	6900      	ldr	r0, [r0, #16]
 8016ca4:	114b      	asrs	r3, r1, #5
 8016ca6:	4298      	cmp	r0, r3
 8016ca8:	b510      	push	{r4, lr}
 8016caa:	db11      	blt.n	8016cd0 <__any_on+0x32>
 8016cac:	dd0a      	ble.n	8016cc4 <__any_on+0x26>
 8016cae:	f011 011f 	ands.w	r1, r1, #31
 8016cb2:	d007      	beq.n	8016cc4 <__any_on+0x26>
 8016cb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016cb8:	fa24 f001 	lsr.w	r0, r4, r1
 8016cbc:	fa00 f101 	lsl.w	r1, r0, r1
 8016cc0:	428c      	cmp	r4, r1
 8016cc2:	d10b      	bne.n	8016cdc <__any_on+0x3e>
 8016cc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016cc8:	4293      	cmp	r3, r2
 8016cca:	d803      	bhi.n	8016cd4 <__any_on+0x36>
 8016ccc:	2000      	movs	r0, #0
 8016cce:	bd10      	pop	{r4, pc}
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	e7f7      	b.n	8016cc4 <__any_on+0x26>
 8016cd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016cd8:	2900      	cmp	r1, #0
 8016cda:	d0f5      	beq.n	8016cc8 <__any_on+0x2a>
 8016cdc:	2001      	movs	r0, #1
 8016cde:	e7f6      	b.n	8016cce <__any_on+0x30>

08016ce0 <_malloc_usable_size_r>:
 8016ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ce4:	1f18      	subs	r0, r3, #4
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	bfbc      	itt	lt
 8016cea:	580b      	ldrlt	r3, [r1, r0]
 8016cec:	18c0      	addlt	r0, r0, r3
 8016cee:	4770      	bx	lr

08016cf0 <__ascii_wctomb>:
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	4608      	mov	r0, r1
 8016cf4:	b141      	cbz	r1, 8016d08 <__ascii_wctomb+0x18>
 8016cf6:	2aff      	cmp	r2, #255	@ 0xff
 8016cf8:	d904      	bls.n	8016d04 <__ascii_wctomb+0x14>
 8016cfa:	228a      	movs	r2, #138	@ 0x8a
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8016d02:	4770      	bx	lr
 8016d04:	700a      	strb	r2, [r1, #0]
 8016d06:	2001      	movs	r0, #1
 8016d08:	4770      	bx	lr

08016d0a <__ssputs_r>:
 8016d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d0e:	688e      	ldr	r6, [r1, #8]
 8016d10:	461f      	mov	r7, r3
 8016d12:	42be      	cmp	r6, r7
 8016d14:	680b      	ldr	r3, [r1, #0]
 8016d16:	4682      	mov	sl, r0
 8016d18:	460c      	mov	r4, r1
 8016d1a:	4690      	mov	r8, r2
 8016d1c:	d82d      	bhi.n	8016d7a <__ssputs_r+0x70>
 8016d1e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016d22:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016d26:	d026      	beq.n	8016d76 <__ssputs_r+0x6c>
 8016d28:	6965      	ldr	r5, [r4, #20]
 8016d2a:	6909      	ldr	r1, [r1, #16]
 8016d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d30:	eba3 0901 	sub.w	r9, r3, r1
 8016d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d38:	1c7b      	adds	r3, r7, #1
 8016d3a:	444b      	add	r3, r9
 8016d3c:	106d      	asrs	r5, r5, #1
 8016d3e:	429d      	cmp	r5, r3
 8016d40:	bf38      	it	cc
 8016d42:	461d      	movcc	r5, r3
 8016d44:	0553      	lsls	r3, r2, #21
 8016d46:	d527      	bpl.n	8016d98 <__ssputs_r+0x8e>
 8016d48:	4629      	mov	r1, r5
 8016d4a:	f7fd fd75 	bl	8014838 <_malloc_r>
 8016d4e:	4606      	mov	r6, r0
 8016d50:	b360      	cbz	r0, 8016dac <__ssputs_r+0xa2>
 8016d52:	6921      	ldr	r1, [r4, #16]
 8016d54:	464a      	mov	r2, r9
 8016d56:	f7fe ff6c 	bl	8015c32 <memcpy>
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d64:	81a3      	strh	r3, [r4, #12]
 8016d66:	6126      	str	r6, [r4, #16]
 8016d68:	6165      	str	r5, [r4, #20]
 8016d6a:	444e      	add	r6, r9
 8016d6c:	eba5 0509 	sub.w	r5, r5, r9
 8016d70:	6026      	str	r6, [r4, #0]
 8016d72:	60a5      	str	r5, [r4, #8]
 8016d74:	463e      	mov	r6, r7
 8016d76:	42be      	cmp	r6, r7
 8016d78:	d900      	bls.n	8016d7c <__ssputs_r+0x72>
 8016d7a:	463e      	mov	r6, r7
 8016d7c:	6820      	ldr	r0, [r4, #0]
 8016d7e:	4632      	mov	r2, r6
 8016d80:	4641      	mov	r1, r8
 8016d82:	f001 f886 	bl	8017e92 <memmove>
 8016d86:	68a3      	ldr	r3, [r4, #8]
 8016d88:	1b9b      	subs	r3, r3, r6
 8016d8a:	60a3      	str	r3, [r4, #8]
 8016d8c:	6823      	ldr	r3, [r4, #0]
 8016d8e:	4433      	add	r3, r6
 8016d90:	6023      	str	r3, [r4, #0]
 8016d92:	2000      	movs	r0, #0
 8016d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d98:	462a      	mov	r2, r5
 8016d9a:	f7fd fde1 	bl	8014960 <_realloc_r>
 8016d9e:	4606      	mov	r6, r0
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d1e0      	bne.n	8016d66 <__ssputs_r+0x5c>
 8016da4:	6921      	ldr	r1, [r4, #16]
 8016da6:	4650      	mov	r0, sl
 8016da8:	f7fe ff5a 	bl	8015c60 <_free_r>
 8016dac:	230c      	movs	r3, #12
 8016dae:	f8ca 3000 	str.w	r3, [sl]
 8016db2:	89a3      	ldrh	r3, [r4, #12]
 8016db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016db8:	81a3      	strh	r3, [r4, #12]
 8016dba:	f04f 30ff 	mov.w	r0, #4294967295
 8016dbe:	e7e9      	b.n	8016d94 <__ssputs_r+0x8a>

08016dc0 <_svfiprintf_r>:
 8016dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc4:	4698      	mov	r8, r3
 8016dc6:	898b      	ldrh	r3, [r1, #12]
 8016dc8:	061b      	lsls	r3, r3, #24
 8016dca:	b09d      	sub	sp, #116	@ 0x74
 8016dcc:	4607      	mov	r7, r0
 8016dce:	460d      	mov	r5, r1
 8016dd0:	4614      	mov	r4, r2
 8016dd2:	d510      	bpl.n	8016df6 <_svfiprintf_r+0x36>
 8016dd4:	690b      	ldr	r3, [r1, #16]
 8016dd6:	b973      	cbnz	r3, 8016df6 <_svfiprintf_r+0x36>
 8016dd8:	2140      	movs	r1, #64	@ 0x40
 8016dda:	f7fd fd2d 	bl	8014838 <_malloc_r>
 8016dde:	6028      	str	r0, [r5, #0]
 8016de0:	6128      	str	r0, [r5, #16]
 8016de2:	b930      	cbnz	r0, 8016df2 <_svfiprintf_r+0x32>
 8016de4:	230c      	movs	r3, #12
 8016de6:	603b      	str	r3, [r7, #0]
 8016de8:	f04f 30ff 	mov.w	r0, #4294967295
 8016dec:	b01d      	add	sp, #116	@ 0x74
 8016dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016df2:	2340      	movs	r3, #64	@ 0x40
 8016df4:	616b      	str	r3, [r5, #20]
 8016df6:	2300      	movs	r3, #0
 8016df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dfa:	2320      	movs	r3, #32
 8016dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e04:	2330      	movs	r3, #48	@ 0x30
 8016e06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016fa4 <_svfiprintf_r+0x1e4>
 8016e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016e0e:	f04f 0901 	mov.w	r9, #1
 8016e12:	4623      	mov	r3, r4
 8016e14:	469a      	mov	sl, r3
 8016e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e1a:	b10a      	cbz	r2, 8016e20 <_svfiprintf_r+0x60>
 8016e1c:	2a25      	cmp	r2, #37	@ 0x25
 8016e1e:	d1f9      	bne.n	8016e14 <_svfiprintf_r+0x54>
 8016e20:	ebba 0b04 	subs.w	fp, sl, r4
 8016e24:	d00b      	beq.n	8016e3e <_svfiprintf_r+0x7e>
 8016e26:	465b      	mov	r3, fp
 8016e28:	4622      	mov	r2, r4
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	4638      	mov	r0, r7
 8016e2e:	f7ff ff6c 	bl	8016d0a <__ssputs_r>
 8016e32:	3001      	adds	r0, #1
 8016e34:	f000 80a7 	beq.w	8016f86 <_svfiprintf_r+0x1c6>
 8016e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e3a:	445a      	add	r2, fp
 8016e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	f000 809f 	beq.w	8016f86 <_svfiprintf_r+0x1c6>
 8016e48:	2300      	movs	r3, #0
 8016e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e52:	f10a 0a01 	add.w	sl, sl, #1
 8016e56:	9304      	str	r3, [sp, #16]
 8016e58:	9307      	str	r3, [sp, #28]
 8016e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e60:	4654      	mov	r4, sl
 8016e62:	2205      	movs	r2, #5
 8016e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e68:	484e      	ldr	r0, [pc, #312]	@ (8016fa4 <_svfiprintf_r+0x1e4>)
 8016e6a:	f7f1 f9e9 	bl	8008240 <memchr>
 8016e6e:	9a04      	ldr	r2, [sp, #16]
 8016e70:	b9d8      	cbnz	r0, 8016eaa <_svfiprintf_r+0xea>
 8016e72:	06d0      	lsls	r0, r2, #27
 8016e74:	bf44      	itt	mi
 8016e76:	2320      	movmi	r3, #32
 8016e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e7c:	0711      	lsls	r1, r2, #28
 8016e7e:	bf44      	itt	mi
 8016e80:	232b      	movmi	r3, #43	@ 0x2b
 8016e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e86:	f89a 3000 	ldrb.w	r3, [sl]
 8016e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e8c:	d015      	beq.n	8016eba <_svfiprintf_r+0xfa>
 8016e8e:	9a07      	ldr	r2, [sp, #28]
 8016e90:	4654      	mov	r4, sl
 8016e92:	2000      	movs	r0, #0
 8016e94:	f04f 0c0a 	mov.w	ip, #10
 8016e98:	4621      	mov	r1, r4
 8016e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e9e:	3b30      	subs	r3, #48	@ 0x30
 8016ea0:	2b09      	cmp	r3, #9
 8016ea2:	d94b      	bls.n	8016f3c <_svfiprintf_r+0x17c>
 8016ea4:	b1b0      	cbz	r0, 8016ed4 <_svfiprintf_r+0x114>
 8016ea6:	9207      	str	r2, [sp, #28]
 8016ea8:	e014      	b.n	8016ed4 <_svfiprintf_r+0x114>
 8016eaa:	eba0 0308 	sub.w	r3, r0, r8
 8016eae:	fa09 f303 	lsl.w	r3, r9, r3
 8016eb2:	4313      	orrs	r3, r2
 8016eb4:	9304      	str	r3, [sp, #16]
 8016eb6:	46a2      	mov	sl, r4
 8016eb8:	e7d2      	b.n	8016e60 <_svfiprintf_r+0xa0>
 8016eba:	9b03      	ldr	r3, [sp, #12]
 8016ebc:	1d19      	adds	r1, r3, #4
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	9103      	str	r1, [sp, #12]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	bfbb      	ittet	lt
 8016ec6:	425b      	neglt	r3, r3
 8016ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8016ecc:	9307      	strge	r3, [sp, #28]
 8016ece:	9307      	strlt	r3, [sp, #28]
 8016ed0:	bfb8      	it	lt
 8016ed2:	9204      	strlt	r2, [sp, #16]
 8016ed4:	7823      	ldrb	r3, [r4, #0]
 8016ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8016ed8:	d10a      	bne.n	8016ef0 <_svfiprintf_r+0x130>
 8016eda:	7863      	ldrb	r3, [r4, #1]
 8016edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ede:	d132      	bne.n	8016f46 <_svfiprintf_r+0x186>
 8016ee0:	9b03      	ldr	r3, [sp, #12]
 8016ee2:	1d1a      	adds	r2, r3, #4
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	9203      	str	r2, [sp, #12]
 8016ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016eec:	3402      	adds	r4, #2
 8016eee:	9305      	str	r3, [sp, #20]
 8016ef0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016fb4 <_svfiprintf_r+0x1f4>
 8016ef4:	7821      	ldrb	r1, [r4, #0]
 8016ef6:	2203      	movs	r2, #3
 8016ef8:	4650      	mov	r0, sl
 8016efa:	f7f1 f9a1 	bl	8008240 <memchr>
 8016efe:	b138      	cbz	r0, 8016f10 <_svfiprintf_r+0x150>
 8016f00:	9b04      	ldr	r3, [sp, #16]
 8016f02:	eba0 000a 	sub.w	r0, r0, sl
 8016f06:	2240      	movs	r2, #64	@ 0x40
 8016f08:	4082      	lsls	r2, r0
 8016f0a:	4313      	orrs	r3, r2
 8016f0c:	3401      	adds	r4, #1
 8016f0e:	9304      	str	r3, [sp, #16]
 8016f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f14:	4824      	ldr	r0, [pc, #144]	@ (8016fa8 <_svfiprintf_r+0x1e8>)
 8016f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f1a:	2206      	movs	r2, #6
 8016f1c:	f7f1 f990 	bl	8008240 <memchr>
 8016f20:	2800      	cmp	r0, #0
 8016f22:	d036      	beq.n	8016f92 <_svfiprintf_r+0x1d2>
 8016f24:	4b21      	ldr	r3, [pc, #132]	@ (8016fac <_svfiprintf_r+0x1ec>)
 8016f26:	bb1b      	cbnz	r3, 8016f70 <_svfiprintf_r+0x1b0>
 8016f28:	9b03      	ldr	r3, [sp, #12]
 8016f2a:	3307      	adds	r3, #7
 8016f2c:	f023 0307 	bic.w	r3, r3, #7
 8016f30:	3308      	adds	r3, #8
 8016f32:	9303      	str	r3, [sp, #12]
 8016f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f36:	4433      	add	r3, r6
 8016f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f3a:	e76a      	b.n	8016e12 <_svfiprintf_r+0x52>
 8016f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f40:	460c      	mov	r4, r1
 8016f42:	2001      	movs	r0, #1
 8016f44:	e7a8      	b.n	8016e98 <_svfiprintf_r+0xd8>
 8016f46:	2300      	movs	r3, #0
 8016f48:	3401      	adds	r4, #1
 8016f4a:	9305      	str	r3, [sp, #20]
 8016f4c:	4619      	mov	r1, r3
 8016f4e:	f04f 0c0a 	mov.w	ip, #10
 8016f52:	4620      	mov	r0, r4
 8016f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f58:	3a30      	subs	r2, #48	@ 0x30
 8016f5a:	2a09      	cmp	r2, #9
 8016f5c:	d903      	bls.n	8016f66 <_svfiprintf_r+0x1a6>
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d0c6      	beq.n	8016ef0 <_svfiprintf_r+0x130>
 8016f62:	9105      	str	r1, [sp, #20]
 8016f64:	e7c4      	b.n	8016ef0 <_svfiprintf_r+0x130>
 8016f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f6a:	4604      	mov	r4, r0
 8016f6c:	2301      	movs	r3, #1
 8016f6e:	e7f0      	b.n	8016f52 <_svfiprintf_r+0x192>
 8016f70:	ab03      	add	r3, sp, #12
 8016f72:	9300      	str	r3, [sp, #0]
 8016f74:	462a      	mov	r2, r5
 8016f76:	4b0e      	ldr	r3, [pc, #56]	@ (8016fb0 <_svfiprintf_r+0x1f0>)
 8016f78:	a904      	add	r1, sp, #16
 8016f7a:	4638      	mov	r0, r7
 8016f7c:	f3af 8000 	nop.w
 8016f80:	1c42      	adds	r2, r0, #1
 8016f82:	4606      	mov	r6, r0
 8016f84:	d1d6      	bne.n	8016f34 <_svfiprintf_r+0x174>
 8016f86:	89ab      	ldrh	r3, [r5, #12]
 8016f88:	065b      	lsls	r3, r3, #25
 8016f8a:	f53f af2d 	bmi.w	8016de8 <_svfiprintf_r+0x28>
 8016f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f90:	e72c      	b.n	8016dec <_svfiprintf_r+0x2c>
 8016f92:	ab03      	add	r3, sp, #12
 8016f94:	9300      	str	r3, [sp, #0]
 8016f96:	462a      	mov	r2, r5
 8016f98:	4b05      	ldr	r3, [pc, #20]	@ (8016fb0 <_svfiprintf_r+0x1f0>)
 8016f9a:	a904      	add	r1, sp, #16
 8016f9c:	4638      	mov	r0, r7
 8016f9e:	f000 fb8b 	bl	80176b8 <_printf_i>
 8016fa2:	e7ed      	b.n	8016f80 <_svfiprintf_r+0x1c0>
 8016fa4:	0801a1b3 	.word	0x0801a1b3
 8016fa8:	0801a1bd 	.word	0x0801a1bd
 8016fac:	00000000 	.word	0x00000000
 8016fb0:	08016d0b 	.word	0x08016d0b
 8016fb4:	0801a1b9 	.word	0x0801a1b9

08016fb8 <_sungetc_r>:
 8016fb8:	b538      	push	{r3, r4, r5, lr}
 8016fba:	1c4b      	adds	r3, r1, #1
 8016fbc:	4614      	mov	r4, r2
 8016fbe:	d103      	bne.n	8016fc8 <_sungetc_r+0x10>
 8016fc0:	f04f 35ff 	mov.w	r5, #4294967295
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	bd38      	pop	{r3, r4, r5, pc}
 8016fc8:	8993      	ldrh	r3, [r2, #12]
 8016fca:	f023 0320 	bic.w	r3, r3, #32
 8016fce:	8193      	strh	r3, [r2, #12]
 8016fd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016fd2:	6852      	ldr	r2, [r2, #4]
 8016fd4:	b2cd      	uxtb	r5, r1
 8016fd6:	b18b      	cbz	r3, 8016ffc <_sungetc_r+0x44>
 8016fd8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	dd08      	ble.n	8016ff0 <_sungetc_r+0x38>
 8016fde:	6823      	ldr	r3, [r4, #0]
 8016fe0:	1e5a      	subs	r2, r3, #1
 8016fe2:	6022      	str	r2, [r4, #0]
 8016fe4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fe8:	6863      	ldr	r3, [r4, #4]
 8016fea:	3301      	adds	r3, #1
 8016fec:	6063      	str	r3, [r4, #4]
 8016fee:	e7e9      	b.n	8016fc4 <_sungetc_r+0xc>
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	f000 ff14 	bl	8017e1e <__submore>
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	d0f1      	beq.n	8016fde <_sungetc_r+0x26>
 8016ffa:	e7e1      	b.n	8016fc0 <_sungetc_r+0x8>
 8016ffc:	6921      	ldr	r1, [r4, #16]
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	b151      	cbz	r1, 8017018 <_sungetc_r+0x60>
 8017002:	4299      	cmp	r1, r3
 8017004:	d208      	bcs.n	8017018 <_sungetc_r+0x60>
 8017006:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801700a:	42a9      	cmp	r1, r5
 801700c:	d104      	bne.n	8017018 <_sungetc_r+0x60>
 801700e:	3b01      	subs	r3, #1
 8017010:	3201      	adds	r2, #1
 8017012:	6023      	str	r3, [r4, #0]
 8017014:	6062      	str	r2, [r4, #4]
 8017016:	e7d5      	b.n	8016fc4 <_sungetc_r+0xc>
 8017018:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801701c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017020:	6363      	str	r3, [r4, #52]	@ 0x34
 8017022:	2303      	movs	r3, #3
 8017024:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017026:	4623      	mov	r3, r4
 8017028:	f803 5f46 	strb.w	r5, [r3, #70]!
 801702c:	6023      	str	r3, [r4, #0]
 801702e:	2301      	movs	r3, #1
 8017030:	e7dc      	b.n	8016fec <_sungetc_r+0x34>

08017032 <__ssrefill_r>:
 8017032:	b510      	push	{r4, lr}
 8017034:	460c      	mov	r4, r1
 8017036:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017038:	b169      	cbz	r1, 8017056 <__ssrefill_r+0x24>
 801703a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801703e:	4299      	cmp	r1, r3
 8017040:	d001      	beq.n	8017046 <__ssrefill_r+0x14>
 8017042:	f7fe fe0d 	bl	8015c60 <_free_r>
 8017046:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017048:	6063      	str	r3, [r4, #4]
 801704a:	2000      	movs	r0, #0
 801704c:	6360      	str	r0, [r4, #52]	@ 0x34
 801704e:	b113      	cbz	r3, 8017056 <__ssrefill_r+0x24>
 8017050:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017052:	6023      	str	r3, [r4, #0]
 8017054:	bd10      	pop	{r4, pc}
 8017056:	6923      	ldr	r3, [r4, #16]
 8017058:	6023      	str	r3, [r4, #0]
 801705a:	2300      	movs	r3, #0
 801705c:	6063      	str	r3, [r4, #4]
 801705e:	89a3      	ldrh	r3, [r4, #12]
 8017060:	f043 0320 	orr.w	r3, r3, #32
 8017064:	81a3      	strh	r3, [r4, #12]
 8017066:	f04f 30ff 	mov.w	r0, #4294967295
 801706a:	e7f3      	b.n	8017054 <__ssrefill_r+0x22>

0801706c <__ssvfiscanf_r>:
 801706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017070:	460c      	mov	r4, r1
 8017072:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017076:	2100      	movs	r1, #0
 8017078:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801707c:	49a6      	ldr	r1, [pc, #664]	@ (8017318 <__ssvfiscanf_r+0x2ac>)
 801707e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017080:	f10d 0804 	add.w	r8, sp, #4
 8017084:	49a5      	ldr	r1, [pc, #660]	@ (801731c <__ssvfiscanf_r+0x2b0>)
 8017086:	4fa6      	ldr	r7, [pc, #664]	@ (8017320 <__ssvfiscanf_r+0x2b4>)
 8017088:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801708c:	4606      	mov	r6, r0
 801708e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017090:	9300      	str	r3, [sp, #0]
 8017092:	f892 9000 	ldrb.w	r9, [r2]
 8017096:	f1b9 0f00 	cmp.w	r9, #0
 801709a:	f000 8158 	beq.w	801734e <__ssvfiscanf_r+0x2e2>
 801709e:	f817 3009 	ldrb.w	r3, [r7, r9]
 80170a2:	f013 0308 	ands.w	r3, r3, #8
 80170a6:	f102 0501 	add.w	r5, r2, #1
 80170aa:	d019      	beq.n	80170e0 <__ssvfiscanf_r+0x74>
 80170ac:	6863      	ldr	r3, [r4, #4]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	dd0f      	ble.n	80170d2 <__ssvfiscanf_r+0x66>
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	781a      	ldrb	r2, [r3, #0]
 80170b6:	5cba      	ldrb	r2, [r7, r2]
 80170b8:	0712      	lsls	r2, r2, #28
 80170ba:	d401      	bmi.n	80170c0 <__ssvfiscanf_r+0x54>
 80170bc:	462a      	mov	r2, r5
 80170be:	e7e8      	b.n	8017092 <__ssvfiscanf_r+0x26>
 80170c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80170c2:	3201      	adds	r2, #1
 80170c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80170c6:	6862      	ldr	r2, [r4, #4]
 80170c8:	3301      	adds	r3, #1
 80170ca:	3a01      	subs	r2, #1
 80170cc:	6062      	str	r2, [r4, #4]
 80170ce:	6023      	str	r3, [r4, #0]
 80170d0:	e7ec      	b.n	80170ac <__ssvfiscanf_r+0x40>
 80170d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80170d4:	4621      	mov	r1, r4
 80170d6:	4630      	mov	r0, r6
 80170d8:	4798      	blx	r3
 80170da:	2800      	cmp	r0, #0
 80170dc:	d0e9      	beq.n	80170b2 <__ssvfiscanf_r+0x46>
 80170de:	e7ed      	b.n	80170bc <__ssvfiscanf_r+0x50>
 80170e0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80170e4:	f040 8085 	bne.w	80171f2 <__ssvfiscanf_r+0x186>
 80170e8:	9341      	str	r3, [sp, #260]	@ 0x104
 80170ea:	9343      	str	r3, [sp, #268]	@ 0x10c
 80170ec:	7853      	ldrb	r3, [r2, #1]
 80170ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80170f0:	bf02      	ittt	eq
 80170f2:	2310      	moveq	r3, #16
 80170f4:	1c95      	addeq	r5, r2, #2
 80170f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80170f8:	220a      	movs	r2, #10
 80170fa:	46aa      	mov	sl, r5
 80170fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017100:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017104:	2b09      	cmp	r3, #9
 8017106:	d91e      	bls.n	8017146 <__ssvfiscanf_r+0xda>
 8017108:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8017324 <__ssvfiscanf_r+0x2b8>
 801710c:	2203      	movs	r2, #3
 801710e:	4658      	mov	r0, fp
 8017110:	f7f1 f896 	bl	8008240 <memchr>
 8017114:	b138      	cbz	r0, 8017126 <__ssvfiscanf_r+0xba>
 8017116:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017118:	eba0 000b 	sub.w	r0, r0, fp
 801711c:	2301      	movs	r3, #1
 801711e:	4083      	lsls	r3, r0
 8017120:	4313      	orrs	r3, r2
 8017122:	9341      	str	r3, [sp, #260]	@ 0x104
 8017124:	4655      	mov	r5, sl
 8017126:	f815 3b01 	ldrb.w	r3, [r5], #1
 801712a:	2b78      	cmp	r3, #120	@ 0x78
 801712c:	d806      	bhi.n	801713c <__ssvfiscanf_r+0xd0>
 801712e:	2b57      	cmp	r3, #87	@ 0x57
 8017130:	d810      	bhi.n	8017154 <__ssvfiscanf_r+0xe8>
 8017132:	2b25      	cmp	r3, #37	@ 0x25
 8017134:	d05d      	beq.n	80171f2 <__ssvfiscanf_r+0x186>
 8017136:	d857      	bhi.n	80171e8 <__ssvfiscanf_r+0x17c>
 8017138:	2b00      	cmp	r3, #0
 801713a:	d075      	beq.n	8017228 <__ssvfiscanf_r+0x1bc>
 801713c:	2303      	movs	r3, #3
 801713e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017140:	230a      	movs	r3, #10
 8017142:	9342      	str	r3, [sp, #264]	@ 0x108
 8017144:	e088      	b.n	8017258 <__ssvfiscanf_r+0x1ec>
 8017146:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017148:	fb02 1103 	mla	r1, r2, r3, r1
 801714c:	3930      	subs	r1, #48	@ 0x30
 801714e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017150:	4655      	mov	r5, sl
 8017152:	e7d2      	b.n	80170fa <__ssvfiscanf_r+0x8e>
 8017154:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017158:	2a20      	cmp	r2, #32
 801715a:	d8ef      	bhi.n	801713c <__ssvfiscanf_r+0xd0>
 801715c:	a101      	add	r1, pc, #4	@ (adr r1, 8017164 <__ssvfiscanf_r+0xf8>)
 801715e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017162:	bf00      	nop
 8017164:	08017237 	.word	0x08017237
 8017168:	0801713d 	.word	0x0801713d
 801716c:	0801713d 	.word	0x0801713d
 8017170:	08017291 	.word	0x08017291
 8017174:	0801713d 	.word	0x0801713d
 8017178:	0801713d 	.word	0x0801713d
 801717c:	0801713d 	.word	0x0801713d
 8017180:	0801713d 	.word	0x0801713d
 8017184:	0801713d 	.word	0x0801713d
 8017188:	0801713d 	.word	0x0801713d
 801718c:	0801713d 	.word	0x0801713d
 8017190:	080172a7 	.word	0x080172a7
 8017194:	0801728d 	.word	0x0801728d
 8017198:	080171ef 	.word	0x080171ef
 801719c:	080171ef 	.word	0x080171ef
 80171a0:	080171ef 	.word	0x080171ef
 80171a4:	0801713d 	.word	0x0801713d
 80171a8:	08017249 	.word	0x08017249
 80171ac:	0801713d 	.word	0x0801713d
 80171b0:	0801713d 	.word	0x0801713d
 80171b4:	0801713d 	.word	0x0801713d
 80171b8:	0801713d 	.word	0x0801713d
 80171bc:	080172b7 	.word	0x080172b7
 80171c0:	08017251 	.word	0x08017251
 80171c4:	0801722f 	.word	0x0801722f
 80171c8:	0801713d 	.word	0x0801713d
 80171cc:	0801713d 	.word	0x0801713d
 80171d0:	080172b3 	.word	0x080172b3
 80171d4:	0801713d 	.word	0x0801713d
 80171d8:	0801728d 	.word	0x0801728d
 80171dc:	0801713d 	.word	0x0801713d
 80171e0:	0801713d 	.word	0x0801713d
 80171e4:	08017237 	.word	0x08017237
 80171e8:	3b45      	subs	r3, #69	@ 0x45
 80171ea:	2b02      	cmp	r3, #2
 80171ec:	d8a6      	bhi.n	801713c <__ssvfiscanf_r+0xd0>
 80171ee:	2305      	movs	r3, #5
 80171f0:	e031      	b.n	8017256 <__ssvfiscanf_r+0x1ea>
 80171f2:	6863      	ldr	r3, [r4, #4]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	dd0d      	ble.n	8017214 <__ssvfiscanf_r+0x1a8>
 80171f8:	6823      	ldr	r3, [r4, #0]
 80171fa:	781a      	ldrb	r2, [r3, #0]
 80171fc:	454a      	cmp	r2, r9
 80171fe:	f040 80a6 	bne.w	801734e <__ssvfiscanf_r+0x2e2>
 8017202:	3301      	adds	r3, #1
 8017204:	6862      	ldr	r2, [r4, #4]
 8017206:	6023      	str	r3, [r4, #0]
 8017208:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801720a:	3a01      	subs	r2, #1
 801720c:	3301      	adds	r3, #1
 801720e:	6062      	str	r2, [r4, #4]
 8017210:	9345      	str	r3, [sp, #276]	@ 0x114
 8017212:	e753      	b.n	80170bc <__ssvfiscanf_r+0x50>
 8017214:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017216:	4621      	mov	r1, r4
 8017218:	4630      	mov	r0, r6
 801721a:	4798      	blx	r3
 801721c:	2800      	cmp	r0, #0
 801721e:	d0eb      	beq.n	80171f8 <__ssvfiscanf_r+0x18c>
 8017220:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017222:	2800      	cmp	r0, #0
 8017224:	f040 808b 	bne.w	801733e <__ssvfiscanf_r+0x2d2>
 8017228:	f04f 30ff 	mov.w	r0, #4294967295
 801722c:	e08b      	b.n	8017346 <__ssvfiscanf_r+0x2da>
 801722e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017230:	f042 0220 	orr.w	r2, r2, #32
 8017234:	9241      	str	r2, [sp, #260]	@ 0x104
 8017236:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801723c:	9241      	str	r2, [sp, #260]	@ 0x104
 801723e:	2210      	movs	r2, #16
 8017240:	2b6e      	cmp	r3, #110	@ 0x6e
 8017242:	9242      	str	r2, [sp, #264]	@ 0x108
 8017244:	d902      	bls.n	801724c <__ssvfiscanf_r+0x1e0>
 8017246:	e005      	b.n	8017254 <__ssvfiscanf_r+0x1e8>
 8017248:	2300      	movs	r3, #0
 801724a:	9342      	str	r3, [sp, #264]	@ 0x108
 801724c:	2303      	movs	r3, #3
 801724e:	e002      	b.n	8017256 <__ssvfiscanf_r+0x1ea>
 8017250:	2308      	movs	r3, #8
 8017252:	9342      	str	r3, [sp, #264]	@ 0x108
 8017254:	2304      	movs	r3, #4
 8017256:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017258:	6863      	ldr	r3, [r4, #4]
 801725a:	2b00      	cmp	r3, #0
 801725c:	dd39      	ble.n	80172d2 <__ssvfiscanf_r+0x266>
 801725e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017260:	0659      	lsls	r1, r3, #25
 8017262:	d404      	bmi.n	801726e <__ssvfiscanf_r+0x202>
 8017264:	6823      	ldr	r3, [r4, #0]
 8017266:	781a      	ldrb	r2, [r3, #0]
 8017268:	5cba      	ldrb	r2, [r7, r2]
 801726a:	0712      	lsls	r2, r2, #28
 801726c:	d438      	bmi.n	80172e0 <__ssvfiscanf_r+0x274>
 801726e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8017270:	2b02      	cmp	r3, #2
 8017272:	dc47      	bgt.n	8017304 <__ssvfiscanf_r+0x298>
 8017274:	466b      	mov	r3, sp
 8017276:	4622      	mov	r2, r4
 8017278:	a941      	add	r1, sp, #260	@ 0x104
 801727a:	4630      	mov	r0, r6
 801727c:	f000 fb3a 	bl	80178f4 <_scanf_chars>
 8017280:	2801      	cmp	r0, #1
 8017282:	d064      	beq.n	801734e <__ssvfiscanf_r+0x2e2>
 8017284:	2802      	cmp	r0, #2
 8017286:	f47f af19 	bne.w	80170bc <__ssvfiscanf_r+0x50>
 801728a:	e7c9      	b.n	8017220 <__ssvfiscanf_r+0x1b4>
 801728c:	220a      	movs	r2, #10
 801728e:	e7d7      	b.n	8017240 <__ssvfiscanf_r+0x1d4>
 8017290:	4629      	mov	r1, r5
 8017292:	4640      	mov	r0, r8
 8017294:	f000 fd8a 	bl	8017dac <__sccl>
 8017298:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801729a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801729e:	9341      	str	r3, [sp, #260]	@ 0x104
 80172a0:	4605      	mov	r5, r0
 80172a2:	2301      	movs	r3, #1
 80172a4:	e7d7      	b.n	8017256 <__ssvfiscanf_r+0x1ea>
 80172a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80172a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80172ae:	2300      	movs	r3, #0
 80172b0:	e7d1      	b.n	8017256 <__ssvfiscanf_r+0x1ea>
 80172b2:	2302      	movs	r3, #2
 80172b4:	e7cf      	b.n	8017256 <__ssvfiscanf_r+0x1ea>
 80172b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80172b8:	06c3      	lsls	r3, r0, #27
 80172ba:	f53f aeff 	bmi.w	80170bc <__ssvfiscanf_r+0x50>
 80172be:	9b00      	ldr	r3, [sp, #0]
 80172c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80172c2:	1d19      	adds	r1, r3, #4
 80172c4:	9100      	str	r1, [sp, #0]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	07c0      	lsls	r0, r0, #31
 80172ca:	bf4c      	ite	mi
 80172cc:	801a      	strhmi	r2, [r3, #0]
 80172ce:	601a      	strpl	r2, [r3, #0]
 80172d0:	e6f4      	b.n	80170bc <__ssvfiscanf_r+0x50>
 80172d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80172d4:	4621      	mov	r1, r4
 80172d6:	4630      	mov	r0, r6
 80172d8:	4798      	blx	r3
 80172da:	2800      	cmp	r0, #0
 80172dc:	d0bf      	beq.n	801725e <__ssvfiscanf_r+0x1f2>
 80172de:	e79f      	b.n	8017220 <__ssvfiscanf_r+0x1b4>
 80172e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80172e2:	3201      	adds	r2, #1
 80172e4:	9245      	str	r2, [sp, #276]	@ 0x114
 80172e6:	6862      	ldr	r2, [r4, #4]
 80172e8:	3a01      	subs	r2, #1
 80172ea:	2a00      	cmp	r2, #0
 80172ec:	6062      	str	r2, [r4, #4]
 80172ee:	dd02      	ble.n	80172f6 <__ssvfiscanf_r+0x28a>
 80172f0:	3301      	adds	r3, #1
 80172f2:	6023      	str	r3, [r4, #0]
 80172f4:	e7b6      	b.n	8017264 <__ssvfiscanf_r+0x1f8>
 80172f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80172f8:	4621      	mov	r1, r4
 80172fa:	4630      	mov	r0, r6
 80172fc:	4798      	blx	r3
 80172fe:	2800      	cmp	r0, #0
 8017300:	d0b0      	beq.n	8017264 <__ssvfiscanf_r+0x1f8>
 8017302:	e78d      	b.n	8017220 <__ssvfiscanf_r+0x1b4>
 8017304:	2b04      	cmp	r3, #4
 8017306:	dc0f      	bgt.n	8017328 <__ssvfiscanf_r+0x2bc>
 8017308:	466b      	mov	r3, sp
 801730a:	4622      	mov	r2, r4
 801730c:	a941      	add	r1, sp, #260	@ 0x104
 801730e:	4630      	mov	r0, r6
 8017310:	f000 fb4a 	bl	80179a8 <_scanf_i>
 8017314:	e7b4      	b.n	8017280 <__ssvfiscanf_r+0x214>
 8017316:	bf00      	nop
 8017318:	08016fb9 	.word	0x08016fb9
 801731c:	08017033 	.word	0x08017033
 8017320:	0801a291 	.word	0x0801a291
 8017324:	0801a1b9 	.word	0x0801a1b9
 8017328:	4b0a      	ldr	r3, [pc, #40]	@ (8017354 <__ssvfiscanf_r+0x2e8>)
 801732a:	2b00      	cmp	r3, #0
 801732c:	f43f aec6 	beq.w	80170bc <__ssvfiscanf_r+0x50>
 8017330:	466b      	mov	r3, sp
 8017332:	4622      	mov	r2, r4
 8017334:	a941      	add	r1, sp, #260	@ 0x104
 8017336:	4630      	mov	r0, r6
 8017338:	f3af 8000 	nop.w
 801733c:	e7a0      	b.n	8017280 <__ssvfiscanf_r+0x214>
 801733e:	89a3      	ldrh	r3, [r4, #12]
 8017340:	065b      	lsls	r3, r3, #25
 8017342:	f53f af71 	bmi.w	8017228 <__ssvfiscanf_r+0x1bc>
 8017346:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801734e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017350:	e7f9      	b.n	8017346 <__ssvfiscanf_r+0x2da>
 8017352:	bf00      	nop
 8017354:	00000000 	.word	0x00000000

08017358 <__sfputc_r>:
 8017358:	6893      	ldr	r3, [r2, #8]
 801735a:	3b01      	subs	r3, #1
 801735c:	2b00      	cmp	r3, #0
 801735e:	b410      	push	{r4}
 8017360:	6093      	str	r3, [r2, #8]
 8017362:	da08      	bge.n	8017376 <__sfputc_r+0x1e>
 8017364:	6994      	ldr	r4, [r2, #24]
 8017366:	42a3      	cmp	r3, r4
 8017368:	db01      	blt.n	801736e <__sfputc_r+0x16>
 801736a:	290a      	cmp	r1, #10
 801736c:	d103      	bne.n	8017376 <__sfputc_r+0x1e>
 801736e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017372:	f7fe bb2c 	b.w	80159ce <__swbuf_r>
 8017376:	6813      	ldr	r3, [r2, #0]
 8017378:	1c58      	adds	r0, r3, #1
 801737a:	6010      	str	r0, [r2, #0]
 801737c:	7019      	strb	r1, [r3, #0]
 801737e:	4608      	mov	r0, r1
 8017380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017384:	4770      	bx	lr

08017386 <__sfputs_r>:
 8017386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017388:	4606      	mov	r6, r0
 801738a:	460f      	mov	r7, r1
 801738c:	4614      	mov	r4, r2
 801738e:	18d5      	adds	r5, r2, r3
 8017390:	42ac      	cmp	r4, r5
 8017392:	d101      	bne.n	8017398 <__sfputs_r+0x12>
 8017394:	2000      	movs	r0, #0
 8017396:	e007      	b.n	80173a8 <__sfputs_r+0x22>
 8017398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801739c:	463a      	mov	r2, r7
 801739e:	4630      	mov	r0, r6
 80173a0:	f7ff ffda 	bl	8017358 <__sfputc_r>
 80173a4:	1c43      	adds	r3, r0, #1
 80173a6:	d1f3      	bne.n	8017390 <__sfputs_r+0xa>
 80173a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080173ac <_vfiprintf_r>:
 80173ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b0:	460d      	mov	r5, r1
 80173b2:	b09d      	sub	sp, #116	@ 0x74
 80173b4:	4614      	mov	r4, r2
 80173b6:	4698      	mov	r8, r3
 80173b8:	4606      	mov	r6, r0
 80173ba:	b118      	cbz	r0, 80173c4 <_vfiprintf_r+0x18>
 80173bc:	6a03      	ldr	r3, [r0, #32]
 80173be:	b90b      	cbnz	r3, 80173c4 <_vfiprintf_r+0x18>
 80173c0:	f7fe f996 	bl	80156f0 <__sinit>
 80173c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173c6:	07d9      	lsls	r1, r3, #31
 80173c8:	d405      	bmi.n	80173d6 <_vfiprintf_r+0x2a>
 80173ca:	89ab      	ldrh	r3, [r5, #12]
 80173cc:	059a      	lsls	r2, r3, #22
 80173ce:	d402      	bmi.n	80173d6 <_vfiprintf_r+0x2a>
 80173d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173d2:	f7fe fc2c 	bl	8015c2e <__retarget_lock_acquire_recursive>
 80173d6:	89ab      	ldrh	r3, [r5, #12]
 80173d8:	071b      	lsls	r3, r3, #28
 80173da:	d501      	bpl.n	80173e0 <_vfiprintf_r+0x34>
 80173dc:	692b      	ldr	r3, [r5, #16]
 80173de:	b99b      	cbnz	r3, 8017408 <_vfiprintf_r+0x5c>
 80173e0:	4629      	mov	r1, r5
 80173e2:	4630      	mov	r0, r6
 80173e4:	f7fe fb32 	bl	8015a4c <__swsetup_r>
 80173e8:	b170      	cbz	r0, 8017408 <_vfiprintf_r+0x5c>
 80173ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173ec:	07dc      	lsls	r4, r3, #31
 80173ee:	d504      	bpl.n	80173fa <_vfiprintf_r+0x4e>
 80173f0:	f04f 30ff 	mov.w	r0, #4294967295
 80173f4:	b01d      	add	sp, #116	@ 0x74
 80173f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173fa:	89ab      	ldrh	r3, [r5, #12]
 80173fc:	0598      	lsls	r0, r3, #22
 80173fe:	d4f7      	bmi.n	80173f0 <_vfiprintf_r+0x44>
 8017400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017402:	f7fe fc15 	bl	8015c30 <__retarget_lock_release_recursive>
 8017406:	e7f3      	b.n	80173f0 <_vfiprintf_r+0x44>
 8017408:	2300      	movs	r3, #0
 801740a:	9309      	str	r3, [sp, #36]	@ 0x24
 801740c:	2320      	movs	r3, #32
 801740e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017412:	f8cd 800c 	str.w	r8, [sp, #12]
 8017416:	2330      	movs	r3, #48	@ 0x30
 8017418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80175c8 <_vfiprintf_r+0x21c>
 801741c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017420:	f04f 0901 	mov.w	r9, #1
 8017424:	4623      	mov	r3, r4
 8017426:	469a      	mov	sl, r3
 8017428:	f813 2b01 	ldrb.w	r2, [r3], #1
 801742c:	b10a      	cbz	r2, 8017432 <_vfiprintf_r+0x86>
 801742e:	2a25      	cmp	r2, #37	@ 0x25
 8017430:	d1f9      	bne.n	8017426 <_vfiprintf_r+0x7a>
 8017432:	ebba 0b04 	subs.w	fp, sl, r4
 8017436:	d00b      	beq.n	8017450 <_vfiprintf_r+0xa4>
 8017438:	465b      	mov	r3, fp
 801743a:	4622      	mov	r2, r4
 801743c:	4629      	mov	r1, r5
 801743e:	4630      	mov	r0, r6
 8017440:	f7ff ffa1 	bl	8017386 <__sfputs_r>
 8017444:	3001      	adds	r0, #1
 8017446:	f000 80a7 	beq.w	8017598 <_vfiprintf_r+0x1ec>
 801744a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801744c:	445a      	add	r2, fp
 801744e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017450:	f89a 3000 	ldrb.w	r3, [sl]
 8017454:	2b00      	cmp	r3, #0
 8017456:	f000 809f 	beq.w	8017598 <_vfiprintf_r+0x1ec>
 801745a:	2300      	movs	r3, #0
 801745c:	f04f 32ff 	mov.w	r2, #4294967295
 8017460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017464:	f10a 0a01 	add.w	sl, sl, #1
 8017468:	9304      	str	r3, [sp, #16]
 801746a:	9307      	str	r3, [sp, #28]
 801746c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017470:	931a      	str	r3, [sp, #104]	@ 0x68
 8017472:	4654      	mov	r4, sl
 8017474:	2205      	movs	r2, #5
 8017476:	f814 1b01 	ldrb.w	r1, [r4], #1
 801747a:	4853      	ldr	r0, [pc, #332]	@ (80175c8 <_vfiprintf_r+0x21c>)
 801747c:	f7f0 fee0 	bl	8008240 <memchr>
 8017480:	9a04      	ldr	r2, [sp, #16]
 8017482:	b9d8      	cbnz	r0, 80174bc <_vfiprintf_r+0x110>
 8017484:	06d1      	lsls	r1, r2, #27
 8017486:	bf44      	itt	mi
 8017488:	2320      	movmi	r3, #32
 801748a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801748e:	0713      	lsls	r3, r2, #28
 8017490:	bf44      	itt	mi
 8017492:	232b      	movmi	r3, #43	@ 0x2b
 8017494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017498:	f89a 3000 	ldrb.w	r3, [sl]
 801749c:	2b2a      	cmp	r3, #42	@ 0x2a
 801749e:	d015      	beq.n	80174cc <_vfiprintf_r+0x120>
 80174a0:	9a07      	ldr	r2, [sp, #28]
 80174a2:	4654      	mov	r4, sl
 80174a4:	2000      	movs	r0, #0
 80174a6:	f04f 0c0a 	mov.w	ip, #10
 80174aa:	4621      	mov	r1, r4
 80174ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174b0:	3b30      	subs	r3, #48	@ 0x30
 80174b2:	2b09      	cmp	r3, #9
 80174b4:	d94b      	bls.n	801754e <_vfiprintf_r+0x1a2>
 80174b6:	b1b0      	cbz	r0, 80174e6 <_vfiprintf_r+0x13a>
 80174b8:	9207      	str	r2, [sp, #28]
 80174ba:	e014      	b.n	80174e6 <_vfiprintf_r+0x13a>
 80174bc:	eba0 0308 	sub.w	r3, r0, r8
 80174c0:	fa09 f303 	lsl.w	r3, r9, r3
 80174c4:	4313      	orrs	r3, r2
 80174c6:	9304      	str	r3, [sp, #16]
 80174c8:	46a2      	mov	sl, r4
 80174ca:	e7d2      	b.n	8017472 <_vfiprintf_r+0xc6>
 80174cc:	9b03      	ldr	r3, [sp, #12]
 80174ce:	1d19      	adds	r1, r3, #4
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	9103      	str	r1, [sp, #12]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	bfbb      	ittet	lt
 80174d8:	425b      	neglt	r3, r3
 80174da:	f042 0202 	orrlt.w	r2, r2, #2
 80174de:	9307      	strge	r3, [sp, #28]
 80174e0:	9307      	strlt	r3, [sp, #28]
 80174e2:	bfb8      	it	lt
 80174e4:	9204      	strlt	r2, [sp, #16]
 80174e6:	7823      	ldrb	r3, [r4, #0]
 80174e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80174ea:	d10a      	bne.n	8017502 <_vfiprintf_r+0x156>
 80174ec:	7863      	ldrb	r3, [r4, #1]
 80174ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80174f0:	d132      	bne.n	8017558 <_vfiprintf_r+0x1ac>
 80174f2:	9b03      	ldr	r3, [sp, #12]
 80174f4:	1d1a      	adds	r2, r3, #4
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	9203      	str	r2, [sp, #12]
 80174fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174fe:	3402      	adds	r4, #2
 8017500:	9305      	str	r3, [sp, #20]
 8017502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80175d8 <_vfiprintf_r+0x22c>
 8017506:	7821      	ldrb	r1, [r4, #0]
 8017508:	2203      	movs	r2, #3
 801750a:	4650      	mov	r0, sl
 801750c:	f7f0 fe98 	bl	8008240 <memchr>
 8017510:	b138      	cbz	r0, 8017522 <_vfiprintf_r+0x176>
 8017512:	9b04      	ldr	r3, [sp, #16]
 8017514:	eba0 000a 	sub.w	r0, r0, sl
 8017518:	2240      	movs	r2, #64	@ 0x40
 801751a:	4082      	lsls	r2, r0
 801751c:	4313      	orrs	r3, r2
 801751e:	3401      	adds	r4, #1
 8017520:	9304      	str	r3, [sp, #16]
 8017522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017526:	4829      	ldr	r0, [pc, #164]	@ (80175cc <_vfiprintf_r+0x220>)
 8017528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801752c:	2206      	movs	r2, #6
 801752e:	f7f0 fe87 	bl	8008240 <memchr>
 8017532:	2800      	cmp	r0, #0
 8017534:	d03f      	beq.n	80175b6 <_vfiprintf_r+0x20a>
 8017536:	4b26      	ldr	r3, [pc, #152]	@ (80175d0 <_vfiprintf_r+0x224>)
 8017538:	bb1b      	cbnz	r3, 8017582 <_vfiprintf_r+0x1d6>
 801753a:	9b03      	ldr	r3, [sp, #12]
 801753c:	3307      	adds	r3, #7
 801753e:	f023 0307 	bic.w	r3, r3, #7
 8017542:	3308      	adds	r3, #8
 8017544:	9303      	str	r3, [sp, #12]
 8017546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017548:	443b      	add	r3, r7
 801754a:	9309      	str	r3, [sp, #36]	@ 0x24
 801754c:	e76a      	b.n	8017424 <_vfiprintf_r+0x78>
 801754e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017552:	460c      	mov	r4, r1
 8017554:	2001      	movs	r0, #1
 8017556:	e7a8      	b.n	80174aa <_vfiprintf_r+0xfe>
 8017558:	2300      	movs	r3, #0
 801755a:	3401      	adds	r4, #1
 801755c:	9305      	str	r3, [sp, #20]
 801755e:	4619      	mov	r1, r3
 8017560:	f04f 0c0a 	mov.w	ip, #10
 8017564:	4620      	mov	r0, r4
 8017566:	f810 2b01 	ldrb.w	r2, [r0], #1
 801756a:	3a30      	subs	r2, #48	@ 0x30
 801756c:	2a09      	cmp	r2, #9
 801756e:	d903      	bls.n	8017578 <_vfiprintf_r+0x1cc>
 8017570:	2b00      	cmp	r3, #0
 8017572:	d0c6      	beq.n	8017502 <_vfiprintf_r+0x156>
 8017574:	9105      	str	r1, [sp, #20]
 8017576:	e7c4      	b.n	8017502 <_vfiprintf_r+0x156>
 8017578:	fb0c 2101 	mla	r1, ip, r1, r2
 801757c:	4604      	mov	r4, r0
 801757e:	2301      	movs	r3, #1
 8017580:	e7f0      	b.n	8017564 <_vfiprintf_r+0x1b8>
 8017582:	ab03      	add	r3, sp, #12
 8017584:	9300      	str	r3, [sp, #0]
 8017586:	462a      	mov	r2, r5
 8017588:	4b12      	ldr	r3, [pc, #72]	@ (80175d4 <_vfiprintf_r+0x228>)
 801758a:	a904      	add	r1, sp, #16
 801758c:	4630      	mov	r0, r6
 801758e:	f3af 8000 	nop.w
 8017592:	4607      	mov	r7, r0
 8017594:	1c78      	adds	r0, r7, #1
 8017596:	d1d6      	bne.n	8017546 <_vfiprintf_r+0x19a>
 8017598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801759a:	07d9      	lsls	r1, r3, #31
 801759c:	d405      	bmi.n	80175aa <_vfiprintf_r+0x1fe>
 801759e:	89ab      	ldrh	r3, [r5, #12]
 80175a0:	059a      	lsls	r2, r3, #22
 80175a2:	d402      	bmi.n	80175aa <_vfiprintf_r+0x1fe>
 80175a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80175a6:	f7fe fb43 	bl	8015c30 <__retarget_lock_release_recursive>
 80175aa:	89ab      	ldrh	r3, [r5, #12]
 80175ac:	065b      	lsls	r3, r3, #25
 80175ae:	f53f af1f 	bmi.w	80173f0 <_vfiprintf_r+0x44>
 80175b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175b4:	e71e      	b.n	80173f4 <_vfiprintf_r+0x48>
 80175b6:	ab03      	add	r3, sp, #12
 80175b8:	9300      	str	r3, [sp, #0]
 80175ba:	462a      	mov	r2, r5
 80175bc:	4b05      	ldr	r3, [pc, #20]	@ (80175d4 <_vfiprintf_r+0x228>)
 80175be:	a904      	add	r1, sp, #16
 80175c0:	4630      	mov	r0, r6
 80175c2:	f000 f879 	bl	80176b8 <_printf_i>
 80175c6:	e7e4      	b.n	8017592 <_vfiprintf_r+0x1e6>
 80175c8:	0801a1b3 	.word	0x0801a1b3
 80175cc:	0801a1bd 	.word	0x0801a1bd
 80175d0:	00000000 	.word	0x00000000
 80175d4:	08017387 	.word	0x08017387
 80175d8:	0801a1b9 	.word	0x0801a1b9

080175dc <_printf_common>:
 80175dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175e0:	4616      	mov	r6, r2
 80175e2:	4698      	mov	r8, r3
 80175e4:	688a      	ldr	r2, [r1, #8]
 80175e6:	690b      	ldr	r3, [r1, #16]
 80175e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80175ec:	4293      	cmp	r3, r2
 80175ee:	bfb8      	it	lt
 80175f0:	4613      	movlt	r3, r2
 80175f2:	6033      	str	r3, [r6, #0]
 80175f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80175f8:	4607      	mov	r7, r0
 80175fa:	460c      	mov	r4, r1
 80175fc:	b10a      	cbz	r2, 8017602 <_printf_common+0x26>
 80175fe:	3301      	adds	r3, #1
 8017600:	6033      	str	r3, [r6, #0]
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	0699      	lsls	r1, r3, #26
 8017606:	bf42      	ittt	mi
 8017608:	6833      	ldrmi	r3, [r6, #0]
 801760a:	3302      	addmi	r3, #2
 801760c:	6033      	strmi	r3, [r6, #0]
 801760e:	6825      	ldr	r5, [r4, #0]
 8017610:	f015 0506 	ands.w	r5, r5, #6
 8017614:	d106      	bne.n	8017624 <_printf_common+0x48>
 8017616:	f104 0a19 	add.w	sl, r4, #25
 801761a:	68e3      	ldr	r3, [r4, #12]
 801761c:	6832      	ldr	r2, [r6, #0]
 801761e:	1a9b      	subs	r3, r3, r2
 8017620:	42ab      	cmp	r3, r5
 8017622:	dc26      	bgt.n	8017672 <_printf_common+0x96>
 8017624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017628:	6822      	ldr	r2, [r4, #0]
 801762a:	3b00      	subs	r3, #0
 801762c:	bf18      	it	ne
 801762e:	2301      	movne	r3, #1
 8017630:	0692      	lsls	r2, r2, #26
 8017632:	d42b      	bmi.n	801768c <_printf_common+0xb0>
 8017634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017638:	4641      	mov	r1, r8
 801763a:	4638      	mov	r0, r7
 801763c:	47c8      	blx	r9
 801763e:	3001      	adds	r0, #1
 8017640:	d01e      	beq.n	8017680 <_printf_common+0xa4>
 8017642:	6823      	ldr	r3, [r4, #0]
 8017644:	6922      	ldr	r2, [r4, #16]
 8017646:	f003 0306 	and.w	r3, r3, #6
 801764a:	2b04      	cmp	r3, #4
 801764c:	bf02      	ittt	eq
 801764e:	68e5      	ldreq	r5, [r4, #12]
 8017650:	6833      	ldreq	r3, [r6, #0]
 8017652:	1aed      	subeq	r5, r5, r3
 8017654:	68a3      	ldr	r3, [r4, #8]
 8017656:	bf0c      	ite	eq
 8017658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801765c:	2500      	movne	r5, #0
 801765e:	4293      	cmp	r3, r2
 8017660:	bfc4      	itt	gt
 8017662:	1a9b      	subgt	r3, r3, r2
 8017664:	18ed      	addgt	r5, r5, r3
 8017666:	2600      	movs	r6, #0
 8017668:	341a      	adds	r4, #26
 801766a:	42b5      	cmp	r5, r6
 801766c:	d11a      	bne.n	80176a4 <_printf_common+0xc8>
 801766e:	2000      	movs	r0, #0
 8017670:	e008      	b.n	8017684 <_printf_common+0xa8>
 8017672:	2301      	movs	r3, #1
 8017674:	4652      	mov	r2, sl
 8017676:	4641      	mov	r1, r8
 8017678:	4638      	mov	r0, r7
 801767a:	47c8      	blx	r9
 801767c:	3001      	adds	r0, #1
 801767e:	d103      	bne.n	8017688 <_printf_common+0xac>
 8017680:	f04f 30ff 	mov.w	r0, #4294967295
 8017684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017688:	3501      	adds	r5, #1
 801768a:	e7c6      	b.n	801761a <_printf_common+0x3e>
 801768c:	18e1      	adds	r1, r4, r3
 801768e:	1c5a      	adds	r2, r3, #1
 8017690:	2030      	movs	r0, #48	@ 0x30
 8017692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017696:	4422      	add	r2, r4
 8017698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801769c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80176a0:	3302      	adds	r3, #2
 80176a2:	e7c7      	b.n	8017634 <_printf_common+0x58>
 80176a4:	2301      	movs	r3, #1
 80176a6:	4622      	mov	r2, r4
 80176a8:	4641      	mov	r1, r8
 80176aa:	4638      	mov	r0, r7
 80176ac:	47c8      	blx	r9
 80176ae:	3001      	adds	r0, #1
 80176b0:	d0e6      	beq.n	8017680 <_printf_common+0xa4>
 80176b2:	3601      	adds	r6, #1
 80176b4:	e7d9      	b.n	801766a <_printf_common+0x8e>
	...

080176b8 <_printf_i>:
 80176b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80176bc:	7e0f      	ldrb	r7, [r1, #24]
 80176be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80176c0:	2f78      	cmp	r7, #120	@ 0x78
 80176c2:	4691      	mov	r9, r2
 80176c4:	4680      	mov	r8, r0
 80176c6:	460c      	mov	r4, r1
 80176c8:	469a      	mov	sl, r3
 80176ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80176ce:	d807      	bhi.n	80176e0 <_printf_i+0x28>
 80176d0:	2f62      	cmp	r7, #98	@ 0x62
 80176d2:	d80a      	bhi.n	80176ea <_printf_i+0x32>
 80176d4:	2f00      	cmp	r7, #0
 80176d6:	f000 80d1 	beq.w	801787c <_printf_i+0x1c4>
 80176da:	2f58      	cmp	r7, #88	@ 0x58
 80176dc:	f000 80b8 	beq.w	8017850 <_printf_i+0x198>
 80176e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80176e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80176e8:	e03a      	b.n	8017760 <_printf_i+0xa8>
 80176ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80176ee:	2b15      	cmp	r3, #21
 80176f0:	d8f6      	bhi.n	80176e0 <_printf_i+0x28>
 80176f2:	a101      	add	r1, pc, #4	@ (adr r1, 80176f8 <_printf_i+0x40>)
 80176f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80176f8:	08017751 	.word	0x08017751
 80176fc:	08017765 	.word	0x08017765
 8017700:	080176e1 	.word	0x080176e1
 8017704:	080176e1 	.word	0x080176e1
 8017708:	080176e1 	.word	0x080176e1
 801770c:	080176e1 	.word	0x080176e1
 8017710:	08017765 	.word	0x08017765
 8017714:	080176e1 	.word	0x080176e1
 8017718:	080176e1 	.word	0x080176e1
 801771c:	080176e1 	.word	0x080176e1
 8017720:	080176e1 	.word	0x080176e1
 8017724:	08017863 	.word	0x08017863
 8017728:	0801778f 	.word	0x0801778f
 801772c:	0801781d 	.word	0x0801781d
 8017730:	080176e1 	.word	0x080176e1
 8017734:	080176e1 	.word	0x080176e1
 8017738:	08017885 	.word	0x08017885
 801773c:	080176e1 	.word	0x080176e1
 8017740:	0801778f 	.word	0x0801778f
 8017744:	080176e1 	.word	0x080176e1
 8017748:	080176e1 	.word	0x080176e1
 801774c:	08017825 	.word	0x08017825
 8017750:	6833      	ldr	r3, [r6, #0]
 8017752:	1d1a      	adds	r2, r3, #4
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	6032      	str	r2, [r6, #0]
 8017758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801775c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017760:	2301      	movs	r3, #1
 8017762:	e09c      	b.n	801789e <_printf_i+0x1e6>
 8017764:	6833      	ldr	r3, [r6, #0]
 8017766:	6820      	ldr	r0, [r4, #0]
 8017768:	1d19      	adds	r1, r3, #4
 801776a:	6031      	str	r1, [r6, #0]
 801776c:	0606      	lsls	r6, r0, #24
 801776e:	d501      	bpl.n	8017774 <_printf_i+0xbc>
 8017770:	681d      	ldr	r5, [r3, #0]
 8017772:	e003      	b.n	801777c <_printf_i+0xc4>
 8017774:	0645      	lsls	r5, r0, #25
 8017776:	d5fb      	bpl.n	8017770 <_printf_i+0xb8>
 8017778:	f9b3 5000 	ldrsh.w	r5, [r3]
 801777c:	2d00      	cmp	r5, #0
 801777e:	da03      	bge.n	8017788 <_printf_i+0xd0>
 8017780:	232d      	movs	r3, #45	@ 0x2d
 8017782:	426d      	negs	r5, r5
 8017784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017788:	4858      	ldr	r0, [pc, #352]	@ (80178ec <_printf_i+0x234>)
 801778a:	230a      	movs	r3, #10
 801778c:	e011      	b.n	80177b2 <_printf_i+0xfa>
 801778e:	6821      	ldr	r1, [r4, #0]
 8017790:	6833      	ldr	r3, [r6, #0]
 8017792:	0608      	lsls	r0, r1, #24
 8017794:	f853 5b04 	ldr.w	r5, [r3], #4
 8017798:	d402      	bmi.n	80177a0 <_printf_i+0xe8>
 801779a:	0649      	lsls	r1, r1, #25
 801779c:	bf48      	it	mi
 801779e:	b2ad      	uxthmi	r5, r5
 80177a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80177a2:	4852      	ldr	r0, [pc, #328]	@ (80178ec <_printf_i+0x234>)
 80177a4:	6033      	str	r3, [r6, #0]
 80177a6:	bf14      	ite	ne
 80177a8:	230a      	movne	r3, #10
 80177aa:	2308      	moveq	r3, #8
 80177ac:	2100      	movs	r1, #0
 80177ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80177b2:	6866      	ldr	r6, [r4, #4]
 80177b4:	60a6      	str	r6, [r4, #8]
 80177b6:	2e00      	cmp	r6, #0
 80177b8:	db05      	blt.n	80177c6 <_printf_i+0x10e>
 80177ba:	6821      	ldr	r1, [r4, #0]
 80177bc:	432e      	orrs	r6, r5
 80177be:	f021 0104 	bic.w	r1, r1, #4
 80177c2:	6021      	str	r1, [r4, #0]
 80177c4:	d04b      	beq.n	801785e <_printf_i+0x1a6>
 80177c6:	4616      	mov	r6, r2
 80177c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80177cc:	fb03 5711 	mls	r7, r3, r1, r5
 80177d0:	5dc7      	ldrb	r7, [r0, r7]
 80177d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80177d6:	462f      	mov	r7, r5
 80177d8:	42bb      	cmp	r3, r7
 80177da:	460d      	mov	r5, r1
 80177dc:	d9f4      	bls.n	80177c8 <_printf_i+0x110>
 80177de:	2b08      	cmp	r3, #8
 80177e0:	d10b      	bne.n	80177fa <_printf_i+0x142>
 80177e2:	6823      	ldr	r3, [r4, #0]
 80177e4:	07df      	lsls	r7, r3, #31
 80177e6:	d508      	bpl.n	80177fa <_printf_i+0x142>
 80177e8:	6923      	ldr	r3, [r4, #16]
 80177ea:	6861      	ldr	r1, [r4, #4]
 80177ec:	4299      	cmp	r1, r3
 80177ee:	bfde      	ittt	le
 80177f0:	2330      	movle	r3, #48	@ 0x30
 80177f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80177f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80177fa:	1b92      	subs	r2, r2, r6
 80177fc:	6122      	str	r2, [r4, #16]
 80177fe:	f8cd a000 	str.w	sl, [sp]
 8017802:	464b      	mov	r3, r9
 8017804:	aa03      	add	r2, sp, #12
 8017806:	4621      	mov	r1, r4
 8017808:	4640      	mov	r0, r8
 801780a:	f7ff fee7 	bl	80175dc <_printf_common>
 801780e:	3001      	adds	r0, #1
 8017810:	d14a      	bne.n	80178a8 <_printf_i+0x1f0>
 8017812:	f04f 30ff 	mov.w	r0, #4294967295
 8017816:	b004      	add	sp, #16
 8017818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801781c:	6823      	ldr	r3, [r4, #0]
 801781e:	f043 0320 	orr.w	r3, r3, #32
 8017822:	6023      	str	r3, [r4, #0]
 8017824:	4832      	ldr	r0, [pc, #200]	@ (80178f0 <_printf_i+0x238>)
 8017826:	2778      	movs	r7, #120	@ 0x78
 8017828:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	6831      	ldr	r1, [r6, #0]
 8017830:	061f      	lsls	r7, r3, #24
 8017832:	f851 5b04 	ldr.w	r5, [r1], #4
 8017836:	d402      	bmi.n	801783e <_printf_i+0x186>
 8017838:	065f      	lsls	r7, r3, #25
 801783a:	bf48      	it	mi
 801783c:	b2ad      	uxthmi	r5, r5
 801783e:	6031      	str	r1, [r6, #0]
 8017840:	07d9      	lsls	r1, r3, #31
 8017842:	bf44      	itt	mi
 8017844:	f043 0320 	orrmi.w	r3, r3, #32
 8017848:	6023      	strmi	r3, [r4, #0]
 801784a:	b11d      	cbz	r5, 8017854 <_printf_i+0x19c>
 801784c:	2310      	movs	r3, #16
 801784e:	e7ad      	b.n	80177ac <_printf_i+0xf4>
 8017850:	4826      	ldr	r0, [pc, #152]	@ (80178ec <_printf_i+0x234>)
 8017852:	e7e9      	b.n	8017828 <_printf_i+0x170>
 8017854:	6823      	ldr	r3, [r4, #0]
 8017856:	f023 0320 	bic.w	r3, r3, #32
 801785a:	6023      	str	r3, [r4, #0]
 801785c:	e7f6      	b.n	801784c <_printf_i+0x194>
 801785e:	4616      	mov	r6, r2
 8017860:	e7bd      	b.n	80177de <_printf_i+0x126>
 8017862:	6833      	ldr	r3, [r6, #0]
 8017864:	6825      	ldr	r5, [r4, #0]
 8017866:	6961      	ldr	r1, [r4, #20]
 8017868:	1d18      	adds	r0, r3, #4
 801786a:	6030      	str	r0, [r6, #0]
 801786c:	062e      	lsls	r6, r5, #24
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	d501      	bpl.n	8017876 <_printf_i+0x1be>
 8017872:	6019      	str	r1, [r3, #0]
 8017874:	e002      	b.n	801787c <_printf_i+0x1c4>
 8017876:	0668      	lsls	r0, r5, #25
 8017878:	d5fb      	bpl.n	8017872 <_printf_i+0x1ba>
 801787a:	8019      	strh	r1, [r3, #0]
 801787c:	2300      	movs	r3, #0
 801787e:	6123      	str	r3, [r4, #16]
 8017880:	4616      	mov	r6, r2
 8017882:	e7bc      	b.n	80177fe <_printf_i+0x146>
 8017884:	6833      	ldr	r3, [r6, #0]
 8017886:	1d1a      	adds	r2, r3, #4
 8017888:	6032      	str	r2, [r6, #0]
 801788a:	681e      	ldr	r6, [r3, #0]
 801788c:	6862      	ldr	r2, [r4, #4]
 801788e:	2100      	movs	r1, #0
 8017890:	4630      	mov	r0, r6
 8017892:	f7f0 fcd5 	bl	8008240 <memchr>
 8017896:	b108      	cbz	r0, 801789c <_printf_i+0x1e4>
 8017898:	1b80      	subs	r0, r0, r6
 801789a:	6060      	str	r0, [r4, #4]
 801789c:	6863      	ldr	r3, [r4, #4]
 801789e:	6123      	str	r3, [r4, #16]
 80178a0:	2300      	movs	r3, #0
 80178a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80178a6:	e7aa      	b.n	80177fe <_printf_i+0x146>
 80178a8:	6923      	ldr	r3, [r4, #16]
 80178aa:	4632      	mov	r2, r6
 80178ac:	4649      	mov	r1, r9
 80178ae:	4640      	mov	r0, r8
 80178b0:	47d0      	blx	sl
 80178b2:	3001      	adds	r0, #1
 80178b4:	d0ad      	beq.n	8017812 <_printf_i+0x15a>
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	079b      	lsls	r3, r3, #30
 80178ba:	d413      	bmi.n	80178e4 <_printf_i+0x22c>
 80178bc:	68e0      	ldr	r0, [r4, #12]
 80178be:	9b03      	ldr	r3, [sp, #12]
 80178c0:	4298      	cmp	r0, r3
 80178c2:	bfb8      	it	lt
 80178c4:	4618      	movlt	r0, r3
 80178c6:	e7a6      	b.n	8017816 <_printf_i+0x15e>
 80178c8:	2301      	movs	r3, #1
 80178ca:	4632      	mov	r2, r6
 80178cc:	4649      	mov	r1, r9
 80178ce:	4640      	mov	r0, r8
 80178d0:	47d0      	blx	sl
 80178d2:	3001      	adds	r0, #1
 80178d4:	d09d      	beq.n	8017812 <_printf_i+0x15a>
 80178d6:	3501      	adds	r5, #1
 80178d8:	68e3      	ldr	r3, [r4, #12]
 80178da:	9903      	ldr	r1, [sp, #12]
 80178dc:	1a5b      	subs	r3, r3, r1
 80178de:	42ab      	cmp	r3, r5
 80178e0:	dcf2      	bgt.n	80178c8 <_printf_i+0x210>
 80178e2:	e7eb      	b.n	80178bc <_printf_i+0x204>
 80178e4:	2500      	movs	r5, #0
 80178e6:	f104 0619 	add.w	r6, r4, #25
 80178ea:	e7f5      	b.n	80178d8 <_printf_i+0x220>
 80178ec:	0801a1c4 	.word	0x0801a1c4
 80178f0:	0801a1d5 	.word	0x0801a1d5

080178f4 <_scanf_chars>:
 80178f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178f8:	4615      	mov	r5, r2
 80178fa:	688a      	ldr	r2, [r1, #8]
 80178fc:	4680      	mov	r8, r0
 80178fe:	460c      	mov	r4, r1
 8017900:	b932      	cbnz	r2, 8017910 <_scanf_chars+0x1c>
 8017902:	698a      	ldr	r2, [r1, #24]
 8017904:	2a00      	cmp	r2, #0
 8017906:	bf14      	ite	ne
 8017908:	f04f 32ff 	movne.w	r2, #4294967295
 801790c:	2201      	moveq	r2, #1
 801790e:	608a      	str	r2, [r1, #8]
 8017910:	6822      	ldr	r2, [r4, #0]
 8017912:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80179a4 <_scanf_chars+0xb0>
 8017916:	06d1      	lsls	r1, r2, #27
 8017918:	bf5f      	itttt	pl
 801791a:	681a      	ldrpl	r2, [r3, #0]
 801791c:	1d11      	addpl	r1, r2, #4
 801791e:	6019      	strpl	r1, [r3, #0]
 8017920:	6816      	ldrpl	r6, [r2, #0]
 8017922:	2700      	movs	r7, #0
 8017924:	69a0      	ldr	r0, [r4, #24]
 8017926:	b188      	cbz	r0, 801794c <_scanf_chars+0x58>
 8017928:	2801      	cmp	r0, #1
 801792a:	d107      	bne.n	801793c <_scanf_chars+0x48>
 801792c:	682b      	ldr	r3, [r5, #0]
 801792e:	781a      	ldrb	r2, [r3, #0]
 8017930:	6963      	ldr	r3, [r4, #20]
 8017932:	5c9b      	ldrb	r3, [r3, r2]
 8017934:	b953      	cbnz	r3, 801794c <_scanf_chars+0x58>
 8017936:	2f00      	cmp	r7, #0
 8017938:	d031      	beq.n	801799e <_scanf_chars+0xaa>
 801793a:	e022      	b.n	8017982 <_scanf_chars+0x8e>
 801793c:	2802      	cmp	r0, #2
 801793e:	d120      	bne.n	8017982 <_scanf_chars+0x8e>
 8017940:	682b      	ldr	r3, [r5, #0]
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017948:	071b      	lsls	r3, r3, #28
 801794a:	d41a      	bmi.n	8017982 <_scanf_chars+0x8e>
 801794c:	6823      	ldr	r3, [r4, #0]
 801794e:	06da      	lsls	r2, r3, #27
 8017950:	bf5e      	ittt	pl
 8017952:	682b      	ldrpl	r3, [r5, #0]
 8017954:	781b      	ldrbpl	r3, [r3, #0]
 8017956:	f806 3b01 	strbpl.w	r3, [r6], #1
 801795a:	682a      	ldr	r2, [r5, #0]
 801795c:	686b      	ldr	r3, [r5, #4]
 801795e:	3201      	adds	r2, #1
 8017960:	602a      	str	r2, [r5, #0]
 8017962:	68a2      	ldr	r2, [r4, #8]
 8017964:	3b01      	subs	r3, #1
 8017966:	3a01      	subs	r2, #1
 8017968:	606b      	str	r3, [r5, #4]
 801796a:	3701      	adds	r7, #1
 801796c:	60a2      	str	r2, [r4, #8]
 801796e:	b142      	cbz	r2, 8017982 <_scanf_chars+0x8e>
 8017970:	2b00      	cmp	r3, #0
 8017972:	dcd7      	bgt.n	8017924 <_scanf_chars+0x30>
 8017974:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017978:	4629      	mov	r1, r5
 801797a:	4640      	mov	r0, r8
 801797c:	4798      	blx	r3
 801797e:	2800      	cmp	r0, #0
 8017980:	d0d0      	beq.n	8017924 <_scanf_chars+0x30>
 8017982:	6823      	ldr	r3, [r4, #0]
 8017984:	f013 0310 	ands.w	r3, r3, #16
 8017988:	d105      	bne.n	8017996 <_scanf_chars+0xa2>
 801798a:	68e2      	ldr	r2, [r4, #12]
 801798c:	3201      	adds	r2, #1
 801798e:	60e2      	str	r2, [r4, #12]
 8017990:	69a2      	ldr	r2, [r4, #24]
 8017992:	b102      	cbz	r2, 8017996 <_scanf_chars+0xa2>
 8017994:	7033      	strb	r3, [r6, #0]
 8017996:	6923      	ldr	r3, [r4, #16]
 8017998:	443b      	add	r3, r7
 801799a:	6123      	str	r3, [r4, #16]
 801799c:	2000      	movs	r0, #0
 801799e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179a2:	bf00      	nop
 80179a4:	0801a291 	.word	0x0801a291

080179a8 <_scanf_i>:
 80179a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ac:	4698      	mov	r8, r3
 80179ae:	4b74      	ldr	r3, [pc, #464]	@ (8017b80 <_scanf_i+0x1d8>)
 80179b0:	460c      	mov	r4, r1
 80179b2:	4682      	mov	sl, r0
 80179b4:	4616      	mov	r6, r2
 80179b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80179ba:	b087      	sub	sp, #28
 80179bc:	ab03      	add	r3, sp, #12
 80179be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80179c2:	4b70      	ldr	r3, [pc, #448]	@ (8017b84 <_scanf_i+0x1dc>)
 80179c4:	69a1      	ldr	r1, [r4, #24]
 80179c6:	4a70      	ldr	r2, [pc, #448]	@ (8017b88 <_scanf_i+0x1e0>)
 80179c8:	2903      	cmp	r1, #3
 80179ca:	bf08      	it	eq
 80179cc:	461a      	moveq	r2, r3
 80179ce:	68a3      	ldr	r3, [r4, #8]
 80179d0:	9201      	str	r2, [sp, #4]
 80179d2:	1e5a      	subs	r2, r3, #1
 80179d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80179d8:	bf88      	it	hi
 80179da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80179de:	4627      	mov	r7, r4
 80179e0:	bf82      	ittt	hi
 80179e2:	eb03 0905 	addhi.w	r9, r3, r5
 80179e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80179ea:	60a3      	strhi	r3, [r4, #8]
 80179ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80179f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80179f4:	bf98      	it	ls
 80179f6:	f04f 0900 	movls.w	r9, #0
 80179fa:	6023      	str	r3, [r4, #0]
 80179fc:	463d      	mov	r5, r7
 80179fe:	f04f 0b00 	mov.w	fp, #0
 8017a02:	6831      	ldr	r1, [r6, #0]
 8017a04:	ab03      	add	r3, sp, #12
 8017a06:	7809      	ldrb	r1, [r1, #0]
 8017a08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017a0c:	2202      	movs	r2, #2
 8017a0e:	f7f0 fc17 	bl	8008240 <memchr>
 8017a12:	b328      	cbz	r0, 8017a60 <_scanf_i+0xb8>
 8017a14:	f1bb 0f01 	cmp.w	fp, #1
 8017a18:	d159      	bne.n	8017ace <_scanf_i+0x126>
 8017a1a:	6862      	ldr	r2, [r4, #4]
 8017a1c:	b92a      	cbnz	r2, 8017a2a <_scanf_i+0x82>
 8017a1e:	6822      	ldr	r2, [r4, #0]
 8017a20:	2108      	movs	r1, #8
 8017a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017a26:	6061      	str	r1, [r4, #4]
 8017a28:	6022      	str	r2, [r4, #0]
 8017a2a:	6822      	ldr	r2, [r4, #0]
 8017a2c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017a30:	6022      	str	r2, [r4, #0]
 8017a32:	68a2      	ldr	r2, [r4, #8]
 8017a34:	1e51      	subs	r1, r2, #1
 8017a36:	60a1      	str	r1, [r4, #8]
 8017a38:	b192      	cbz	r2, 8017a60 <_scanf_i+0xb8>
 8017a3a:	6832      	ldr	r2, [r6, #0]
 8017a3c:	1c51      	adds	r1, r2, #1
 8017a3e:	6031      	str	r1, [r6, #0]
 8017a40:	7812      	ldrb	r2, [r2, #0]
 8017a42:	f805 2b01 	strb.w	r2, [r5], #1
 8017a46:	6872      	ldr	r2, [r6, #4]
 8017a48:	3a01      	subs	r2, #1
 8017a4a:	2a00      	cmp	r2, #0
 8017a4c:	6072      	str	r2, [r6, #4]
 8017a4e:	dc07      	bgt.n	8017a60 <_scanf_i+0xb8>
 8017a50:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017a54:	4631      	mov	r1, r6
 8017a56:	4650      	mov	r0, sl
 8017a58:	4790      	blx	r2
 8017a5a:	2800      	cmp	r0, #0
 8017a5c:	f040 8085 	bne.w	8017b6a <_scanf_i+0x1c2>
 8017a60:	f10b 0b01 	add.w	fp, fp, #1
 8017a64:	f1bb 0f03 	cmp.w	fp, #3
 8017a68:	d1cb      	bne.n	8017a02 <_scanf_i+0x5a>
 8017a6a:	6863      	ldr	r3, [r4, #4]
 8017a6c:	b90b      	cbnz	r3, 8017a72 <_scanf_i+0xca>
 8017a6e:	230a      	movs	r3, #10
 8017a70:	6063      	str	r3, [r4, #4]
 8017a72:	6863      	ldr	r3, [r4, #4]
 8017a74:	4945      	ldr	r1, [pc, #276]	@ (8017b8c <_scanf_i+0x1e4>)
 8017a76:	6960      	ldr	r0, [r4, #20]
 8017a78:	1ac9      	subs	r1, r1, r3
 8017a7a:	f000 f997 	bl	8017dac <__sccl>
 8017a7e:	f04f 0b00 	mov.w	fp, #0
 8017a82:	68a3      	ldr	r3, [r4, #8]
 8017a84:	6822      	ldr	r2, [r4, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d03d      	beq.n	8017b06 <_scanf_i+0x15e>
 8017a8a:	6831      	ldr	r1, [r6, #0]
 8017a8c:	6960      	ldr	r0, [r4, #20]
 8017a8e:	f891 c000 	ldrb.w	ip, [r1]
 8017a92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d035      	beq.n	8017b06 <_scanf_i+0x15e>
 8017a9a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017a9e:	d124      	bne.n	8017aea <_scanf_i+0x142>
 8017aa0:	0510      	lsls	r0, r2, #20
 8017aa2:	d522      	bpl.n	8017aea <_scanf_i+0x142>
 8017aa4:	f10b 0b01 	add.w	fp, fp, #1
 8017aa8:	f1b9 0f00 	cmp.w	r9, #0
 8017aac:	d003      	beq.n	8017ab6 <_scanf_i+0x10e>
 8017aae:	3301      	adds	r3, #1
 8017ab0:	f109 39ff 	add.w	r9, r9, #4294967295
 8017ab4:	60a3      	str	r3, [r4, #8]
 8017ab6:	6873      	ldr	r3, [r6, #4]
 8017ab8:	3b01      	subs	r3, #1
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	6073      	str	r3, [r6, #4]
 8017abe:	dd1b      	ble.n	8017af8 <_scanf_i+0x150>
 8017ac0:	6833      	ldr	r3, [r6, #0]
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	6033      	str	r3, [r6, #0]
 8017ac6:	68a3      	ldr	r3, [r4, #8]
 8017ac8:	3b01      	subs	r3, #1
 8017aca:	60a3      	str	r3, [r4, #8]
 8017acc:	e7d9      	b.n	8017a82 <_scanf_i+0xda>
 8017ace:	f1bb 0f02 	cmp.w	fp, #2
 8017ad2:	d1ae      	bne.n	8017a32 <_scanf_i+0x8a>
 8017ad4:	6822      	ldr	r2, [r4, #0]
 8017ad6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017ada:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017ade:	d1c4      	bne.n	8017a6a <_scanf_i+0xc2>
 8017ae0:	2110      	movs	r1, #16
 8017ae2:	6061      	str	r1, [r4, #4]
 8017ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017ae8:	e7a2      	b.n	8017a30 <_scanf_i+0x88>
 8017aea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017aee:	6022      	str	r2, [r4, #0]
 8017af0:	780b      	ldrb	r3, [r1, #0]
 8017af2:	f805 3b01 	strb.w	r3, [r5], #1
 8017af6:	e7de      	b.n	8017ab6 <_scanf_i+0x10e>
 8017af8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017afc:	4631      	mov	r1, r6
 8017afe:	4650      	mov	r0, sl
 8017b00:	4798      	blx	r3
 8017b02:	2800      	cmp	r0, #0
 8017b04:	d0df      	beq.n	8017ac6 <_scanf_i+0x11e>
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	05d9      	lsls	r1, r3, #23
 8017b0a:	d50d      	bpl.n	8017b28 <_scanf_i+0x180>
 8017b0c:	42bd      	cmp	r5, r7
 8017b0e:	d909      	bls.n	8017b24 <_scanf_i+0x17c>
 8017b10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017b18:	4632      	mov	r2, r6
 8017b1a:	4650      	mov	r0, sl
 8017b1c:	4798      	blx	r3
 8017b1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8017b22:	464d      	mov	r5, r9
 8017b24:	42bd      	cmp	r5, r7
 8017b26:	d028      	beq.n	8017b7a <_scanf_i+0x1d2>
 8017b28:	6822      	ldr	r2, [r4, #0]
 8017b2a:	f012 0210 	ands.w	r2, r2, #16
 8017b2e:	d113      	bne.n	8017b58 <_scanf_i+0x1b0>
 8017b30:	702a      	strb	r2, [r5, #0]
 8017b32:	6863      	ldr	r3, [r4, #4]
 8017b34:	9e01      	ldr	r6, [sp, #4]
 8017b36:	4639      	mov	r1, r7
 8017b38:	4650      	mov	r0, sl
 8017b3a:	47b0      	blx	r6
 8017b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8017b40:	6821      	ldr	r1, [r4, #0]
 8017b42:	1d1a      	adds	r2, r3, #4
 8017b44:	f8c8 2000 	str.w	r2, [r8]
 8017b48:	f011 0f20 	tst.w	r1, #32
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	d00f      	beq.n	8017b70 <_scanf_i+0x1c8>
 8017b50:	6018      	str	r0, [r3, #0]
 8017b52:	68e3      	ldr	r3, [r4, #12]
 8017b54:	3301      	adds	r3, #1
 8017b56:	60e3      	str	r3, [r4, #12]
 8017b58:	6923      	ldr	r3, [r4, #16]
 8017b5a:	1bed      	subs	r5, r5, r7
 8017b5c:	445d      	add	r5, fp
 8017b5e:	442b      	add	r3, r5
 8017b60:	6123      	str	r3, [r4, #16]
 8017b62:	2000      	movs	r0, #0
 8017b64:	b007      	add	sp, #28
 8017b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6a:	f04f 0b00 	mov.w	fp, #0
 8017b6e:	e7ca      	b.n	8017b06 <_scanf_i+0x15e>
 8017b70:	07ca      	lsls	r2, r1, #31
 8017b72:	bf4c      	ite	mi
 8017b74:	8018      	strhmi	r0, [r3, #0]
 8017b76:	6018      	strpl	r0, [r3, #0]
 8017b78:	e7eb      	b.n	8017b52 <_scanf_i+0x1aa>
 8017b7a:	2001      	movs	r0, #1
 8017b7c:	e7f2      	b.n	8017b64 <_scanf_i+0x1bc>
 8017b7e:	bf00      	nop
 8017b80:	08018564 	.word	0x08018564
 8017b84:	08018065 	.word	0x08018065
 8017b88:	08018145 	.word	0x08018145
 8017b8c:	0801a1f6 	.word	0x0801a1f6

08017b90 <__sflush_r>:
 8017b90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b98:	0716      	lsls	r6, r2, #28
 8017b9a:	4605      	mov	r5, r0
 8017b9c:	460c      	mov	r4, r1
 8017b9e:	d454      	bmi.n	8017c4a <__sflush_r+0xba>
 8017ba0:	684b      	ldr	r3, [r1, #4]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	dc02      	bgt.n	8017bac <__sflush_r+0x1c>
 8017ba6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	dd48      	ble.n	8017c3e <__sflush_r+0xae>
 8017bac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017bae:	2e00      	cmp	r6, #0
 8017bb0:	d045      	beq.n	8017c3e <__sflush_r+0xae>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017bb8:	682f      	ldr	r7, [r5, #0]
 8017bba:	6a21      	ldr	r1, [r4, #32]
 8017bbc:	602b      	str	r3, [r5, #0]
 8017bbe:	d030      	beq.n	8017c22 <__sflush_r+0x92>
 8017bc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017bc2:	89a3      	ldrh	r3, [r4, #12]
 8017bc4:	0759      	lsls	r1, r3, #29
 8017bc6:	d505      	bpl.n	8017bd4 <__sflush_r+0x44>
 8017bc8:	6863      	ldr	r3, [r4, #4]
 8017bca:	1ad2      	subs	r2, r2, r3
 8017bcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017bce:	b10b      	cbz	r3, 8017bd4 <__sflush_r+0x44>
 8017bd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017bd2:	1ad2      	subs	r2, r2, r3
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017bd8:	6a21      	ldr	r1, [r4, #32]
 8017bda:	4628      	mov	r0, r5
 8017bdc:	47b0      	blx	r6
 8017bde:	1c43      	adds	r3, r0, #1
 8017be0:	89a3      	ldrh	r3, [r4, #12]
 8017be2:	d106      	bne.n	8017bf2 <__sflush_r+0x62>
 8017be4:	6829      	ldr	r1, [r5, #0]
 8017be6:	291d      	cmp	r1, #29
 8017be8:	d82b      	bhi.n	8017c42 <__sflush_r+0xb2>
 8017bea:	4a2a      	ldr	r2, [pc, #168]	@ (8017c94 <__sflush_r+0x104>)
 8017bec:	40ca      	lsrs	r2, r1
 8017bee:	07d6      	lsls	r6, r2, #31
 8017bf0:	d527      	bpl.n	8017c42 <__sflush_r+0xb2>
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	6062      	str	r2, [r4, #4]
 8017bf6:	04d9      	lsls	r1, r3, #19
 8017bf8:	6922      	ldr	r2, [r4, #16]
 8017bfa:	6022      	str	r2, [r4, #0]
 8017bfc:	d504      	bpl.n	8017c08 <__sflush_r+0x78>
 8017bfe:	1c42      	adds	r2, r0, #1
 8017c00:	d101      	bne.n	8017c06 <__sflush_r+0x76>
 8017c02:	682b      	ldr	r3, [r5, #0]
 8017c04:	b903      	cbnz	r3, 8017c08 <__sflush_r+0x78>
 8017c06:	6560      	str	r0, [r4, #84]	@ 0x54
 8017c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c0a:	602f      	str	r7, [r5, #0]
 8017c0c:	b1b9      	cbz	r1, 8017c3e <__sflush_r+0xae>
 8017c0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c12:	4299      	cmp	r1, r3
 8017c14:	d002      	beq.n	8017c1c <__sflush_r+0x8c>
 8017c16:	4628      	mov	r0, r5
 8017c18:	f7fe f822 	bl	8015c60 <_free_r>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c20:	e00d      	b.n	8017c3e <__sflush_r+0xae>
 8017c22:	2301      	movs	r3, #1
 8017c24:	4628      	mov	r0, r5
 8017c26:	47b0      	blx	r6
 8017c28:	4602      	mov	r2, r0
 8017c2a:	1c50      	adds	r0, r2, #1
 8017c2c:	d1c9      	bne.n	8017bc2 <__sflush_r+0x32>
 8017c2e:	682b      	ldr	r3, [r5, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d0c6      	beq.n	8017bc2 <__sflush_r+0x32>
 8017c34:	2b1d      	cmp	r3, #29
 8017c36:	d001      	beq.n	8017c3c <__sflush_r+0xac>
 8017c38:	2b16      	cmp	r3, #22
 8017c3a:	d11e      	bne.n	8017c7a <__sflush_r+0xea>
 8017c3c:	602f      	str	r7, [r5, #0]
 8017c3e:	2000      	movs	r0, #0
 8017c40:	e022      	b.n	8017c88 <__sflush_r+0xf8>
 8017c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c46:	b21b      	sxth	r3, r3
 8017c48:	e01b      	b.n	8017c82 <__sflush_r+0xf2>
 8017c4a:	690f      	ldr	r7, [r1, #16]
 8017c4c:	2f00      	cmp	r7, #0
 8017c4e:	d0f6      	beq.n	8017c3e <__sflush_r+0xae>
 8017c50:	0793      	lsls	r3, r2, #30
 8017c52:	680e      	ldr	r6, [r1, #0]
 8017c54:	bf08      	it	eq
 8017c56:	694b      	ldreq	r3, [r1, #20]
 8017c58:	600f      	str	r7, [r1, #0]
 8017c5a:	bf18      	it	ne
 8017c5c:	2300      	movne	r3, #0
 8017c5e:	eba6 0807 	sub.w	r8, r6, r7
 8017c62:	608b      	str	r3, [r1, #8]
 8017c64:	f1b8 0f00 	cmp.w	r8, #0
 8017c68:	dde9      	ble.n	8017c3e <__sflush_r+0xae>
 8017c6a:	6a21      	ldr	r1, [r4, #32]
 8017c6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017c6e:	4643      	mov	r3, r8
 8017c70:	463a      	mov	r2, r7
 8017c72:	4628      	mov	r0, r5
 8017c74:	47b0      	blx	r6
 8017c76:	2800      	cmp	r0, #0
 8017c78:	dc08      	bgt.n	8017c8c <__sflush_r+0xfc>
 8017c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c82:	81a3      	strh	r3, [r4, #12]
 8017c84:	f04f 30ff 	mov.w	r0, #4294967295
 8017c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c8c:	4407      	add	r7, r0
 8017c8e:	eba8 0800 	sub.w	r8, r8, r0
 8017c92:	e7e7      	b.n	8017c64 <__sflush_r+0xd4>
 8017c94:	20400001 	.word	0x20400001

08017c98 <_fflush_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	690b      	ldr	r3, [r1, #16]
 8017c9c:	4605      	mov	r5, r0
 8017c9e:	460c      	mov	r4, r1
 8017ca0:	b913      	cbnz	r3, 8017ca8 <_fflush_r+0x10>
 8017ca2:	2500      	movs	r5, #0
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	bd38      	pop	{r3, r4, r5, pc}
 8017ca8:	b118      	cbz	r0, 8017cb2 <_fflush_r+0x1a>
 8017caa:	6a03      	ldr	r3, [r0, #32]
 8017cac:	b90b      	cbnz	r3, 8017cb2 <_fflush_r+0x1a>
 8017cae:	f7fd fd1f 	bl	80156f0 <__sinit>
 8017cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d0f3      	beq.n	8017ca2 <_fflush_r+0xa>
 8017cba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017cbc:	07d0      	lsls	r0, r2, #31
 8017cbe:	d404      	bmi.n	8017cca <_fflush_r+0x32>
 8017cc0:	0599      	lsls	r1, r3, #22
 8017cc2:	d402      	bmi.n	8017cca <_fflush_r+0x32>
 8017cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017cc6:	f7fd ffb2 	bl	8015c2e <__retarget_lock_acquire_recursive>
 8017cca:	4628      	mov	r0, r5
 8017ccc:	4621      	mov	r1, r4
 8017cce:	f7ff ff5f 	bl	8017b90 <__sflush_r>
 8017cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017cd4:	07da      	lsls	r2, r3, #31
 8017cd6:	4605      	mov	r5, r0
 8017cd8:	d4e4      	bmi.n	8017ca4 <_fflush_r+0xc>
 8017cda:	89a3      	ldrh	r3, [r4, #12]
 8017cdc:	059b      	lsls	r3, r3, #22
 8017cde:	d4e1      	bmi.n	8017ca4 <_fflush_r+0xc>
 8017ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ce2:	f7fd ffa5 	bl	8015c30 <__retarget_lock_release_recursive>
 8017ce6:	e7dd      	b.n	8017ca4 <_fflush_r+0xc>

08017ce8 <__swhatbuf_r>:
 8017ce8:	b570      	push	{r4, r5, r6, lr}
 8017cea:	460c      	mov	r4, r1
 8017cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf0:	2900      	cmp	r1, #0
 8017cf2:	b096      	sub	sp, #88	@ 0x58
 8017cf4:	4615      	mov	r5, r2
 8017cf6:	461e      	mov	r6, r3
 8017cf8:	da0d      	bge.n	8017d16 <__swhatbuf_r+0x2e>
 8017cfa:	89a3      	ldrh	r3, [r4, #12]
 8017cfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d00:	f04f 0100 	mov.w	r1, #0
 8017d04:	bf14      	ite	ne
 8017d06:	2340      	movne	r3, #64	@ 0x40
 8017d08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017d0c:	2000      	movs	r0, #0
 8017d0e:	6031      	str	r1, [r6, #0]
 8017d10:	602b      	str	r3, [r5, #0]
 8017d12:	b016      	add	sp, #88	@ 0x58
 8017d14:	bd70      	pop	{r4, r5, r6, pc}
 8017d16:	466a      	mov	r2, sp
 8017d18:	f000 f8d6 	bl	8017ec8 <_fstat_r>
 8017d1c:	2800      	cmp	r0, #0
 8017d1e:	dbec      	blt.n	8017cfa <__swhatbuf_r+0x12>
 8017d20:	9901      	ldr	r1, [sp, #4]
 8017d22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d2a:	4259      	negs	r1, r3
 8017d2c:	4159      	adcs	r1, r3
 8017d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d32:	e7eb      	b.n	8017d0c <__swhatbuf_r+0x24>

08017d34 <__smakebuf_r>:
 8017d34:	898b      	ldrh	r3, [r1, #12]
 8017d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d38:	079d      	lsls	r5, r3, #30
 8017d3a:	4606      	mov	r6, r0
 8017d3c:	460c      	mov	r4, r1
 8017d3e:	d507      	bpl.n	8017d50 <__smakebuf_r+0x1c>
 8017d40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d44:	6023      	str	r3, [r4, #0]
 8017d46:	6123      	str	r3, [r4, #16]
 8017d48:	2301      	movs	r3, #1
 8017d4a:	6163      	str	r3, [r4, #20]
 8017d4c:	b003      	add	sp, #12
 8017d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d50:	ab01      	add	r3, sp, #4
 8017d52:	466a      	mov	r2, sp
 8017d54:	f7ff ffc8 	bl	8017ce8 <__swhatbuf_r>
 8017d58:	9f00      	ldr	r7, [sp, #0]
 8017d5a:	4605      	mov	r5, r0
 8017d5c:	4639      	mov	r1, r7
 8017d5e:	4630      	mov	r0, r6
 8017d60:	f7fc fd6a 	bl	8014838 <_malloc_r>
 8017d64:	b948      	cbnz	r0, 8017d7a <__smakebuf_r+0x46>
 8017d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d6a:	059a      	lsls	r2, r3, #22
 8017d6c:	d4ee      	bmi.n	8017d4c <__smakebuf_r+0x18>
 8017d6e:	f023 0303 	bic.w	r3, r3, #3
 8017d72:	f043 0302 	orr.w	r3, r3, #2
 8017d76:	81a3      	strh	r3, [r4, #12]
 8017d78:	e7e2      	b.n	8017d40 <__smakebuf_r+0xc>
 8017d7a:	89a3      	ldrh	r3, [r4, #12]
 8017d7c:	6020      	str	r0, [r4, #0]
 8017d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d82:	81a3      	strh	r3, [r4, #12]
 8017d84:	9b01      	ldr	r3, [sp, #4]
 8017d86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017d8a:	b15b      	cbz	r3, 8017da4 <__smakebuf_r+0x70>
 8017d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d90:	4630      	mov	r0, r6
 8017d92:	f000 f8ab 	bl	8017eec <_isatty_r>
 8017d96:	b128      	cbz	r0, 8017da4 <__smakebuf_r+0x70>
 8017d98:	89a3      	ldrh	r3, [r4, #12]
 8017d9a:	f023 0303 	bic.w	r3, r3, #3
 8017d9e:	f043 0301 	orr.w	r3, r3, #1
 8017da2:	81a3      	strh	r3, [r4, #12]
 8017da4:	89a3      	ldrh	r3, [r4, #12]
 8017da6:	431d      	orrs	r5, r3
 8017da8:	81a5      	strh	r5, [r4, #12]
 8017daa:	e7cf      	b.n	8017d4c <__smakebuf_r+0x18>

08017dac <__sccl>:
 8017dac:	b570      	push	{r4, r5, r6, lr}
 8017dae:	780b      	ldrb	r3, [r1, #0]
 8017db0:	4604      	mov	r4, r0
 8017db2:	2b5e      	cmp	r3, #94	@ 0x5e
 8017db4:	bf0b      	itete	eq
 8017db6:	784b      	ldrbeq	r3, [r1, #1]
 8017db8:	1c4a      	addne	r2, r1, #1
 8017dba:	1c8a      	addeq	r2, r1, #2
 8017dbc:	2100      	movne	r1, #0
 8017dbe:	bf08      	it	eq
 8017dc0:	2101      	moveq	r1, #1
 8017dc2:	3801      	subs	r0, #1
 8017dc4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017dc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017dcc:	42a8      	cmp	r0, r5
 8017dce:	d1fb      	bne.n	8017dc8 <__sccl+0x1c>
 8017dd0:	b90b      	cbnz	r3, 8017dd6 <__sccl+0x2a>
 8017dd2:	1e50      	subs	r0, r2, #1
 8017dd4:	bd70      	pop	{r4, r5, r6, pc}
 8017dd6:	f081 0101 	eor.w	r1, r1, #1
 8017dda:	54e1      	strb	r1, [r4, r3]
 8017ddc:	4610      	mov	r0, r2
 8017dde:	4602      	mov	r2, r0
 8017de0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017de4:	2d2d      	cmp	r5, #45	@ 0x2d
 8017de6:	d005      	beq.n	8017df4 <__sccl+0x48>
 8017de8:	2d5d      	cmp	r5, #93	@ 0x5d
 8017dea:	d016      	beq.n	8017e1a <__sccl+0x6e>
 8017dec:	2d00      	cmp	r5, #0
 8017dee:	d0f1      	beq.n	8017dd4 <__sccl+0x28>
 8017df0:	462b      	mov	r3, r5
 8017df2:	e7f2      	b.n	8017dda <__sccl+0x2e>
 8017df4:	7846      	ldrb	r6, [r0, #1]
 8017df6:	2e5d      	cmp	r6, #93	@ 0x5d
 8017df8:	d0fa      	beq.n	8017df0 <__sccl+0x44>
 8017dfa:	42b3      	cmp	r3, r6
 8017dfc:	dcf8      	bgt.n	8017df0 <__sccl+0x44>
 8017dfe:	3002      	adds	r0, #2
 8017e00:	461a      	mov	r2, r3
 8017e02:	3201      	adds	r2, #1
 8017e04:	4296      	cmp	r6, r2
 8017e06:	54a1      	strb	r1, [r4, r2]
 8017e08:	dcfb      	bgt.n	8017e02 <__sccl+0x56>
 8017e0a:	1af2      	subs	r2, r6, r3
 8017e0c:	3a01      	subs	r2, #1
 8017e0e:	1c5d      	adds	r5, r3, #1
 8017e10:	42b3      	cmp	r3, r6
 8017e12:	bfa8      	it	ge
 8017e14:	2200      	movge	r2, #0
 8017e16:	18ab      	adds	r3, r5, r2
 8017e18:	e7e1      	b.n	8017dde <__sccl+0x32>
 8017e1a:	4610      	mov	r0, r2
 8017e1c:	e7da      	b.n	8017dd4 <__sccl+0x28>

08017e1e <__submore>:
 8017e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e22:	460c      	mov	r4, r1
 8017e24:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e2a:	4299      	cmp	r1, r3
 8017e2c:	d11d      	bne.n	8017e6a <__submore+0x4c>
 8017e2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017e32:	f7fc fd01 	bl	8014838 <_malloc_r>
 8017e36:	b918      	cbnz	r0, 8017e40 <__submore+0x22>
 8017e38:	f04f 30ff 	mov.w	r0, #4294967295
 8017e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017e46:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017e4a:	6360      	str	r0, [r4, #52]	@ 0x34
 8017e4c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8017e50:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017e54:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017e58:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017e5c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8017e60:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8017e64:	6020      	str	r0, [r4, #0]
 8017e66:	2000      	movs	r0, #0
 8017e68:	e7e8      	b.n	8017e3c <__submore+0x1e>
 8017e6a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8017e6c:	0077      	lsls	r7, r6, #1
 8017e6e:	463a      	mov	r2, r7
 8017e70:	f7fc fd76 	bl	8014960 <_realloc_r>
 8017e74:	4605      	mov	r5, r0
 8017e76:	2800      	cmp	r0, #0
 8017e78:	d0de      	beq.n	8017e38 <__submore+0x1a>
 8017e7a:	eb00 0806 	add.w	r8, r0, r6
 8017e7e:	4601      	mov	r1, r0
 8017e80:	4632      	mov	r2, r6
 8017e82:	4640      	mov	r0, r8
 8017e84:	f7fd fed5 	bl	8015c32 <memcpy>
 8017e88:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8017e8c:	f8c4 8000 	str.w	r8, [r4]
 8017e90:	e7e9      	b.n	8017e66 <__submore+0x48>

08017e92 <memmove>:
 8017e92:	4288      	cmp	r0, r1
 8017e94:	b510      	push	{r4, lr}
 8017e96:	eb01 0402 	add.w	r4, r1, r2
 8017e9a:	d902      	bls.n	8017ea2 <memmove+0x10>
 8017e9c:	4284      	cmp	r4, r0
 8017e9e:	4623      	mov	r3, r4
 8017ea0:	d807      	bhi.n	8017eb2 <memmove+0x20>
 8017ea2:	1e43      	subs	r3, r0, #1
 8017ea4:	42a1      	cmp	r1, r4
 8017ea6:	d008      	beq.n	8017eba <memmove+0x28>
 8017ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017eac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017eb0:	e7f8      	b.n	8017ea4 <memmove+0x12>
 8017eb2:	4402      	add	r2, r0
 8017eb4:	4601      	mov	r1, r0
 8017eb6:	428a      	cmp	r2, r1
 8017eb8:	d100      	bne.n	8017ebc <memmove+0x2a>
 8017eba:	bd10      	pop	{r4, pc}
 8017ebc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017ec0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017ec4:	e7f7      	b.n	8017eb6 <memmove+0x24>
	...

08017ec8 <_fstat_r>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4d07      	ldr	r5, [pc, #28]	@ (8017ee8 <_fstat_r+0x20>)
 8017ecc:	2300      	movs	r3, #0
 8017ece:	4604      	mov	r4, r0
 8017ed0:	4608      	mov	r0, r1
 8017ed2:	4611      	mov	r1, r2
 8017ed4:	602b      	str	r3, [r5, #0]
 8017ed6:	f7f5 fc9b 	bl	800d810 <_fstat>
 8017eda:	1c43      	adds	r3, r0, #1
 8017edc:	d102      	bne.n	8017ee4 <_fstat_r+0x1c>
 8017ede:	682b      	ldr	r3, [r5, #0]
 8017ee0:	b103      	cbz	r3, 8017ee4 <_fstat_r+0x1c>
 8017ee2:	6023      	str	r3, [r4, #0]
 8017ee4:	bd38      	pop	{r3, r4, r5, pc}
 8017ee6:	bf00      	nop
 8017ee8:	200133f0 	.word	0x200133f0

08017eec <_isatty_r>:
 8017eec:	b538      	push	{r3, r4, r5, lr}
 8017eee:	4d06      	ldr	r5, [pc, #24]	@ (8017f08 <_isatty_r+0x1c>)
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	4608      	mov	r0, r1
 8017ef6:	602b      	str	r3, [r5, #0]
 8017ef8:	f7f5 fc9a 	bl	800d830 <_isatty>
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d102      	bne.n	8017f06 <_isatty_r+0x1a>
 8017f00:	682b      	ldr	r3, [r5, #0]
 8017f02:	b103      	cbz	r3, 8017f06 <_isatty_r+0x1a>
 8017f04:	6023      	str	r3, [r4, #0]
 8017f06:	bd38      	pop	{r3, r4, r5, pc}
 8017f08:	200133f0 	.word	0x200133f0

08017f0c <__assert_func>:
 8017f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f0e:	4614      	mov	r4, r2
 8017f10:	461a      	mov	r2, r3
 8017f12:	4b09      	ldr	r3, [pc, #36]	@ (8017f38 <__assert_func+0x2c>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	4605      	mov	r5, r0
 8017f18:	68d8      	ldr	r0, [r3, #12]
 8017f1a:	b14c      	cbz	r4, 8017f30 <__assert_func+0x24>
 8017f1c:	4b07      	ldr	r3, [pc, #28]	@ (8017f3c <__assert_func+0x30>)
 8017f1e:	9100      	str	r1, [sp, #0]
 8017f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f24:	4906      	ldr	r1, [pc, #24]	@ (8017f40 <__assert_func+0x34>)
 8017f26:	462b      	mov	r3, r5
 8017f28:	f000 f90e 	bl	8018148 <fiprintf>
 8017f2c:	f000 f91e 	bl	801816c <abort>
 8017f30:	4b04      	ldr	r3, [pc, #16]	@ (8017f44 <__assert_func+0x38>)
 8017f32:	461c      	mov	r4, r3
 8017f34:	e7f3      	b.n	8017f1e <__assert_func+0x12>
 8017f36:	bf00      	nop
 8017f38:	200001a8 	.word	0x200001a8
 8017f3c:	0801a201 	.word	0x0801a201
 8017f40:	0801a20e 	.word	0x0801a20e
 8017f44:	0801a23c 	.word	0x0801a23c

08017f48 <_calloc_r>:
 8017f48:	b570      	push	{r4, r5, r6, lr}
 8017f4a:	fba1 5402 	umull	r5, r4, r1, r2
 8017f4e:	b934      	cbnz	r4, 8017f5e <_calloc_r+0x16>
 8017f50:	4629      	mov	r1, r5
 8017f52:	f7fc fc71 	bl	8014838 <_malloc_r>
 8017f56:	4606      	mov	r6, r0
 8017f58:	b928      	cbnz	r0, 8017f66 <_calloc_r+0x1e>
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	bd70      	pop	{r4, r5, r6, pc}
 8017f5e:	220c      	movs	r2, #12
 8017f60:	6002      	str	r2, [r0, #0]
 8017f62:	2600      	movs	r6, #0
 8017f64:	e7f9      	b.n	8017f5a <_calloc_r+0x12>
 8017f66:	462a      	mov	r2, r5
 8017f68:	4621      	mov	r1, r4
 8017f6a:	f7fd fdc5 	bl	8015af8 <memset>
 8017f6e:	e7f4      	b.n	8017f5a <_calloc_r+0x12>

08017f70 <_strtol_l.isra.0>:
 8017f70:	2b24      	cmp	r3, #36	@ 0x24
 8017f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f76:	4686      	mov	lr, r0
 8017f78:	4690      	mov	r8, r2
 8017f7a:	d801      	bhi.n	8017f80 <_strtol_l.isra.0+0x10>
 8017f7c:	2b01      	cmp	r3, #1
 8017f7e:	d106      	bne.n	8017f8e <_strtol_l.isra.0+0x1e>
 8017f80:	f7fd fe2a 	bl	8015bd8 <__errno>
 8017f84:	2316      	movs	r3, #22
 8017f86:	6003      	str	r3, [r0, #0]
 8017f88:	2000      	movs	r0, #0
 8017f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f8e:	4834      	ldr	r0, [pc, #208]	@ (8018060 <_strtol_l.isra.0+0xf0>)
 8017f90:	460d      	mov	r5, r1
 8017f92:	462a      	mov	r2, r5
 8017f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f98:	5d06      	ldrb	r6, [r0, r4]
 8017f9a:	f016 0608 	ands.w	r6, r6, #8
 8017f9e:	d1f8      	bne.n	8017f92 <_strtol_l.isra.0+0x22>
 8017fa0:	2c2d      	cmp	r4, #45	@ 0x2d
 8017fa2:	d110      	bne.n	8017fc6 <_strtol_l.isra.0+0x56>
 8017fa4:	782c      	ldrb	r4, [r5, #0]
 8017fa6:	2601      	movs	r6, #1
 8017fa8:	1c95      	adds	r5, r2, #2
 8017faa:	f033 0210 	bics.w	r2, r3, #16
 8017fae:	d115      	bne.n	8017fdc <_strtol_l.isra.0+0x6c>
 8017fb0:	2c30      	cmp	r4, #48	@ 0x30
 8017fb2:	d10d      	bne.n	8017fd0 <_strtol_l.isra.0+0x60>
 8017fb4:	782a      	ldrb	r2, [r5, #0]
 8017fb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017fba:	2a58      	cmp	r2, #88	@ 0x58
 8017fbc:	d108      	bne.n	8017fd0 <_strtol_l.isra.0+0x60>
 8017fbe:	786c      	ldrb	r4, [r5, #1]
 8017fc0:	3502      	adds	r5, #2
 8017fc2:	2310      	movs	r3, #16
 8017fc4:	e00a      	b.n	8017fdc <_strtol_l.isra.0+0x6c>
 8017fc6:	2c2b      	cmp	r4, #43	@ 0x2b
 8017fc8:	bf04      	itt	eq
 8017fca:	782c      	ldrbeq	r4, [r5, #0]
 8017fcc:	1c95      	addeq	r5, r2, #2
 8017fce:	e7ec      	b.n	8017faa <_strtol_l.isra.0+0x3a>
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d1f6      	bne.n	8017fc2 <_strtol_l.isra.0+0x52>
 8017fd4:	2c30      	cmp	r4, #48	@ 0x30
 8017fd6:	bf14      	ite	ne
 8017fd8:	230a      	movne	r3, #10
 8017fda:	2308      	moveq	r3, #8
 8017fdc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017fe0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	fbbc f9f3 	udiv	r9, ip, r3
 8017fea:	4610      	mov	r0, r2
 8017fec:	fb03 ca19 	mls	sl, r3, r9, ip
 8017ff0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017ff4:	2f09      	cmp	r7, #9
 8017ff6:	d80f      	bhi.n	8018018 <_strtol_l.isra.0+0xa8>
 8017ff8:	463c      	mov	r4, r7
 8017ffa:	42a3      	cmp	r3, r4
 8017ffc:	dd1b      	ble.n	8018036 <_strtol_l.isra.0+0xc6>
 8017ffe:	1c57      	adds	r7, r2, #1
 8018000:	d007      	beq.n	8018012 <_strtol_l.isra.0+0xa2>
 8018002:	4581      	cmp	r9, r0
 8018004:	d314      	bcc.n	8018030 <_strtol_l.isra.0+0xc0>
 8018006:	d101      	bne.n	801800c <_strtol_l.isra.0+0x9c>
 8018008:	45a2      	cmp	sl, r4
 801800a:	db11      	blt.n	8018030 <_strtol_l.isra.0+0xc0>
 801800c:	fb00 4003 	mla	r0, r0, r3, r4
 8018010:	2201      	movs	r2, #1
 8018012:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018016:	e7eb      	b.n	8017ff0 <_strtol_l.isra.0+0x80>
 8018018:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801801c:	2f19      	cmp	r7, #25
 801801e:	d801      	bhi.n	8018024 <_strtol_l.isra.0+0xb4>
 8018020:	3c37      	subs	r4, #55	@ 0x37
 8018022:	e7ea      	b.n	8017ffa <_strtol_l.isra.0+0x8a>
 8018024:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018028:	2f19      	cmp	r7, #25
 801802a:	d804      	bhi.n	8018036 <_strtol_l.isra.0+0xc6>
 801802c:	3c57      	subs	r4, #87	@ 0x57
 801802e:	e7e4      	b.n	8017ffa <_strtol_l.isra.0+0x8a>
 8018030:	f04f 32ff 	mov.w	r2, #4294967295
 8018034:	e7ed      	b.n	8018012 <_strtol_l.isra.0+0xa2>
 8018036:	1c53      	adds	r3, r2, #1
 8018038:	d108      	bne.n	801804c <_strtol_l.isra.0+0xdc>
 801803a:	2322      	movs	r3, #34	@ 0x22
 801803c:	f8ce 3000 	str.w	r3, [lr]
 8018040:	4660      	mov	r0, ip
 8018042:	f1b8 0f00 	cmp.w	r8, #0
 8018046:	d0a0      	beq.n	8017f8a <_strtol_l.isra.0+0x1a>
 8018048:	1e69      	subs	r1, r5, #1
 801804a:	e006      	b.n	801805a <_strtol_l.isra.0+0xea>
 801804c:	b106      	cbz	r6, 8018050 <_strtol_l.isra.0+0xe0>
 801804e:	4240      	negs	r0, r0
 8018050:	f1b8 0f00 	cmp.w	r8, #0
 8018054:	d099      	beq.n	8017f8a <_strtol_l.isra.0+0x1a>
 8018056:	2a00      	cmp	r2, #0
 8018058:	d1f6      	bne.n	8018048 <_strtol_l.isra.0+0xd8>
 801805a:	f8c8 1000 	str.w	r1, [r8]
 801805e:	e794      	b.n	8017f8a <_strtol_l.isra.0+0x1a>
 8018060:	0801a291 	.word	0x0801a291

08018064 <_strtol_r>:
 8018064:	f7ff bf84 	b.w	8017f70 <_strtol_l.isra.0>

08018068 <_strtoul_l.isra.0>:
 8018068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801806c:	4e34      	ldr	r6, [pc, #208]	@ (8018140 <_strtoul_l.isra.0+0xd8>)
 801806e:	4686      	mov	lr, r0
 8018070:	460d      	mov	r5, r1
 8018072:	4628      	mov	r0, r5
 8018074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018078:	5d37      	ldrb	r7, [r6, r4]
 801807a:	f017 0708 	ands.w	r7, r7, #8
 801807e:	d1f8      	bne.n	8018072 <_strtoul_l.isra.0+0xa>
 8018080:	2c2d      	cmp	r4, #45	@ 0x2d
 8018082:	d110      	bne.n	80180a6 <_strtoul_l.isra.0+0x3e>
 8018084:	782c      	ldrb	r4, [r5, #0]
 8018086:	2701      	movs	r7, #1
 8018088:	1c85      	adds	r5, r0, #2
 801808a:	f033 0010 	bics.w	r0, r3, #16
 801808e:	d115      	bne.n	80180bc <_strtoul_l.isra.0+0x54>
 8018090:	2c30      	cmp	r4, #48	@ 0x30
 8018092:	d10d      	bne.n	80180b0 <_strtoul_l.isra.0+0x48>
 8018094:	7828      	ldrb	r0, [r5, #0]
 8018096:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801809a:	2858      	cmp	r0, #88	@ 0x58
 801809c:	d108      	bne.n	80180b0 <_strtoul_l.isra.0+0x48>
 801809e:	786c      	ldrb	r4, [r5, #1]
 80180a0:	3502      	adds	r5, #2
 80180a2:	2310      	movs	r3, #16
 80180a4:	e00a      	b.n	80180bc <_strtoul_l.isra.0+0x54>
 80180a6:	2c2b      	cmp	r4, #43	@ 0x2b
 80180a8:	bf04      	itt	eq
 80180aa:	782c      	ldrbeq	r4, [r5, #0]
 80180ac:	1c85      	addeq	r5, r0, #2
 80180ae:	e7ec      	b.n	801808a <_strtoul_l.isra.0+0x22>
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d1f6      	bne.n	80180a2 <_strtoul_l.isra.0+0x3a>
 80180b4:	2c30      	cmp	r4, #48	@ 0x30
 80180b6:	bf14      	ite	ne
 80180b8:	230a      	movne	r3, #10
 80180ba:	2308      	moveq	r3, #8
 80180bc:	f04f 38ff 	mov.w	r8, #4294967295
 80180c0:	2600      	movs	r6, #0
 80180c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80180c6:	fb03 f908 	mul.w	r9, r3, r8
 80180ca:	ea6f 0909 	mvn.w	r9, r9
 80180ce:	4630      	mov	r0, r6
 80180d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80180d4:	f1bc 0f09 	cmp.w	ip, #9
 80180d8:	d810      	bhi.n	80180fc <_strtoul_l.isra.0+0x94>
 80180da:	4664      	mov	r4, ip
 80180dc:	42a3      	cmp	r3, r4
 80180de:	dd1e      	ble.n	801811e <_strtoul_l.isra.0+0xb6>
 80180e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80180e4:	d007      	beq.n	80180f6 <_strtoul_l.isra.0+0x8e>
 80180e6:	4580      	cmp	r8, r0
 80180e8:	d316      	bcc.n	8018118 <_strtoul_l.isra.0+0xb0>
 80180ea:	d101      	bne.n	80180f0 <_strtoul_l.isra.0+0x88>
 80180ec:	45a1      	cmp	r9, r4
 80180ee:	db13      	blt.n	8018118 <_strtoul_l.isra.0+0xb0>
 80180f0:	fb00 4003 	mla	r0, r0, r3, r4
 80180f4:	2601      	movs	r6, #1
 80180f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80180fa:	e7e9      	b.n	80180d0 <_strtoul_l.isra.0+0x68>
 80180fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018100:	f1bc 0f19 	cmp.w	ip, #25
 8018104:	d801      	bhi.n	801810a <_strtoul_l.isra.0+0xa2>
 8018106:	3c37      	subs	r4, #55	@ 0x37
 8018108:	e7e8      	b.n	80180dc <_strtoul_l.isra.0+0x74>
 801810a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801810e:	f1bc 0f19 	cmp.w	ip, #25
 8018112:	d804      	bhi.n	801811e <_strtoul_l.isra.0+0xb6>
 8018114:	3c57      	subs	r4, #87	@ 0x57
 8018116:	e7e1      	b.n	80180dc <_strtoul_l.isra.0+0x74>
 8018118:	f04f 36ff 	mov.w	r6, #4294967295
 801811c:	e7eb      	b.n	80180f6 <_strtoul_l.isra.0+0x8e>
 801811e:	1c73      	adds	r3, r6, #1
 8018120:	d106      	bne.n	8018130 <_strtoul_l.isra.0+0xc8>
 8018122:	2322      	movs	r3, #34	@ 0x22
 8018124:	f8ce 3000 	str.w	r3, [lr]
 8018128:	4630      	mov	r0, r6
 801812a:	b932      	cbnz	r2, 801813a <_strtoul_l.isra.0+0xd2>
 801812c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018130:	b107      	cbz	r7, 8018134 <_strtoul_l.isra.0+0xcc>
 8018132:	4240      	negs	r0, r0
 8018134:	2a00      	cmp	r2, #0
 8018136:	d0f9      	beq.n	801812c <_strtoul_l.isra.0+0xc4>
 8018138:	b106      	cbz	r6, 801813c <_strtoul_l.isra.0+0xd4>
 801813a:	1e69      	subs	r1, r5, #1
 801813c:	6011      	str	r1, [r2, #0]
 801813e:	e7f5      	b.n	801812c <_strtoul_l.isra.0+0xc4>
 8018140:	0801a291 	.word	0x0801a291

08018144 <_strtoul_r>:
 8018144:	f7ff bf90 	b.w	8018068 <_strtoul_l.isra.0>

08018148 <fiprintf>:
 8018148:	b40e      	push	{r1, r2, r3}
 801814a:	b503      	push	{r0, r1, lr}
 801814c:	4601      	mov	r1, r0
 801814e:	ab03      	add	r3, sp, #12
 8018150:	4805      	ldr	r0, [pc, #20]	@ (8018168 <fiprintf+0x20>)
 8018152:	f853 2b04 	ldr.w	r2, [r3], #4
 8018156:	6800      	ldr	r0, [r0, #0]
 8018158:	9301      	str	r3, [sp, #4]
 801815a:	f7ff f927 	bl	80173ac <_vfiprintf_r>
 801815e:	b002      	add	sp, #8
 8018160:	f85d eb04 	ldr.w	lr, [sp], #4
 8018164:	b003      	add	sp, #12
 8018166:	4770      	bx	lr
 8018168:	200001a8 	.word	0x200001a8

0801816c <abort>:
 801816c:	b508      	push	{r3, lr}
 801816e:	2006      	movs	r0, #6
 8018170:	f000 f82c 	bl	80181cc <raise>
 8018174:	2001      	movs	r0, #1
 8018176:	f7f5 fafb 	bl	800d770 <_exit>

0801817a <_raise_r>:
 801817a:	291f      	cmp	r1, #31
 801817c:	b538      	push	{r3, r4, r5, lr}
 801817e:	4605      	mov	r5, r0
 8018180:	460c      	mov	r4, r1
 8018182:	d904      	bls.n	801818e <_raise_r+0x14>
 8018184:	2316      	movs	r3, #22
 8018186:	6003      	str	r3, [r0, #0]
 8018188:	f04f 30ff 	mov.w	r0, #4294967295
 801818c:	bd38      	pop	{r3, r4, r5, pc}
 801818e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018190:	b112      	cbz	r2, 8018198 <_raise_r+0x1e>
 8018192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018196:	b94b      	cbnz	r3, 80181ac <_raise_r+0x32>
 8018198:	4628      	mov	r0, r5
 801819a:	f000 f831 	bl	8018200 <_getpid_r>
 801819e:	4622      	mov	r2, r4
 80181a0:	4601      	mov	r1, r0
 80181a2:	4628      	mov	r0, r5
 80181a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181a8:	f000 b818 	b.w	80181dc <_kill_r>
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d00a      	beq.n	80181c6 <_raise_r+0x4c>
 80181b0:	1c59      	adds	r1, r3, #1
 80181b2:	d103      	bne.n	80181bc <_raise_r+0x42>
 80181b4:	2316      	movs	r3, #22
 80181b6:	6003      	str	r3, [r0, #0]
 80181b8:	2001      	movs	r0, #1
 80181ba:	e7e7      	b.n	801818c <_raise_r+0x12>
 80181bc:	2100      	movs	r1, #0
 80181be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80181c2:	4620      	mov	r0, r4
 80181c4:	4798      	blx	r3
 80181c6:	2000      	movs	r0, #0
 80181c8:	e7e0      	b.n	801818c <_raise_r+0x12>
	...

080181cc <raise>:
 80181cc:	4b02      	ldr	r3, [pc, #8]	@ (80181d8 <raise+0xc>)
 80181ce:	4601      	mov	r1, r0
 80181d0:	6818      	ldr	r0, [r3, #0]
 80181d2:	f7ff bfd2 	b.w	801817a <_raise_r>
 80181d6:	bf00      	nop
 80181d8:	200001a8 	.word	0x200001a8

080181dc <_kill_r>:
 80181dc:	b538      	push	{r3, r4, r5, lr}
 80181de:	4d07      	ldr	r5, [pc, #28]	@ (80181fc <_kill_r+0x20>)
 80181e0:	2300      	movs	r3, #0
 80181e2:	4604      	mov	r4, r0
 80181e4:	4608      	mov	r0, r1
 80181e6:	4611      	mov	r1, r2
 80181e8:	602b      	str	r3, [r5, #0]
 80181ea:	f7f5 fab1 	bl	800d750 <_kill>
 80181ee:	1c43      	adds	r3, r0, #1
 80181f0:	d102      	bne.n	80181f8 <_kill_r+0x1c>
 80181f2:	682b      	ldr	r3, [r5, #0]
 80181f4:	b103      	cbz	r3, 80181f8 <_kill_r+0x1c>
 80181f6:	6023      	str	r3, [r4, #0]
 80181f8:	bd38      	pop	{r3, r4, r5, pc}
 80181fa:	bf00      	nop
 80181fc:	200133f0 	.word	0x200133f0

08018200 <_getpid_r>:
 8018200:	f7f5 ba9e 	b.w	800d740 <_getpid>

08018204 <_sbrk>:
 8018204:	4a04      	ldr	r2, [pc, #16]	@ (8018218 <_sbrk+0x14>)
 8018206:	6811      	ldr	r1, [r2, #0]
 8018208:	4603      	mov	r3, r0
 801820a:	b909      	cbnz	r1, 8018210 <_sbrk+0xc>
 801820c:	4903      	ldr	r1, [pc, #12]	@ (801821c <_sbrk+0x18>)
 801820e:	6011      	str	r1, [r2, #0]
 8018210:	6810      	ldr	r0, [r2, #0]
 8018212:	4403      	add	r3, r0
 8018214:	6013      	str	r3, [r2, #0]
 8018216:	4770      	bx	lr
 8018218:	200133f8 	.word	0x200133f8
 801821c:	20013400 	.word	0x20013400

08018220 <_init>:
 8018220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018222:	bf00      	nop
 8018224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018226:	bc08      	pop	{r3}
 8018228:	469e      	mov	lr, r3
 801822a:	4770      	bx	lr

0801822c <_fini>:
 801822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801822e:	bf00      	nop
 8018230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018232:	bc08      	pop	{r3}
 8018234:	469e      	mov	lr, r3
 8018236:	4770      	bx	lr
