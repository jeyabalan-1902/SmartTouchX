
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014aa8  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a18  0801cc78  0801cc78  00015c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f690  0801f690  00019264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f690  0801f690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f698  0801f698  00019264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f698  0801f698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f69c  0801f69c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0801f6a0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141e8  20000264  0801f904  00019264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001444c  0801f904  0001944c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002415e  00000000  00000000  00019294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fd0  00000000  00000000  0003d3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  000433c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000198d  00000000  00000000  00045468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296c6  00000000  00000000  00046df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b13  00000000  00000000  000704bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5993  00000000  00000000  00098fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f00  00000000  00000000  0017e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001888a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000264 	.word	0x20000264
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0801cc60 	.word	0x0801cc60

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000268 	.word	0x20000268
 800820c:	0801cc60 	.word	0x0801cc60

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr
	...

08008230 <memchr>:
 8008230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008234:	2a10      	cmp	r2, #16
 8008236:	db2b      	blt.n	8008290 <memchr+0x60>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	d008      	beq.n	8008250 <memchr+0x20>
 800823e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008242:	3a01      	subs	r2, #1
 8008244:	428b      	cmp	r3, r1
 8008246:	d02d      	beq.n	80082a4 <memchr+0x74>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	b342      	cbz	r2, 80082a0 <memchr+0x70>
 800824e:	d1f6      	bne.n	800823e <memchr+0xe>
 8008250:	b4f0      	push	{r4, r5, r6, r7}
 8008252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800825a:	f022 0407 	bic.w	r4, r2, #7
 800825e:	f07f 0700 	mvns.w	r7, #0
 8008262:	2300      	movs	r3, #0
 8008264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008268:	3c08      	subs	r4, #8
 800826a:	ea85 0501 	eor.w	r5, r5, r1
 800826e:	ea86 0601 	eor.w	r6, r6, r1
 8008272:	fa85 f547 	uadd8	r5, r5, r7
 8008276:	faa3 f587 	sel	r5, r3, r7
 800827a:	fa86 f647 	uadd8	r6, r6, r7
 800827e:	faa5 f687 	sel	r6, r5, r7
 8008282:	b98e      	cbnz	r6, 80082a8 <memchr+0x78>
 8008284:	d1ee      	bne.n	8008264 <memchr+0x34>
 8008286:	bcf0      	pop	{r4, r5, r6, r7}
 8008288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800828c:	f002 0207 	and.w	r2, r2, #7
 8008290:	b132      	cbz	r2, 80082a0 <memchr+0x70>
 8008292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008296:	3a01      	subs	r2, #1
 8008298:	ea83 0301 	eor.w	r3, r3, r1
 800829c:	b113      	cbz	r3, 80082a4 <memchr+0x74>
 800829e:	d1f8      	bne.n	8008292 <memchr+0x62>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	3801      	subs	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	bf06      	itte	eq
 80082ac:	4635      	moveq	r5, r6
 80082ae:	3803      	subeq	r0, #3
 80082b0:	3807      	subne	r0, #7
 80082b2:	f015 0f01 	tst.w	r5, #1
 80082b6:	d107      	bne.n	80082c8 <memchr+0x98>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082be:	bf02      	ittt	eq
 80082c0:	3001      	addeq	r0, #1
 80082c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082c6:	3001      	addeq	r0, #1
 80082c8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ca:	3801      	subs	r0, #1
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <strlen>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1fb      	bne.n	80082d2 <strlen+0x2>
 80082da:	1a18      	subs	r0, r3, r0
 80082dc:	3801      	subs	r0, #1
 80082de:	4770      	bx	lr

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <Display_Handler>:

button_position_t current_buttons[6];
int button_count = 0;

void Display_Handler(void *param)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 8008fe8:	f000 ff34 	bl	8009e54 <Menu_Handler>
 8008fec:	e7fc      	b.n	8008fe8 <Display_Handler+0x8>
	...

08008ff0 <updateToDisplayMenu>:
	}
}

void updateToDisplayMenu(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
	if(current_menu == MENU_TOTAL_CONTROL)
 8008ff4:	4b10      	ldr	r3, [pc, #64]	@ (8009038 <updateToDisplayMenu+0x48>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d106      	bne.n	800900a <updateToDisplayMenu+0x1a>
	{
		last_selection = current_selection;
 8008ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800903c <updateToDisplayMenu+0x4c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	@ (8009040 <updateToDisplayMenu+0x50>)
 8009002:	6013      	str	r3, [r2, #0]
		displayTotalControlMenu();
 8009004:	f000 f89a 	bl	800913c <displayTotalControlMenu>
	else if(current_menu == MENU_DEVICE_CONTROL)
	{
		last_selection = current_selection;
		displayDeviceControlMenu();
	}
}
 8009008:	e014      	b.n	8009034 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_SEPARATE_CONTROL)
 800900a:	4b0b      	ldr	r3, [pc, #44]	@ (8009038 <updateToDisplayMenu+0x48>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d106      	bne.n	8009020 <updateToDisplayMenu+0x30>
		last_selection = current_selection;
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <updateToDisplayMenu+0x4c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a0a      	ldr	r2, [pc, #40]	@ (8009040 <updateToDisplayMenu+0x50>)
 8009018:	6013      	str	r3, [r2, #0]
		displaySeparateControlMenu();
 800901a:	f000 f96d 	bl	80092f8 <displaySeparateControlMenu>
}
 800901e:	e009      	b.n	8009034 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_DEVICE_CONTROL)
 8009020:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <updateToDisplayMenu+0x48>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b03      	cmp	r3, #3
 8009026:	d105      	bne.n	8009034 <updateToDisplayMenu+0x44>
		last_selection = current_selection;
 8009028:	4b04      	ldr	r3, [pc, #16]	@ (800903c <updateToDisplayMenu+0x4c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <updateToDisplayMenu+0x50>)
 800902e:	6013      	str	r3, [r2, #0]
		displayDeviceControlMenu();
 8009030:	f000 fa3c 	bl	80094ac <displayDeviceControlMenu>
}
 8009034:	bf00      	nop
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000280 	.word	0x20000280
 800903c:	20000284 	.word	0x20000284
 8009040:	20000000 	.word	0x20000000

08009044 <displayMainMenu>:

void displayMainMenu(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af04      	add	r7, sp, #16
	if (current_menu != last_menu || !menu_drawn)
 800904a:	4b32      	ldr	r3, [pc, #200]	@ (8009114 <displayMainMenu+0xd0>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b32      	ldr	r3, [pc, #200]	@ (8009118 <displayMainMenu+0xd4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d106      	bne.n	8009064 <displayMainMenu+0x20>
 8009056:	4b31      	ldr	r3, [pc, #196]	@ (800911c <displayMainMenu+0xd8>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	f083 0301 	eor.w	r3, r3, #1
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d012      	beq.n	800908a <displayMainMenu+0x46>
	{
		ST7735_SetRotation(1);
 8009064:	2001      	movs	r0, #1
 8009066:	f004 fcb5 	bl	800d9d4 <ST7735_SetRotation>
		fillScreen(BLACK);
 800906a:	2000      	movs	r0, #0
 800906c:	f004 fb7a 	bl	800d764 <fillScreen>
		drawTitleBar("HOME MENU");
 8009070:	482b      	ldr	r0, [pc, #172]	@ (8009120 <displayMainMenu+0xdc>)
 8009072:	f001 fa05 	bl	800a480 <drawTitleBar>
		menu_drawn = true;
 8009076:	4b29      	ldr	r3, [pc, #164]	@ (800911c <displayMainMenu+0xd8>)
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800907c:	4b29      	ldr	r3, [pc, #164]	@ (8009124 <displayMainMenu+0xe0>)
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 8009082:	4b24      	ldr	r3, [pc, #144]	@ (8009114 <displayMainMenu+0xd0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a24      	ldr	r2, [pc, #144]	@ (8009118 <displayMainMenu+0xd4>)
 8009088:	6013      	str	r3, [r2, #0]
	}

	if (!buttons_drawn || last_selection != current_selection)
 800908a:	4b26      	ldr	r3, [pc, #152]	@ (8009124 <displayMainMenu+0xe0>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f083 0301 	eor.w	r3, r3, #1
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <displayMainMenu+0x60>
 8009098:	4b23      	ldr	r3, [pc, #140]	@ (8009128 <displayMainMenu+0xe4>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	4b23      	ldr	r3, [pc, #140]	@ (800912c <displayMainMenu+0xe8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d02f      	beq.n	8009104 <displayMainMenu+0xc0>
	{
		int start_y = TITLE_HEIGHT + 15;
 80090a4:	231e      	movs	r3, #30
 80090a6:	607b      	str	r3, [r7, #4]
		button_count = 2;
 80090a8:	4b21      	ldr	r3, [pc, #132]	@ (8009130 <displayMainMenu+0xec>)
 80090aa:	2202      	movs	r2, #2
 80090ac:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 80090ae:	4b1f      	ldr	r3, [pc, #124]	@ (800912c <displayMainMenu+0xe8>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bf0c      	ite	eq
 80090b6:	2301      	moveq	r3, #1
 80090b8:	2300      	movne	r3, #0
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	2300      	movs	r3, #0
 80090c0:	9302      	str	r3, [sp, #8]
 80090c2:	9201      	str	r2, [sp, #4]
 80090c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009134 <displayMainMenu+0xf0>)
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2312      	movs	r3, #18
 80090ca:	228c      	movs	r2, #140	@ 0x8c
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	200a      	movs	r0, #10
 80090d0:	f000 ff6c 	bl	8009fac <drawSingleButton>
						"MASTER CONTROL", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 0116 	add.w	r1, r3, #22
 80090da:	4b14      	ldr	r3, [pc, #80]	@ (800912c <displayMainMenu+0xe8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	bf0c      	ite	eq
 80090e2:	2301      	moveq	r3, #1
 80090e4:	2300      	movne	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	2301      	movs	r3, #1
 80090ec:	9302      	str	r3, [sp, #8]
 80090ee:	9201      	str	r2, [sp, #4]
 80090f0:	4b11      	ldr	r3, [pc, #68]	@ (8009138 <displayMainMenu+0xf4>)
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	2312      	movs	r3, #18
 80090f6:	228c      	movs	r2, #140	@ 0x8c
 80090f8:	200a      	movs	r0, #10
 80090fa:	f000 ff57 	bl	8009fac <drawSingleButton>
						"DEVICE LIST", (current_selection == 1), 1);

		buttons_drawn = true;
 80090fe:	4b09      	ldr	r3, [pc, #36]	@ (8009124 <displayMainMenu+0xe0>)
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]
	}

	last_selection = current_selection;
 8009104:	4b09      	ldr	r3, [pc, #36]	@ (800912c <displayMainMenu+0xe8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a07      	ldr	r2, [pc, #28]	@ (8009128 <displayMainMenu+0xe4>)
 800910a:	6013      	str	r3, [r2, #0]
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000280 	.word	0x20000280
 8009118:	20000004 	.word	0x20000004
 800911c:	200002a8 	.word	0x200002a8
 8009120:	0801cc78 	.word	0x0801cc78
 8009124:	200002a9 	.word	0x200002a9
 8009128:	20000000 	.word	0x20000000
 800912c:	20000284 	.word	0x20000284
 8009130:	200003cc 	.word	0x200003cc
 8009134:	0801cc84 	.word	0x0801cc84
 8009138:	0801cc94 	.word	0x0801cc94

0800913c <displayTotalControlMenu>:

void displayTotalControlMenu(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af04      	add	r7, sp, #16
	bool states_changed = false;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]
	syncDisplayDeviceStates();
 8009146:	f000 fc9b 	bl	8009a80 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++)
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]
 800914e:	e016      	b.n	800917e <displayTotalControlMenu+0x42>
	{
		if (device_states[i] != last_device_states[i])
 8009150:	4a5c      	ldr	r2, [pc, #368]	@ (80092c4 <displayTotalControlMenu+0x188>)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009158:	495b      	ldr	r1, [pc, #364]	@ (80092c8 <displayTotalControlMenu+0x18c>)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009160:	429a      	cmp	r2, r3
 8009162:	d009      	beq.n	8009178 <displayTotalControlMenu+0x3c>
		{
			states_changed = true;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]
			last_device_states[i] = device_states[i];
 8009168:	4a56      	ldr	r2, [pc, #344]	@ (80092c4 <displayTotalControlMenu+0x188>)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009170:	4955      	ldr	r1, [pc, #340]	@ (80092c8 <displayTotalControlMenu+0x18c>)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	3301      	adds	r3, #1
 800917c:	613b      	str	r3, [r7, #16]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b03      	cmp	r3, #3
 8009182:	dde5      	ble.n	8009150 <displayTotalControlMenu+0x14>
		}
	}

	if (current_menu != last_menu || !menu_drawn)
 8009184:	4b51      	ldr	r3, [pc, #324]	@ (80092cc <displayTotalControlMenu+0x190>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b51      	ldr	r3, [pc, #324]	@ (80092d0 <displayTotalControlMenu+0x194>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d106      	bne.n	800919e <displayTotalControlMenu+0x62>
 8009190:	4b50      	ldr	r3, [pc, #320]	@ (80092d4 <displayTotalControlMenu+0x198>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	f083 0301 	eor.w	r3, r3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <displayTotalControlMenu+0x8c>
	{
		ST7735_SetRotation(1);
 800919e:	2001      	movs	r0, #1
 80091a0:	f004 fc18 	bl	800d9d4 <ST7735_SetRotation>
		fillScreen(BLACK);
 80091a4:	2000      	movs	r0, #0
 80091a6:	f004 fadd 	bl	800d764 <fillScreen>
		drawTitleBar("MASTER CONTROL");
 80091aa:	484b      	ldr	r0, [pc, #300]	@ (80092d8 <displayTotalControlMenu+0x19c>)
 80091ac:	f001 f968 	bl	800a480 <drawTitleBar>
		menu_drawn = true;
 80091b0:	4b48      	ldr	r3, [pc, #288]	@ (80092d4 <displayTotalControlMenu+0x198>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 80091b6:	4b49      	ldr	r3, [pc, #292]	@ (80092dc <displayTotalControlMenu+0x1a0>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 80091bc:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <displayTotalControlMenu+0x190>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a43      	ldr	r2, [pc, #268]	@ (80092d0 <displayTotalControlMenu+0x194>)
 80091c2:	6013      	str	r3, [r2, #0]
		states_changed = true;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
	}

	if (states_changed)
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d016      	beq.n	80091fc <displayTotalControlMenu+0xc0>
	{
		int total_on = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	e00b      	b.n	80091f0 <displayTotalControlMenu+0xb4>
		{
			if (device_states[i]) total_on++;
 80091d8:	4a3a      	ldr	r2, [pc, #232]	@ (80092c4 <displayTotalControlMenu+0x188>)
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <displayTotalControlMenu+0xae>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	ddf0      	ble.n	80091d8 <displayTotalControlMenu+0x9c>
		}
		updateDeviceCount(total_on);
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f001 f8ec 	bl	800a3d4 <updateDeviceCount>
	}

	if (!buttons_drawn)
 80091fc:	4b37      	ldr	r3, [pc, #220]	@ (80092dc <displayTotalControlMenu+0x1a0>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f083 0301 	eor.w	r3, r3, #1
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d045      	beq.n	8009296 <displayTotalControlMenu+0x15a>
	{
		int start_y = TITLE_HEIGHT + 25;
 800920a:	2328      	movs	r3, #40	@ 0x28
 800920c:	607b      	str	r3, [r7, #4]
		button_count = 3;
 800920e:	4b34      	ldr	r3, [pc, #208]	@ (80092e0 <displayTotalControlMenu+0x1a4>)
 8009210:	2203      	movs	r2, #3
 8009212:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009214:	4b33      	ldr	r3, [pc, #204]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	bf0c      	ite	eq
 800921c:	2301      	moveq	r3, #1
 800921e:	2300      	movne	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	2300      	movs	r3, #0
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	9201      	str	r2, [sp, #4]
 800922a:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <displayTotalControlMenu+0x1ac>)
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	2312      	movs	r3, #18
 8009230:	228c      	movs	r2, #140	@ 0x8c
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	200a      	movs	r0, #10
 8009236:	f000 feb9 	bl	8009fac <drawSingleButton>
						"TOTAL ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f103 0116 	add.w	r1, r3, #22
 8009240:	4b28      	ldr	r3, [pc, #160]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b01      	cmp	r3, #1
 8009246:	bf0c      	ite	eq
 8009248:	2301      	moveq	r3, #1
 800924a:	2300      	movne	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	2301      	movs	r3, #1
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	9201      	str	r2, [sp, #4]
 8009256:	4b25      	ldr	r3, [pc, #148]	@ (80092ec <displayTotalControlMenu+0x1b0>)
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	2312      	movs	r3, #18
 800925c:	228c      	movs	r2, #140	@ 0x8c
 800925e:	200a      	movs	r0, #10
 8009260:	f000 fea4 	bl	8009fac <drawSingleButton>
						"TOTAL OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800926a:	4b1e      	ldr	r3, [pc, #120]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b02      	cmp	r3, #2
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	2302      	movs	r3, #2
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	9201      	str	r2, [sp, #4]
 8009280:	4b1b      	ldr	r3, [pc, #108]	@ (80092f0 <displayTotalControlMenu+0x1b4>)
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2312      	movs	r3, #18
 8009286:	228c      	movs	r2, #140	@ 0x8c
 8009288:	200a      	movs	r0, #10
 800928a:	f000 fe8f 	bl	8009fac <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);

		buttons_drawn = true;
 800928e:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <displayTotalControlMenu+0x1a0>)
 8009290:	2201      	movs	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	e00d      	b.n	80092b2 <displayTotalControlMenu+0x176>
	}
	else if (last_selection != current_selection)
 8009296:	4b17      	ldr	r3, [pc, #92]	@ (80092f4 <displayTotalControlMenu+0x1b8>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b12      	ldr	r3, [pc, #72]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d007      	beq.n	80092b2 <displayTotalControlMenu+0x176>
	{
		updateButtonSelection(last_selection, current_selection);
 80092a2:	4b14      	ldr	r3, [pc, #80]	@ (80092f4 <displayTotalControlMenu+0x1b8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a0f      	ldr	r2, [pc, #60]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 ff71 	bl	800a194 <updateButtonSelection>
	}

	last_selection = current_selection;
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0f      	ldr	r2, [pc, #60]	@ (80092f4 <displayTotalControlMenu+0x1b8>)
 80092b8:	6013      	str	r3, [r2, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000298 	.word	0x20000298
 80092c8:	20000008 	.word	0x20000008
 80092cc:	20000280 	.word	0x20000280
 80092d0:	20000004 	.word	0x20000004
 80092d4:	200002a8 	.word	0x200002a8
 80092d8:	0801cc84 	.word	0x0801cc84
 80092dc:	200002a9 	.word	0x200002a9
 80092e0:	200003cc 	.word	0x200003cc
 80092e4:	20000284 	.word	0x20000284
 80092e8:	0801cca0 	.word	0x0801cca0
 80092ec:	0801ccac 	.word	0x0801ccac
 80092f0:	0801ccb8 	.word	0x0801ccb8
 80092f4:	20000000 	.word	0x20000000

080092f8 <displaySeparateControlMenu>:

void displaySeparateControlMenu(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08e      	sub	sp, #56	@ 0x38
 80092fc:	af04      	add	r7, sp, #16
	bool states_changed = false;
 80092fe:	2300      	movs	r3, #0
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 8009304:	f000 fbbc 	bl	8009a80 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++) {
 8009308:	2300      	movs	r3, #0
 800930a:	623b      	str	r3, [r7, #32]
 800930c:	e017      	b.n	800933e <displaySeparateControlMenu+0x46>
		if (device_states[i] != last_device_states[i]) {
 800930e:	4a59      	ldr	r2, [pc, #356]	@ (8009474 <displaySeparateControlMenu+0x17c>)
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009316:	4958      	ldr	r1, [pc, #352]	@ (8009478 <displaySeparateControlMenu+0x180>)
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800931e:	429a      	cmp	r2, r3
 8009320:	d00a      	beq.n	8009338 <displaySeparateControlMenu+0x40>
			states_changed = true;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			last_device_states[i] = device_states[i];
 8009328:	4a52      	ldr	r2, [pc, #328]	@ (8009474 <displaySeparateControlMenu+0x17c>)
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009330:	4951      	ldr	r1, [pc, #324]	@ (8009478 <displaySeparateControlMenu+0x180>)
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	3301      	adds	r3, #1
 800933c:	623b      	str	r3, [r7, #32]
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	2b03      	cmp	r3, #3
 8009342:	dde4      	ble.n	800930e <displaySeparateControlMenu+0x16>
		}
	}

	if (current_menu != last_menu || !menu_drawn) {
 8009344:	4b4d      	ldr	r3, [pc, #308]	@ (800947c <displaySeparateControlMenu+0x184>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	4b4d      	ldr	r3, [pc, #308]	@ (8009480 <displaySeparateControlMenu+0x188>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d106      	bne.n	800935e <displaySeparateControlMenu+0x66>
 8009350:	4b4c      	ldr	r3, [pc, #304]	@ (8009484 <displaySeparateControlMenu+0x18c>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f083 0301 	eor.w	r3, r3, #1
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d015      	beq.n	800938a <displaySeparateControlMenu+0x92>
		ST7735_SetRotation(1);
 800935e:	2001      	movs	r0, #1
 8009360:	f004 fb38 	bl	800d9d4 <ST7735_SetRotation>
		fillScreen(BLACK);
 8009364:	2000      	movs	r0, #0
 8009366:	f004 f9fd 	bl	800d764 <fillScreen>
		drawTitleBar("DEVICE LIST");
 800936a:	4847      	ldr	r0, [pc, #284]	@ (8009488 <displaySeparateControlMenu+0x190>)
 800936c:	f001 f888 	bl	800a480 <drawTitleBar>
		menu_drawn = true;
 8009370:	4b44      	ldr	r3, [pc, #272]	@ (8009484 <displaySeparateControlMenu+0x18c>)
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 8009376:	4b45      	ldr	r3, [pc, #276]	@ (800948c <displaySeparateControlMenu+0x194>)
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800937c:	4b3f      	ldr	r3, [pc, #252]	@ (800947c <displaySeparateControlMenu+0x184>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a3f      	ldr	r2, [pc, #252]	@ (8009480 <displaySeparateControlMenu+0x188>)
 8009382:	6013      	str	r3, [r2, #0]
		states_changed = true;
 8009384:	2301      	movs	r3, #1
 8009386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (!buttons_drawn || states_changed) {
 800938a:	4b40      	ldr	r3, [pc, #256]	@ (800948c <displaySeparateControlMenu+0x194>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f083 0301 	eor.w	r3, r3, #1
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <displaySeparateControlMenu+0xa8>
 8009398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800939c:	2b00      	cmp	r3, #0
 800939e:	d053      	beq.n	8009448 <displaySeparateControlMenu+0x150>
		int start_y = TITLE_HEIGHT + 10;
 80093a0:	2319      	movs	r3, #25
 80093a2:	61bb      	str	r3, [r7, #24]
		button_count = 5;
 80093a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009490 <displaySeparateControlMenu+0x198>)
 80093a6:	2205      	movs	r2, #5
 80093a8:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 4; i++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e02f      	b.n	8009410 <displaySeparateControlMenu+0x118>
		{
			char device_text[20];
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	1c5a      	adds	r2, r3, #1
					i + 1, device_states[i] ? "ON" : "OFF");
 80093b4:	492f      	ldr	r1, [pc, #188]	@ (8009474 <displaySeparateControlMenu+0x17c>)
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <displaySeparateControlMenu+0xcc>
 80093c0:	4b34      	ldr	r3, [pc, #208]	@ (8009494 <displaySeparateControlMenu+0x19c>)
 80093c2:	e000      	b.n	80093c6 <displaySeparateControlMenu+0xce>
 80093c4:	4b34      	ldr	r3, [pc, #208]	@ (8009498 <displaySeparateControlMenu+0x1a0>)
 80093c6:	1d38      	adds	r0, r7, #4
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	4a33      	ldr	r2, [pc, #204]	@ (800949c <displaySeparateControlMenu+0x1a4>)
 80093ce:	2114      	movs	r1, #20
 80093d0:	f010 fa14 	bl	80197fc <sniprintf>
			drawSingleButton(MARGIN_X, start_y + i * 20, BUTTON_WIDTH, 16,
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	461a      	mov	r2, r3
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	18d1      	adds	r1, r2, r3
 80093e4:	4b2e      	ldr	r3, [pc, #184]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	bf0c      	ite	eq
 80093ee:	2301      	moveq	r3, #1
 80093f0:	2300      	movne	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	9302      	str	r3, [sp, #8]
 80093fa:	9201      	str	r2, [sp, #4]
 80093fc:	1d3b      	adds	r3, r7, #4
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2310      	movs	r3, #16
 8009402:	228c      	movs	r2, #140	@ 0x8c
 8009404:	200a      	movs	r0, #10
 8009406:	f000 fdd1 	bl	8009fac <drawSingleButton>
		for (int i = 0; i < 4; i++)
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	2b03      	cmp	r3, #3
 8009414:	ddcc      	ble.n	80093b0 <displaySeparateControlMenu+0xb8>
						   device_text, (current_selection == i), i);
		}

		drawSingleButton(MARGIN_X, start_y + 4 * 20, BUTTON_WIDTH, 16,
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800941c:	4b20      	ldr	r3, [pc, #128]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b04      	cmp	r3, #4
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	461a      	mov	r2, r3
 800942c:	2304      	movs	r3, #4
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	9201      	str	r2, [sp, #4]
 8009432:	4b1c      	ldr	r3, [pc, #112]	@ (80094a4 <displaySeparateControlMenu+0x1ac>)
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	2310      	movs	r3, #16
 8009438:	228c      	movs	r2, #140	@ 0x8c
 800943a:	200a      	movs	r0, #10
 800943c:	f000 fdb6 	bl	8009fac <drawSingleButton>
					   "GO BACK", (current_selection == 4), 4);

		buttons_drawn = true;
 8009440:	4b12      	ldr	r3, [pc, #72]	@ (800948c <displaySeparateControlMenu+0x194>)
 8009442:	2201      	movs	r2, #1
 8009444:	701a      	strb	r2, [r3, #0]
	if (!buttons_drawn || states_changed) {
 8009446:	e00d      	b.n	8009464 <displaySeparateControlMenu+0x16c>
	} else if (last_selection != current_selection) {
 8009448:	4b17      	ldr	r3, [pc, #92]	@ (80094a8 <displaySeparateControlMenu+0x1b0>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b14      	ldr	r3, [pc, #80]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d007      	beq.n	8009464 <displaySeparateControlMenu+0x16c>
		updateButtonSelection(last_selection, current_selection);
 8009454:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <displaySeparateControlMenu+0x1b0>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a11      	ldr	r2, [pc, #68]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 800945a:	6812      	ldr	r2, [r2, #0]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fe98 	bl	800a194 <updateButtonSelection>
	}

	last_selection = current_selection;
 8009464:	4b0e      	ldr	r3, [pc, #56]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a0f      	ldr	r2, [pc, #60]	@ (80094a8 <displaySeparateControlMenu+0x1b0>)
 800946a:	6013      	str	r3, [r2, #0]
}
 800946c:	bf00      	nop
 800946e:	3728      	adds	r7, #40	@ 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000298 	.word	0x20000298
 8009478:	20000008 	.word	0x20000008
 800947c:	20000280 	.word	0x20000280
 8009480:	20000004 	.word	0x20000004
 8009484:	200002a8 	.word	0x200002a8
 8009488:	0801cc94 	.word	0x0801cc94
 800948c:	200002a9 	.word	0x200002a9
 8009490:	200003cc 	.word	0x200003cc
 8009494:	0801ccc0 	.word	0x0801ccc0
 8009498:	0801ccc4 	.word	0x0801ccc4
 800949c:	0801ccc8 	.word	0x0801ccc8
 80094a0:	20000284 	.word	0x20000284
 80094a4:	0801ccb8 	.word	0x0801ccb8
 80094a8:	20000000 	.word	0x20000000

080094ac <displayDeviceControlMenu>:

void displayDeviceControlMenu(void) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08e      	sub	sp, #56	@ 0x38
 80094b0:	af04      	add	r7, sp, #16
	bool state_changed = false;
 80094b2:	2300      	movs	r3, #0
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 80094b8:	f000 fae2 	bl	8009a80 <syncDisplayDeviceStates>

	if (device_states[current_device] != last_device_states[current_device]) {
 80094bc:	4b68      	ldr	r3, [pc, #416]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a68      	ldr	r2, [pc, #416]	@ (8009664 <displayDeviceControlMenu+0x1b8>)
 80094c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80094c6:	4b66      	ldr	r3, [pc, #408]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4967      	ldr	r1, [pc, #412]	@ (8009668 <displayDeviceControlMenu+0x1bc>)
 80094cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d00c      	beq.n	80094ee <displayDeviceControlMenu+0x42>
		state_changed = true;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		last_device_states[current_device] = device_states[current_device];
 80094da:	4b61      	ldr	r3, [pc, #388]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b60      	ldr	r3, [pc, #384]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4960      	ldr	r1, [pc, #384]	@ (8009664 <displayDeviceControlMenu+0x1b8>)
 80094e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80094e8:	495f      	ldr	r1, [pc, #380]	@ (8009668 <displayDeviceControlMenu+0x1bc>)
 80094ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (current_menu != last_menu || !menu_drawn) {
 80094ee:	4b5f      	ldr	r3, [pc, #380]	@ (800966c <displayDeviceControlMenu+0x1c0>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b5f      	ldr	r3, [pc, #380]	@ (8009670 <displayDeviceControlMenu+0x1c4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d106      	bne.n	8009508 <displayDeviceControlMenu+0x5c>
 80094fa:	4b5e      	ldr	r3, [pc, #376]	@ (8009674 <displayDeviceControlMenu+0x1c8>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f083 0301 	eor.w	r3, r3, #1
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01e      	beq.n	8009546 <displayDeviceControlMenu+0x9a>
		ST7735_SetRotation(1);
 8009508:	2001      	movs	r0, #1
 800950a:	f004 fa63 	bl	800d9d4 <ST7735_SetRotation>
		fillScreen(BLACK);
 800950e:	2000      	movs	r0, #0
 8009510:	f004 f928 	bl	800d764 <fillScreen>

		char title[30];
		snprintf(title, sizeof(title), "DEVICE %d CONTROL", current_device + 1);
 8009514:	4b52      	ldr	r3, [pc, #328]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	4638      	mov	r0, r7
 800951c:	4a56      	ldr	r2, [pc, #344]	@ (8009678 <displayDeviceControlMenu+0x1cc>)
 800951e:	211e      	movs	r1, #30
 8009520:	f010 f96c 	bl	80197fc <sniprintf>
		drawTitleBar(title);
 8009524:	463b      	mov	r3, r7
 8009526:	4618      	mov	r0, r3
 8009528:	f000 ffaa 	bl	800a480 <drawTitleBar>

		menu_drawn = true;
 800952c:	4b51      	ldr	r3, [pc, #324]	@ (8009674 <displayDeviceControlMenu+0x1c8>)
 800952e:	2201      	movs	r2, #1
 8009530:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 8009532:	4b52      	ldr	r3, [pc, #328]	@ (800967c <displayDeviceControlMenu+0x1d0>)
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 8009538:	4b4c      	ldr	r3, [pc, #304]	@ (800966c <displayDeviceControlMenu+0x1c0>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a4c      	ldr	r2, [pc, #304]	@ (8009670 <displayDeviceControlMenu+0x1c4>)
 800953e:	6013      	str	r3, [r2, #0]
		state_changed = true;
 8009540:	2301      	movs	r3, #1
 8009542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (state_changed) {
 8009546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00f      	beq.n	800956e <displayDeviceControlMenu+0xc2>
		updateDeviceControlStatus(current_device, device_states[current_device]);
 800954e:	4b44      	ldr	r3, [pc, #272]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	4b43      	ldr	r3, [pc, #268]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4943      	ldr	r1, [pc, #268]	@ (8009664 <displayDeviceControlMenu+0x1b8>)
 8009558:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800955c:	2b00      	cmp	r3, #0
 800955e:	bf14      	ite	ne
 8009560:	2301      	movne	r3, #1
 8009562:	2300      	moveq	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f000 ff5d 	bl	800a428 <updateDeviceControlStatus>
	}

	if (!buttons_drawn) {
 800956e:	4b43      	ldr	r3, [pc, #268]	@ (800967c <displayDeviceControlMenu+0x1d0>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f083 0301 	eor.w	r3, r3, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05a      	beq.n	8009632 <displayDeviceControlMenu+0x186>
		int start_y = TITLE_HEIGHT + 25;
 800957c:	2328      	movs	r3, #40	@ 0x28
 800957e:	623b      	str	r3, [r7, #32]
		button_count = 4;
 8009580:	4b3f      	ldr	r3, [pc, #252]	@ (8009680 <displayDeviceControlMenu+0x1d4>)
 8009582:	2204      	movs	r2, #4
 8009584:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009586:	4b3f      	ldr	r3, [pc, #252]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	2300      	movs	r3, #0
 8009598:	9302      	str	r3, [sp, #8]
 800959a:	9201      	str	r2, [sp, #4]
 800959c:	4b3a      	ldr	r3, [pc, #232]	@ (8009688 <displayDeviceControlMenu+0x1dc>)
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2312      	movs	r3, #18
 80095a2:	228c      	movs	r2, #140	@ 0x8c
 80095a4:	6a39      	ldr	r1, [r7, #32]
 80095a6:	200a      	movs	r0, #10
 80095a8:	f000 fd00 	bl	8009fac <drawSingleButton>
						"TURN ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f103 0116 	add.w	r1, r3, #22
 80095b2:	4b34      	ldr	r3, [pc, #208]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	bf0c      	ite	eq
 80095ba:	2301      	moveq	r3, #1
 80095bc:	2300      	movne	r3, #0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	461a      	mov	r2, r3
 80095c2:	2301      	movs	r3, #1
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	9201      	str	r2, [sp, #4]
 80095c8:	4b30      	ldr	r3, [pc, #192]	@ (800968c <displayDeviceControlMenu+0x1e0>)
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	2312      	movs	r3, #18
 80095ce:	228c      	movs	r2, #140	@ 0x8c
 80095d0:	200a      	movs	r0, #10
 80095d2:	f000 fceb 	bl	8009fac <drawSingleButton>
						"TURN OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80095dc:	4b29      	ldr	r3, [pc, #164]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	461a      	mov	r2, r3
 80095ec:	2302      	movs	r3, #2
 80095ee:	9302      	str	r3, [sp, #8]
 80095f0:	9201      	str	r2, [sp, #4]
 80095f2:	4b27      	ldr	r3, [pc, #156]	@ (8009690 <displayDeviceControlMenu+0x1e4>)
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	2312      	movs	r3, #18
 80095f8:	228c      	movs	r2, #140	@ 0x8c
 80095fa:	200a      	movs	r0, #10
 80095fc:	f000 fcd6 	bl	8009fac <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*3, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 8009606:	4b1f      	ldr	r3, [pc, #124]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b03      	cmp	r3, #3
 800960c:	bf0c      	ite	eq
 800960e:	2301      	moveq	r3, #1
 8009610:	2300      	movne	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	2303      	movs	r3, #3
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	4b1d      	ldr	r3, [pc, #116]	@ (8009694 <displayDeviceControlMenu+0x1e8>)
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2312      	movs	r3, #18
 8009622:	228c      	movs	r2, #140	@ 0x8c
 8009624:	200a      	movs	r0, #10
 8009626:	f000 fcc1 	bl	8009fac <drawSingleButton>
						"GO TO HOME", (current_selection == 3), 3);

		buttons_drawn = true;
 800962a:	4b14      	ldr	r3, [pc, #80]	@ (800967c <displayDeviceControlMenu+0x1d0>)
 800962c:	2201      	movs	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e00d      	b.n	800964e <displayDeviceControlMenu+0x1a2>
	} else if (last_selection != current_selection) {
 8009632:	4b19      	ldr	r3, [pc, #100]	@ (8009698 <displayDeviceControlMenu+0x1ec>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d007      	beq.n	800964e <displayDeviceControlMenu+0x1a2>
		updateButtonSelection(last_selection, current_selection);
 800963e:	4b16      	ldr	r3, [pc, #88]	@ (8009698 <displayDeviceControlMenu+0x1ec>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a10      	ldr	r2, [pc, #64]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fda3 	bl	800a194 <updateButtonSelection>
	}

	last_selection = current_selection;
 800964e:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a11      	ldr	r2, [pc, #68]	@ (8009698 <displayDeviceControlMenu+0x1ec>)
 8009654:	6013      	str	r3, [r2, #0]
}
 8009656:	bf00      	nop
 8009658:	3728      	adds	r7, #40	@ 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000288 	.word	0x20000288
 8009664:	20000298 	.word	0x20000298
 8009668:	20000008 	.word	0x20000008
 800966c:	20000280 	.word	0x20000280
 8009670:	20000004 	.word	0x20000004
 8009674:	200002a8 	.word	0x200002a8
 8009678:	0801ccd8 	.word	0x0801ccd8
 800967c:	200002a9 	.word	0x200002a9
 8009680:	200003cc 	.word	0x200003cc
 8009684:	20000284 	.word	0x20000284
 8009688:	0801ccec 	.word	0x0801ccec
 800968c:	0801ccf4 	.word	0x0801ccf4
 8009690:	0801ccb8 	.word	0x0801ccb8
 8009694:	0801cd00 	.word	0x0801cd00
 8009698:	20000000 	.word	0x20000000

0800969c <setDeviceState>:


void setDeviceState(int device, int state) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b08c      	sub	sp, #48	@ 0x30
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef* gpio_led_port;
    GPIO_TypeDef *gpio_relay_port;
    uint16_t gpio_led_pin, gpio_relay_pin;
    char deviceItem[15];

    switch(device) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	f200 80c9 	bhi.w	8009840 <setDeviceState+0x1a4>
 80096ae:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <setDeviceState+0x18>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	08009705 	.word	0x08009705
 80096c0:	08009725 	.word	0x08009725
        case 0:
            gpio_led_port = TOUCH_LED1_GPIO_Port;
 80096c4:	4b60      	ldr	r3, [pc, #384]	@ (8009848 <setDeviceState+0x1ac>)
 80096c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_1_GPIO_Port;
 80096c8:	4b5f      	ldr	r3, [pc, #380]	@ (8009848 <setDeviceState+0x1ac>)
 80096ca:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED1_Pin;
 80096cc:	2308      	movs	r3, #8
 80096ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_1_Pin;
 80096d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device1");
 80096d6:	f107 030c 	add.w	r3, r7, #12
 80096da:	495c      	ldr	r1, [pc, #368]	@ (800984c <setDeviceState+0x1b0>)
 80096dc:	4618      	mov	r0, r3
 80096de:	f010 f8c3 	bl	8019868 <siprintf>
            break;
 80096e2:	e02f      	b.n	8009744 <setDeviceState+0xa8>
        case 1:
            gpio_led_port = TOUCH_LED2_GPIO_Port;
 80096e4:	4b58      	ldr	r3, [pc, #352]	@ (8009848 <setDeviceState+0x1ac>)
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_2_GPIO_Port;
 80096e8:	4b57      	ldr	r3, [pc, #348]	@ (8009848 <setDeviceState+0x1ac>)
 80096ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED2_Pin;
 80096ec:	2304      	movs	r3, #4
 80096ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_2_Pin;
 80096f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device2");
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	4955      	ldr	r1, [pc, #340]	@ (8009850 <setDeviceState+0x1b4>)
 80096fc:	4618      	mov	r0, r3
 80096fe:	f010 f8b3 	bl	8019868 <siprintf>
            break;
 8009702:	e01f      	b.n	8009744 <setDeviceState+0xa8>
        case 2:
            gpio_led_port = TOUCH_LED3_GPIO_Port;
 8009704:	4b53      	ldr	r3, [pc, #332]	@ (8009854 <setDeviceState+0x1b8>)
 8009706:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_3_GPIO_Port;
 8009708:	4b53      	ldr	r3, [pc, #332]	@ (8009858 <setDeviceState+0x1bc>)
 800970a:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED3_Pin;
 800970c:	2302      	movs	r3, #2
 800970e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_3_Pin;
 8009710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009714:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device3");
 8009716:	f107 030c 	add.w	r3, r7, #12
 800971a:	4950      	ldr	r1, [pc, #320]	@ (800985c <setDeviceState+0x1c0>)
 800971c:	4618      	mov	r0, r3
 800971e:	f010 f8a3 	bl	8019868 <siprintf>
            break;
 8009722:	e00f      	b.n	8009744 <setDeviceState+0xa8>
        case 3:
            gpio_led_port = TOUCH_LED4_GPIO_Port;
 8009724:	4b4c      	ldr	r3, [pc, #304]	@ (8009858 <setDeviceState+0x1bc>)
 8009726:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_4_GPIO_Port;
 8009728:	4b47      	ldr	r3, [pc, #284]	@ (8009848 <setDeviceState+0x1ac>)
 800972a:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED4_Pin;
 800972c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009730:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_4_Pin;
 8009732:	2340      	movs	r3, #64	@ 0x40
 8009734:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device4");
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	4949      	ldr	r1, [pc, #292]	@ (8009860 <setDeviceState+0x1c4>)
 800973c:	4618      	mov	r0, r3
 800973e:	f010 f893 	bl	8019868 <siprintf>
            break;
 8009742:	bf00      	nop
        default:
            return;
    }

    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8009744:	4b47      	ldr	r3, [pc, #284]	@ (8009864 <setDeviceState+0x1c8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2164      	movs	r1, #100	@ 0x64
 800974a:	4618      	mov	r0, r3
 800974c:	f00b ffac 	bl	80156a8 <xQueueSemaphoreTake>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d175      	bne.n	8009842 <setDeviceState+0x1a6>
		if (state) {
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d016      	beq.n	800978a <setDeviceState+0xee>
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800975c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800975e:	2201      	movs	r2, #1
 8009760:	4619      	mov	r1, r3
 8009762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009764:	f007 ff74 	bl	8011650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 8009768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800976a:	2201      	movs	r2, #1
 800976c:	4619      	mov	r1, r3
 800976e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009770:	f007 ff6e 	bl	8011650 <HAL_GPIO_WritePin>
			global_device_states[device] = 1;
 8009774:	4a3c      	ldr	r2, [pc, #240]	@ (8009868 <setDeviceState+0x1cc>)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2101      	movs	r1, #1
 800977a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 1;
 800977e:	4a3b      	ldr	r2, [pc, #236]	@ (800986c <setDeviceState+0x1d0>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2101      	movs	r1, #1
 8009784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8009788:	e015      	b.n	80097b6 <setDeviceState+0x11a>
		} else {
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 800978a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800978c:	2200      	movs	r2, #0
 800978e:	4619      	mov	r1, r3
 8009790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009792:	f007 ff5d 	bl	8011650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 8009796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009798:	2200      	movs	r2, #0
 800979a:	4619      	mov	r1, r3
 800979c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800979e:	f007 ff57 	bl	8011650 <HAL_GPIO_WritePin>
			global_device_states[device] = 0;
 80097a2:	4a31      	ldr	r2, [pc, #196]	@ (8009868 <setDeviceState+0x1cc>)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2100      	movs	r1, #0
 80097a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 0;
 80097ac:	4a2f      	ldr	r2, [pc, #188]	@ (800986c <setDeviceState+0x1d0>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2100      	movs	r1, #0
 80097b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		xSemaphoreGive(deviceStateMutex);
 80097b6:	4b2b      	ldr	r3, [pc, #172]	@ (8009864 <setDeviceState+0x1c8>)
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	2300      	movs	r3, #0
 80097bc:	2200      	movs	r2, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	f00b fce0 	bl	8015184 <xQueueGenericSend>

		cJSON *resp = cJSON_CreateObject();
 80097c4:	f006 fb78 	bl	800feb8 <cJSON_CreateObject>
 80097c8:	6238      	str	r0, [r7, #32]
		cJSON_AddNumberToObject(resp, deviceItem, device_states[device]);
 80097ca:	4a28      	ldr	r2, [pc, #160]	@ (800986c <setDeviceState+0x1d0>)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fed6 	bl	8008584 <__aeabi_i2d>
 80097d8:	f107 030c 	add.w	r3, r7, #12
 80097dc:	ec41 0b10 	vmov	d0, r0, r1
 80097e0:	4619      	mov	r1, r3
 80097e2:	6a38      	ldr	r0, [r7, #32]
 80097e4:	f006 fafa 	bl	800fddc <cJSON_AddNumberToObject>
		char *respStr = cJSON_PrintUnformatted(resp);
 80097e8:	6a38      	ldr	r0, [r7, #32]
 80097ea:	f005 fca5 	bl	800f138 <cJSON_PrintUnformatted>
 80097ee:	61f8      	str	r0, [r7, #28]
		if (respStr)
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d014      	beq.n	8009820 <setDeviceState+0x184>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 80097f6:	69f8      	ldr	r0, [r7, #28]
 80097f8:	f7fe fd6a 	bl	80082d0 <strlen>
 80097fc:	4603      	mov	r3, r0
 80097fe:	b29a      	uxth	r2, r3
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	481a      	ldr	r0, [pc, #104]	@ (8009870 <setDeviceState+0x1d4>)
 8009808:	f00a fa94 	bl	8013d34 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	2201      	movs	r2, #1
 8009812:	4918      	ldr	r1, [pc, #96]	@ (8009874 <setDeviceState+0x1d8>)
 8009814:	4816      	ldr	r0, [pc, #88]	@ (8009870 <setDeviceState+0x1d4>)
 8009816:	f00a fa8d 	bl	8013d34 <HAL_UART_Transmit>
			free(respStr);
 800981a:	69f8      	ldr	r0, [r7, #28]
 800981c:	f00e fbca 	bl	8017fb4 <free>
		}
		cJSON_Delete(resp);
 8009820:	6a38      	ldr	r0, [r7, #32]
 8009822:	f004 fbdd 	bl	800dfe0 <cJSON_Delete>

		safe_printf("DISPLAY: Device %d set to %s\n", device + 1, state ? "ON" : "OFF");
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	1c59      	adds	r1, r3, #1
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <setDeviceState+0x198>
 8009830:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <setDeviceState+0x1dc>)
 8009832:	e000      	b.n	8009836 <setDeviceState+0x19a>
 8009834:	4b11      	ldr	r3, [pc, #68]	@ (800987c <setDeviceState+0x1e0>)
 8009836:	461a      	mov	r2, r3
 8009838:	4811      	ldr	r0, [pc, #68]	@ (8009880 <setDeviceState+0x1e4>)
 800983a:	f001 fe23 	bl	800b484 <safe_printf>
 800983e:	e000      	b.n	8009842 <setDeviceState+0x1a6>
            return;
 8009840:	bf00      	nop
	}
}
 8009842:	3730      	adds	r7, #48	@ 0x30
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40020800 	.word	0x40020800
 800984c:	0801cd0c 	.word	0x0801cd0c
 8009850:	0801cd14 	.word	0x0801cd14
 8009854:	40021c00 	.word	0x40021c00
 8009858:	40020400 	.word	0x40020400
 800985c:	0801cd1c 	.word	0x0801cd1c
 8009860:	0801cd24 	.word	0x0801cd24
 8009864:	2000056c 	.word	0x2000056c
 8009868:	20000730 	.word	0x20000730
 800986c:	20000298 	.word	0x20000298
 8009870:	200014c0 	.word	0x200014c0
 8009874:	0801cd2c 	.word	0x0801cd2c
 8009878:	0801ccc0 	.word	0x0801ccc0
 800987c:	0801ccc4 	.word	0x0801ccc4
 8009880:	0801cd30 	.word	0x0801cd30

08009884 <setAllDevicesState>:

void setAllDevicesState(int state) {
 8009884:	b590      	push	{r4, r7, lr}
 8009886:	b08d      	sub	sp, #52	@ 0x34
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800988c:	4b70      	ldr	r3, [pc, #448]	@ (8009a50 <setAllDevicesState+0x1cc>)
 800988e:	f107 0408 	add.w	r4, r7, #8
 8009892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cJSON *resp = cJSON_CreateObject();
 8009898:	f006 fb0e 	bl	800feb8 <cJSON_CreateObject>
 800989c:	61f8      	str	r0, [r7, #28]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800989e:	4b6d      	ldr	r3, [pc, #436]	@ (8009a54 <setAllDevicesState+0x1d0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2164      	movs	r1, #100	@ 0x64
 80098a4:	4618      	mov	r0, r3
 80098a6:	f00b feff 	bl	80156a8 <xQueueSemaphoreTake>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	f040 80ca 	bne.w	8009a46 <setAllDevicesState+0x1c2>
        for (int i = 0; i < 4; i++) {
 80098b2:	2300      	movs	r3, #0
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098b6:	e092      	b.n	80099de <setAllDevicesState+0x15a>
        	GPIO_TypeDef* gpio_led_port;
        	GPIO_TypeDef *gpio_relay_port;
			uint16_t gpio_led_pin, gpio_relay_pin;

            switch(i) {
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d832      	bhi.n	8009924 <setAllDevicesState+0xa0>
 80098be:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <setAllDevicesState+0x40>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	080098fd 	.word	0x080098fd
 80098d0:	08009911 	.word	0x08009911
                case 0:
                	gpio_led_port = TOUCH_LED1_GPIO_Port;
 80098d4:	4b60      	ldr	r3, [pc, #384]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098d6:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_1_GPIO_Port;
 80098d8:	4b5f      	ldr	r3, [pc, #380]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED1_Pin;
 80098dc:	2308      	movs	r3, #8
 80098de:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_1_Pin;
 80098e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098e4:	843b      	strh	r3, [r7, #32]
                    break;
 80098e6:	e01d      	b.n	8009924 <setAllDevicesState+0xa0>
                case 1:
                	gpio_led_port = TOUCH_LED2_GPIO_Port;
 80098e8:	4b5b      	ldr	r3, [pc, #364]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098ea:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_2_GPIO_Port;
 80098ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098ee:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED2_Pin;
 80098f0:	2304      	movs	r3, #4
 80098f2:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_2_Pin;
 80098f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098f8:	843b      	strh	r3, [r7, #32]
                    break;
 80098fa:	e013      	b.n	8009924 <setAllDevicesState+0xa0>
                case 2:
                	gpio_led_port = TOUCH_LED3_GPIO_Port;
 80098fc:	4b57      	ldr	r3, [pc, #348]	@ (8009a5c <setAllDevicesState+0x1d8>)
 80098fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_3_GPIO_Port;
 8009900:	4b57      	ldr	r3, [pc, #348]	@ (8009a60 <setAllDevicesState+0x1dc>)
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED3_Pin;
 8009904:	2302      	movs	r3, #2
 8009906:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_3_Pin;
 8009908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800990c:	843b      	strh	r3, [r7, #32]
                    break;
 800990e:	e009      	b.n	8009924 <setAllDevicesState+0xa0>
                case 3:
                	gpio_led_port = TOUCH_LED4_GPIO_Port;
 8009910:	4b53      	ldr	r3, [pc, #332]	@ (8009a60 <setAllDevicesState+0x1dc>)
 8009912:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_4_GPIO_Port;
 8009914:	4b50      	ldr	r3, [pc, #320]	@ (8009a58 <setAllDevicesState+0x1d4>)
 8009916:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED4_Pin;
 8009918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800991c:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_4_Pin;
 800991e:	2340      	movs	r3, #64	@ 0x40
 8009920:	843b      	strh	r3, [r7, #32]
                    break;
 8009922:	bf00      	nop
            }

            if (state) {
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02b      	beq.n	8009982 <setAllDevicesState+0xfe>
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800992a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800992c:	2201      	movs	r2, #1
 800992e:	4619      	mov	r1, r3
 8009930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009932:	f007 fe8d 	bl	8011650 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 8009936:	8c3b      	ldrh	r3, [r7, #32]
 8009938:	2201      	movs	r2, #1
 800993a:	4619      	mov	r1, r3
 800993c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800993e:	f007 fe87 	bl	8011650 <HAL_GPIO_WritePin>
                global_device_states[i] = 1;
 8009942:	4a48      	ldr	r2, [pc, #288]	@ (8009a64 <setAllDevicesState+0x1e0>)
 8009944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009946:	2101      	movs	r1, #1
 8009948:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 1;
 800994c:	4a46      	ldr	r2, [pc, #280]	@ (8009a68 <setAllDevicesState+0x1e4>)
 800994e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009950:	2101      	movs	r1, #1
 8009952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	3330      	adds	r3, #48	@ 0x30
 800995c:	443b      	add	r3, r7
 800995e:	f853 4c28 	ldr.w	r4, [r3, #-40]
 8009962:	4a41      	ldr	r2, [pc, #260]	@ (8009a68 <setAllDevicesState+0x1e4>)
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fe0a 	bl	8008584 <__aeabi_i2d>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	ec43 2b10 	vmov	d0, r2, r3
 8009978:	4621      	mov	r1, r4
 800997a:	69f8      	ldr	r0, [r7, #28]
 800997c:	f006 fa2e 	bl	800fddc <cJSON_AddNumberToObject>
 8009980:	e02a      	b.n	80099d8 <setAllDevicesState+0x154>
            } else {
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 8009982:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009984:	2200      	movs	r2, #0
 8009986:	4619      	mov	r1, r3
 8009988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800998a:	f007 fe61 	bl	8011650 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 800998e:	8c3b      	ldrh	r3, [r7, #32]
 8009990:	2200      	movs	r2, #0
 8009992:	4619      	mov	r1, r3
 8009994:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009996:	f007 fe5b 	bl	8011650 <HAL_GPIO_WritePin>
                global_device_states[i] = 0;
 800999a:	4a32      	ldr	r2, [pc, #200]	@ (8009a64 <setAllDevicesState+0x1e0>)
 800999c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999e:	2100      	movs	r1, #0
 80099a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 0;
 80099a4:	4a30      	ldr	r2, [pc, #192]	@ (8009a68 <setAllDevicesState+0x1e4>)
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	2100      	movs	r1, #0
 80099aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 80099ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	3330      	adds	r3, #48	@ 0x30
 80099b4:	443b      	add	r3, r7
 80099b6:	f853 4c28 	ldr.w	r4, [r3, #-40]
 80099ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009a68 <setAllDevicesState+0x1e4>)
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fdde 	bl	8008584 <__aeabi_i2d>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	ec43 2b10 	vmov	d0, r2, r3
 80099d0:	4621      	mov	r1, r4
 80099d2:	69f8      	ldr	r0, [r7, #28]
 80099d4:	f006 fa02 	bl	800fddc <cJSON_AddNumberToObject>
        for (int i = 0; i < 4; i++) {
 80099d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099da:	3301      	adds	r3, #1
 80099dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	f77f af69 	ble.w	80098b8 <setAllDevicesState+0x34>
            }
        }

        xSemaphoreGive(deviceStateMutex);
 80099e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009a54 <setAllDevicesState+0x1d0>)
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	2300      	movs	r3, #0
 80099ec:	2200      	movs	r2, #0
 80099ee:	2100      	movs	r1, #0
 80099f0:	f00b fbc8 	bl	8015184 <xQueueGenericSend>

        char *respStr = cJSON_PrintUnformatted(resp);
 80099f4:	69f8      	ldr	r0, [r7, #28]
 80099f6:	f005 fb9f 	bl	800f138 <cJSON_PrintUnformatted>
 80099fa:	61b8      	str	r0, [r7, #24]
		if (respStr)
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d014      	beq.n	8009a2c <setAllDevicesState+0x1a8>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 8009a02:	69b8      	ldr	r0, [r7, #24]
 8009a04:	f7fe fc64 	bl	80082d0 <strlen>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a10:	69b9      	ldr	r1, [r7, #24]
 8009a12:	4816      	ldr	r0, [pc, #88]	@ (8009a6c <setAllDevicesState+0x1e8>)
 8009a14:	f00a f98e 	bl	8013d34 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8009a18:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	4914      	ldr	r1, [pc, #80]	@ (8009a70 <setAllDevicesState+0x1ec>)
 8009a20:	4812      	ldr	r0, [pc, #72]	@ (8009a6c <setAllDevicesState+0x1e8>)
 8009a22:	f00a f987 	bl	8013d34 <HAL_UART_Transmit>
			free(respStr);
 8009a26:	69b8      	ldr	r0, [r7, #24]
 8009a28:	f00e fac4 	bl	8017fb4 <free>
		}
		cJSON_Delete(resp);
 8009a2c:	69f8      	ldr	r0, [r7, #28]
 8009a2e:	f004 fad7 	bl	800dfe0 <cJSON_Delete>

        safe_printf("DISPLAY: All devices set to %s\n", state ? "ON" : "OFF");
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <setAllDevicesState+0x1b8>
 8009a38:	4b0e      	ldr	r3, [pc, #56]	@ (8009a74 <setAllDevicesState+0x1f0>)
 8009a3a:	e000      	b.n	8009a3e <setAllDevicesState+0x1ba>
 8009a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a78 <setAllDevicesState+0x1f4>)
 8009a3e:	4619      	mov	r1, r3
 8009a40:	480e      	ldr	r0, [pc, #56]	@ (8009a7c <setAllDevicesState+0x1f8>)
 8009a42:	f001 fd1f 	bl	800b484 <safe_printf>
    }
}
 8009a46:	bf00      	nop
 8009a48:	3734      	adds	r7, #52	@ 0x34
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd90      	pop	{r4, r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	0801cd70 	.word	0x0801cd70
 8009a54:	2000056c 	.word	0x2000056c
 8009a58:	40020800 	.word	0x40020800
 8009a5c:	40021c00 	.word	0x40021c00
 8009a60:	40020400 	.word	0x40020400
 8009a64:	20000730 	.word	0x20000730
 8009a68:	20000298 	.word	0x20000298
 8009a6c:	200014c0 	.word	0x200014c0
 8009a70:	0801cd2c 	.word	0x0801cd2c
 8009a74:	0801ccc0 	.word	0x0801ccc0
 8009a78:	0801ccc4 	.word	0x0801ccc4
 8009a7c:	0801cd50 	.word	0x0801cd50

08009a80 <syncDisplayDeviceStates>:

void syncDisplayDeviceStates(void) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 8009a86:	4b12      	ldr	r3, [pc, #72]	@ (8009ad0 <syncDisplayDeviceStates+0x50>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	210a      	movs	r1, #10
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f00b fe0b 	bl	80156a8 <xQueueSemaphoreTake>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d117      	bne.n	8009ac8 <syncDisplayDeviceStates+0x48>
        for (int i = 0; i < 4; i++) {
 8009a98:	2300      	movs	r3, #0
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e00a      	b.n	8009ab4 <syncDisplayDeviceStates+0x34>
            device_states[i] = global_device_states[i];
 8009a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad4 <syncDisplayDeviceStates+0x54>)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009aa6:	490c      	ldr	r1, [pc, #48]	@ (8009ad8 <syncDisplayDeviceStates+0x58>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	ddf1      	ble.n	8009a9e <syncDisplayDeviceStates+0x1e>
        }
        xSemaphoreGive(deviceStateMutex);
 8009aba:	4b05      	ldr	r3, [pc, #20]	@ (8009ad0 <syncDisplayDeviceStates+0x50>)
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	f00b fb5e 	bl	8015184 <xQueueGenericSend>
    }
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	2000056c 	.word	0x2000056c
 8009ad4:	20000730 	.word	0x20000730
 8009ad8:	20000298 	.word	0x20000298

08009adc <handleNavigation>:
    HAL_Delay(800);
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
}


void handleNavigation(void) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
    int max_options;

    switch(current_menu) {
 8009ae2:	4b96      	ldr	r3, [pc, #600]	@ (8009d3c <handleNavigation+0x260>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d816      	bhi.n	8009b18 <handleNavigation+0x3c>
 8009aea:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <handleNavigation+0x14>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b07 	.word	0x08009b07
 8009af8:	08009b0d 	.word	0x08009b0d
 8009afc:	08009b13 	.word	0x08009b13
        case MENU_MAIN:
            max_options = MAIN_MENU_OPTIONS;
 8009b00:	2302      	movs	r3, #2
 8009b02:	60fb      	str	r3, [r7, #12]
            break;
 8009b04:	e00b      	b.n	8009b1e <handleNavigation+0x42>
        case MENU_TOTAL_CONTROL:
            max_options = TOTAL_CONTROL_OPTIONS;
 8009b06:	2303      	movs	r3, #3
 8009b08:	60fb      	str	r3, [r7, #12]
            break;
 8009b0a:	e008      	b.n	8009b1e <handleNavigation+0x42>
        case MENU_SEPARATE_CONTROL:
            max_options = SEPARATE_CONTROL_OPTIONS;
 8009b0c:	2305      	movs	r3, #5
 8009b0e:	60fb      	str	r3, [r7, #12]
            break;
 8009b10:	e005      	b.n	8009b1e <handleNavigation+0x42>
        case MENU_DEVICE_CONTROL:
            max_options = DEVICE_CONTROL_OPTIONS;
 8009b12:	2304      	movs	r3, #4
 8009b14:	60fb      	str	r3, [r7, #12]
            break;
 8009b16:	e002      	b.n	8009b1e <handleNavigation+0x42>
        default:
            max_options = 2;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	60fb      	str	r3, [r7, #12]
            break;
 8009b1c:	bf00      	nop
    }

    if (upbutton) {
 8009b1e:	4b88      	ldr	r3, [pc, #544]	@ (8009d40 <handleNavigation+0x264>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d052      	beq.n	8009bcc <handleNavigation+0xf0>
        HAL_Delay(200);
 8009b26:	20c8      	movs	r0, #200	@ 0xc8
 8009b28:	f007 f928 	bl	8010d7c <HAL_Delay>
        int old_selection = current_selection;
 8009b2c:	4b85      	ldr	r3, [pc, #532]	@ (8009d44 <handleNavigation+0x268>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60bb      	str	r3, [r7, #8]
        current_selection = (current_selection - 1 + max_options) % max_options;
 8009b32:	4b84      	ldr	r3, [pc, #528]	@ (8009d44 <handleNavigation+0x268>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	1e5a      	subs	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	fb93 f2f2 	sdiv	r2, r3, r2
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	fb01 f202 	mul.w	r2, r1, r2
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d44 <handleNavigation+0x268>)
 8009b4c:	6013      	str	r3, [r2, #0]
        upbutton = 0;
 8009b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8009d40 <handleNavigation+0x264>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]

        // Quick highlight update instead of full redraw
        switch(current_menu) {
 8009b54:	4b79      	ldr	r3, [pc, #484]	@ (8009d3c <handleNavigation+0x260>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d837      	bhi.n	8009bcc <handleNavigation+0xf0>
 8009b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <handleNavigation+0x88>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b8b 	.word	0x08009b8b
 8009b6c:	08009ba1 	.word	0x08009ba1
 8009b70:	08009bb7 	.word	0x08009bb7
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 8009b74:	4b73      	ldr	r3, [pc, #460]	@ (8009d44 <handleNavigation+0x268>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	68b8      	ldr	r0, [r7, #8]
 8009b7c:	f000 fb0a 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009b80:	4b70      	ldr	r3, [pc, #448]	@ (8009d44 <handleNavigation+0x268>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a70      	ldr	r2, [pc, #448]	@ (8009d48 <handleNavigation+0x26c>)
 8009b86:	6013      	str	r3, [r2, #0]
                break;
 8009b88:	e020      	b.n	8009bcc <handleNavigation+0xf0>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8009d44 <handleNavigation+0x268>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68b8      	ldr	r0, [r7, #8]
 8009b92:	f000 faff 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009b96:	4b6b      	ldr	r3, [pc, #428]	@ (8009d44 <handleNavigation+0x268>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a6b      	ldr	r2, [pc, #428]	@ (8009d48 <handleNavigation+0x26c>)
 8009b9c:	6013      	str	r3, [r2, #0]
                break;
 8009b9e:	e015      	b.n	8009bcc <handleNavigation+0xf0>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009ba0:	4b68      	ldr	r3, [pc, #416]	@ (8009d44 <handleNavigation+0x268>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	68b8      	ldr	r0, [r7, #8]
 8009ba8:	f000 faf4 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009bac:	4b65      	ldr	r3, [pc, #404]	@ (8009d44 <handleNavigation+0x268>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a65      	ldr	r2, [pc, #404]	@ (8009d48 <handleNavigation+0x26c>)
 8009bb2:	6013      	str	r3, [r2, #0]
                break;
 8009bb4:	e00a      	b.n	8009bcc <handleNavigation+0xf0>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009bb6:	4b63      	ldr	r3, [pc, #396]	@ (8009d44 <handleNavigation+0x268>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68b8      	ldr	r0, [r7, #8]
 8009bbe:	f000 fae9 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009bc2:	4b60      	ldr	r3, [pc, #384]	@ (8009d44 <handleNavigation+0x268>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a60      	ldr	r2, [pc, #384]	@ (8009d48 <handleNavigation+0x26c>)
 8009bc8:	6013      	str	r3, [r2, #0]
                break;
 8009bca:	bf00      	nop
        }
    }

    if (downbutton) {
 8009bcc:	4b5f      	ldr	r3, [pc, #380]	@ (8009d4c <handleNavigation+0x270>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d04f      	beq.n	8009c74 <handleNavigation+0x198>
        HAL_Delay(200);
 8009bd4:	20c8      	movs	r0, #200	@ 0xc8
 8009bd6:	f007 f8d1 	bl	8010d7c <HAL_Delay>
        int old_selection = current_selection;
 8009bda:	4b5a      	ldr	r3, [pc, #360]	@ (8009d44 <handleNavigation+0x268>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	607b      	str	r3, [r7, #4]
        current_selection = (current_selection + 1) % max_options;
 8009be0:	4b58      	ldr	r3, [pc, #352]	@ (8009d44 <handleNavigation+0x268>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3301      	adds	r3, #1
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	fb93 f2f2 	sdiv	r2, r3, r2
 8009bec:	68f9      	ldr	r1, [r7, #12]
 8009bee:	fb01 f202 	mul.w	r2, r1, r2
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	4a53      	ldr	r2, [pc, #332]	@ (8009d44 <handleNavigation+0x268>)
 8009bf6:	6013      	str	r3, [r2, #0]
        downbutton = 0;
 8009bf8:	4b54      	ldr	r3, [pc, #336]	@ (8009d4c <handleNavigation+0x270>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 8009bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8009d3c <handleNavigation+0x260>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d836      	bhi.n	8009c74 <handleNavigation+0x198>
 8009c06:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <handleNavigation+0x130>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c33 	.word	0x08009c33
 8009c14:	08009c49 	.word	0x08009c49
 8009c18:	08009c5f 	.word	0x08009c5f
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 8009c1c:	4b49      	ldr	r3, [pc, #292]	@ (8009d44 <handleNavigation+0x268>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fab6 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c28:	4b46      	ldr	r3, [pc, #280]	@ (8009d44 <handleNavigation+0x268>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a46      	ldr	r2, [pc, #280]	@ (8009d48 <handleNavigation+0x26c>)
 8009c2e:	6013      	str	r3, [r2, #0]
                break;
 8009c30:	e020      	b.n	8009c74 <handleNavigation+0x198>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009c32:	4b44      	ldr	r3, [pc, #272]	@ (8009d44 <handleNavigation+0x268>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 faab 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c3e:	4b41      	ldr	r3, [pc, #260]	@ (8009d44 <handleNavigation+0x268>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a41      	ldr	r2, [pc, #260]	@ (8009d48 <handleNavigation+0x26c>)
 8009c44:	6013      	str	r3, [r2, #0]
                break;
 8009c46:	e015      	b.n	8009c74 <handleNavigation+0x198>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009c48:	4b3e      	ldr	r3, [pc, #248]	@ (8009d44 <handleNavigation+0x268>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 faa0 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c54:	4b3b      	ldr	r3, [pc, #236]	@ (8009d44 <handleNavigation+0x268>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a3b      	ldr	r2, [pc, #236]	@ (8009d48 <handleNavigation+0x26c>)
 8009c5a:	6013      	str	r3, [r2, #0]
                break;
 8009c5c:	e00a      	b.n	8009c74 <handleNavigation+0x198>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009c5e:	4b39      	ldr	r3, [pc, #228]	@ (8009d44 <handleNavigation+0x268>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa95 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c6a:	4b36      	ldr	r3, [pc, #216]	@ (8009d44 <handleNavigation+0x268>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a36      	ldr	r2, [pc, #216]	@ (8009d48 <handleNavigation+0x26c>)
 8009c70:	6013      	str	r3, [r2, #0]
                break;
 8009c72:	bf00      	nop
        }
    }

    if (enter) {
 8009c74:	4b36      	ldr	r3, [pc, #216]	@ (8009d50 <handleNavigation+0x274>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 80df 	beq.w	8009e3c <handleNavigation+0x360>
        HAL_Delay(200);
 8009c7e:	20c8      	movs	r0, #200	@ 0xc8
 8009c80:	f007 f87c 	bl	8010d7c <HAL_Delay>
        enter = 0;
 8009c84:	4b32      	ldr	r3, [pc, #200]	@ (8009d50 <handleNavigation+0x274>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 8009c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8009d3c <handleNavigation+0x260>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	f200 80d4 	bhi.w	8009e3c <handleNavigation+0x360>
 8009c94:	a201      	add	r2, pc, #4	@ (adr r2, 8009c9c <handleNavigation+0x1c0>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009cad 	.word	0x08009cad
 8009ca0:	08009cef 	.word	0x08009cef
 8009ca4:	08009d59 	.word	0x08009d59
 8009ca8:	08009db5 	.word	0x08009db5
            case MENU_MAIN:
                if (current_selection == 0) {
 8009cac:	4b25      	ldr	r3, [pc, #148]	@ (8009d44 <handleNavigation+0x268>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10b      	bne.n	8009ccc <handleNavigation+0x1f0>
                    current_menu = MENU_TOTAL_CONTROL;
 8009cb4:	4b21      	ldr	r3, [pc, #132]	@ (8009d3c <handleNavigation+0x260>)
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009cba:	4b22      	ldr	r3, [pc, #136]	@ (8009d44 <handleNavigation+0x268>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009cc0:	4b24      	ldr	r3, [pc, #144]	@ (8009d54 <handleNavigation+0x278>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
                    displayTotalControlMenu();
 8009cc6:	f7ff fa39 	bl	800913c <displayTotalControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = 0;
                    menu_drawn = false; // Force menu redraw
                    displaySeparateControlMenu();
                }
                break;
 8009cca:	e0b0      	b.n	8009e2e <handleNavigation+0x352>
                } else if (current_selection == 1) {
 8009ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8009d44 <handleNavigation+0x268>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	f040 80ac 	bne.w	8009e2e <handleNavigation+0x352>
                    current_menu = MENU_SEPARATE_CONTROL;
 8009cd6:	4b19      	ldr	r3, [pc, #100]	@ (8009d3c <handleNavigation+0x260>)
 8009cd8:	2202      	movs	r2, #2
 8009cda:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009cdc:	4b19      	ldr	r3, [pc, #100]	@ (8009d44 <handleNavigation+0x268>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d54 <handleNavigation+0x278>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 8009ce8:	f7ff fb06 	bl	80092f8 <displaySeparateControlMenu>
                break;
 8009cec:	e09f      	b.n	8009e2e <handleNavigation+0x352>

            case MENU_TOTAL_CONTROL:
                if (current_selection == 0) {
 8009cee:	4b15      	ldr	r3, [pc, #84]	@ (8009d44 <handleNavigation+0x268>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d103      	bne.n	8009cfe <handleNavigation+0x222>
                    setAllDevicesState(1);
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f7ff fdc4 	bl	8009884 <setAllDevicesState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 8009cfc:	e099      	b.n	8009e32 <handleNavigation+0x356>
                } else if (current_selection == 1) {
 8009cfe:	4b11      	ldr	r3, [pc, #68]	@ (8009d44 <handleNavigation+0x268>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d103      	bne.n	8009d0e <handleNavigation+0x232>
                    setAllDevicesState(0);
 8009d06:	2000      	movs	r0, #0
 8009d08:	f7ff fdbc 	bl	8009884 <setAllDevicesState>
                break;
 8009d0c:	e091      	b.n	8009e32 <handleNavigation+0x356>
                } else if (current_selection == 2) {
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d44 <handleNavigation+0x268>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	f040 808d 	bne.w	8009e32 <handleNavigation+0x356>
                    current_menu = MENU_MAIN;
 8009d18:	4b08      	ldr	r3, [pc, #32]	@ (8009d3c <handleNavigation+0x260>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009d1e:	4b09      	ldr	r3, [pc, #36]	@ (8009d44 <handleNavigation+0x268>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009d24:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <handleNavigation+0x278>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 8009d2a:	f004 f865 	bl	800ddf8 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 8009d2e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009d32:	f007 f823 	bl	8010d7c <HAL_Delay>
                    displayMainMenu();
 8009d36:	f7ff f985 	bl	8009044 <displayMainMenu>
                break;
 8009d3a:	e07a      	b.n	8009e32 <handleNavigation+0x356>
 8009d3c:	20000280 	.word	0x20000280
 8009d40:	20000290 	.word	0x20000290
 8009d44:	20000284 	.word	0x20000284
 8009d48:	20000000 	.word	0x20000000
 8009d4c:	2000028c 	.word	0x2000028c
 8009d50:	20000294 	.word	0x20000294
 8009d54:	200002a8 	.word	0x200002a8

            case MENU_SEPARATE_CONTROL:
                if (current_selection >= 0 && current_selection <= 3) {
 8009d58:	4b3a      	ldr	r3, [pc, #232]	@ (8009e44 <handleNavigation+0x368>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	db13      	blt.n	8009d88 <handleNavigation+0x2ac>
 8009d60:	4b38      	ldr	r3, [pc, #224]	@ (8009e44 <handleNavigation+0x368>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	dc0f      	bgt.n	8009d88 <handleNavigation+0x2ac>
                    current_device = current_selection;
 8009d68:	4b36      	ldr	r3, [pc, #216]	@ (8009e44 <handleNavigation+0x368>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a36      	ldr	r2, [pc, #216]	@ (8009e48 <handleNavigation+0x36c>)
 8009d6e:	6013      	str	r3, [r2, #0]
                    current_menu = MENU_DEVICE_CONTROL;
 8009d70:	4b36      	ldr	r3, [pc, #216]	@ (8009e4c <handleNavigation+0x370>)
 8009d72:	2203      	movs	r2, #3
 8009d74:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009d76:	4b33      	ldr	r3, [pc, #204]	@ (8009e44 <handleNavigation+0x368>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009d7c:	4b34      	ldr	r3, [pc, #208]	@ (8009e50 <handleNavigation+0x374>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
                    displayDeviceControlMenu();
 8009d82:	f7ff fb93 	bl	80094ac <displayDeviceControlMenu>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 8009d86:	e056      	b.n	8009e36 <handleNavigation+0x35a>
                } else if (current_selection == 4) {
 8009d88:	4b2e      	ldr	r3, [pc, #184]	@ (8009e44 <handleNavigation+0x368>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d152      	bne.n	8009e36 <handleNavigation+0x35a>
                    current_menu = MENU_MAIN;
 8009d90:	4b2e      	ldr	r3, [pc, #184]	@ (8009e4c <handleNavigation+0x370>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009d96:	4b2b      	ldr	r3, [pc, #172]	@ (8009e44 <handleNavigation+0x368>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8009e50 <handleNavigation+0x374>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 8009da2:	f004 f829 	bl	800ddf8 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 8009da6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009daa:	f006 ffe7 	bl	8010d7c <HAL_Delay>
                    displayMainMenu();
 8009dae:	f7ff f949 	bl	8009044 <displayMainMenu>
                break;
 8009db2:	e040      	b.n	8009e36 <handleNavigation+0x35a>

            case MENU_DEVICE_CONTROL:
                if (current_selection == 0) {
 8009db4:	4b23      	ldr	r3, [pc, #140]	@ (8009e44 <handleNavigation+0x368>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <handleNavigation+0x2ee>
                    setDeviceState(current_device, 1);
 8009dbc:	4b22      	ldr	r3, [pc, #136]	@ (8009e48 <handleNavigation+0x36c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fc6a 	bl	800969c <setDeviceState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 8009dc8:	e037      	b.n	8009e3a <handleNavigation+0x35e>
                } else if (current_selection == 1) {
 8009dca:	4b1e      	ldr	r3, [pc, #120]	@ (8009e44 <handleNavigation+0x368>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d106      	bne.n	8009de0 <handleNavigation+0x304>
                    setDeviceState(current_device, 0);
 8009dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e48 <handleNavigation+0x36c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fc5f 	bl	800969c <setDeviceState>
                break;
 8009dde:	e02c      	b.n	8009e3a <handleNavigation+0x35e>
                } else if (current_selection == 2) {
 8009de0:	4b18      	ldr	r3, [pc, #96]	@ (8009e44 <handleNavigation+0x368>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d10c      	bne.n	8009e02 <handleNavigation+0x326>
                    current_menu = MENU_SEPARATE_CONTROL;
 8009de8:	4b18      	ldr	r3, [pc, #96]	@ (8009e4c <handleNavigation+0x370>)
 8009dea:	2202      	movs	r2, #2
 8009dec:	601a      	str	r2, [r3, #0]
                    current_selection = current_device;
 8009dee:	4b16      	ldr	r3, [pc, #88]	@ (8009e48 <handleNavigation+0x36c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a14      	ldr	r2, [pc, #80]	@ (8009e44 <handleNavigation+0x368>)
 8009df4:	6013      	str	r3, [r2, #0]
                    menu_drawn = false; // Force menu redraw
 8009df6:	4b16      	ldr	r3, [pc, #88]	@ (8009e50 <handleNavigation+0x374>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 8009dfc:	f7ff fa7c 	bl	80092f8 <displaySeparateControlMenu>
                break;
 8009e00:	e01b      	b.n	8009e3a <handleNavigation+0x35e>
                }else if (current_selection == 3) {
 8009e02:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <handleNavigation+0x368>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d117      	bne.n	8009e3a <handleNavigation+0x35e>
                    current_menu = MENU_MAIN;
 8009e0a:	4b10      	ldr	r3, [pc, #64]	@ (8009e4c <handleNavigation+0x370>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009e10:	4b0c      	ldr	r3, [pc, #48]	@ (8009e44 <handleNavigation+0x368>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009e16:	4b0e      	ldr	r3, [pc, #56]	@ (8009e50 <handleNavigation+0x374>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 8009e1c:	f003 ffec 	bl	800ddf8 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 8009e20:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009e24:	f006 ffaa 	bl	8010d7c <HAL_Delay>
                    displayMainMenu();
 8009e28:	f7ff f90c 	bl	8009044 <displayMainMenu>
                break;
 8009e2c:	e005      	b.n	8009e3a <handleNavigation+0x35e>
                break;
 8009e2e:	bf00      	nop
 8009e30:	e004      	b.n	8009e3c <handleNavigation+0x360>
                break;
 8009e32:	bf00      	nop
 8009e34:	e002      	b.n	8009e3c <handleNavigation+0x360>
                break;
 8009e36:	bf00      	nop
 8009e38:	e000      	b.n	8009e3c <handleNavigation+0x360>
                break;
 8009e3a:	bf00      	nop
        }
    }
}
 8009e3c:	bf00      	nop
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20000284 	.word	0x20000284
 8009e48:	20000288 	.word	0x20000288
 8009e4c:	20000280 	.word	0x20000280
 8009e50:	200002a8 	.word	0x200002a8

08009e54 <Menu_Handler>:


void Menu_Handler(void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
    switch(current_menu) {
 8009e58:	4b0f      	ldr	r3, [pc, #60]	@ (8009e98 <Menu_Handler+0x44>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d817      	bhi.n	8009e90 <Menu_Handler+0x3c>
 8009e60:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <Menu_Handler+0x14>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009e79 	.word	0x08009e79
 8009e6c:	08009e7f 	.word	0x08009e7f
 8009e70:	08009e85 	.word	0x08009e85
 8009e74:	08009e8b 	.word	0x08009e8b
        case MENU_MAIN:
            displayMainMenu();
 8009e78:	f7ff f8e4 	bl	8009044 <displayMainMenu>
            break;
 8009e7c:	e008      	b.n	8009e90 <Menu_Handler+0x3c>
        case MENU_TOTAL_CONTROL:
            displayTotalControlMenu();
 8009e7e:	f7ff f95d 	bl	800913c <displayTotalControlMenu>
            break;
 8009e82:	e005      	b.n	8009e90 <Menu_Handler+0x3c>
        case MENU_SEPARATE_CONTROL:
            displaySeparateControlMenu();
 8009e84:	f7ff fa38 	bl	80092f8 <displaySeparateControlMenu>
            break;
 8009e88:	e002      	b.n	8009e90 <Menu_Handler+0x3c>
        case MENU_DEVICE_CONTROL:
            displayDeviceControlMenu();
 8009e8a:	f7ff fb0f 	bl	80094ac <displayDeviceControlMenu>
            break;
 8009e8e:	bf00      	nop
    }

    handleNavigation();
 8009e90:	f7ff fe24 	bl	8009adc <handleNavigation>
}
 8009e94:	bf00      	nop
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000280 	.word	0x20000280

08009e9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_10) { // ENTER button
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eac:	d108      	bne.n	8009ec0 <HAL_GPIO_EXTI_Callback+0x24>
        downbutton = 0;
 8009eae:	4b14      	ldr	r3, [pc, #80]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x64>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 8009eb4:	4b13      	ldr	r3, [pc, #76]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x68>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]
        enter = 1;
 8009eba:	4b13      	ldr	r3, [pc, #76]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_11) { // DOWN button
 8009ec0:	88fb      	ldrh	r3, [r7, #6]
 8009ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ec6:	d108      	bne.n	8009eda <HAL_GPIO_EXTI_Callback+0x3e>
        downbutton = 1;
 8009ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x64>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 8009ece:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x68>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
        enter = 0;
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_9) { // UP button
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ee0:	d108      	bne.n	8009ef4 <HAL_GPIO_EXTI_Callback+0x58>
        downbutton = 0;
 8009ee2:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x64>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
        upbutton = 1;
 8009ee8:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x68>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
        enter = 0;
 8009eee:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
    }
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	2000028c 	.word	0x2000028c
 8009f04:	20000290 	.word	0x20000290
 8009f08:	20000294 	.word	0x20000294

08009f0c <initializeMenu>:


void initializeMenu(void) {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
    safe_printf("display_init\n\r");
 8009f12:	481c      	ldr	r0, [pc, #112]	@ (8009f84 <initializeMenu+0x78>)
 8009f14:	f001 fab6 	bl	800b484 <safe_printf>
    current_menu = MENU_MAIN;
 8009f18:	4b1b      	ldr	r3, [pc, #108]	@ (8009f88 <initializeMenu+0x7c>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
    current_selection = 0;
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f8c <initializeMenu+0x80>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
    current_device = 0;
 8009f24:	4b1a      	ldr	r3, [pc, #104]	@ (8009f90 <initializeMenu+0x84>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
    last_selection = -1;
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f94 <initializeMenu+0x88>)
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f30:	601a      	str	r2, [r3, #0]
    last_menu = -1;
 8009f32:	4b19      	ldr	r3, [pc, #100]	@ (8009f98 <initializeMenu+0x8c>)
 8009f34:	f04f 32ff 	mov.w	r2, #4294967295
 8009f38:	601a      	str	r2, [r3, #0]
    menu_drawn = false;
 8009f3a:	4b18      	ldr	r3, [pc, #96]	@ (8009f9c <initializeMenu+0x90>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
    buttons_drawn = false;
 8009f40:	4b17      	ldr	r3, [pc, #92]	@ (8009fa0 <initializeMenu+0x94>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 8009f46:	2300      	movs	r3, #0
 8009f48:	607b      	str	r3, [r7, #4]
 8009f4a:	e011      	b.n	8009f70 <initializeMenu+0x64>
        device_states[i] = 0;
 8009f4c:	4a15      	ldr	r2, [pc, #84]	@ (8009fa4 <initializeMenu+0x98>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        last_device_states[i] = -1;
 8009f56:	4a14      	ldr	r2, [pc, #80]	@ (8009fa8 <initializeMenu+0x9c>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        setDeviceState(i, 0);
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fb99 	bl	800969c <setDeviceState>
    for (int i = 0; i < 4; i++) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	607b      	str	r3, [r7, #4]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	ddea      	ble.n	8009f4c <initializeMenu+0x40>
    }
    displayMainMenu();
 8009f76:	f7ff f865 	bl	8009044 <displayMainMenu>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	0801cd80 	.word	0x0801cd80
 8009f88:	20000280 	.word	0x20000280
 8009f8c:	20000284 	.word	0x20000284
 8009f90:	20000288 	.word	0x20000288
 8009f94:	20000000 	.word	0x20000000
 8009f98:	20000004 	.word	0x20000004
 8009f9c:	200002a8 	.word	0x200002a8
 8009fa0:	200002a9 	.word	0x200002a9
 8009fa4:	20000298 	.word	0x20000298
 8009fa8:	20000008 	.word	0x20000008

08009fac <drawSingleButton>:
#endif
}


void drawSingleButton(int x, int y, int width, int height, char* text, int selected, int button_id)
{
 8009fac:	b590      	push	{r4, r7, lr}
 8009fae:	b089      	sub	sp, #36	@ 0x24
 8009fb0:	af04      	add	r7, sp, #16
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
    fillRect(x-1, y-1, width+2, height+2, BLACK);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	b218      	sxth	r0, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	b219      	sxth	r1, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	3302      	adds	r3, #2
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	b21a      	sxth	r2, r3
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	3302      	adds	r3, #2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	b21b      	sxth	r3, r3
 8009fe2:	2400      	movs	r4, #0
 8009fe4:	9400      	str	r4, [sp, #0]
 8009fe6:	f002 ff56 	bl	800ce96 <fillRect>

    if (selected)
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d03e      	beq.n	800a06e <drawSingleButton+0xc2>
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	b218      	sxth	r0, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	b29b      	uxth	r3, r3
 800a002:	b219      	sxth	r1, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	b29b      	uxth	r3, r3
 800a008:	3302      	adds	r3, #2
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	b21a      	sxth	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	3302      	adds	r3, #2
 800a014:	b29b      	uxth	r3, r3
 800a016:	b21b      	sxth	r3, r3
 800a018:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a01c:	9401      	str	r4, [sp, #4]
 800a01e:	2403      	movs	r4, #3
 800a020:	9400      	str	r4, [sp, #0]
 800a022:	f003 fa59 	bl	800d4d8 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GREEN);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	b218      	sxth	r0, r3
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	b219      	sxth	r1, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	b21a      	sxth	r2, r3
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	b21b      	sxth	r3, r3
 800a036:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800a03a:	9401      	str	r4, [sp, #4]
 800a03c:	2403      	movs	r4, #3
 800a03e:	9400      	str	r4, [sp, #0]
 800a040:	f003 fb17 	bl	800d672 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, BLACK, GREEN);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	b29b      	uxth	r3, r3
 800a048:	3305      	adds	r3, #5
 800a04a:	b298      	uxth	r0, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3304      	adds	r3, #4
 800a052:	b299      	uxth	r1, r3
 800a054:	4b4d      	ldr	r3, [pc, #308]	@ (800a18c <drawSingleButton+0x1e0>)
 800a056:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a05a:	9202      	str	r2, [sp, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	9201      	str	r2, [sp, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	9200      	str	r2, [sp, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	f003 fdea 	bl	800dc40 <ST7735_WriteString>
 800a06c:	e03e      	b.n	800a0ec <drawSingleButton+0x140>
    }
    else
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	b29b      	uxth	r3, r3
 800a076:	b218      	sxth	r0, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29b      	uxth	r3, r3
 800a080:	b219      	sxth	r1, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	b29b      	uxth	r3, r3
 800a086:	3302      	adds	r3, #2
 800a088:	b29b      	uxth	r3, r3
 800a08a:	b21a      	sxth	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3302      	adds	r3, #2
 800a092:	b29b      	uxth	r3, r3
 800a094:	b21b      	sxth	r3, r3
 800a096:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a09a:	9401      	str	r4, [sp, #4]
 800a09c:	2403      	movs	r4, #3
 800a09e:	9400      	str	r4, [sp, #0]
 800a0a0:	f003 fa1a 	bl	800d4d8 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GRAY);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	b218      	sxth	r0, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	b219      	sxth	r1, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	b21a      	sxth	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	b21b      	sxth	r3, r3
 800a0b4:	f242 1404 	movw	r4, #8452	@ 0x2104
 800a0b8:	9401      	str	r4, [sp, #4]
 800a0ba:	2403      	movs	r4, #3
 800a0bc:	9400      	str	r4, [sp, #0]
 800a0be:	f003 fad8 	bl	800d672 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	3305      	adds	r3, #5
 800a0c8:	b298      	uxth	r0, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a18c <drawSingleButton+0x1e0>)
 800a0d4:	f242 1204 	movw	r2, #8452	@ 0x2104
 800a0d8:	9202      	str	r2, [sp, #8]
 800a0da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0de:	9201      	str	r2, [sp, #4]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	9200      	str	r2, [sp, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a3a      	ldr	r2, [r7, #32]
 800a0e8:	f003 fdaa 	bl	800dc40 <ST7735_WriteString>
    }

    // Store button position AND TEXT for future updates
    if (button_id < 6)
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	dc48      	bgt.n	800a184 <drawSingleButton+0x1d8>
    {
        current_buttons[button_id].x = x;
 800a0f2:	4927      	ldr	r1, [pc, #156]	@ (800a190 <drawSingleButton+0x1e4>)
 800a0f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4413      	add	r3, r2
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	440b      	add	r3, r1
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].y = y;
 800a104:	4922      	ldr	r1, [pc, #136]	@ (800a190 <drawSingleButton+0x1e4>)
 800a106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	440b      	add	r3, r1
 800a112:	3304      	adds	r3, #4
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].width = width;
 800a118:	491d      	ldr	r1, [pc, #116]	@ (800a190 <drawSingleButton+0x1e4>)
 800a11a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a11c:	4613      	mov	r3, r2
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	4413      	add	r3, r2
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	440b      	add	r3, r1
 800a126:	3308      	adds	r3, #8
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].height = height;
 800a12c:	4918      	ldr	r1, [pc, #96]	@ (800a190 <drawSingleButton+0x1e4>)
 800a12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	440b      	add	r3, r1
 800a13a:	330c      	adds	r3, #12
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].button_id = button_id;
 800a140:	4913      	ldr	r1, [pc, #76]	@ (800a190 <drawSingleButton+0x1e4>)
 800a142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a144:	4613      	mov	r3, r2
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	4413      	add	r3, r2
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	440b      	add	r3, r1
 800a14e:	3310      	adds	r3, #16
 800a150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a152:	601a      	str	r2, [r3, #0]
        strncpy(current_buttons[button_id].text, text, 24);
 800a154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a156:	4613      	mov	r3, r2
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4413      	add	r3, r2
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	3310      	adds	r3, #16
 800a160:	4a0b      	ldr	r2, [pc, #44]	@ (800a190 <drawSingleButton+0x1e4>)
 800a162:	4413      	add	r3, r2
 800a164:	3304      	adds	r3, #4
 800a166:	2218      	movs	r2, #24
 800a168:	6a39      	ldr	r1, [r7, #32]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f00f fcfa 	bl	8019b64 <strncpy>
        current_buttons[button_id].text[24] = '\0';
 800a170:	4907      	ldr	r1, [pc, #28]	@ (800a190 <drawSingleButton+0x1e4>)
 800a172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a174:	4613      	mov	r3, r2
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	4413      	add	r3, r2
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	440b      	add	r3, r1
 800a17e:	332c      	adds	r3, #44	@ 0x2c
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]
    }
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd90      	pop	{r4, r7, pc}
 800a18c:	20000070 	.word	0x20000070
 800a190:	200002ac 	.word	0x200002ac

0800a194 <updateButtonSelection>:

void updateButtonSelection(int old_selection, int new_selection)

{
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b089      	sub	sp, #36	@ 0x24
 800a198:	af04      	add	r7, sp, #16
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
    // Update old button (unselect)
    if (old_selection >= 0 && old_selection < button_count)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	db74      	blt.n	800a28e <updateButtonSelection+0xfa>
 800a1a4:	4b77      	ldr	r3, [pc, #476]	@ (800a384 <updateButtonSelection+0x1f0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	da6f      	bge.n	800a28e <updateButtonSelection+0xfa>
    {
        button_position_t *old_btn = &current_buttons[old_selection];
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	4a73      	ldr	r2, [pc, #460]	@ (800a388 <updateButtonSelection+0x1f4>)
 800a1ba:	4413      	add	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

        // Clear and redraw unselected button with text
        fillRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, BLACK);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	b218      	sxth	r0, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	b219      	sxth	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	3302      	adds	r3, #2
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	b21a      	sxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	b21b      	sxth	r3, r3
 800a1ee:	2400      	movs	r4, #0
 800a1f0:	9400      	str	r4, [sp, #0]
 800a1f2:	f002 fe50 	bl	800ce96 <fillRect>
        drawRoundRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, 3, WHITE);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	b218      	sxth	r0, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b29b      	uxth	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	b219      	sxth	r1, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	b29b      	uxth	r3, r3
 800a214:	3302      	adds	r3, #2
 800a216:	b29b      	uxth	r3, r3
 800a218:	b21a      	sxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3302      	adds	r3, #2
 800a222:	b29b      	uxth	r3, r3
 800a224:	b21b      	sxth	r3, r3
 800a226:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a22a:	9401      	str	r4, [sp, #4]
 800a22c:	2403      	movs	r4, #3
 800a22e:	9400      	str	r4, [sp, #0]
 800a230:	f003 f952 	bl	800d4d8 <drawRoundRect>
        fillRoundRect(old_btn->x, old_btn->y, old_btn->width, old_btn->height, 3, GRAY);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b218      	sxth	r0, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	b219      	sxth	r1, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	b21a      	sxth	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	b21b      	sxth	r3, r3
 800a24c:	f242 1404 	movw	r4, #8452	@ 0x2104
 800a250:	9401      	str	r4, [sp, #4]
 800a252:	2403      	movs	r4, #3
 800a254:	9400      	str	r4, [sp, #0]
 800a256:	f003 fa0c 	bl	800d672 <fillRoundRect>
        ST7735_WriteString(old_btn->x+5, old_btn->y+4, old_btn->text, Font_7x10, WHITE, GRAY);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	3305      	adds	r3, #5
 800a262:	b298      	uxth	r0, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3304      	adds	r3, #4
 800a26c:	b299      	uxth	r1, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f103 0414 	add.w	r4, r3, #20
 800a274:	4b45      	ldr	r3, [pc, #276]	@ (800a38c <updateButtonSelection+0x1f8>)
 800a276:	f242 1204 	movw	r2, #8452	@ 0x2104
 800a27a:	9202      	str	r2, [sp, #8]
 800a27c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	9200      	str	r2, [sp, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4622      	mov	r2, r4
 800a28a:	f003 fcd9 	bl	800dc40 <ST7735_WriteString>
    }

    // Update new button (select)
    if (new_selection >= 0 && new_selection < button_count)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	db73      	blt.n	800a37c <updateButtonSelection+0x1e8>
 800a294:	4b3b      	ldr	r3, [pc, #236]	@ (800a384 <updateButtonSelection+0x1f0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	da6e      	bge.n	800a37c <updateButtonSelection+0x1e8>
    {
        button_position_t *new_btn = &current_buttons[new_selection];
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	4413      	add	r3, r2
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	4a37      	ldr	r2, [pc, #220]	@ (800a388 <updateButtonSelection+0x1f4>)
 800a2aa:	4413      	add	r3, r2
 800a2ac:	60bb      	str	r3, [r7, #8]

        // Clear and redraw selected button with text
        fillRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, BLACK);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	b218      	sxth	r0, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b219      	sxth	r1, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3302      	adds	r3, #2
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	b21a      	sxth	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	3302      	adds	r3, #2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	b21b      	sxth	r3, r3
 800a2de:	2400      	movs	r4, #0
 800a2e0:	9400      	str	r4, [sp, #0]
 800a2e2:	f002 fdd8 	bl	800ce96 <fillRect>
        drawRoundRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, 3, WHITE);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	b218      	sxth	r0, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	b219      	sxth	r1, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	b29b      	uxth	r3, r3
 800a304:	3302      	adds	r3, #2
 800a306:	b29b      	uxth	r3, r3
 800a308:	b21a      	sxth	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3302      	adds	r3, #2
 800a312:	b29b      	uxth	r3, r3
 800a314:	b21b      	sxth	r3, r3
 800a316:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a31a:	9401      	str	r4, [sp, #4]
 800a31c:	2403      	movs	r4, #3
 800a31e:	9400      	str	r4, [sp, #0]
 800a320:	f003 f8da 	bl	800d4d8 <drawRoundRect>
        fillRoundRect(new_btn->x, new_btn->y, new_btn->width, new_btn->height, 3, GREEN);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	b218      	sxth	r0, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	b219      	sxth	r1, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	b21a      	sxth	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	b21b      	sxth	r3, r3
 800a33c:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800a340:	9401      	str	r4, [sp, #4]
 800a342:	2403      	movs	r4, #3
 800a344:	9400      	str	r4, [sp, #0]
 800a346:	f003 f994 	bl	800d672 <fillRoundRect>
        ST7735_WriteString(new_btn->x+5, new_btn->y+4, new_btn->text, Font_7x10, BLACK, GREEN);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3305      	adds	r3, #5
 800a352:	b298      	uxth	r0, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	3304      	adds	r3, #4
 800a35c:	b299      	uxth	r1, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f103 0414 	add.w	r4, r3, #20
 800a364:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <updateButtonSelection+0x1f8>)
 800a366:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a36a:	9202      	str	r2, [sp, #8]
 800a36c:	2200      	movs	r2, #0
 800a36e:	9201      	str	r2, [sp, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	9200      	str	r2, [sp, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4622      	mov	r2, r4
 800a378:	f003 fc62 	bl	800dc40 <ST7735_WriteString>
    }
}
 800a37c:	bf00      	nop
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	bd90      	pop	{r4, r7, pc}
 800a384:	200003cc 	.word	0x200003cc
 800a388:	200002ac 	.word	0x200002ac
 800a38c:	20000070 	.word	0x20000070

0800a390 <updateStatusInfo>:
    snprintf(status, sizeof(status), "[%s]", is_on ? "ON" : "OFF");
    ST7735_WriteString(text_x + 70, text_y, status, Font_7x10, WHITE, GRAY);
}

void updateStatusInfo(char* status, uint16_t color)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af04      	add	r7, sp, #16
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
 800a39c:	2300      	movs	r3, #0
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	228c      	movs	r2, #140	@ 0x8c
 800a3a4:	2114      	movs	r1, #20
 800a3a6:	200a      	movs	r0, #10
 800a3a8:	f002 fd75 	bl	800ce96 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
 800a3ac:	4b08      	ldr	r3, [pc, #32]	@ (800a3d0 <updateStatusInfo+0x40>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	9202      	str	r2, [sp, #8]
 800a3b2:	887a      	ldrh	r2, [r7, #2]
 800a3b4:	9201      	str	r2, [sp, #4]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	9200      	str	r2, [sp, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	2116      	movs	r1, #22
 800a3c0:	200c      	movs	r0, #12
 800a3c2:	f003 fc3d 	bl	800dc40 <ST7735_WriteString>
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000070 	.word	0x20000070

0800a3d4 <updateDeviceCount>:

void updateDeviceCount(int total_on)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08c      	sub	sp, #48	@ 0x30
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
    char status[35];
    if(total_on > 0)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dd0e      	ble.n	800a400 <updateDeviceCount+0x2c>
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800a3e2:	f107 000c 	add.w	r0, r7, #12
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a424 <updateDeviceCount+0x50>)
 800a3ea:	2123      	movs	r1, #35	@ 0x23
 800a3ec:	f00f fa06 	bl	80197fc <sniprintf>
    	updateStatusInfo(status, GREEN);
 800a3f0:	f107 030c 	add.w	r3, r7, #12
 800a3f4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff ffc9 	bl	800a390 <updateStatusInfo>
    else
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
		updateStatusInfo(status, RED);
    }
}
 800a3fe:	e00d      	b.n	800a41c <updateDeviceCount+0x48>
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800a400:	f107 000c 	add.w	r0, r7, #12
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a07      	ldr	r2, [pc, #28]	@ (800a424 <updateDeviceCount+0x50>)
 800a408:	2123      	movs	r1, #35	@ 0x23
 800a40a:	f00f f9f7 	bl	80197fc <sniprintf>
		updateStatusInfo(status, RED);
 800a40e:	f107 030c 	add.w	r3, r7, #12
 800a412:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ffba 	bl	800a390 <updateStatusInfo>
}
 800a41c:	bf00      	nop
 800a41e:	3730      	adds	r7, #48	@ 0x30
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	0801cdc4 	.word	0x0801cdc4

0800a428 <updateDeviceControlStatus>:

void updateDeviceControlStatus(int device, bool is_on)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	@ 0x28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
    char status[25];
    snprintf(status, sizeof(status), "Status: %s", is_on ? "ON" : "OFF");
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <updateDeviceControlStatus+0x16>
 800a43a:	4b0e      	ldr	r3, [pc, #56]	@ (800a474 <updateDeviceControlStatus+0x4c>)
 800a43c:	e000      	b.n	800a440 <updateDeviceControlStatus+0x18>
 800a43e:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <updateDeviceControlStatus+0x50>)
 800a440:	f107 000c 	add.w	r0, r7, #12
 800a444:	4a0d      	ldr	r2, [pc, #52]	@ (800a47c <updateDeviceControlStatus+0x54>)
 800a446:	2119      	movs	r1, #25
 800a448:	f00f f9d8 	bl	80197fc <sniprintf>
    uint16_t status_color = is_on ? GREEN : RED;
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <updateDeviceControlStatus+0x30>
 800a452:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800a456:	e001      	b.n	800a45c <updateDeviceControlStatus+0x34>
 800a458:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a45c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    updateStatusInfo(status, status_color);
 800a45e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff ff92 	bl	800a390 <updateStatusInfo>
}
 800a46c:	bf00      	nop
 800a46e:	3728      	adds	r7, #40	@ 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	0801ccc0 	.word	0x0801ccc0
 800a478:	0801ccc4 	.word	0x0801ccc4
 800a47c:	0801cddc 	.word	0x0801cddc

0800a480 <drawTitleBar>:
        fillRoundRect(x, y, width, height, 3, GRAY);
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
    }
}

void drawTitleBar(char* title) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	@ 0x28
 800a484:	af04      	add	r7, sp, #16
 800a486:	6078      	str	r0, [r7, #4]
    fillRect(0, 0, DISPLAY_WIDTH, TITLE_HEIGHT, BLUE);
 800a488:	231f      	movs	r3, #31
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	230f      	movs	r3, #15
 800a48e:	22a0      	movs	r2, #160	@ 0xa0
 800a490:	2100      	movs	r1, #0
 800a492:	2000      	movs	r0, #0
 800a494:	f002 fcff 	bl	800ce96 <fillRect>
    int title_length = strlen(title);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7fd ff19 	bl	80082d0 <strlen>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	613b      	str	r3, [r7, #16]
    int title_width = title_length * 7;
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	1a9b      	subs	r3, r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
    int center_x = (DISPLAY_WIDTH - title_width) / 2;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800a4b2:	0fda      	lsrs	r2, r3, #31
 800a4b4:	4413      	add	r3, r2
 800a4b6:	105b      	asrs	r3, r3, #1
 800a4b8:	617b      	str	r3, [r7, #20]

    if (center_x < 2) center_x = 2;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	dc01      	bgt.n	800a4c4 <drawTitleBar+0x44>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	617b      	str	r3, [r7, #20]

    ST7735_WriteString(center_x, 2, title, Font_7x10, WHITE, BLUE);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	b298      	uxth	r0, r3
 800a4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4fc <drawTitleBar+0x7c>)
 800a4ca:	221f      	movs	r2, #31
 800a4cc:	9202      	str	r2, [sp, #8]
 800a4ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4d2:	9201      	str	r2, [sp, #4]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	9200      	str	r2, [sp, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	2102      	movs	r1, #2
 800a4de:	f003 fbaf 	bl	800dc40 <ST7735_WriteString>

    drawLine(0, TITLE_HEIGHT, DISPLAY_WIDTH, TITLE_HEIGHT, WHITE);
 800a4e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	230f      	movs	r3, #15
 800a4ea:	22a0      	movs	r2, #160	@ 0xa0
 800a4ec:	210f      	movs	r1, #15
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	f002 fdee 	bl	800d0d0 <drawLine>
}
 800a4f4:	bf00      	nop
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20000070 	.word	0x20000070

0800a500 <GSM_init>:
uint8_t pingreq_sent = 0;
uint32_t pingreq_time = 0;
uint32_t pingresp_timeout_ms = 5000;

void GSM_init(void)
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 800a504:	4b10      	ldr	r3, [pc, #64]	@ (800a548 <GSM_init+0x48>)
 800a506:	4a11      	ldr	r2, [pc, #68]	@ (800a54c <GSM_init+0x4c>)
 800a508:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 800a50a:	4b0f      	ldr	r3, [pc, #60]	@ (800a548 <GSM_init+0x48>)
 800a50c:	4a10      	ldr	r2, [pc, #64]	@ (800a550 <GSM_init+0x50>)
 800a50e:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 800a510:	4b0d      	ldr	r3, [pc, #52]	@ (800a548 <GSM_init+0x48>)
 800a512:	4a0f      	ldr	r2, [pc, #60]	@ (800a550 <GSM_init+0x50>)
 800a514:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 800a516:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <GSM_init+0x48>)
 800a518:	4a0e      	ldr	r2, [pc, #56]	@ (800a554 <GSM_init+0x54>)
 800a51a:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 800a51c:	4b0a      	ldr	r3, [pc, #40]	@ (800a548 <GSM_init+0x48>)
 800a51e:	f240 725b 	movw	r2, #1883	@ 0x75b
 800a522:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Appteam";
 800a524:	4b08      	ldr	r3, [pc, #32]	@ (800a548 <GSM_init+0x48>)
 800a526:	4a0c      	ldr	r2, [pc, #48]	@ (800a558 <GSM_init+0x58>)
 800a528:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Appteam@321";
 800a52a:	4b07      	ldr	r3, [pc, #28]	@ (800a548 <GSM_init+0x48>)
 800a52c:	4a0b      	ldr	r2, [pc, #44]	@ (800a55c <GSM_init+0x5c>)
 800a52e:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 800a530:	4b05      	ldr	r3, [pc, #20]	@ (800a548 <GSM_init+0x48>)
 800a532:	4a0b      	ldr	r2, [pc, #44]	@ (800a560 <GSM_init+0x60>)
 800a534:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 800a536:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <GSM_init+0x48>)
 800a538:	223c      	movs	r2, #60	@ 0x3c
 800a53a:	841a      	strh	r2, [r3, #32]
}
 800a53c:	bf00      	nop
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000578 	.word	0x20000578
 800a54c:	0801cde8 	.word	0x0801cde8
 800a550:	0801cdf4 	.word	0x0801cdf4
 800a554:	0801cdf8 	.word	0x0801cdf8
 800a558:	0801ce08 	.word	0x0801ce08
 800a55c:	0801ce10 	.word	0x0801ce10
 800a560:	0801ce1c 	.word	0x0801ce1c

0800a564 <GSM_MQTT_Task>:

void GSM_MQTT_Task(void *pvParameters)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    print_task_info();
 800a56c:	f000 ff70 	bl	800b450 <print_task_info>
    static uint8_t sub_done = 0;

    while (1)
    {
    	SIM800_MQTT_StateMachineHandler();
 800a570:	f001 fbec 	bl	800bd4c <SIM800_MQTT_StateMachineHandler>
        if (mqttState == MQTT_STATE_MQTT_CONNECTED || mqttState == MQTT_STATE_IDLE)
 800a574:	4b3f      	ldr	r3, [pc, #252]	@ (800a674 <GSM_MQTT_Task+0x110>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d003      	beq.n	800a584 <GSM_MQTT_Task+0x20>
 800a57c:	4b3d      	ldr	r3, [pc, #244]	@ (800a674 <GSM_MQTT_Task+0x110>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b09      	cmp	r3, #9
 800a582:	d16d      	bne.n	800a660 <GSM_MQTT_Task+0xfc>
        {
            if (sub_done == 0)
 800a584:	4b3c      	ldr	r3, [pc, #240]	@ (800a678 <GSM_MQTT_Task+0x114>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10e      	bne.n	800a5aa <GSM_MQTT_Task+0x46>
            {
                MQTT_Sub("onwords/4ltc01/status");
 800a58c:	483b      	ldr	r0, [pc, #236]	@ (800a67c <GSM_MQTT_Task+0x118>)
 800a58e:	f001 fee5 	bl	800c35c <MQTT_Sub>
                MQTT_Sub("onwords/4ltc01/getCurrentStatus");
 800a592:	483b      	ldr	r0, [pc, #236]	@ (800a680 <GSM_MQTT_Task+0x11c>)
 800a594:	f001 fee2 	bl	800c35c <MQTT_Sub>
                MQTT_Sub("onwords/4ltc01/currentStatus");
 800a598:	483a      	ldr	r0, [pc, #232]	@ (800a684 <GSM_MQTT_Task+0x120>)
 800a59a:	f001 fedf 	bl	800c35c <MQTT_Sub>
                sub_done = 1;
 800a59e:	4b36      	ldr	r3, [pc, #216]	@ (800a678 <GSM_MQTT_Task+0x114>)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	701a      	strb	r2, [r3, #0]
                safe_printf("MQTT Subscribed to topics\r\n");
 800a5a4:	4838      	ldr	r0, [pc, #224]	@ (800a688 <GSM_MQTT_Task+0x124>)
 800a5a6:	f000 ff6d 	bl	800b484 <safe_printf>
            }
            if (SIM800.mqttReceive.newEvent)
 800a5aa:	4b38      	ldr	r3, [pc, #224]	@ (800a68c <GSM_MQTT_Task+0x128>)
 800a5ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d013      	beq.n	800a5dc <GSM_MQTT_Task+0x78>
            {
                SIM800.mqttReceive.newEvent = 0;
 800a5b4:	4b35      	ldr	r3, [pc, #212]	@ (800a68c <GSM_MQTT_Task+0x128>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                unsigned char *topic = SIM800.mqttReceive.topic;
 800a5bc:	4b34      	ldr	r3, [pc, #208]	@ (800a690 <GSM_MQTT_Task+0x12c>)
 800a5be:	617b      	str	r3, [r7, #20]
                unsigned char *payload = SIM800.mqttReceive.payload;
 800a5c0:	4b34      	ldr	r3, [pc, #208]	@ (800a694 <GSM_MQTT_Task+0x130>)
 800a5c2:	613b      	str	r3, [r7, #16]

                safe_printf("Topic: %s\r\n", topic);
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	4834      	ldr	r0, [pc, #208]	@ (800a698 <GSM_MQTT_Task+0x134>)
 800a5c8:	f000 ff5c 	bl	800b484 <safe_printf>
                safe_printf("Payload: %s\r\n", payload);
 800a5cc:	6939      	ldr	r1, [r7, #16]
 800a5ce:	4833      	ldr	r0, [pc, #204]	@ (800a69c <GSM_MQTT_Task+0x138>)
 800a5d0:	f000 ff58 	bl	800b484 <safe_printf>

                MQTT_Pub("bala", (char *)payload);
 800a5d4:	6939      	ldr	r1, [r7, #16]
 800a5d6:	4832      	ldr	r0, [pc, #200]	@ (800a6a0 <GSM_MQTT_Task+0x13c>)
 800a5d8:	f001 fe52 	bl	800c280 <MQTT_Pub>
            }
            if (!pingreq_sent && (millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 800a5dc:	4b31      	ldr	r3, [pc, #196]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d122      	bne.n	800a62a <GSM_MQTT_Task+0xc6>
 800a5e4:	f000 f86c 	bl	800a6c0 <millis>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a8 <GSM_MQTT_Task+0x144>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d918      	bls.n	800a62a <GSM_MQTT_Task+0xc6>
            {
                uint8_t pingreq_packet[2] = {0xC0, 0x00};
 800a5f8:	23c0      	movs	r3, #192	@ 0xc0
 800a5fa:	81bb      	strh	r3, [r7, #12]
                HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 800a5fc:	f107 010c 	add.w	r1, r7, #12
 800a600:	2364      	movs	r3, #100	@ 0x64
 800a602:	2202      	movs	r2, #2
 800a604:	4829      	ldr	r0, [pc, #164]	@ (800a6ac <GSM_MQTT_Task+0x148>)
 800a606:	f009 fb95 	bl	8013d34 <HAL_UART_Transmit>
                lastKeepAliveTime = millis();
 800a60a:	f000 f859 	bl	800a6c0 <millis>
 800a60e:	4603      	mov	r3, r0
 800a610:	4a25      	ldr	r2, [pc, #148]	@ (800a6a8 <GSM_MQTT_Task+0x144>)
 800a612:	6013      	str	r3, [r2, #0]
                pingreq_sent = 1;
 800a614:	4b23      	ldr	r3, [pc, #140]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a616:	2201      	movs	r2, #1
 800a618:	701a      	strb	r2, [r3, #0]
                pingreq_time = millis();
 800a61a:	f000 f851 	bl	800a6c0 <millis>
 800a61e:	4603      	mov	r3, r0
 800a620:	4a23      	ldr	r2, [pc, #140]	@ (800a6b0 <GSM_MQTT_Task+0x14c>)
 800a622:	6013      	str	r3, [r2, #0]
                safe_printf("MQTT PINGREQ sent\r\n");
 800a624:	4823      	ldr	r0, [pc, #140]	@ (800a6b4 <GSM_MQTT_Task+0x150>)
 800a626:	f000 ff2d 	bl	800b484 <safe_printf>
            }
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800a62a:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d01a      	beq.n	800a668 <GSM_MQTT_Task+0x104>
 800a632:	f000 f845 	bl	800a6c0 <millis>
 800a636:	4602      	mov	r2, r0
 800a638:	4b1d      	ldr	r3, [pc, #116]	@ (800a6b0 <GSM_MQTT_Task+0x14c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	1ad2      	subs	r2, r2, r3
 800a63e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b8 <GSM_MQTT_Task+0x154>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d910      	bls.n	800a668 <GSM_MQTT_Task+0x104>
            {
                safe_printf("MQTT PINGRESP timeout! Forcing reconnect...\r\n");
 800a646:	481d      	ldr	r0, [pc, #116]	@ (800a6bc <GSM_MQTT_Task+0x158>)
 800a648:	f000 ff1c 	bl	800b484 <safe_printf>
                mqttState = MQTT_STATE_RECONNECT;
 800a64c:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <GSM_MQTT_Task+0x110>)
 800a64e:	220a      	movs	r2, #10
 800a650:	701a      	strb	r2, [r3, #0]
                SIM800.mqttServer.connect = 0;
 800a652:	4b0e      	ldr	r3, [pc, #56]	@ (800a68c <GSM_MQTT_Task+0x128>)
 800a654:	2200      	movs	r2, #0
 800a656:	749a      	strb	r2, [r3, #18]
                pingreq_sent = 0;
 800a658:	4b12      	ldr	r3, [pc, #72]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800a65e:	e003      	b.n	800a668 <GSM_MQTT_Task+0x104>
            }
        }
        else
        {
            sub_done = 0;
 800a660:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <GSM_MQTT_Task+0x114>)
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e000      	b.n	800a66a <GSM_MQTT_Task+0x106>
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800a668:	bf00      	nop
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 800a66a:	2064      	movs	r0, #100	@ 0x64
 800a66c:	f00b fbf8 	bl	8015e60 <vTaskDelay>
    	SIM800_MQTT_StateMachineHandler();
 800a670:	e77e      	b.n	800a570 <GSM_MQTT_Task+0xc>
 800a672:	bf00      	nop
 800a674:	200012ba 	.word	0x200012ba
 800a678:	200003d8 	.word	0x200003d8
 800a67c:	0801ce24 	.word	0x0801ce24
 800a680:	0801ce3c 	.word	0x0801ce3c
 800a684:	0801ce5c 	.word	0x0801ce5c
 800a688:	0801ce7c 	.word	0x0801ce7c
 800a68c:	20000578 	.word	0x20000578
 800a690:	200006ac 	.word	0x200006ac
 800a694:	200005a8 	.word	0x200005a8
 800a698:	0801ce98 	.word	0x0801ce98
 800a69c:	0801cea4 	.word	0x0801cea4
 800a6a0:	0801ceb4 	.word	0x0801ceb4
 800a6a4:	200003d0 	.word	0x200003d0
 800a6a8:	20000740 	.word	0x20000740
 800a6ac:	20001430 	.word	0x20001430
 800a6b0:	200003d4 	.word	0x200003d4
 800a6b4:	0801cebc 	.word	0x0801cebc
 800a6b8:	20000018 	.word	0x20000018
 800a6bc:	0801ced0 	.word	0x0801ced0

0800a6c0 <millis>:
    }
}

uint32_t millis() {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800a6c4:	f006 fb4e 	bl	8010d64 <HAL_GetTick>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <RFM_Task>:
static uint8_t PrevState = 0;
uint8_t EncryptionKey[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};

void RFM_Task(void)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	af00      	add	r7, sp, #0
	while(1)
	{
		RF69_ModuleHandler();
 800a6d2:	f000 f805 	bl	800a6e0 <RF69_ModuleHandler>
		vTaskDelay(pdMS_TO_TICKS(10));
 800a6d6:	200a      	movs	r0, #10
 800a6d8:	f00b fbc2 	bl	8015e60 <vTaskDelay>
		RF69_ModuleHandler();
 800a6dc:	bf00      	nop
 800a6de:	e7f8      	b.n	800a6d2 <RFM_Task+0x4>

0800a6e0 <RF69_ModuleHandler>:
	}
}

void RF69_ModuleHandler(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0

	if(_DeviceState == STATE_INIT)
 800a6e4:	4b57      	ldr	r3, [pc, #348]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d112      	bne.n	800a712 <RF69_ModuleHandler+0x32>
	{
		PrevState = STATE_INIT;
 800a6ec:	4b56      	ldr	r3, [pc, #344]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
		if(RF69_init() == true)
 800a6f2:	f002 f819 	bl	800c728 <RF69_init>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d006      	beq.n	800a70a <RF69_ModuleHandler+0x2a>
		{
			_DeviceState = SET_FREQ;
 800a6fc:	4b51      	ldr	r3, [pc, #324]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
			safe_printf("RF69_InitSuccess\n");
 800a702:	4852      	ldr	r0, [pc, #328]	@ (800a84c <RF69_ModuleHandler+0x16c>)
 800a704:	f000 febe 	bl	800b484 <safe_printf>
		HAL_UART_DeInit(&huart2);
		HAL_SuspendTick();
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
		_DeviceState = RX_DATA;
	}
}
 800a708:	e099      	b.n	800a83e <RF69_ModuleHandler+0x15e>
			_DeviceState = FAIL_STATE;
 800a70a:	4b4e      	ldr	r3, [pc, #312]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a70c:	2206      	movs	r2, #6
 800a70e:	701a      	strb	r2, [r3, #0]
}
 800a710:	e095      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SET_FREQ)
 800a712:	4b4c      	ldr	r3, [pc, #304]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d114      	bne.n	800a744 <RF69_ModuleHandler+0x64>
		PrevState =	SET_FREQ;
 800a71a:	4b4b      	ldr	r3, [pc, #300]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	701a      	strb	r2, [r3, #0]
		if(setFrequency(RF69_FREQ) == true)
 800a720:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800a850 <RF69_ModuleHandler+0x170>
 800a724:	f002 f91c 	bl	800c960 <setFrequency>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d006      	beq.n	800a73c <RF69_ModuleHandler+0x5c>
			_DeviceState = SET_POW;
 800a72e:	4b45      	ldr	r3, [pc, #276]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a730:	2202      	movs	r2, #2
 800a732:	701a      	strb	r2, [r3, #0]
			safe_printf("RF69_FreqSetSuccess\n");
 800a734:	4847      	ldr	r0, [pc, #284]	@ (800a854 <RF69_ModuleHandler+0x174>)
 800a736:	f000 fea5 	bl	800b484 <safe_printf>
}
 800a73a:	e080      	b.n	800a83e <RF69_ModuleHandler+0x15e>
			_DeviceState = FAIL_STATE;
 800a73c:	4b41      	ldr	r3, [pc, #260]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a73e:	2206      	movs	r2, #6
 800a740:	701a      	strb	r2, [r3, #0]
}
 800a742:	e07c      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SET_POW)
 800a744:	4b3f      	ldr	r3, [pc, #252]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d10d      	bne.n	800a768 <RF69_ModuleHandler+0x88>
		PrevState = SET_POW;
 800a74c:	4b3e      	ldr	r3, [pc, #248]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a74e:	2202      	movs	r2, #2
 800a750:	701a      	strb	r2, [r3, #0]
		setTxPower(20, true);
 800a752:	2101      	movs	r1, #1
 800a754:	2014      	movs	r0, #20
 800a756:	f002 f9df 	bl	800cb18 <setTxPower>
		_DeviceState = SET_ENCKEY;
 800a75a:	4b3a      	ldr	r3, [pc, #232]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a75c:	2203      	movs	r2, #3
 800a75e:	701a      	strb	r2, [r3, #0]
		safe_printf("RF69_PowerSetSuccess\n");
 800a760:	483d      	ldr	r0, [pc, #244]	@ (800a858 <RF69_ModuleHandler+0x178>)
 800a762:	f000 fe8f 	bl	800b484 <safe_printf>
}
 800a766:	e06a      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SET_ENCKEY)
 800a768:	4b36      	ldr	r3, [pc, #216]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d10c      	bne.n	800a78a <RF69_ModuleHandler+0xaa>
		PrevState = SET_ENCKEY;
 800a770:	4b35      	ldr	r3, [pc, #212]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a772:	2203      	movs	r2, #3
 800a774:	701a      	strb	r2, [r3, #0]
		setEncryptionKey(&EncryptionKey[0]);
 800a776:	4839      	ldr	r0, [pc, #228]	@ (800a85c <RF69_ModuleHandler+0x17c>)
 800a778:	f002 fadc 	bl	800cd34 <setEncryptionKey>
		_DeviceState = RX_DATA;
 800a77c:	4b31      	ldr	r3, [pc, #196]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a77e:	2205      	movs	r2, #5
 800a780:	701a      	strb	r2, [r3, #0]
		safe_printf("RF69_setEncryptionKeySuccess\n");
 800a782:	4837      	ldr	r0, [pc, #220]	@ (800a860 <RF69_ModuleHandler+0x180>)
 800a784:	f000 fe7e 	bl	800b484 <safe_printf>
}
 800a788:	e059      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == TX_DATA)
 800a78a:	4b2e      	ldr	r3, [pc, #184]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d103      	bne.n	800a79a <RF69_ModuleHandler+0xba>
		PrevState = TX_DATA;
 800a792:	4b2d      	ldr	r3, [pc, #180]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a794:	2204      	movs	r2, #4
 800a796:	701a      	strb	r2, [r3, #0]
}
 800a798:	e051      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == RX_DATA)
 800a79a:	4b2a      	ldr	r3, [pc, #168]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d10e      	bne.n	800a7c0 <RF69_ModuleHandler+0xe0>
		PrevState = RX_DATA;
 800a7a2:	4b29      	ldr	r3, [pc, #164]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	701a      	strb	r2, [r3, #0]
		if(RF69_RxData() != true)
 800a7a8:	f000 f864 	bl	800a874 <RF69_RxData>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f083 0301 	eor.w	r3, r3, #1
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d042      	beq.n	800a83e <RF69_ModuleHandler+0x15e>
			_DeviceState = SYS_RESTART;
 800a7b8:	4b22      	ldr	r3, [pc, #136]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	701a      	strb	r2, [r3, #0]
}
 800a7be:	e03e      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == FAIL_STATE)
 800a7c0:	4b20      	ldr	r3, [pc, #128]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b06      	cmp	r3, #6
 800a7c6:	d112      	bne.n	800a7ee <RF69_ModuleHandler+0x10e>
		if(FailIndiCation(PrevState) == true)
 800a7c8:	4b1f      	ldr	r3, [pc, #124]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f8af 	bl	800a930 <FailIndiCation>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d032      	beq.n	800a83e <RF69_ModuleHandler+0x15e>
			safe_printf("Module Going To Restart\n");
 800a7d8:	4822      	ldr	r0, [pc, #136]	@ (800a864 <RF69_ModuleHandler+0x184>)
 800a7da:	f000 fe53 	bl	800b484 <safe_printf>
			vTaskDelay(pdMS_TO_TICKS(3000));
 800a7de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800a7e2:	f00b fb3d 	bl	8015e60 <vTaskDelay>
			_DeviceState = SYS_RESTART;
 800a7e6:	4b17      	ldr	r3, [pc, #92]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	701a      	strb	r2, [r3, #0]
}
 800a7ec:	e027      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SYS_RESTART)
 800a7ee:	4b15      	ldr	r3, [pc, #84]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b07      	cmp	r3, #7
 800a7f4:	d106      	bne.n	800a804 <RF69_ModuleHandler+0x124>
		_DeviceState = STATE_INIT;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
		safe_printf("SYS_Restarted\n");
 800a7fc:	481a      	ldr	r0, [pc, #104]	@ (800a868 <RF69_ModuleHandler+0x188>)
 800a7fe:	f000 fe41 	bl	800b484 <safe_printf>
}
 800a802:	e01c      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SYS_REST)
 800a804:	4b0f      	ldr	r3, [pc, #60]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b08      	cmp	r3, #8
 800a80a:	d103      	bne.n	800a814 <RF69_ModuleHandler+0x134>
		_DeviceState = SYS_SLEEP;
 800a80c:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a80e:	2209      	movs	r2, #9
 800a810:	701a      	strb	r2, [r3, #0]
}
 800a812:	e014      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SYS_SLEEP)
 800a814:	4b0b      	ldr	r3, [pc, #44]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d110      	bne.n	800a83e <RF69_ModuleHandler+0x15e>
		setSleep();
 800a81c:	f002 f946 	bl	800caac <setSleep>
		HAL_SPI_DeInit(&hspi3);
 800a820:	4812      	ldr	r0, [pc, #72]	@ (800a86c <RF69_ModuleHandler+0x18c>)
 800a822:	f007 fdee 	bl	8012402 <HAL_SPI_DeInit>
		HAL_UART_DeInit(&huart2);
 800a826:	4812      	ldr	r0, [pc, #72]	@ (800a870 <RF69_ModuleHandler+0x190>)
 800a828:	f009 fa52 	bl	8013cd0 <HAL_UART_DeInit>
		HAL_SuspendTick();
 800a82c:	f006 f92a 	bl	8010a84 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800a830:	2101      	movs	r1, #1
 800a832:	2001      	movs	r0, #1
 800a834:	f006 ff58 	bl	80116e8 <HAL_PWR_EnterSLEEPMode>
		_DeviceState = RX_DATA;
 800a838:	4b02      	ldr	r3, [pc, #8]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a83a:	2205      	movs	r2, #5
 800a83c:	701a      	strb	r2, [r3, #0]
}
 800a83e:	bf00      	nop
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	200003d9 	.word	0x200003d9
 800a848:	200003da 	.word	0x200003da
 800a84c:	0801cf00 	.word	0x0801cf00
 800a850:	43d88000 	.word	0x43d88000
 800a854:	0801cf14 	.word	0x0801cf14
 800a858:	0801cf2c 	.word	0x0801cf2c
 800a85c:	2000001c 	.word	0x2000001c
 800a860:	0801cf44 	.word	0x0801cf44
 800a864:	0801cf64 	.word	0x0801cf64
 800a868:	0801cf80 	.word	0x0801cf80
 800a86c:	200013d8 	.word	0x200013d8
 800a870:	20001478 	.word	0x20001478

0800a874 <RF69_RxData>:
{
	return true; //Never Reach Here
}

bool RF69_RxData(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b090      	sub	sp, #64	@ 0x40
 800a878:	af00      	add	r7, sp, #0
//	printf("RF69 StartReceiving\n");
//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

	if (available())
 800a87a:	f002 fa83 	bl	800cd84 <available>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d044      	beq.n	800a90e <RF69_RxData+0x9a>
	{

		uint8_t buf[RH_RF69_MAX_MESSAGE_LEN];
		uint8_t len = sizeof(buf);
 800a884:	233c      	movs	r3, #60	@ 0x3c
 800a886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		safe_printf("Data Available..\r\n");
 800a88a:	4823      	ldr	r0, [pc, #140]	@ (800a918 <RF69_RxData+0xa4>)
 800a88c:	f000 fdfa 	bl	800b484 <safe_printf>
		if (recv1(buf, &len))
 800a890:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800a894:	463b      	mov	r3, r7
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f002 faa9 	bl	800cdf0 <recv1>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d031      	beq.n	800a908 <RF69_RxData+0x94>
		{
			if (!len)
 800a8a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <RF69_RxData+0x46>
			{
				buf[len] = 0;
 800a8ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8b0:	3340      	adds	r3, #64	@ 0x40
 800a8b2:	443b      	add	r3, r7
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f803 2c40 	strb.w	r2, [r3, #-64]
			}

			safe_printf("ReceivedData [%d]:%s\n", len, (char*)buf);
 800a8ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8be:	4619      	mov	r1, r3
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4815      	ldr	r0, [pc, #84]	@ (800a91c <RF69_RxData+0xa8>)
 800a8c6:	f000 fddd 	bl	800b484 <safe_printf>
			safe_printf("RSSI: %d\n", lastRssi());
 800a8ca:	f002 fac5 	bl	800ce58 <lastRssi>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4813      	ldr	r0, [pc, #76]	@ (800a920 <RF69_RxData+0xac>)
 800a8d4:	f000 fdd6 	bl	800b484 <safe_printf>

			if (strstr((char *)buf, "Control#1"))
 800a8d8:	463b      	mov	r3, r7
 800a8da:	4912      	ldr	r1, [pc, #72]	@ (800a924 <RF69_RxData+0xb0>)
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f00f f954 	bl	8019b8a <strstr>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <RF69_RxData+0x7c>
			{
				setAllDevicesState(1);
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	f7fe ffcb 	bl	8009884 <setAllDevicesState>
 800a8ee:	e00e      	b.n	800a90e <RF69_RxData+0x9a>
			}
			else if(strstr((char *)buf, "Control#0"))
 800a8f0:	463b      	mov	r3, r7
 800a8f2:	490d      	ldr	r1, [pc, #52]	@ (800a928 <RF69_RxData+0xb4>)
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f00f f948 	bl	8019b8a <strstr>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d006      	beq.n	800a90e <RF69_RxData+0x9a>
			{
				setAllDevicesState(0);
 800a900:	2000      	movs	r0, #0
 800a902:	f7fe ffbf 	bl	8009884 <setAllDevicesState>
 800a906:	e002      	b.n	800a90e <RF69_RxData+0x9a>
			}
		}
		else
		{
			safe_printf("Receive failed\n");
 800a908:	4808      	ldr	r0, [pc, #32]	@ (800a92c <RF69_RxData+0xb8>)
 800a90a:	f000 fdbb 	bl	800b484 <safe_printf>
		}
	}
	return true;
 800a90e:	2301      	movs	r3, #1
}
 800a910:	4618      	mov	r0, r3
 800a912:	3740      	adds	r7, #64	@ 0x40
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	0801cf90 	.word	0x0801cf90
 800a91c:	0801cfa4 	.word	0x0801cfa4
 800a920:	0801cfbc 	.word	0x0801cfbc
 800a924:	0801cfc8 	.word	0x0801cfc8
 800a928:	0801cfd4 	.word	0x0801cfd4
 800a92c:	0801cfe0 	.word	0x0801cfe0

0800a930 <FailIndiCation>:

bool FailIndiCation(Rf69_t FailState)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	71fb      	strb	r3, [r7, #7]
	if(FailState == STATE_INIT)
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d103      	bne.n	800a948 <FailIndiCation+0x18>
		safe_printf("ModuleInit_Failed\n");
 800a940:	4815      	ldr	r0, [pc, #84]	@ (800a998 <FailIndiCation+0x68>)
 800a942:	f000 fd9f 	bl	800b484 <safe_printf>
 800a946:	e021      	b.n	800a98c <FailIndiCation+0x5c>
	else if(FailState == SET_FREQ)
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d103      	bne.n	800a956 <FailIndiCation+0x26>
		safe_printf("FreqSetOp_Failed\n");
 800a94e:	4813      	ldr	r0, [pc, #76]	@ (800a99c <FailIndiCation+0x6c>)
 800a950:	f000 fd98 	bl	800b484 <safe_printf>
 800a954:	e01a      	b.n	800a98c <FailIndiCation+0x5c>
	else if(FailState == SET_POW)
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d103      	bne.n	800a964 <FailIndiCation+0x34>
		safe_printf("PowerSetOp_Failed\n");
 800a95c:	4810      	ldr	r0, [pc, #64]	@ (800a9a0 <FailIndiCation+0x70>)
 800a95e:	f000 fd91 	bl	800b484 <safe_printf>
 800a962:	e013      	b.n	800a98c <FailIndiCation+0x5c>
	else if(FailState == SET_ENCKEY)
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d103      	bne.n	800a972 <FailIndiCation+0x42>
		safe_printf("EncKeySetOp_Failed\n");
 800a96a:	480e      	ldr	r0, [pc, #56]	@ (800a9a4 <FailIndiCation+0x74>)
 800a96c:	f000 fd8a 	bl	800b484 <safe_printf>
 800a970:	e00c      	b.n	800a98c <FailIndiCation+0x5c>
	else if(FailState == TX_DATA)
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	2b04      	cmp	r3, #4
 800a976:	d103      	bne.n	800a980 <FailIndiCation+0x50>
		safe_printf("DataTxOp_Failed\n");
 800a978:	480b      	ldr	r0, [pc, #44]	@ (800a9a8 <FailIndiCation+0x78>)
 800a97a:	f000 fd83 	bl	800b484 <safe_printf>
 800a97e:	e005      	b.n	800a98c <FailIndiCation+0x5c>
	else if(FailState == RX_DATA)
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	2b05      	cmp	r3, #5
 800a984:	d102      	bne.n	800a98c <FailIndiCation+0x5c>
		safe_printf("DataRxOp_Failed\n");
 800a986:	4809      	ldr	r0, [pc, #36]	@ (800a9ac <FailIndiCation+0x7c>)
 800a988:	f000 fd7c 	bl	800b484 <safe_printf>
	return true;
 800a98c:	2301      	movs	r3, #1
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	0801cff0 	.word	0x0801cff0
 800a99c:	0801d004 	.word	0x0801d004
 800a9a0:	0801d018 	.word	0x0801d018
 800a9a4:	0801d02c 	.word	0x0801d02c
 800a9a8:	0801d040 	.word	0x0801d040
 800a9ac:	0801d054 	.word	0x0801d054

0800a9b0 <SPI_Handler>:
volatile uint16_t spiHead = 0;
volatile uint16_t spiTail = 0;
uint8_t spiRxByte;

void SPI_Handler(void *param)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b0a4      	sub	sp, #144	@ 0x90
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[SPI_RING_BUFFER_SIZE];
    uint8_t index = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    bool collecting = false;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    while (1)
    {
        if(spiHead != spiTail)
 800a9c4:	4b37      	ldr	r3, [pc, #220]	@ (800aaa4 <SPI_Handler+0xf4>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	4b37      	ldr	r3, [pc, #220]	@ (800aaa8 <SPI_Handler+0xf8>)
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d062      	beq.n	800aa9a <SPI_Handler+0xea>
        {
        	uint8_t byte = spiRingBuffer[spiTail];
 800a9d4:	4b34      	ldr	r3, [pc, #208]	@ (800aaa8 <SPI_Handler+0xf8>)
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4b33      	ldr	r3, [pc, #204]	@ (800aaac <SPI_Handler+0xfc>)
 800a9de:	5c9b      	ldrb	r3, [r3, r2]
 800a9e0:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        	spiTail = (spiTail + 1) % SPI_RING_BUFFER_SIZE;
 800a9e4:	4b30      	ldr	r3, [pc, #192]	@ (800aaa8 <SPI_Handler+0xf8>)
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	425a      	negs	r2, r3
 800a9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a9f6:	bf58      	it	pl
 800a9f8:	4253      	negpl	r3, r2
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	4b2a      	ldr	r3, [pc, #168]	@ (800aaa8 <SPI_Handler+0xf8>)
 800a9fe:	801a      	strh	r2, [r3, #0]

        	if(byte == '{')
 800aa00:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800aa04:	2b7b      	cmp	r3, #123	@ 0x7b
 800aa06:	d111      	bne.n	800aa2c <SPI_Handler+0x7c>
        	{
        		collecting = true;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        		index = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        		jsonBuffer[index++] = byte;
 800aa14:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800aa1e:	3390      	adds	r3, #144	@ 0x90
 800aa20:	443b      	add	r3, r7
 800aa22:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800aa26:	f803 2c84 	strb.w	r2, [r3, #-132]
 800aa2a:	e7cb      	b.n	800a9c4 <SPI_Handler+0x14>
        	}
        	else if(collecting)
 800aa2c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0c7      	beq.n	800a9c4 <SPI_Handler+0x14>
        	{
        		if(index < SPI_RING_BUFFER_SIZE - 1)
 800aa34:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa38:	2b7e      	cmp	r3, #126	@ 0x7e
 800aa3a:	d827      	bhi.n	800aa8c <SPI_Handler+0xdc>
        		{
        			jsonBuffer[index++] = byte;
 800aa3c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800aa46:	3390      	adds	r3, #144	@ 0x90
 800aa48:	443b      	add	r3, r7
 800aa4a:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800aa4e:	f803 2c84 	strb.w	r2, [r3, #-132]
        			if(byte == '}')
 800aa52:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800aa56:	2b7d      	cmp	r3, #125	@ 0x7d
 800aa58:	d1b4      	bne.n	800a9c4 <SPI_Handler+0x14>
        			{
        				jsonBuffer[index] = '\0';
 800aa5a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa5e:	3390      	adds	r3, #144	@ 0x90
 800aa60:	443b      	add	r3, r7
 800aa62:	2200      	movs	r2, #0
 800aa64:	f803 2c84 	strb.w	r2, [r3, #-132]
        				safe_printf("JSON received: %s\n", jsonBuffer);
 800aa68:	f107 030c 	add.w	r3, r7, #12
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4810      	ldr	r0, [pc, #64]	@ (800aab0 <SPI_Handler+0x100>)
 800aa70:	f000 fd08 	bl	800b484 <safe_printf>
        				process_spi_json(jsonBuffer);
 800aa74:	f107 030c 	add.w	r3, r7, #12
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 f81b 	bl	800aab4 <process_spi_json>
        				collecting = false;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        				index = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800aa8a:	e79b      	b.n	800a9c4 <SPI_Handler+0x14>
        			}
        		}
        		else
        		{
        			collecting = false;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        			index = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800aa98:	e794      	b.n	800a9c4 <SPI_Handler+0x14>
        		}
        	}
        }
        else
        {
        	vTaskDelay(pdMS_TO_TICKS(5));
 800aa9a:	2005      	movs	r0, #5
 800aa9c:	f00b f9e0 	bl	8015e60 <vTaskDelay>
        if(spiHead != spiTail)
 800aaa0:	e790      	b.n	800a9c4 <SPI_Handler+0x14>
 800aaa2:	bf00      	nop
 800aaa4:	2000045c 	.word	0x2000045c
 800aaa8:	2000045e 	.word	0x2000045e
 800aaac:	200003dc 	.word	0x200003dc
 800aab0:	0801d068 	.word	0x0801d068

0800aab4 <process_spi_json>:
    }
}


void process_spi_json(uint8_t *jsonBuffer)
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b089      	sub	sp, #36	@ 0x24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	uint8_t deviceState;
	GPIO_PinState state;
	int deviceIndex = -1;
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
 800aac0:	61fb      	str	r3, [r7, #28]
	cJSON *jsonObj = cJSON_Parse((char *)jsonBuffer);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f004 faa0 	bl	800f008 <cJSON_Parse>
 800aac8:	61b8      	str	r0, [r7, #24]
	if(jsonObj)
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80b8 	beq.w	800ac42 <process_spi_json+0x18e>
	{
		cJSON *device = cJSON_GetObjectItem(jsonObj, "device");
 800aad2:	495e      	ldr	r1, [pc, #376]	@ (800ac4c <process_spi_json+0x198>)
 800aad4:	69b8      	ldr	r0, [r7, #24]
 800aad6:	f005 f8cb 	bl	800fc70 <cJSON_GetObjectItem>
 800aada:	6178      	str	r0, [r7, #20]
		if(device)
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d03c      	beq.n	800ab5c <process_spi_json+0xa8>
		{
			if(strcmp(device->valuestring, "L1") == 0) deviceIndex = 0;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	495a      	ldr	r1, [pc, #360]	@ (800ac50 <process_spi_json+0x19c>)
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fd fb91 	bl	8008210 <strcmp>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d102      	bne.n	800aafa <process_spi_json+0x46>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	61fb      	str	r3, [r7, #28]
 800aaf8:	e030      	b.n	800ab5c <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L2") == 0) deviceIndex = 1;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	4955      	ldr	r1, [pc, #340]	@ (800ac54 <process_spi_json+0x1a0>)
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd fb85 	bl	8008210 <strcmp>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <process_spi_json+0x5e>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	61fb      	str	r3, [r7, #28]
 800ab10:	e024      	b.n	800ab5c <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L3") == 0) deviceIndex = 2;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	4950      	ldr	r1, [pc, #320]	@ (800ac58 <process_spi_json+0x1a4>)
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fd fb79 	bl	8008210 <strcmp>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d102      	bne.n	800ab2a <process_spi_json+0x76>
 800ab24:	2302      	movs	r3, #2
 800ab26:	61fb      	str	r3, [r7, #28]
 800ab28:	e018      	b.n	800ab5c <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L4") == 0) deviceIndex = 3;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	494b      	ldr	r1, [pc, #300]	@ (800ac5c <process_spi_json+0x1a8>)
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fd fb6d 	bl	8008210 <strcmp>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <process_spi_json+0x8e>
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	61fb      	str	r3, [r7, #28]
 800ab40:	e00c      	b.n	800ab5c <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "D1") == 0)
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	4946      	ldr	r1, [pc, #280]	@ (800ac60 <process_spi_json+0x1ac>)
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fd fb61 	bl	8008210 <strcmp>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d103      	bne.n	800ab5c <process_spi_json+0xa8>
			{
				HAL_GPIO_TogglePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800ab54:	2101      	movs	r1, #1
 800ab56:	4843      	ldr	r0, [pc, #268]	@ (800ac64 <process_spi_json+0x1b0>)
 800ab58:	f006 fd93 	bl	8011682 <HAL_GPIO_TogglePin>
			}
		}
		if(deviceIndex != -1)
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab62:	d06e      	beq.n	800ac42 <process_spi_json+0x18e>
		{
			cJSON *status = cJSON_CreateObject();
 800ab64:	f005 f9a8 	bl	800feb8 <cJSON_CreateObject>
 800ab68:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800ab6a:	4b3f      	ldr	r3, [pc, #252]	@ (800ac68 <process_spi_json+0x1b4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2164      	movs	r1, #100	@ 0x64
 800ab70:	4618      	mov	r0, r3
 800ab72:	f00a fd99 	bl	80156a8 <xQueueSemaphoreTake>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d15a      	bne.n	800ac32 <process_spi_json+0x17e>
			{
				HAL_GPIO_TogglePin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800ab7c:	4a3b      	ldr	r2, [pc, #236]	@ (800ac6c <process_spi_json+0x1b8>)
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab84:	493a      	ldr	r1, [pc, #232]	@ (800ac70 <process_spi_json+0x1bc>)
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f006 fd77 	bl	8011682 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(relay_ports[deviceIndex], relay_pins[deviceIndex]);
 800ab94:	4a37      	ldr	r2, [pc, #220]	@ (800ac74 <process_spi_json+0x1c0>)
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab9c:	4936      	ldr	r1, [pc, #216]	@ (800ac78 <process_spi_json+0x1c4>)
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f006 fd6b 	bl	8011682 <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800abac:	4a2f      	ldr	r2, [pc, #188]	@ (800ac6c <process_spi_json+0x1b8>)
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abb4:	492e      	ldr	r1, [pc, #184]	@ (800ac70 <process_spi_json+0x1bc>)
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abbc:	4619      	mov	r1, r3
 800abbe:	4610      	mov	r0, r2
 800abc0:	f006 fd2e 	bl	8011620 <HAL_GPIO_ReadPin>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	bf0c      	ite	eq
 800abce:	2301      	moveq	r3, #1
 800abd0:	2300      	movne	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	73bb      	strb	r3, [r7, #14]
				global_device_states[deviceIndex] = deviceState;
 800abd6:	7bba      	ldrb	r2, [r7, #14]
 800abd8:	4928      	ldr	r1, [pc, #160]	@ (800ac7c <process_spi_json+0x1c8>)
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cJSON_AddNumberToObject(status, devices[deviceIndex], global_device_states[deviceIndex]);
 800abe0:	4a27      	ldr	r2, [pc, #156]	@ (800ac80 <process_spi_json+0x1cc>)
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abe8:	4a24      	ldr	r2, [pc, #144]	@ (800ac7c <process_spi_json+0x1c8>)
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fd fcc7 	bl	8008584 <__aeabi_i2d>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	ec43 2b10 	vmov	d0, r2, r3
 800abfe:	4621      	mov	r1, r4
 800ac00:	6938      	ldr	r0, [r7, #16]
 800ac02:	f005 f8eb 	bl	800fddc <cJSON_AddNumberToObject>
				safe_printf("TOUCH: Device %d set to %s\n", deviceIndex + 1, global_device_states[deviceIndex] ? "ON" : "OFF");
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	1c59      	adds	r1, r3, #1
 800ac0a:	4a1c      	ldr	r2, [pc, #112]	@ (800ac7c <process_spi_json+0x1c8>)
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <process_spi_json+0x166>
 800ac16:	4b1b      	ldr	r3, [pc, #108]	@ (800ac84 <process_spi_json+0x1d0>)
 800ac18:	e000      	b.n	800ac1c <process_spi_json+0x168>
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	@ (800ac88 <process_spi_json+0x1d4>)
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	481b      	ldr	r0, [pc, #108]	@ (800ac8c <process_spi_json+0x1d8>)
 800ac20:	f000 fc30 	bl	800b484 <safe_printf>
				xSemaphoreGive(deviceStateMutex);
 800ac24:	4b10      	ldr	r3, [pc, #64]	@ (800ac68 <process_spi_json+0x1b4>)
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	f00a faa9 	bl	8015184 <xQueueGenericSend>
			}
			updateToDisplayMenu();
 800ac32:	f7fe f9dd 	bl	8008ff0 <updateToDisplayMenu>
			send_json_response(status);
 800ac36:	6938      	ldr	r0, [r7, #16]
 800ac38:	f000 f912 	bl	800ae60 <send_json_response>
			cJSON_Delete(status);
 800ac3c:	6938      	ldr	r0, [r7, #16]
 800ac3e:	f003 f9cf 	bl	800dfe0 <cJSON_Delete>
		}
	}
}
 800ac42:	bf00      	nop
 800ac44:	3724      	adds	r7, #36	@ 0x24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd90      	pop	{r4, r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0801d07c 	.word	0x0801d07c
 800ac50:	0801d084 	.word	0x0801d084
 800ac54:	0801d088 	.word	0x0801d088
 800ac58:	0801d08c 	.word	0x0801d08c
 800ac5c:	0801d090 	.word	0x0801d090
 800ac60:	0801d094 	.word	0x0801d094
 800ac64:	40020000 	.word	0x40020000
 800ac68:	2000056c 	.word	0x2000056c
 800ac6c:	2000003c 	.word	0x2000003c
 800ac70:	2000005c 	.word	0x2000005c
 800ac74:	2000004c 	.word	0x2000004c
 800ac78:	20000064 	.word	0x20000064
 800ac7c:	20000730 	.word	0x20000730
 800ac80:	2000002c 	.word	0x2000002c
 800ac84:	0801d098 	.word	0x0801d098
 800ac88:	0801d09c 	.word	0x0801d09c
 800ac8c:	0801d0a0 	.word	0x0801d0a0

0800ac90 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ad0c <HAL_SPI_RxCpltCallback+0x7c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d125      	bne.n	800acee <HAL_SPI_RxCpltCallback+0x5e>
    {
        uint16_t nextHead = (spiHead + 1) % SPI_RING_BUFFER_SIZE;
 800aca2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad10 <HAL_SPI_RxCpltCallback+0x80>)
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3301      	adds	r3, #1
 800acaa:	425a      	negs	r2, r3
 800acac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800acb4:	bf58      	it	pl
 800acb6:	4253      	negpl	r3, r2
 800acb8:	81fb      	strh	r3, [r7, #14]
        if(nextHead != spiTail)
 800acba:	4b16      	ldr	r3, [pc, #88]	@ (800ad14 <HAL_SPI_RxCpltCallback+0x84>)
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	89fa      	ldrh	r2, [r7, #14]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d00b      	beq.n	800acde <HAL_SPI_RxCpltCallback+0x4e>
        {
        	spiRingBuffer[spiHead] = spiRxByte;
 800acc6:	4b12      	ldr	r3, [pc, #72]	@ (800ad10 <HAL_SPI_RxCpltCallback+0x80>)
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	461a      	mov	r2, r3
 800acce:	4b12      	ldr	r3, [pc, #72]	@ (800ad18 <HAL_SPI_RxCpltCallback+0x88>)
 800acd0:	7819      	ldrb	r1, [r3, #0]
 800acd2:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <HAL_SPI_RxCpltCallback+0x8c>)
 800acd4:	5499      	strb	r1, [r3, r2]
        	spiHead = nextHead;
 800acd6:	4a0e      	ldr	r2, [pc, #56]	@ (800ad10 <HAL_SPI_RxCpltCallback+0x80>)
 800acd8:	89fb      	ldrh	r3, [r7, #14]
 800acda:	8013      	strh	r3, [r2, #0]
 800acdc:	e002      	b.n	800ace4 <HAL_SPI_RxCpltCallback+0x54>
        }
        else
        {
        	safe_printf("SPI ring buffer overflow\n");
 800acde:	4810      	ldr	r0, [pc, #64]	@ (800ad20 <HAL_SPI_RxCpltCallback+0x90>)
 800ace0:	f000 fbd0 	bl	800b484 <safe_printf>
        }
        HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800ace4:	2201      	movs	r2, #1
 800ace6:	490c      	ldr	r1, [pc, #48]	@ (800ad18 <HAL_SPI_RxCpltCallback+0x88>)
 800ace8:	480e      	ldr	r0, [pc, #56]	@ (800ad24 <HAL_SPI_RxCpltCallback+0x94>)
 800acea:	f007 ffb9 	bl	8012c60 <HAL_SPI_Receive_IT>
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acee:	2300      	movs	r3, #0
 800acf0:	60bb      	str	r3, [r7, #8]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	60bb      	str	r3, [r7, #8]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	60bb      	str	r3, [r7, #8]
 800ad02:	68bb      	ldr	r3, [r7, #8]
}
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	40003800 	.word	0x40003800
 800ad10:	2000045c 	.word	0x2000045c
 800ad14:	2000045e 	.word	0x2000045e
 800ad18:	20000460 	.word	0x20000460
 800ad1c:	200003dc 	.word	0x200003dc
 800ad20:	0801d0bc 	.word	0x0801d0bc
 800ad24:	20001380 	.word	0x20001380

0800ad28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ad2c:	f3bf 8f4f 	dsb	sy
}
 800ad30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ad32:	4b06      	ldr	r3, [pc, #24]	@ (800ad4c <__NVIC_SystemReset+0x24>)
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ad3a:	4904      	ldr	r1, [pc, #16]	@ (800ad4c <__NVIC_SystemReset+0x24>)
 800ad3c:	4b04      	ldr	r3, [pc, #16]	@ (800ad50 <__NVIC_SystemReset+0x28>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad42:	f3bf 8f4f 	dsb	sy
}
 800ad46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ad48:	bf00      	nop
 800ad4a:	e7fd      	b.n	800ad48 <__NVIC_SystemReset+0x20>
 800ad4c:	e000ed00 	.word	0xe000ed00
 800ad50:	05fa0004 	.word	0x05fa0004

0800ad54 <UART_Handler>:
volatile uint16_t uartHead = 0;
volatile uint16_t uartTail = 0;
uint8_t uartRxByte;

void UART_Handler(void *param)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b0aa      	sub	sp, #168	@ 0xa8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[JSON_BUFFER_SIZE];
    uint8_t index = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    bool collecting = false;
 800ad62:	2300      	movs	r3, #0
 800ad64:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
    while (1)
    {
        if (uartHead != uartTail)
 800ad68:	4b39      	ldr	r3, [pc, #228]	@ (800ae50 <UART_Handler+0xfc>)
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	4b39      	ldr	r3, [pc, #228]	@ (800ae54 <UART_Handler+0x100>)
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d066      	beq.n	800ae46 <UART_Handler+0xf2>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800ad78:	4b36      	ldr	r3, [pc, #216]	@ (800ae54 <UART_Handler+0x100>)
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	461a      	mov	r2, r3
 800ad80:	4b35      	ldr	r3, [pc, #212]	@ (800ae58 <UART_Handler+0x104>)
 800ad82:	5c9b      	ldrb	r3, [r3, r2]
 800ad84:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800ad88:	4b32      	ldr	r3, [pc, #200]	@ (800ae54 <UART_Handler+0x100>)
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	3301      	adds	r3, #1
 800ad90:	425a      	negs	r2, r3
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	b2d2      	uxtb	r2, r2
 800ad96:	bf58      	it	pl
 800ad98:	4253      	negpl	r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ae54 <UART_Handler+0x100>)
 800ad9e:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800ada0:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800ada4:	2b7b      	cmp	r3, #123	@ 0x7b
 800ada6:	d111      	bne.n	800adcc <UART_Handler+0x78>
            {
                collecting = true;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                index = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                jsonBuffer[index++] = byte;
 800adb4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800adbe:	33a8      	adds	r3, #168	@ 0xa8
 800adc0:	443b      	add	r3, r7
 800adc2:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800adc6:	f803 2c9c 	strb.w	r2, [r3, #-156]
 800adca:	e7cd      	b.n	800ad68 <UART_Handler+0x14>
            }
            else if (collecting)
 800adcc:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800add0:	2b00      	cmp	r3, #0
 800add2:	d032      	beq.n	800ae3a <UART_Handler+0xe6>
            {
                if (index < JSON_BUFFER_SIZE - 1)
 800add4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800add8:	2b94      	cmp	r3, #148	@ 0x94
 800adda:	d827      	bhi.n	800ae2c <UART_Handler+0xd8>
                {
                    jsonBuffer[index++] = byte;
 800addc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800ade6:	33a8      	adds	r3, #168	@ 0xa8
 800ade8:	443b      	add	r3, r7
 800adea:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800adee:	f803 2c9c 	strb.w	r2, [r3, #-156]

                    if (byte == '}')
 800adf2:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800adf6:	2b7d      	cmp	r3, #125	@ 0x7d
 800adf8:	d1b6      	bne.n	800ad68 <UART_Handler+0x14>
                    {
                        jsonBuffer[index] = '\0';
 800adfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800adfe:	33a8      	adds	r3, #168	@ 0xa8
 800ae00:	443b      	add	r3, r7
 800ae02:	2200      	movs	r2, #0
 800ae04:	f803 2c9c 	strb.w	r2, [r3, #-156]
                        safe_printf("JSON received: %s\n", jsonBuffer);
 800ae08:	f107 030c 	add.w	r3, r7, #12
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4813      	ldr	r0, [pc, #76]	@ (800ae5c <UART_Handler+0x108>)
 800ae10:	f000 fb38 	bl	800b484 <safe_printf>
                        process_json(jsonBuffer);
 800ae14:	f107 030c 	add.w	r3, r7, #12
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 f96d 	bl	800b0f8 <process_json>
                        collecting = false;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                        index = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800ae2a:	e79d      	b.n	800ad68 <UART_Handler+0x14>
                    }
                }
                else
                {
                    collecting = false;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                    index = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800ae38:	e796      	b.n	800ad68 <UART_Handler+0x14>
                }
            }
            else if (byte == BOOT_CMD)
 800ae3a:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800ae3e:	2b50      	cmp	r3, #80	@ 0x50
 800ae40:	d192      	bne.n	800ad68 <UART_Handler+0x14>
            {
                NVIC_SystemReset();
 800ae42:	f7ff ff71 	bl	800ad28 <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800ae46:	2005      	movs	r0, #5
 800ae48:	f00b f80a 	bl	8015e60 <vTaskDelay>
        if (uartHead != uartTail)
 800ae4c:	e78c      	b.n	800ad68 <UART_Handler+0x14>
 800ae4e:	bf00      	nop
 800ae50:	20000564 	.word	0x20000564
 800ae54:	20000566 	.word	0x20000566
 800ae58:	20000464 	.word	0x20000464
 800ae5c:	0801d0d8 	.word	0x0801d0d8

0800ae60 <send_json_response>:
    }
}


void send_json_response(cJSON *jsonObj)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
    char *response = cJSON_PrintUnformatted(jsonObj);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f004 f965 	bl	800f138 <cJSON_PrintUnformatted>
 800ae6e:	60f8      	str	r0, [r7, #12]
    if (response)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d018      	beq.n	800aea8 <send_json_response+0x48>
    {
    	safe_printf("Device State JSON: %s\n", response);
 800ae76:	68f9      	ldr	r1, [r7, #12]
 800ae78:	480d      	ldr	r0, [pc, #52]	@ (800aeb0 <send_json_response+0x50>)
 800ae7a:	f000 fb03 	bl	800b484 <safe_printf>
        HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7fd fa26 	bl	80082d0 <strlen>
 800ae84:	4603      	mov	r3, r0
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8c:	68f9      	ldr	r1, [r7, #12]
 800ae8e:	4809      	ldr	r0, [pc, #36]	@ (800aeb4 <send_json_response+0x54>)
 800ae90:	f008 ff50 	bl	8013d34 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295
 800ae98:	2201      	movs	r2, #1
 800ae9a:	4907      	ldr	r1, [pc, #28]	@ (800aeb8 <send_json_response+0x58>)
 800ae9c:	4805      	ldr	r0, [pc, #20]	@ (800aeb4 <send_json_response+0x54>)
 800ae9e:	f008 ff49 	bl	8013d34 <HAL_UART_Transmit>
        free(response);
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f00d f886 	bl	8017fb4 <free>
    }
}
 800aea8:	bf00      	nop
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	0801d0ec 	.word	0x0801d0ec
 800aeb4:	200014c0 	.word	0x200014c0
 800aeb8:	0801d104 	.word	0x0801d104

0800aebc <handle_get_status_request>:

void handle_get_status_request(void)
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
    cJSON *resp = cJSON_CreateObject();
 800aec2:	f004 fff9 	bl	800feb8 <cJSON_CreateObject>
 800aec6:	6038      	str	r0, [r7, #0]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800aec8:	4b1a      	ldr	r3, [pc, #104]	@ (800af34 <handle_get_status_request+0x78>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2164      	movs	r1, #100	@ 0x64
 800aece:	4618      	mov	r0, r3
 800aed0:	f00a fbea 	bl	80156a8 <xQueueSemaphoreTake>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d122      	bne.n	800af20 <handle_get_status_request+0x64>
    {
        for (int i = 0; i < DEVICE_COUNT; i++)
 800aeda:	2300      	movs	r3, #0
 800aedc:	607b      	str	r3, [r7, #4]
 800aede:	e015      	b.n	800af0c <handle_get_status_request+0x50>
        {
            cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800aee0:	4a15      	ldr	r2, [pc, #84]	@ (800af38 <handle_get_status_request+0x7c>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aee8:	4a14      	ldr	r2, [pc, #80]	@ (800af3c <handle_get_status_request+0x80>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fd fb47 	bl	8008584 <__aeabi_i2d>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	ec43 2b10 	vmov	d0, r2, r3
 800aefe:	4621      	mov	r1, r4
 800af00:	6838      	ldr	r0, [r7, #0]
 800af02:	f004 ff6b 	bl	800fddc <cJSON_AddNumberToObject>
        for (int i = 0; i < DEVICE_COUNT; i++)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3301      	adds	r3, #1
 800af0a:	607b      	str	r3, [r7, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b03      	cmp	r3, #3
 800af10:	dde6      	ble.n	800aee0 <handle_get_status_request+0x24>
        }
        xSemaphoreGive(deviceStateMutex);
 800af12:	4b08      	ldr	r3, [pc, #32]	@ (800af34 <handle_get_status_request+0x78>)
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	2200      	movs	r2, #0
 800af1a:	2100      	movs	r1, #0
 800af1c:	f00a f932 	bl	8015184 <xQueueGenericSend>
    }
    send_json_response(resp);
 800af20:	6838      	ldr	r0, [r7, #0]
 800af22:	f7ff ff9d 	bl	800ae60 <send_json_response>
    cJSON_Delete(resp);
 800af26:	6838      	ldr	r0, [r7, #0]
 800af28:	f003 f85a 	bl	800dfe0 <cJSON_Delete>
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	2000056c 	.word	0x2000056c
 800af38:	2000002c 	.word	0x2000002c
 800af3c:	20000730 	.word	0x20000730

0800af40 <handle_device_control>:

void handle_device_control(cJSON *json)
{
 800af40:	b590      	push	{r4, r7, lr}
 800af42:	b089      	sub	sp, #36	@ 0x24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
    cJSON *resp = cJSON_CreateObject();
 800af48:	f004 ffb6 	bl	800feb8 <cJSON_CreateObject>
 800af4c:	61b8      	str	r0, [r7, #24]
    cJSON *Display = cJSON_GetObjectItem(json, "backlit");
 800af4e:	495e      	ldr	r1, [pc, #376]	@ (800b0c8 <handle_device_control+0x188>)
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f004 fe8d 	bl	800fc70 <cJSON_GetObjectItem>
 800af56:	6178      	str	r0, [r7, #20]

    if(Display)
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d022      	beq.n	800afa4 <handle_device_control+0x64>
	{
		if (cJSON_IsNumber(Display))
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f004 ffbe 	bl	800fee0 <cJSON_IsNumber>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d01c      	beq.n	800afa4 <handle_device_control+0x64>
		{
			GPIO_PinState state = HAL_GPIO_ReadPin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800af6a:	2101      	movs	r1, #1
 800af6c:	4857      	ldr	r0, [pc, #348]	@ (800b0cc <handle_device_control+0x18c>)
 800af6e:	f006 fb57 	bl	8011620 <HAL_GPIO_ReadPin>
 800af72:	4603      	mov	r3, r0
 800af74:	74fb      	strb	r3, [r7, #19]
			uint8_t dispState = (state == GPIO_PIN_SET) ? 1 : 0;
 800af76:	7cfb      	ldrb	r3, [r7, #19]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	bf0c      	ite	eq
 800af7c:	2301      	moveq	r3, #1
 800af7e:	2300      	movne	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	74bb      	strb	r3, [r7, #18]
			if(dispState == 1)
 800af84:	7cbb      	ldrb	r3, [r7, #18]
 800af86:	2b01      	cmp	r3, #1
 800af88:	f000 809a 	beq.w	800b0c0 <handle_device_control+0x180>
			{
				return;
			}
			else
			{
				HAL_GPIO_WritePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin, Display->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	bf14      	ite	ne
 800af94:	2301      	movne	r3, #1
 800af96:	2300      	moveq	r3, #0
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	2101      	movs	r1, #1
 800af9e:	484b      	ldr	r0, [pc, #300]	@ (800b0cc <handle_device_control+0x18c>)
 800afa0:	f006 fb56 	bl	8011650 <HAL_GPIO_WritePin>
			}
		}
	}


	if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800afa4:	4b4a      	ldr	r3, [pc, #296]	@ (800b0d0 <handle_device_control+0x190>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2164      	movs	r1, #100	@ 0x64
 800afaa:	4618      	mov	r0, r3
 800afac:	f00a fb7c 	bl	80156a8 <xQueueSemaphoreTake>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d17d      	bne.n	800b0b2 <handle_device_control+0x172>
	{
		for (int i = 0; i < DEVICE_COUNT; i++)
 800afb6:	2300      	movs	r3, #0
 800afb8:	61fb      	str	r3, [r7, #28]
 800afba:	e070      	b.n	800b09e <handle_device_control+0x15e>
		{
			cJSON *Device = cJSON_GetObjectItem(json, devices[i]);
 800afbc:	4a45      	ldr	r2, [pc, #276]	@ (800b0d4 <handle_device_control+0x194>)
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f004 fe52 	bl	800fc70 <cJSON_GetObjectItem>
 800afcc:	60f8      	str	r0, [r7, #12]
			if (cJSON_IsNumber(Device))
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f004 ff86 	bl	800fee0 <cJSON_IsNumber>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d05e      	beq.n	800b098 <handle_device_control+0x158>
			{
				HAL_GPIO_WritePin(led_ports[i], led_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800afda:	4a3f      	ldr	r2, [pc, #252]	@ (800b0d8 <handle_device_control+0x198>)
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800afe2:	4a3e      	ldr	r2, [pc, #248]	@ (800b0dc <handle_device_control+0x19c>)
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2301      	movne	r3, #1
 800aff4:	2300      	moveq	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	f006 fb29 	bl	8011650 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(relay_ports[i], relay_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800affe:	4a38      	ldr	r2, [pc, #224]	@ (800b0e0 <handle_device_control+0x1a0>)
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b006:	4a37      	ldr	r2, [pc, #220]	@ (800b0e4 <handle_device_control+0x1a4>)
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	bf14      	ite	ne
 800b016:	2301      	movne	r3, #1
 800b018:	2300      	moveq	r3, #0
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	f006 fb17 	bl	8011650 <HAL_GPIO_WritePin>
				GPIO_PinState state = HAL_GPIO_ReadPin(led_ports[i], led_pins[i]);
 800b022:	4a2d      	ldr	r2, [pc, #180]	@ (800b0d8 <handle_device_control+0x198>)
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b02a:	492c      	ldr	r1, [pc, #176]	@ (800b0dc <handle_device_control+0x19c>)
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b032:	4619      	mov	r1, r3
 800b034:	4610      	mov	r0, r2
 800b036:	f006 faf3 	bl	8011620 <HAL_GPIO_ReadPin>
 800b03a:	4603      	mov	r3, r0
 800b03c:	72fb      	strb	r3, [r7, #11]
				global_device_states[i] = (state == GPIO_PIN_SET) ? 1 : 0;
 800b03e:	7afb      	ldrb	r3, [r7, #11]
 800b040:	2b01      	cmp	r3, #1
 800b042:	bf0c      	ite	eq
 800b044:	2301      	moveq	r3, #1
 800b046:	2300      	movne	r3, #0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	4619      	mov	r1, r3
 800b04c:	4a26      	ldr	r2, [pc, #152]	@ (800b0e8 <handle_device_control+0x1a8>)
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800b054:	4a1f      	ldr	r2, [pc, #124]	@ (800b0d4 <handle_device_control+0x194>)
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b05c:	4a22      	ldr	r2, [pc, #136]	@ (800b0e8 <handle_device_control+0x1a8>)
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b064:	4618      	mov	r0, r3
 800b066:	f7fd fa8d 	bl	8008584 <__aeabi_i2d>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	ec43 2b10 	vmov	d0, r2, r3
 800b072:	4621      	mov	r1, r4
 800b074:	69b8      	ldr	r0, [r7, #24]
 800b076:	f004 feb1 	bl	800fddc <cJSON_AddNumberToObject>
				safe_printf("ESP: Device %d set to %s\n", i + 1, global_device_states[i] ? "ON" : "OFF");
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	1c59      	adds	r1, r3, #1
 800b07e:	4a1a      	ldr	r2, [pc, #104]	@ (800b0e8 <handle_device_control+0x1a8>)
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <handle_device_control+0x14e>
 800b08a:	4b18      	ldr	r3, [pc, #96]	@ (800b0ec <handle_device_control+0x1ac>)
 800b08c:	e000      	b.n	800b090 <handle_device_control+0x150>
 800b08e:	4b18      	ldr	r3, [pc, #96]	@ (800b0f0 <handle_device_control+0x1b0>)
 800b090:	461a      	mov	r2, r3
 800b092:	4818      	ldr	r0, [pc, #96]	@ (800b0f4 <handle_device_control+0x1b4>)
 800b094:	f000 f9f6 	bl	800b484 <safe_printf>
		for (int i = 0; i < DEVICE_COUNT; i++)
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	3301      	adds	r3, #1
 800b09c:	61fb      	str	r3, [r7, #28]
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	dd8b      	ble.n	800afbc <handle_device_control+0x7c>
			}
		}
		xSemaphoreGive(deviceStateMutex);
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d0 <handle_device_control+0x190>)
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	f00a f869 	bl	8015184 <xQueueGenericSend>
	}
	send_json_response(resp);
 800b0b2:	69b8      	ldr	r0, [r7, #24]
 800b0b4:	f7ff fed4 	bl	800ae60 <send_json_response>
	cJSON_Delete(resp);
 800b0b8:	69b8      	ldr	r0, [r7, #24]
 800b0ba:	f002 ff91 	bl	800dfe0 <cJSON_Delete>
 800b0be:	e000      	b.n	800b0c2 <handle_device_control+0x182>
				return;
 800b0c0:	bf00      	nop
}
 800b0c2:	3724      	adds	r7, #36	@ 0x24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd90      	pop	{r4, r7, pc}
 800b0c8:	0801d108 	.word	0x0801d108
 800b0cc:	40020000 	.word	0x40020000
 800b0d0:	2000056c 	.word	0x2000056c
 800b0d4:	2000002c 	.word	0x2000002c
 800b0d8:	2000003c 	.word	0x2000003c
 800b0dc:	2000005c 	.word	0x2000005c
 800b0e0:	2000004c 	.word	0x2000004c
 800b0e4:	20000064 	.word	0x20000064
 800b0e8:	20000730 	.word	0x20000730
 800b0ec:	0801d110 	.word	0x0801d110
 800b0f0:	0801d114 	.word	0x0801d114
 800b0f4:	0801d118 	.word	0x0801d118

0800b0f8 <process_json>:

void process_json(uint8_t *jsonBuffer)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
    cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f003 ff81 	bl	800f008 <cJSON_Parse>
 800b106:	60f8      	str	r0, [r7, #12]
    if (!json)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d103      	bne.n	800b116 <process_json+0x1e>
    {
        safe_printf("Invalid JSON!\n");
 800b10e:	4812      	ldr	r0, [pc, #72]	@ (800b158 <process_json+0x60>)
 800b110:	f000 f9b8 	bl	800b484 <safe_printf>
        return;
 800b114:	e01c      	b.n	800b150 <process_json+0x58>
    }

    cJSON *request = cJSON_GetObjectItem(json, "request");
 800b116:	4911      	ldr	r1, [pc, #68]	@ (800b15c <process_json+0x64>)
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f004 fda9 	bl	800fc70 <cJSON_GetObjectItem>
 800b11e:	60b8      	str	r0, [r7, #8]
    if (cJSON_IsString(request) && strcmp(request->valuestring, "getCurrentStatus") == 0)
 800b120:	68b8      	ldr	r0, [r7, #8]
 800b122:	f004 fef4 	bl	800ff0e <cJSON_IsString>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00b      	beq.n	800b144 <process_json+0x4c>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	490b      	ldr	r1, [pc, #44]	@ (800b160 <process_json+0x68>)
 800b132:	4618      	mov	r0, r3
 800b134:	f7fd f86c 	bl	8008210 <strcmp>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <process_json+0x4c>
    {
        handle_get_status_request();
 800b13e:	f7ff febd 	bl	800aebc <handle_get_status_request>
 800b142:	e002      	b.n	800b14a <process_json+0x52>
    }
    else
    {
        handle_device_control(json);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7ff fefb 	bl	800af40 <handle_device_control>
    }
    cJSON_Delete(json);
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f002 ff48 	bl	800dfe0 <cJSON_Delete>
}
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	0801d134 	.word	0x0801d134
 800b15c:	0801d144 	.word	0x0801d144
 800b160:	0801d14c 	.word	0x0801d14c

0800b164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f0 <HAL_UART_RxCpltCallback+0x8c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d124      	bne.n	800b1c0 <HAL_UART_RxCpltCallback+0x5c>
    {
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800b176:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f4 <HAL_UART_RxCpltCallback+0x90>)
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3301      	adds	r3, #1
 800b17e:	425a      	negs	r2, r3
 800b180:	b2db      	uxtb	r3, r3
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	bf58      	it	pl
 800b186:	4253      	negpl	r3, r2
 800b188:	817b      	strh	r3, [r7, #10]
        if (nextHead != uartTail)
 800b18a:	4b1b      	ldr	r3, [pc, #108]	@ (800b1f8 <HAL_UART_RxCpltCallback+0x94>)
 800b18c:	881b      	ldrh	r3, [r3, #0]
 800b18e:	b29b      	uxth	r3, r3
 800b190:	897a      	ldrh	r2, [r7, #10]
 800b192:	429a      	cmp	r2, r3
 800b194:	d00b      	beq.n	800b1ae <HAL_UART_RxCpltCallback+0x4a>
        {
            uartRingBuffer[uartHead] = uartRxByte;
 800b196:	4b17      	ldr	r3, [pc, #92]	@ (800b1f4 <HAL_UART_RxCpltCallback+0x90>)
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	461a      	mov	r2, r3
 800b19e:	4b17      	ldr	r3, [pc, #92]	@ (800b1fc <HAL_UART_RxCpltCallback+0x98>)
 800b1a0:	7819      	ldrb	r1, [r3, #0]
 800b1a2:	4b17      	ldr	r3, [pc, #92]	@ (800b200 <HAL_UART_RxCpltCallback+0x9c>)
 800b1a4:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800b1a6:	4a13      	ldr	r2, [pc, #76]	@ (800b1f4 <HAL_UART_RxCpltCallback+0x90>)
 800b1a8:	897b      	ldrh	r3, [r7, #10]
 800b1aa:	8013      	strh	r3, [r2, #0]
 800b1ac:	e002      	b.n	800b1b4 <HAL_UART_RxCpltCallback+0x50>
        } else {
            safe_printf("UART ring buffer overflow!\n");
 800b1ae:	4815      	ldr	r0, [pc, #84]	@ (800b204 <HAL_UART_RxCpltCallback+0xa0>)
 800b1b0:	f000 f968 	bl	800b484 <safe_printf>
        }
        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	4911      	ldr	r1, [pc, #68]	@ (800b1fc <HAL_UART_RxCpltCallback+0x98>)
 800b1b8:	4813      	ldr	r0, [pc, #76]	@ (800b208 <HAL_UART_RxCpltCallback+0xa4>)
 800b1ba:	f008 fe7c 	bl	8013eb6 <HAL_UART_Receive_IT>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		Sim800_RxCallBack();
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 800b1be:	e012      	b.n	800b1e6 <HAL_UART_RxCpltCallback+0x82>
    else if(huart == UART_SIM800)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a12      	ldr	r2, [pc, #72]	@ (800b20c <HAL_UART_RxCpltCallback+0xa8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d10e      	bne.n	800b1e6 <HAL_UART_RxCpltCallback+0x82>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]
		Sim800_RxCallBack();
 800b1cc:	f000 ff2c 	bl	800c028 <Sim800_RxCallBack>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <HAL_UART_RxCpltCallback+0x82>
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <HAL_UART_RxCpltCallback+0xac>)
 800b1d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	f3bf 8f6f 	isb	sy
}
 800b1e6:	bf00      	nop
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	40004800 	.word	0x40004800
 800b1f4:	20000564 	.word	0x20000564
 800b1f8:	20000566 	.word	0x20000566
 800b1fc:	20000568 	.word	0x20000568
 800b200:	20000464 	.word	0x20000464
 800b204:	0801d160 	.word	0x0801d160
 800b208:	200014c0 	.word	0x200014c0
 800b20c:	20001430 	.word	0x20001430
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <setup_freeRTOS>:
volatile int global_device_states[4] = {0, 0, 0, 0};
uint32_t lastKeepAliveTime = 0;


void setup_freeRTOS(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af02      	add	r7, sp, #8
	HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800b21a:	2201      	movs	r2, #1
 800b21c:	4954      	ldr	r1, [pc, #336]	@ (800b370 <setup_freeRTOS+0x15c>)
 800b21e:	4855      	ldr	r0, [pc, #340]	@ (800b374 <setup_freeRTOS+0x160>)
 800b220:	f007 fd1e 	bl	8012c60 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800b224:	2201      	movs	r2, #1
 800b226:	4954      	ldr	r1, [pc, #336]	@ (800b378 <setup_freeRTOS+0x164>)
 800b228:	4854      	ldr	r0, [pc, #336]	@ (800b37c <setup_freeRTOS+0x168>)
 800b22a:	f008 fe44 	bl	8013eb6 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800b22e:	2201      	movs	r2, #1
 800b230:	4953      	ldr	r1, [pc, #332]	@ (800b380 <setup_freeRTOS+0x16c>)
 800b232:	4854      	ldr	r0, [pc, #336]	@ (800b384 <setup_freeRTOS+0x170>)
 800b234:	f008 fe3f 	bl	8013eb6 <HAL_UART_Receive_IT>

	status = xTaskCreate(SPI_Handler, "SPIHandler", 512, NULL, 5, NULL);
 800b238:	2300      	movs	r3, #0
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	2305      	movs	r3, #5
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	2300      	movs	r3, #0
 800b242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b246:	4950      	ldr	r1, [pc, #320]	@ (800b388 <setup_freeRTOS+0x174>)
 800b248:	4850      	ldr	r0, [pc, #320]	@ (800b38c <setup_freeRTOS+0x178>)
 800b24a:	f00a fcc3 	bl	8015bd4 <xTaskCreate>
 800b24e:	4603      	mov	r3, r0
 800b250:	4a4f      	ldr	r2, [pc, #316]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b252:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b254:	4b4e      	ldr	r3, [pc, #312]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d00b      	beq.n	800b274 <setup_freeRTOS+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800b26e:	bf00      	nop
 800b270:	bf00      	nop
 800b272:	e7fd      	b.n	800b270 <setup_freeRTOS+0x5c>

	status = xTaskCreate(RFM_Task, "RFM69Handler", 256, NULL, 6, NULL);
 800b274:	2300      	movs	r3, #0
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	2306      	movs	r3, #6
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	2300      	movs	r3, #0
 800b27e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b282:	4944      	ldr	r1, [pc, #272]	@ (800b394 <setup_freeRTOS+0x180>)
 800b284:	4844      	ldr	r0, [pc, #272]	@ (800b398 <setup_freeRTOS+0x184>)
 800b286:	f00a fca5 	bl	8015bd4 <xTaskCreate>
 800b28a:	4603      	mov	r3, r0
 800b28c:	4a40      	ldr	r2, [pc, #256]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b28e:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b290:	4b3f      	ldr	r3, [pc, #252]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d00b      	beq.n	800b2b0 <setup_freeRTOS+0x9c>
        __asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	613b      	str	r3, [r7, #16]
    }
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <setup_freeRTOS+0x98>

	status = xTaskCreate(UART_Handler, "UARTHandler", 1024, NULL, 4, NULL);
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	2304      	movs	r3, #4
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2be:	4937      	ldr	r1, [pc, #220]	@ (800b39c <setup_freeRTOS+0x188>)
 800b2c0:	4837      	ldr	r0, [pc, #220]	@ (800b3a0 <setup_freeRTOS+0x18c>)
 800b2c2:	f00a fc87 	bl	8015bd4 <xTaskCreate>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	4a31      	ldr	r2, [pc, #196]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b2ca:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b2cc:	4b30      	ldr	r3, [pc, #192]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d00b      	beq.n	800b2ec <setup_freeRTOS+0xd8>
        __asm volatile
 800b2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d8:	f383 8811 	msr	BASEPRI, r3
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	60fb      	str	r3, [r7, #12]
    }
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	e7fd      	b.n	800b2e8 <setup_freeRTOS+0xd4>

	status = xTaskCreate(GSM_MQTT_Task, "GSM_MQTT_Task", 1024, NULL, 7, NULL);
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	2307      	movs	r3, #7
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2fa:	492a      	ldr	r1, [pc, #168]	@ (800b3a4 <setup_freeRTOS+0x190>)
 800b2fc:	482a      	ldr	r0, [pc, #168]	@ (800b3a8 <setup_freeRTOS+0x194>)
 800b2fe:	f00a fc69 	bl	8015bd4 <xTaskCreate>
 800b302:	4603      	mov	r3, r0
 800b304:	4a22      	ldr	r2, [pc, #136]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b306:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b308:	4b21      	ldr	r3, [pc, #132]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d00b      	beq.n	800b328 <setup_freeRTOS+0x114>
        __asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	60bb      	str	r3, [r7, #8]
    }
 800b322:	bf00      	nop
 800b324:	bf00      	nop
 800b326:	e7fd      	b.n	800b324 <setup_freeRTOS+0x110>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800b328:	2300      	movs	r3, #0
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	2303      	movs	r3, #3
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	2300      	movs	r3, #0
 800b332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b336:	491d      	ldr	r1, [pc, #116]	@ (800b3ac <setup_freeRTOS+0x198>)
 800b338:	481d      	ldr	r0, [pc, #116]	@ (800b3b0 <setup_freeRTOS+0x19c>)
 800b33a:	f00a fc4b 	bl	8015bd4 <xTaskCreate>
 800b33e:	4603      	mov	r3, r0
 800b340:	4a13      	ldr	r2, [pc, #76]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b342:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b344:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <setup_freeRTOS+0x17c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d00b      	beq.n	800b364 <setup_freeRTOS+0x150>
        __asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	607b      	str	r3, [r7, #4]
    }
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	e7fd      	b.n	800b360 <setup_freeRTOS+0x14c>

	vTaskStartScheduler();
 800b364:	f00a fe2c 	bl	8015fc0 <vTaskStartScheduler>
}
 800b368:	bf00      	nop
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000460 	.word	0x20000460
 800b374:	20001380 	.word	0x20001380
 800b378:	20000748 	.word	0x20000748
 800b37c:	20001430 	.word	0x20001430
 800b380:	20000568 	.word	0x20000568
 800b384:	200014c0 	.word	0x200014c0
 800b388:	0801d19c 	.word	0x0801d19c
 800b38c:	0800a9b1 	.word	0x0800a9b1
 800b390:	20000570 	.word	0x20000570
 800b394:	0801d1a8 	.word	0x0801d1a8
 800b398:	0800a6cf 	.word	0x0800a6cf
 800b39c:	0801d1b8 	.word	0x0801d1b8
 800b3a0:	0800ad55 	.word	0x0800ad55
 800b3a4:	0801d1c4 	.word	0x0801d1c4
 800b3a8:	0800a565 	.word	0x0800a565
 800b3ac:	0801d1d4 	.word	0x0801d1d4
 800b3b0:	08008fe1 	.word	0x08008fe1

0800b3b4 <user_app_init>:

void user_app_init(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
	ST7735_Init(0);
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f002 fade 	bl	800d97c <ST7735_Init>
	ST7735_SetRotation(1);
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	f002 fb07 	bl	800d9d4 <ST7735_SetRotation>
	fillScreen(BLACK);
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	f002 f9cc 	bl	800d764 <fillScreen>
	showStartupLogoAndMenu();
 800b3cc:	f002 fd4e 	bl	800de6c <showStartupLogoAndMenu>
	deviceStateMutex = xSemaphoreCreateMutex();
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	f009 febe 	bl	8015152 <xQueueCreateMutex>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4a12      	ldr	r2, [pc, #72]	@ (800b424 <user_app_init+0x70>)
 800b3da:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 800b3dc:	2300      	movs	r3, #0
 800b3de:	607b      	str	r3, [r7, #4]
 800b3e0:	e00c      	b.n	800b3fc <user_app_init+0x48>
	  global_device_states[i] = 0;
 800b3e2:	4a11      	ldr	r2, [pc, #68]	@ (800b428 <user_app_init+0x74>)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  device_states[i] = 0;
 800b3ec:	4a0f      	ldr	r2, [pc, #60]	@ (800b42c <user_app_init+0x78>)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	607b      	str	r3, [r7, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	ddef      	ble.n	800b3e2 <user_app_init+0x2e>
	}
	uartMutex = xSemaphoreCreateMutex();
 800b402:	2001      	movs	r0, #1
 800b404:	f009 fea5 	bl	8015152 <xQueueCreateMutex>
 800b408:	4603      	mov	r3, r0
 800b40a:	4a09      	ldr	r2, [pc, #36]	@ (800b430 <user_app_init+0x7c>)
 800b40c:	6013      	str	r3, [r2, #0]
	initializeMenu();
 800b40e:	f7fe fd7d 	bl	8009f0c <initializeMenu>
	GSM_init();
 800b412:	f7ff f875 	bl	800a500 <GSM_init>
	setup_freeRTOS();
 800b416:	f7ff fefd 	bl	800b214 <setup_freeRTOS>
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	2000056c 	.word	0x2000056c
 800b428:	20000730 	.word	0x20000730
 800b42c:	20000298 	.word	0x20000298
 800b430:	20000574 	.word	0x20000574

0800b434 <vApplicationStackOverflowHook>:


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
    safe_printf("Stack overflow in task: %s\n", pcTaskName);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	4802      	ldr	r0, [pc, #8]	@ (800b44c <vApplicationStackOverflowHook+0x18>)
 800b442:	f000 f81f 	bl	800b484 <safe_printf>
    while(1);
 800b446:	bf00      	nop
 800b448:	e7fd      	b.n	800b446 <vApplicationStackOverflowHook+0x12>
 800b44a:	bf00      	nop
 800b44c:	0801d1e4 	.word	0x0801d1e4

0800b450 <print_task_info>:
}

void print_task_info(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800b456:	af00      	add	r7, sp, #0
    char taskList[512];
    safe_printf("Task Info:\nName               State  Prio   StackNum     ID\n");
 800b458:	4808      	ldr	r0, [pc, #32]	@ (800b47c <print_task_info+0x2c>)
 800b45a:	f000 f813 	bl	800b484 <safe_printf>
    vTaskList(taskList);
 800b45e:	463b      	mov	r3, r7
 800b460:	4618      	mov	r0, r3
 800b462:	f00b fd11 	bl	8016e88 <vTaskList>
    safe_printf("%s\n", taskList);
 800b466:	463b      	mov	r3, r7
 800b468:	4619      	mov	r1, r3
 800b46a:	4805      	ldr	r0, [pc, #20]	@ (800b480 <print_task_info+0x30>)
 800b46c:	f000 f80a 	bl	800b484 <safe_printf>
}
 800b470:	bf00      	nop
 800b472:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	0801d200 	.word	0x0801d200
 800b480:	0801d240 	.word	0x0801d240

0800b484 <safe_printf>:


void safe_printf(const char *fmt, ...)
{
 800b484:	b40f      	push	{r0, r1, r2, r3}
 800b486:	b580      	push	{r7, lr}
 800b488:	b0c2      	sub	sp, #264	@ 0x108
 800b48a:	af00      	add	r7, sp, #0
    if (uartMutex != NULL && xSemaphoreTake(uartMutex, pdMS_TO_TICKS(200)) == pdTRUE)
 800b48c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4f8 <safe_printf+0x74>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d028      	beq.n	800b4e6 <safe_printf+0x62>
 800b494:	4b18      	ldr	r3, [pc, #96]	@ (800b4f8 <safe_printf+0x74>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	21c8      	movs	r1, #200	@ 0xc8
 800b49a:	4618      	mov	r0, r3
 800b49c:	f00a f904 	bl	80156a8 <xQueueSemaphoreTake>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d11f      	bne.n	800b4e6 <safe_printf+0x62>
    {
        char buffer[256];
        va_list args;
        va_start(args, fmt);
 800b4a6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800b4aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        vsnprintf(buffer, sizeof(buffer), fmt, args);
 800b4ae:	1d38      	adds	r0, r7, #4
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800b4b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4bc:	f00e fa96 	bl	80199ec <vsniprintf>
        va_end(args);

        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800b4c0:	1d3b      	adds	r3, r7, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fc ff04 	bl	80082d0 <strlen>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	1d39      	adds	r1, r7, #4
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	480a      	ldr	r0, [pc, #40]	@ (800b4fc <safe_printf+0x78>)
 800b4d4:	f008 fc2e 	bl	8013d34 <HAL_UART_Transmit>
        xSemaphoreGive(uartMutex);
 800b4d8:	4b07      	ldr	r3, [pc, #28]	@ (800b4f8 <safe_printf+0x74>)
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	f009 fe4f 	bl	8015184 <xQueueGenericSend>
    }
}
 800b4e6:	bf00      	nop
 800b4e8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4f2:	b004      	add	sp, #16
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	20000574 	.word	0x20000574
 800b4fc:	20001478 	.word	0x20001478

0800b500 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800b500:	b590      	push	{r4, r7, lr}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	int len = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7a1b      	ldrb	r3, [r3, #8]
 800b510:	2b03      	cmp	r3, #3
 800b512:	d102      	bne.n	800b51a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800b514:	230c      	movs	r3, #12
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	e005      	b.n	800b526 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	7a1b      	ldrb	r3, [r3, #8]
 800b51e:	2b04      	cmp	r3, #4
 800b520:	d101      	bne.n	800b526 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800b522:	230a      	movs	r3, #10
 800b524:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	330c      	adds	r3, #12
 800b52a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b52e:	f000 fb5e 	bl	800bbee <MQTTstrlen>
 800b532:	4603      	mov	r3, r0
 800b534:	3302      	adds	r3, #2
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4413      	add	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7edb      	ldrb	r3, [r3, #27]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d013      	beq.n	800b56c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3324      	adds	r3, #36	@ 0x24
 800b548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b54c:	f000 fb4f 	bl	800bbee <MQTTstrlen>
 800b550:	4603      	mov	r3, r0
 800b552:	1c9c      	adds	r4, r3, #2
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3330      	adds	r3, #48	@ 0x30
 800b558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b55c:	f000 fb47 	bl	800bbee <MQTTstrlen>
 800b560:	4603      	mov	r3, r0
 800b562:	4423      	add	r3, r4
 800b564:	3302      	adds	r3, #2
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <MQTTSerialize_connectLength+0x7c>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3340      	adds	r3, #64	@ 0x40
 800b580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b584:	f000 fb33 	bl	800bbee <MQTTstrlen>
 800b588:	4603      	mov	r3, r0
 800b58a:	3302      	adds	r3, #2
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <MQTTSerialize_connectLength+0xa2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	334c      	adds	r3, #76	@ 0x4c
 800b5a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5aa:	f000 fb20 	bl	800bbee <MQTTstrlen>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd90      	pop	{r4, r7, pc}
	...

0800b5c4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08a      	sub	sp, #40	@ 0x28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800b5d8:	2300      	movs	r3, #0
 800b5da:	617b      	str	r3, [r7, #20]
	int len = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800b5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff ff8a 	bl	800b500 <MQTTSerialize_connectLength>
 800b5ec:	6238      	str	r0, [r7, #32]
 800b5ee:	6a38      	ldr	r0, [r7, #32]
 800b5f0:	f000 f9b2 	bl	800b958 <MQTTPacket_len>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	da03      	bge.n	800b604 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800b5fc:	f06f 0301 	mvn.w	r3, #1
 800b600:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800b602:	e0c2      	b.n	800b78a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800b608:	7e3b      	ldrb	r3, [r7, #24]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f362 1307 	bfi	r3, r2, #4, #4
 800b610:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800b612:	7e3a      	ldrb	r2, [r7, #24]
 800b614:	f107 031c 	add.w	r3, r7, #28
 800b618:	4611      	mov	r1, r2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fa2b 	bl	800ba76 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	6a39      	ldr	r1, [r7, #32]
 800b624:	4618      	mov	r0, r3
 800b626:	f000 f92b 	bl	800b880 <MQTTPacket_encode>
 800b62a:	4602      	mov	r2, r0
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	4413      	add	r3, r2
 800b630:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	7a1b      	ldrb	r3, [r3, #8]
 800b636:	2b04      	cmp	r3, #4
 800b638:	d10c      	bne.n	800b654 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800b63a:	f107 031c 	add.w	r3, r7, #28
 800b63e:	4955      	ldr	r1, [pc, #340]	@ (800b794 <MQTTSerialize_connect+0x1d0>)
 800b640:	4618      	mov	r0, r3
 800b642:	f000 fa56 	bl	800baf2 <writeCString>
		writeChar(&ptr, (char) 4);
 800b646:	f107 031c 	add.w	r3, r7, #28
 800b64a:	2104      	movs	r1, #4
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fa12 	bl	800ba76 <writeChar>
 800b652:	e00b      	b.n	800b66c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800b654:	f107 031c 	add.w	r3, r7, #28
 800b658:	494f      	ldr	r1, [pc, #316]	@ (800b798 <MQTTSerialize_connect+0x1d4>)
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 fa49 	bl	800baf2 <writeCString>
		writeChar(&ptr, (char) 3);
 800b660:	f107 031c 	add.w	r3, r7, #28
 800b664:	2103      	movs	r1, #3
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fa05 	bl	800ba76 <writeChar>
	}

	flags.all = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	7e9b      	ldrb	r3, [r3, #26]
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	b2da      	uxtb	r2, r3
 800b67a:	7d3b      	ldrb	r3, [r7, #20]
 800b67c:	f362 0341 	bfi	r3, r2, #1, #1
 800b680:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7edb      	ldrb	r3, [r3, #27]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bf14      	ite	ne
 800b68a:	2301      	movne	r3, #1
 800b68c:	2300      	moveq	r3, #0
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	7d3b      	ldrb	r3, [r7, #20]
 800b692:	f362 0382 	bfi	r3, r2, #2, #1
 800b696:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800b698:	7d3b      	ldrb	r3, [r7, #20]
 800b69a:	f003 0304 	and.w	r3, r3, #4
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d013      	beq.n	800b6cc <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	7d3b      	ldrb	r3, [r7, #20]
 800b6b2:	f362 03c4 	bfi	r3, r2, #3, #2
 800b6b6:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	7d3b      	ldrb	r3, [r7, #20]
 800b6c6:	f362 1345 	bfi	r3, r2, #5, #1
 800b6ca:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d103      	bne.n	800b6dc <MQTTSerialize_connect+0x118>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800b6dc:	7d3b      	ldrb	r3, [r7, #20]
 800b6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d103      	bne.n	800b6f4 <MQTTSerialize_connect+0x130>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800b6f4:	7d3b      	ldrb	r3, [r7, #20]
 800b6f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6fa:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800b6fc:	7d3a      	ldrb	r2, [r7, #20]
 800b6fe:	f107 031c 	add.w	r3, r7, #28
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f9b6 	bl	800ba76 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	8b1b      	ldrh	r3, [r3, #24]
 800b70e:	461a      	mov	r2, r3
 800b710:	f107 031c 	add.w	r3, r7, #28
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f9c2 	bl	800baa0 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f107 001c 	add.w	r0, r7, #28
 800b722:	330c      	adds	r3, #12
 800b724:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b726:	f000 fa03 	bl	800bb30 <writeMQTTString>
	if (options->willFlag)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7edb      	ldrb	r3, [r3, #27]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00d      	beq.n	800b74e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f107 001c 	add.w	r0, r7, #28
 800b738:	3324      	adds	r3, #36	@ 0x24
 800b73a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b73c:	f000 f9f8 	bl	800bb30 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f107 001c 	add.w	r0, r7, #28
 800b746:	3330      	adds	r3, #48	@ 0x30
 800b748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b74a:	f000 f9f1 	bl	800bb30 <writeMQTTString>
	}
	if (flags.bits.username)
 800b74e:	7d3b      	ldrb	r3, [r7, #20]
 800b750:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d006      	beq.n	800b768 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f107 001c 	add.w	r0, r7, #28
 800b760:	3340      	adds	r3, #64	@ 0x40
 800b762:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b764:	f000 f9e4 	bl	800bb30 <writeMQTTString>
	if (flags.bits.password)
 800b768:	7d3b      	ldrb	r3, [r7, #20]
 800b76a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d006      	beq.n	800b782 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f107 001c 	add.w	r0, r7, #28
 800b77a:	334c      	adds	r3, #76	@ 0x4c
 800b77c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b77e:	f000 f9d7 	bl	800bb30 <writeMQTTString>

	rc = ptr - buf;
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3728      	adds	r7, #40	@ 0x28
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	0801d244 	.word	0x0801d244
 800b798:	0801d24c 	.word	0x0801d24c

0800b79c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	@ 0x28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800b7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800b7be:	f107 0318 	add.w	r3, r7, #24
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f943 	bl	800ba4e <readChar>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800b7cc:	7f3b      	ldrb	r3, [r7, #28]
 800b7ce:	f023 030f 	bic.w	r3, r3, #15
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b30      	cmp	r3, #48	@ 0x30
 800b7d6:	d14b      	bne.n	800b870 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800b7d8:	7f3b      	ldrb	r3, [r7, #28]
 800b7da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800b7e6:	7f3b      	ldrb	r3, [r7, #28]
 800b7e8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800b7f4:	7f3b      	ldrb	r3, [r7, #28]
 800b7f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	f107 0214 	add.w	r2, r7, #20
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f8ee 	bl	800b9ec <MQTTPacket_decodeBuf>
 800b810:	6278      	str	r0, [r7, #36]	@ 0x24
 800b812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	4413      	add	r3, r2
 800b818:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	4413      	add	r3, r2
 800b820:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800b822:	f107 0318 	add.w	r3, r7, #24
 800b826:	6a3a      	ldr	r2, [r7, #32]
 800b828:	4619      	mov	r1, r3
 800b82a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b82c:	f000 f9ae 	bl	800bb8c <readMQTTLenString>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d01e      	beq.n	800b874 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	6a3a      	ldr	r2, [r7, #32]
 800b83a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	db19      	blt.n	800b874 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	dd08      	ble.n	800b85a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800b848:	f107 0318 	add.w	r3, r7, #24
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f8e3 	bl	800ba18 <readInt>
 800b852:	4603      	mov	r3, r0
 800b854:	b29a      	uxth	r2, r3
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	6a3a      	ldr	r2, [r7, #32]
 800b85e:	1ad2      	subs	r2, r2, r3
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b868:	601a      	str	r2, [r3, #0]
	rc = 1;
 800b86a:	2301      	movs	r3, #1
 800b86c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b86e:	e002      	b.n	800b876 <MQTTDeserialize_publish+0xda>
		goto exit;
 800b870:	bf00      	nop
 800b872:	e000      	b.n	800b876 <MQTTDeserialize_publish+0xda>
		goto exit;
 800b874:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3728      	adds	r7, #40	@ 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	425a      	negs	r2, r3
 800b892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b89a:	bf58      	it	pl
 800b89c:	4253      	negpl	r3, r2
 800b89e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	da00      	bge.n	800b8a8 <MQTTPacket_encode+0x28>
 800b8a6:	337f      	adds	r3, #127	@ 0x7f
 800b8a8:	11db      	asrs	r3, r3, #7
 800b8aa:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dd03      	ble.n	800b8ba <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800b8b2:	7afb      	ldrb	r3, [r7, #11]
 800b8b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8b8:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	60fa      	str	r2, [r7, #12]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	7afa      	ldrb	r2, [r7, #11]
 800b8c8:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	dcde      	bgt.n	800b88e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b086      	sub	sp, #24
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	617b      	str	r3, [r7, #20]
	int len = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800b8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fa:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3301      	adds	r3, #1
 800b900:	613b      	str	r3, [r7, #16]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b04      	cmp	r3, #4
 800b906:	dd03      	ble.n	800b910 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800b908:	f04f 33ff 	mov.w	r3, #4294967295
 800b90c:	60fb      	str	r3, [r7, #12]
			goto exit;
 800b90e:	e01d      	b.n	800b94c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800b910:	f107 020b 	add.w	r2, r7, #11
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2101      	movs	r1, #1
 800b918:	4610      	mov	r0, r2
 800b91a:	4798      	blx	r3
 800b91c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d112      	bne.n	800b94a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	7afb      	ldrb	r3, [r7, #11]
 800b92a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	fb01 f303 	mul.w	r3, r1, r3
 800b934:	441a      	add	r2, r3
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	01db      	lsls	r3, r3, #7
 800b93e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800b940:	7afb      	ldrb	r3, [r7, #11]
 800b942:	b25b      	sxtb	r3, r3
 800b944:	2b00      	cmp	r3, #0
 800b946:	dbd6      	blt.n	800b8f6 <MQTTPacket_decode+0x18>
exit:
 800b948:	e000      	b.n	800b94c <MQTTPacket_decode+0x6e>
			goto exit;
 800b94a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800b94c:	693b      	ldr	r3, [r7, #16]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3301      	adds	r3, #1
 800b964:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b7f      	cmp	r3, #127	@ 0x7f
 800b96a:	dc03      	bgt.n	800b974 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3301      	adds	r3, #1
 800b970:	607b      	str	r3, [r7, #4]
 800b972:	e012      	b.n	800b99a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b97a:	da03      	bge.n	800b984 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3302      	adds	r3, #2
 800b980:	607b      	str	r3, [r7, #4]
 800b982:	e00a      	b.n	800b99a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a08      	ldr	r2, [pc, #32]	@ (800b9a8 <MQTTPacket_len+0x50>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	dc03      	bgt.n	800b994 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3303      	adds	r3, #3
 800b990:	607b      	str	r3, [r7, #4]
 800b992:	e002      	b.n	800b99a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3304      	adds	r3, #4
 800b998:	607b      	str	r3, [r7, #4]
	return rem_len;
 800b99a:	687b      	ldr	r3, [r7, #4]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	001ffffe 	.word	0x001ffffe

0800b9ac <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60fb      	str	r3, [r7, #12]
 800b9ba:	e00a      	b.n	800b9d2 <bufchar+0x26>
		*c = *bufptr++;
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <bufchar+0x3c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	4909      	ldr	r1, [pc, #36]	@ (800b9e8 <bufchar+0x3c>)
 800b9c4:	600a      	str	r2, [r1, #0]
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	60fb      	str	r3, [r7, #12]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	dbf0      	blt.n	800b9bc <bufchar+0x10>
	return count;
 800b9da:	683b      	ldr	r3, [r7, #0]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20000744 	.word	0x20000744

0800b9ec <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800b9f6:	4a06      	ldr	r2, [pc, #24]	@ (800ba10 <MQTTPacket_decodeBuf+0x24>)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	4805      	ldr	r0, [pc, #20]	@ (800ba14 <MQTTPacket_decodeBuf+0x28>)
 800ba00:	f7ff ff6d 	bl	800b8de <MQTTPacket_decode>
 800ba04:	4603      	mov	r3, r0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	20000744 	.word	0x20000744
 800ba14:	0800b9ad 	.word	0x0800b9ad

0800ba18 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	3201      	adds	r2, #1
 800ba30:	7812      	ldrb	r2, [r2, #0]
 800ba32:	4413      	add	r3, r2
 800ba34:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	1c9a      	adds	r2, r3, #2
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	601a      	str	r2, [r3, #0]
	return len;
 800ba40:	68bb      	ldr	r3, [r7, #8]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b085      	sub	sp, #20
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	601a      	str	r2, [r3, #0]
	return c;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	78fa      	ldrb	r2, [r7, #3]
 800ba88:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	601a      	str	r2, [r3, #0]
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da00      	bge.n	800bab2 <writeInt+0x12>
 800bab0:	33ff      	adds	r3, #255	@ 0xff
 800bab2:	121b      	asrs	r3, r3, #8
 800bab4:	461a      	mov	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	425a      	negs	r2, r3
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	b2d2      	uxtb	r2, r2
 800bad0:	bf58      	it	pl
 800bad2:	4253      	negpl	r3, r2
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	6812      	ldr	r2, [r2, #0]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	601a      	str	r2, [r3, #0]
}
 800bae6:	bf00      	nop
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800bafc:	6838      	ldr	r0, [r7, #0]
 800bafe:	f7fc fbe7 	bl	80082d0 <strlen>
 800bb02:	4603      	mov	r3, r0
 800bb04:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ffc9 	bl	800baa0 <writeInt>
	memcpy(*pptr, string, len);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f00e f8dd 	bl	8019cd6 <memcpy>
	*pptr += len;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	441a      	add	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	601a      	str	r2, [r3, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	4638      	mov	r0, r7
 800bb3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dd12      	ble.n	800bb6a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4619      	mov	r1, r3
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7ff ffa9 	bl	800baa0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f00e f8bd 	bl	8019cd6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	441a      	add	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800bb68:	e00c      	b.n	800bb84 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	4619      	mov	r1, r3
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7ff ffbc 	bl	800baf2 <writeCString>
}
 800bb7a:	e003      	b.n	800bb84 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f7ff ff8e 	bl	800baa0 <writeInt>
}
 800bb84:	bf00      	nop
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	dd1a      	ble.n	800bbde <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800bba8:	68b8      	ldr	r0, [r7, #8]
 800bbaa:	f7ff ff35 	bl	800ba18 <readInt>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	6852      	ldr	r2, [r2, #4]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d30c      	bcc.n	800bbde <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	6852      	ldr	r2, [r2, #4]
 800bbd4:	441a      	add	r2, r3
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	601a      	str	r2, [r3, #0]
			rc = 1;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800bbe4:	697b      	ldr	r3, [r7, #20]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b086      	sub	sp, #24
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	1d3b      	adds	r3, r7, #4
 800bbf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d006      	beq.n	800bc12 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fc fb62 	bl	80082d0 <strlen>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	e001      	b.n	800bc16 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	617b      	str	r3, [r7, #20]
	return rc;
 800bc16:	697b      	ldr	r3, [r7, #20]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	4638      	mov	r0, r7
 800bc2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800bc32:	463b      	mov	r3, r7
 800bc34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc38:	f7ff ffd9 	bl	800bbee <MQTTstrlen>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	1c9a      	adds	r2, r3, #2
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	4413      	add	r3, r2
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	4413      	add	r3, r2
 800bc48:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dd02      	ble.n	800bc56 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	3302      	adds	r3, #2
 800bc54:	617b      	str	r3, [r7, #20]
	return len;
 800bc56:	697b      	ldr	r3, [r7, #20]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08a      	sub	sp, #40	@ 0x28
 800bc64:	af02      	add	r7, sp, #8
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	603b      	str	r3, [r7, #0]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800bc74:	2300      	movs	r3, #0
 800bc76:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800bc80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bc88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc8a:	6838      	ldr	r0, [r7, #0]
 800bc8c:	f7ff ffc8 	bl	800bc20 <MQTTSerialize_publishLength>
 800bc90:	61b8      	str	r0, [r7, #24]
 800bc92:	69b8      	ldr	r0, [r7, #24]
 800bc94:	f7ff fe60 	bl	800b958 <MQTTPacket_len>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	da03      	bge.n	800bca8 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800bca0:	f06f 0301 	mvn.w	r3, #1
 800bca4:	61fb      	str	r3, [r7, #28]
		goto exit;
 800bca6:	e04c      	b.n	800bd42 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800bca8:	7c3b      	ldrb	r3, [r7, #16]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	f362 1307 	bfi	r3, r2, #4, #4
 800bcb0:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800bcb2:	79fb      	ldrb	r3, [r7, #7]
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	7c3b      	ldrb	r3, [r7, #16]
 800bcbc:	f362 03c3 	bfi	r3, r2, #3, #1
 800bcc0:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	f003 0303 	and.w	r3, r3, #3
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	7c3b      	ldrb	r3, [r7, #16]
 800bccc:	f362 0342 	bfi	r3, r2, #1, #2
 800bcd0:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800bcd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	7c3b      	ldrb	r3, [r7, #16]
 800bcde:	f362 0300 	bfi	r3, r2, #0, #1
 800bce2:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800bce4:	7c3a      	ldrb	r2, [r7, #16]
 800bce6:	f107 0314 	add.w	r3, r7, #20
 800bcea:	4611      	mov	r1, r2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fec2 	bl	800ba76 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	69b9      	ldr	r1, [r7, #24]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fdc2 	bl	800b880 <MQTTPacket_encode>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	4413      	add	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800bd04:	f107 0014 	add.w	r0, r7, #20
 800bd08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bd0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd0e:	f7ff ff0f 	bl	800bb30 <writeMQTTString>

	if (qos > 0)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd06      	ble.n	800bd26 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800bd18:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800bd1a:	f107 0314 	add.w	r3, r7, #20
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff febd 	bl	800baa0 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f00d ffd2 	bl	8019cd6 <memcpy>
	ptr += payloadlen;
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd36:	4413      	add	r3, r2
 800bd38:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800bd42:	69fb      	ldr	r3, [r7, #28]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SIM800_MQTT_StateMachineHandler>:

mqtt_state_t mqttState = MQTT_STATE_INIT;
int mqttError = 0;

void SIM800_MQTT_StateMachineHandler(void)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b0ba      	sub	sp, #232	@ 0xe8
 800bd50:	af02      	add	r7, sp, #8
	char str[128] = {0};
 800bd52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bd56:	2280      	movs	r2, #128	@ 0x80
 800bd58:	2100      	movs	r1, #0
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f00d fee8 	bl	8019b30 <memset>
	static uint8_t tcp_wait_counter = 0;

	switch(mqttState)
 800bd60:	4b97      	ldr	r3, [pc, #604]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b0a      	cmp	r3, #10
 800bd66:	f200 8127 	bhi.w	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>
 800bd6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd70 <SIM800_MQTT_StateMachineHandler+0x24>)
 800bd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd70:	0800bd9d 	.word	0x0800bd9d
 800bd74:	0800bdf7 	.word	0x0800bdf7
 800bd78:	0800be2f 	.word	0x0800be2f
 800bd7c:	0800be71 	.word	0x0800be71
 800bd80:	0800be91 	.word	0x0800be91
 800bd84:	0800bea5 	.word	0x0800bea5
 800bd88:	0800beef 	.word	0x0800beef
 800bd8c:	0800bf31 	.word	0x0800bf31
 800bd90:	0800bf95 	.word	0x0800bf95
 800bd94:	0800bfb7 	.word	0x0800bfb7
 800bd98:	0800bfa3 	.word	0x0800bfa3
	{
		case MQTT_STATE_INIT:
			HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	4989      	ldr	r1, [pc, #548]	@ (800bfc4 <SIM800_MQTT_StateMachineHandler+0x278>)
 800bda0:	4889      	ldr	r0, [pc, #548]	@ (800bfc8 <SIM800_MQTT_StateMachineHandler+0x27c>)
 800bda2:	f008 f888 	bl	8013eb6 <HAL_UART_Receive_IT>
			mqttError = SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800bda6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bdaa:	4988      	ldr	r1, [pc, #544]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800bdac:	4888      	ldr	r0, [pc, #544]	@ (800bfd0 <SIM800_MQTT_StateMachineHandler+0x284>)
 800bdae:	f000 fa31 	bl	800c214 <SIM800_SendCommand>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	4a87      	ldr	r2, [pc, #540]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bdb6:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800bdb8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bdbc:	4983      	ldr	r1, [pc, #524]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800bdbe:	4886      	ldr	r0, [pc, #536]	@ (800bfd8 <SIM800_MQTT_StateMachineHandler+0x28c>)
 800bdc0:	f000 fa28 	bl	800c214 <SIM800_SendCommand>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	4b83      	ldr	r3, [pc, #524]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4413      	add	r3, r2
 800bdcc:	4a81      	ldr	r2, [pc, #516]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bdce:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800bdd0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bdd4:	4981      	ldr	r1, [pc, #516]	@ (800bfdc <SIM800_MQTT_StateMachineHandler+0x290>)
 800bdd6:	4882      	ldr	r0, [pc, #520]	@ (800bfe0 <SIM800_MQTT_StateMachineHandler+0x294>)
 800bdd8:	f000 fa1c 	bl	800c214 <SIM800_SendCommand>
 800bddc:	4602      	mov	r2, r0
 800bdde:	4b7d      	ldr	r3, [pc, #500]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4413      	add	r3, r2
 800bde4:	4a7b      	ldr	r2, [pc, #492]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bde6:	6013      	str	r3, [r2, #0]
			safe_printf("SIM800 Init Done\r\n");
 800bde8:	487e      	ldr	r0, [pc, #504]	@ (800bfe4 <SIM800_MQTT_StateMachineHandler+0x298>)
 800bdea:	f7ff fb4b 	bl	800b484 <safe_printf>
			mqttState = MQTT_STATE_CGATT_ATTACH;
 800bdee:	4b74      	ldr	r3, [pc, #464]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	701a      	strb	r2, [r3, #0]
			break;
 800bdf4:	e0e0      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_CGATT_ATTACH:
			mqttError += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 800bdf6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bdfa:	4974      	ldr	r1, [pc, #464]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800bdfc:	487a      	ldr	r0, [pc, #488]	@ (800bfe8 <SIM800_MQTT_StateMachineHandler+0x29c>)
 800bdfe:	f000 fa09 	bl	800c214 <SIM800_SendCommand>
 800be02:	4602      	mov	r2, r0
 800be04:	4b73      	ldr	r3, [pc, #460]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4413      	add	r3, r2
 800be0a:	4a72      	ldr	r2, [pc, #456]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be0c:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 800be0e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be12:	496e      	ldr	r1, [pc, #440]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800be14:	4875      	ldr	r0, [pc, #468]	@ (800bfec <SIM800_MQTT_StateMachineHandler+0x2a0>)
 800be16:	f000 f9fd 	bl	800c214 <SIM800_SendCommand>
 800be1a:	4602      	mov	r2, r0
 800be1c:	4b6d      	ldr	r3, [pc, #436]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4413      	add	r3, r2
 800be22:	4a6c      	ldr	r2, [pc, #432]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be24:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_APN_CONFIG;
 800be26:	4b66      	ldr	r3, [pc, #408]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be28:	2202      	movs	r2, #2
 800be2a:	701a      	strb	r2, [r3, #0]
			break;
 800be2c:	e0c4      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_APN_CONFIG:
			snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",
 800be2e:	4b70      	ldr	r3, [pc, #448]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800be30:	6819      	ldr	r1, [r3, #0]
 800be32:	4b6f      	ldr	r3, [pc, #444]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	4a6e      	ldr	r2, [pc, #440]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800be38:	6892      	ldr	r2, [r2, #8]
 800be3a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800be3e:	9201      	str	r2, [sp, #4]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	460b      	mov	r3, r1
 800be44:	4a6b      	ldr	r2, [pc, #428]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x2a8>)
 800be46:	2180      	movs	r1, #128	@ 0x80
 800be48:	f00d fcd8 	bl	80197fc <sniprintf>
					 SIM800.sim.apn, SIM800.sim.apn_user, SIM800.sim.apn_pass);
			mqttError += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800be4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800be50:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be54:	495d      	ldr	r1, [pc, #372]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f9dc 	bl	800c214 <SIM800_SendCommand>
 800be5c:	4602      	mov	r2, r0
 800be5e:	4b5d      	ldr	r3, [pc, #372]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4413      	add	r3, r2
 800be64:	4a5b      	ldr	r2, [pc, #364]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be66:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_CIICR_BRINGUP;
 800be68:	4b55      	ldr	r3, [pc, #340]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be6a:	2203      	movs	r2, #3
 800be6c:	701a      	strb	r2, [r3, #0]
			break;
 800be6e:	e0a3      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_CIICR_BRINGUP:
			mqttError += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 800be70:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be74:	4955      	ldr	r1, [pc, #340]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800be76:	4860      	ldr	r0, [pc, #384]	@ (800bff8 <SIM800_MQTT_StateMachineHandler+0x2ac>)
 800be78:	f000 f9cc 	bl	800c214 <SIM800_SendCommand>
 800be7c:	4602      	mov	r2, r0
 800be7e:	4b55      	ldr	r3, [pc, #340]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4413      	add	r3, r2
 800be84:	4a53      	ldr	r2, [pc, #332]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be86:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_GET_IP;
 800be88:	4b4d      	ldr	r3, [pc, #308]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be8a:	2204      	movs	r2, #4
 800be8c:	701a      	strb	r2, [r3, #0]
			break;
 800be8e:	e093      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_GET_IP:
			SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800be90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be94:	4959      	ldr	r1, [pc, #356]	@ (800bffc <SIM800_MQTT_StateMachineHandler+0x2b0>)
 800be96:	485a      	ldr	r0, [pc, #360]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x2b4>)
 800be98:	f000 f9bc 	bl	800c214 <SIM800_SendCommand>
			mqttState = MQTT_STATE_TCP_CONNECT;
 800be9c:	4b48      	ldr	r3, [pc, #288]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be9e:	2205      	movs	r2, #5
 800bea0:	701a      	strb	r2, [r3, #0]
			break;
 800bea2:	e089      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_TCP_CONNECT:
			sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 800bea4:	4b52      	ldr	r3, [pc, #328]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bea6:	68da      	ldr	r2, [r3, #12]
 800bea8:	4b51      	ldr	r3, [pc, #324]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800beaa:	8a1b      	ldrh	r3, [r3, #16]
 800beac:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800beb0:	4954      	ldr	r1, [pc, #336]	@ (800c004 <SIM800_MQTT_StateMachineHandler+0x2b8>)
 800beb2:	f00d fcd9 	bl	8019868 <siprintf>
			safe_printf("Connecting TCP: %s\r\n", str);
 800beb6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800beba:	4619      	mov	r1, r3
 800bebc:	4852      	ldr	r0, [pc, #328]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x2bc>)
 800bebe:	f7ff fae1 	bl	800b484 <safe_printf>
			if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) == 0)
 800bec2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bec6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800beca:	4940      	ldr	r1, [pc, #256]	@ (800bfcc <SIM800_MQTT_StateMachineHandler+0x280>)
 800becc:	4618      	mov	r0, r3
 800bece:	f000 f9a1 	bl	800c214 <SIM800_SendCommand>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d106      	bne.n	800bee6 <SIM800_MQTT_StateMachineHandler+0x19a>
			{
				tcp_wait_counter = 0;
 800bed8:	4b4c      	ldr	r3, [pc, #304]	@ (800c00c <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
				mqttState = MQTT_STATE_WAIT_TCP_RESPONSE;
 800bede:	4b38      	ldr	r3, [pc, #224]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bee0:	2206      	movs	r2, #6
 800bee2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				mqttState = MQTT_STATE_RECONNECT;
			}
			break;
 800bee4:	e068      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>
				mqttState = MQTT_STATE_RECONNECT;
 800bee6:	4b36      	ldr	r3, [pc, #216]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bee8:	220a      	movs	r2, #10
 800beea:	701a      	strb	r2, [r3, #0]
			break;
 800beec:	e064      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_WAIT_TCP_RESPONSE:
			// Wait until SIM800.mqttServer.connect becomes 1 from RX callback
			if (SIM800.mqttServer.connect == 1)
 800beee:	4b40      	ldr	r3, [pc, #256]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bef0:	7c9b      	ldrb	r3, [r3, #18]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d106      	bne.n	800bf04 <SIM800_MQTT_StateMachineHandler+0x1b8>
			{
				safe_printf("TCP connected to MQTT broker\r\n");
 800bef6:	4846      	ldr	r0, [pc, #280]	@ (800c010 <SIM800_MQTT_StateMachineHandler+0x2c4>)
 800bef8:	f7ff fac4 	bl	800b484 <safe_printf>
				mqttState = MQTT_STATE_MQTT_CONNECT;
 800befc:	4b30      	ldr	r3, [pc, #192]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800befe:	2207      	movs	r2, #7
 800bf00:	701a      	strb	r2, [r3, #0]
				vTaskDelay(pdMS_TO_TICKS(1000));
	#else
				HAL_Delay(1000);
	#endif
			}
			break;
 800bf02:	e059      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>
			else if (++tcp_wait_counter > 5)
 800bf04:	4b41      	ldr	r3, [pc, #260]	@ (800c00c <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	4b3f      	ldr	r3, [pc, #252]	@ (800c00c <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	4b3e      	ldr	r3, [pc, #248]	@ (800c00c <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d906      	bls.n	800bf26 <SIM800_MQTT_StateMachineHandler+0x1da>
				safe_printf("MQTT TCP connect timeout\r\n");
 800bf18:	483e      	ldr	r0, [pc, #248]	@ (800c014 <SIM800_MQTT_StateMachineHandler+0x2c8>)
 800bf1a:	f7ff fab3 	bl	800b484 <safe_printf>
				mqttState = MQTT_STATE_RECONNECT;
 800bf1e:	4b28      	ldr	r3, [pc, #160]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf20:	220a      	movs	r2, #10
 800bf22:	701a      	strb	r2, [r3, #0]
			break;
 800bf24:	e048      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>
				vTaskDelay(pdMS_TO_TICKS(1000));
 800bf26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf2a:	f009 ff99 	bl	8015e60 <vTaskDelay>
			break;
 800bf2e:	e043      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_MQTT_CONNECT:
		{
			MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 800bf30:	4a39      	ldr	r2, [pc, #228]	@ (800c018 <SIM800_MQTT_StateMachineHandler+0x2cc>)
 800bf32:	1d3b      	adds	r3, r7, #4
 800bf34:	4611      	mov	r1, r2
 800bf36:	2258      	movs	r2, #88	@ 0x58
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f00d fecc 	bl	8019cd6 <memcpy>
			datas.username.cstring = SIM800.mqttClient.username;
 800bf3e:	4b2c      	ldr	r3, [pc, #176]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	647b      	str	r3, [r7, #68]	@ 0x44
			datas.password.cstring = SIM800.mqttClient.pass;
 800bf44:	4b2a      	ldr	r3, [pc, #168]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	653b      	str	r3, [r7, #80]	@ 0x50
			datas.clientID.cstring = SIM800.mqttClient.clientID;
 800bf4a:	4b29      	ldr	r3, [pc, #164]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	613b      	str	r3, [r7, #16]
			datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800bf50:	4b27      	ldr	r3, [pc, #156]	@ (800bff0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf52:	8c1b      	ldrh	r3, [r3, #32]
 800bf54:	83bb      	strh	r3, [r7, #28]
			datas.cleansession = 1;
 800bf56:	2301      	movs	r3, #1
 800bf58:	77bb      	strb	r3, [r7, #30]

			int mqtt_len = MQTTSerialize_connect((unsigned char *)str, sizeof(str), &datas);
 800bf5a:	1d3a      	adds	r2, r7, #4
 800bf5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bf60:	2180      	movs	r1, #128	@ 0x80
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff fb2e 	bl	800b5c4 <MQTTSerialize_connect>
 800bf68:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)str, mqtt_len);
 800bf6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bf76:	4619      	mov	r1, r3
 800bf78:	4813      	ldr	r0, [pc, #76]	@ (800bfc8 <SIM800_MQTT_StateMachineHandler+0x27c>)
 800bf7a:	f007 ff66 	bl	8013e4a <HAL_UART_Transmit_IT>
			safe_printf("MQTT CONNECT sent\r\n");
 800bf7e:	4827      	ldr	r0, [pc, #156]	@ (800c01c <SIM800_MQTT_StateMachineHandler+0x2d0>)
 800bf80:	f7ff fa80 	bl	800b484 <safe_printf>

	#if FREERTOS == 1
			vTaskDelay(pdMS_TO_TICKS(2000));
 800bf84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bf88:	f009 ff6a 	bl	8015e60 <vTaskDelay>
	#else
			HAL_Delay(2000);
	#endif
			mqttState = MQTT_STATE_MQTT_CONNECTED;
 800bf8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf8e:	2208      	movs	r2, #8
 800bf90:	701a      	strb	r2, [r3, #0]
			break;
 800bf92:	e011      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>
		}

		case MQTT_STATE_MQTT_CONNECTED:
			safe_printf("MQTT connected and ready.\r\n");
 800bf94:	4822      	ldr	r0, [pc, #136]	@ (800c020 <SIM800_MQTT_StateMachineHandler+0x2d4>)
 800bf96:	f7ff fa75 	bl	800b484 <safe_printf>
			mqttState = MQTT_STATE_IDLE;
 800bf9a:	4b09      	ldr	r3, [pc, #36]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf9c:	2209      	movs	r2, #9
 800bf9e:	701a      	strb	r2, [r3, #0]
			break;
 800bfa0:	e00a      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_IDLE:
			break;

		case MQTT_STATE_RECONNECT:
			safe_printf("Reconnecting...\r\n");
 800bfa2:	4820      	ldr	r0, [pc, #128]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2d8>)
 800bfa4:	f7ff fa6e 	bl	800b484 <safe_printf>
			mqttError = 0;
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd4 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
			mqttState = MQTT_STATE_INIT;
 800bfae:	4b04      	ldr	r3, [pc, #16]	@ (800bfc0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
			break;
 800bfb4:	e000      	b.n	800bfb8 <SIM800_MQTT_StateMachineHandler+0x26c>
			break;
 800bfb6:	bf00      	nop
	}
}
 800bfb8:	bf00      	nop
 800bfba:	37e0      	adds	r7, #224	@ 0xe0
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	200012ba 	.word	0x200012ba
 800bfc4:	20000748 	.word	0x20000748
 800bfc8:	20001430 	.word	0x20001430
 800bfcc:	0801d254 	.word	0x0801d254
 800bfd0:	0801d25c 	.word	0x0801d25c
 800bfd4:	200012bc 	.word	0x200012bc
 800bfd8:	0801d264 	.word	0x0801d264
 800bfdc:	0801d26c 	.word	0x0801d26c
 800bfe0:	0801d278 	.word	0x0801d278
 800bfe4:	0801d288 	.word	0x0801d288
 800bfe8:	0801d29c 	.word	0x0801d29c
 800bfec:	0801d2ac 	.word	0x0801d2ac
 800bff0:	20000578 	.word	0x20000578
 800bff4:	0801d2bc 	.word	0x0801d2bc
 800bff8:	0801d2d8 	.word	0x0801d2d8
 800bffc:	0801d2e4 	.word	0x0801d2e4
 800c000:	0801d2e8 	.word	0x0801d2e8
 800c004:	0801d2f4 	.word	0x0801d2f4
 800c008:	0801d310 	.word	0x0801d310
 800c00c:	200012c0 	.word	0x200012c0
 800c010:	0801d328 	.word	0x0801d328
 800c014:	0801d348 	.word	0x0801d348
 800c018:	0801d3a8 	.word	0x0801d3a8
 800c01c:	0801d364 	.word	0x0801d364
 800c020:	0801d378 	.word	0x0801d378
 800c024:	0801d394 	.word	0x0801d394

0800c028 <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 800c02c:	4b56      	ldr	r3, [pc, #344]	@ (800c188 <Sim800_RxCallBack+0x160>)
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	b291      	uxth	r1, r2
 800c034:	4a54      	ldr	r2, [pc, #336]	@ (800c188 <Sim800_RxCallBack+0x160>)
 800c036:	8011      	strh	r1, [r2, #0]
 800c038:	461a      	mov	r2, r3
 800c03a:	4b54      	ldr	r3, [pc, #336]	@ (800c18c <Sim800_RxCallBack+0x164>)
 800c03c:	7819      	ldrb	r1, [r3, #0]
 800c03e:	4b54      	ldr	r3, [pc, #336]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c040:	5499      	strb	r1, [r3, r2]
    if (rx_data == 0xD0 && pingreq_sent == 1)
 800c042:	4b52      	ldr	r3, [pc, #328]	@ (800c18c <Sim800_RxCallBack+0x164>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2bd0      	cmp	r3, #208	@ 0xd0
 800c048:	d106      	bne.n	800c058 <Sim800_RxCallBack+0x30>
 800c04a:	4b52      	ldr	r3, [pc, #328]	@ (800c194 <Sim800_RxCallBack+0x16c>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d102      	bne.n	800c058 <Sim800_RxCallBack+0x30>
    {
        pingreq_sent = 0;
 800c052:	4b50      	ldr	r3, [pc, #320]	@ (800c194 <Sim800_RxCallBack+0x16c>)
 800c054:	2200      	movs	r2, #0
 800c056:	701a      	strb	r2, [r3, #0]
    }

    if (SIM800.mqttServer.connect == 0)
 800c058:	4b4f      	ldr	r3, [pc, #316]	@ (800c198 <Sim800_RxCallBack+0x170>)
 800c05a:	7c9b      	ldrb	r3, [r3, #18]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d135      	bne.n	800c0cc <Sim800_RxCallBack+0xa4>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 800c060:	494e      	ldr	r1, [pc, #312]	@ (800c19c <Sim800_RxCallBack+0x174>)
 800c062:	484b      	ldr	r0, [pc, #300]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c064:	f00d fd91 	bl	8019b8a <strstr>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d007      	beq.n	800c07e <Sim800_RxCallBack+0x56>
 800c06e:	4b46      	ldr	r3, [pc, #280]	@ (800c188 <Sim800_RxCallBack+0x160>)
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	2b02      	cmp	r3, #2
 800c074:	d103      	bne.n	800c07e <Sim800_RxCallBack+0x56>
        {
            rx_index = 0;
 800c076:	4b44      	ldr	r3, [pc, #272]	@ (800c188 <Sim800_RxCallBack+0x160>)
 800c078:	2200      	movs	r2, #0
 800c07a:	801a      	strh	r2, [r3, #0]
 800c07c:	e026      	b.n	800c0cc <Sim800_RxCallBack+0xa4>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 800c07e:	4947      	ldr	r1, [pc, #284]	@ (800c19c <Sim800_RxCallBack+0x174>)
 800c080:	4843      	ldr	r0, [pc, #268]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c082:	f00d fd82 	bl	8019b8a <strstr>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d01f      	beq.n	800c0cc <Sim800_RxCallBack+0xa4>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 800c08c:	4a44      	ldr	r2, [pc, #272]	@ (800c1a0 <Sim800_RxCallBack+0x178>)
 800c08e:	4b40      	ldr	r3, [pc, #256]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c090:	4610      	mov	r0, r2
 800c092:	4619      	mov	r1, r3
 800c094:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800c098:	461a      	mov	r2, r3
 800c09a:	f00d fe1c 	bl	8019cd6 <memcpy>
            clearRxBuffer();
 800c09e:	f000 f891 	bl	800c1c4 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 800c0a2:	4940      	ldr	r1, [pc, #256]	@ (800c1a4 <Sim800_RxCallBack+0x17c>)
 800c0a4:	483e      	ldr	r0, [pc, #248]	@ (800c1a0 <Sim800_RxCallBack+0x178>)
 800c0a6:	f00d fd70 	bl	8019b8a <strstr>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <Sim800_RxCallBack+0x90>
            {
                SIM800.mqttServer.connect = 0;
 800c0b0:	4b39      	ldr	r3, [pc, #228]	@ (800c198 <Sim800_RxCallBack+0x170>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	749a      	strb	r2, [r3, #18]
 800c0b6:	e009      	b.n	800c0cc <Sim800_RxCallBack+0xa4>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 800c0b8:	493b      	ldr	r1, [pc, #236]	@ (800c1a8 <Sim800_RxCallBack+0x180>)
 800c0ba:	4839      	ldr	r0, [pc, #228]	@ (800c1a0 <Sim800_RxCallBack+0x178>)
 800c0bc:	f00d fd65 	bl	8019b8a <strstr>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d002      	beq.n	800c0cc <Sim800_RxCallBack+0xa4>
            {
                SIM800.mqttServer.connect = 1;
 800c0c6:	4b34      	ldr	r3, [pc, #208]	@ (800c198 <Sim800_RxCallBack+0x170>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 800c0cc:	4937      	ldr	r1, [pc, #220]	@ (800c1ac <Sim800_RxCallBack+0x184>)
 800c0ce:	4830      	ldr	r0, [pc, #192]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c0d0:	f00d fd5b 	bl	8019b8a <strstr>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10d      	bne.n	800c0f6 <Sim800_RxCallBack+0xce>
 800c0da:	4935      	ldr	r1, [pc, #212]	@ (800c1b0 <Sim800_RxCallBack+0x188>)
 800c0dc:	482c      	ldr	r0, [pc, #176]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c0de:	f00d fd54 	bl	8019b8a <strstr>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d106      	bne.n	800c0f6 <Sim800_RxCallBack+0xce>
 800c0e8:	4932      	ldr	r1, [pc, #200]	@ (800c1b4 <Sim800_RxCallBack+0x18c>)
 800c0ea:	4829      	ldr	r0, [pc, #164]	@ (800c190 <Sim800_RxCallBack+0x168>)
 800c0ec:	f00d fd4d 	bl	8019b8a <strstr>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <Sim800_RxCallBack+0xd4>
    {
        SIM800.mqttServer.connect = 0;
 800c0f6:	4b28      	ldr	r3, [pc, #160]	@ (800c198 <Sim800_RxCallBack+0x170>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 800c0fc:	4b26      	ldr	r3, [pc, #152]	@ (800c198 <Sim800_RxCallBack+0x170>)
 800c0fe:	7c9b      	ldrb	r3, [r3, #18]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d106      	bne.n	800c112 <Sim800_RxCallBack+0xea>
 800c104:	4b21      	ldr	r3, [pc, #132]	@ (800c18c <Sim800_RxCallBack+0x164>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b30      	cmp	r3, #48	@ 0x30
 800c10a:	d102      	bne.n	800c112 <Sim800_RxCallBack+0xea>
    {
        mqtt_receive = 1;
 800c10c:	4b2a      	ldr	r3, [pc, #168]	@ (800c1b8 <Sim800_RxCallBack+0x190>)
 800c10e:	2201      	movs	r2, #1
 800c110:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 800c112:	4b29      	ldr	r3, [pc, #164]	@ (800c1b8 <Sim800_RxCallBack+0x190>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d124      	bne.n	800c164 <Sim800_RxCallBack+0x13c>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 800c11a:	4b28      	ldr	r3, [pc, #160]	@ (800c1bc <Sim800_RxCallBack+0x194>)
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	b291      	uxth	r1, r2
 800c122:	4a26      	ldr	r2, [pc, #152]	@ (800c1bc <Sim800_RxCallBack+0x194>)
 800c124:	8011      	strh	r1, [r2, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	4b18      	ldr	r3, [pc, #96]	@ (800c18c <Sim800_RxCallBack+0x164>)
 800c12a:	7819      	ldrb	r1, [r3, #0]
 800c12c:	4b1c      	ldr	r3, [pc, #112]	@ (800c1a0 <Sim800_RxCallBack+0x178>)
 800c12e:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 800c130:	4b22      	ldr	r3, [pc, #136]	@ (800c1bc <Sim800_RxCallBack+0x194>)
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d90d      	bls.n	800c154 <Sim800_RxCallBack+0x12c>
 800c138:	4b20      	ldr	r3, [pc, #128]	@ (800c1bc <Sim800_RxCallBack+0x194>)
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	4a18      	ldr	r2, [pc, #96]	@ (800c1a0 <Sim800_RxCallBack+0x178>)
 800c140:	7852      	ldrb	r2, [r2, #1]
 800c142:	4293      	cmp	r3, r2
 800c144:	dd06      	ble.n	800c154 <Sim800_RxCallBack+0x12c>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 800c146:	4816      	ldr	r0, [pc, #88]	@ (800c1a0 <Sim800_RxCallBack+0x178>)
 800c148:	f000 f95c 	bl	800c404 <MQTT_Receive>
            clearRxBuffer();
 800c14c:	f000 f83a 	bl	800c1c4 <clearRxBuffer>
            clearMqttBuffer();
 800c150:	f000 f84a 	bl	800c1e8 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 800c154:	4b19      	ldr	r3, [pc, #100]	@ (800c1bc <Sim800_RxCallBack+0x194>)
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d901      	bls.n	800c164 <Sim800_RxCallBack+0x13c>
        {
            clearMqttBuffer();
 800c160:	f000 f842 	bl	800c1e8 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 800c164:	4b08      	ldr	r3, [pc, #32]	@ (800c188 <Sim800_RxCallBack+0x160>)
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d903      	bls.n	800c178 <Sim800_RxCallBack+0x150>
    {
        clearRxBuffer();
 800c170:	f000 f828 	bl	800c1c4 <clearRxBuffer>
        clearMqttBuffer();
 800c174:	f000 f838 	bl	800c1e8 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800c178:	2201      	movs	r2, #1
 800c17a:	4904      	ldr	r1, [pc, #16]	@ (800c18c <Sim800_RxCallBack+0x164>)
 800c17c:	4810      	ldr	r0, [pc, #64]	@ (800c1c0 <Sim800_RxCallBack+0x198>)
 800c17e:	f007 fe9a 	bl	8013eb6 <HAL_UART_Receive_IT>
}
 800c182:	bf00      	nop
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20000d00 	.word	0x20000d00
 800c18c:	20000748 	.word	0x20000748
 800c190:	2000074c 	.word	0x2000074c
 800c194:	200003d0 	.word	0x200003d0
 800c198:	20000578 	.word	0x20000578
 800c19c:	0801d400 	.word	0x0801d400
 800c1a0:	20000d04 	.word	0x20000d04
 800c1a4:	0801d404 	.word	0x0801d404
 800c1a8:	0801d414 	.word	0x0801d414
 800c1ac:	0801d420 	.word	0x0801d420
 800c1b0:	0801d42c 	.word	0x0801d42c
 800c1b4:	0801d434 	.word	0x0801d434
 800c1b8:	20000d02 	.word	0x20000d02
 800c1bc:	200012b8 	.word	0x200012b8
 800c1c0:	20001430 	.word	0x20001430

0800c1c4 <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	af00      	add	r7, sp, #0
    rx_index = 0;
 800c1c8:	4b05      	ldr	r3, [pc, #20]	@ (800c1e0 <clearRxBuffer+0x1c>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800c1ce:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	4803      	ldr	r0, [pc, #12]	@ (800c1e4 <clearRxBuffer+0x20>)
 800c1d6:	f00d fcab 	bl	8019b30 <memset>
}
 800c1da:	bf00      	nop
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000d00 	.word	0x20000d00
 800c1e4:	2000074c 	.word	0x2000074c

0800c1e8 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 800c1ec:	4b06      	ldr	r3, [pc, #24]	@ (800c208 <clearMqttBuffer+0x20>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 800c1f2:	4b06      	ldr	r3, [pc, #24]	@ (800c20c <clearMqttBuffer+0x24>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 800c1f8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	4804      	ldr	r0, [pc, #16]	@ (800c210 <clearMqttBuffer+0x28>)
 800c200:	f00d fc96 	bl	8019b30 <memset>
}
 800c204:	bf00      	nop
 800c206:	bd80      	pop	{r7, pc}
 800c208:	20000d02 	.word	0x20000d02
 800c20c:	200012b8 	.word	0x200012b8
 800c210:	20000d04 	.word	0x20000d04

0800c214 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7fc f854 	bl	80082d0 <strlen>
 800c228:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	461a      	mov	r2, r3
 800c22e:	68f9      	ldr	r1, [r7, #12]
 800c230:	4810      	ldr	r0, [pc, #64]	@ (800c274 <SIM800_SendCommand+0x60>)
 800c232:	f007 fe0a 	bl	8013e4a <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(delay));
 800c236:	88fb      	ldrh	r3, [r7, #6]
 800c238:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c23c:	fb02 f303 	mul.w	r3, r2, r3
 800c240:	4a0d      	ldr	r2, [pc, #52]	@ (800c278 <SIM800_SendCommand+0x64>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	4618      	mov	r0, r3
 800c24a:	f009 fe09 	bl	8015e60 <vTaskDelay>
#else
    HAL_Delay(delay);
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 800c24e:	68b9      	ldr	r1, [r7, #8]
 800c250:	480a      	ldr	r0, [pc, #40]	@ (800c27c <SIM800_SendCommand+0x68>)
 800c252:	f00d fc9a 	bl	8019b8a <strstr>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <SIM800_SendCommand+0x50>
    {
        clearRxBuffer();
 800c25c:	f7ff ffb2 	bl	800c1c4 <clearRxBuffer>
        return 0;
 800c260:	2300      	movs	r3, #0
 800c262:	e002      	b.n	800c26a <SIM800_SendCommand+0x56>
    }
    clearRxBuffer();
 800c264:	f7ff ffae 	bl	800c1c4 <clearRxBuffer>
    return 1;
 800c268:	2301      	movs	r3, #1
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20001430 	.word	0x20001430
 800c278:	10624dd3 	.word	0x10624dd3
 800c27c:	20000d04 	.word	0x20000d04

0800c280 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 800c280:	b590      	push	{r4, r7, lr}
 800c282:	b0cf      	sub	sp, #316	@ 0x13c
 800c284:	af08      	add	r7, sp, #32
 800c286:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c28a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c28e:	6018      	str	r0, [r3, #0]
 800c290:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c294:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c298:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800c29a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	f00d fc40 	bl	8019b30 <memset>

    MQTTString topicString = MQTTString_initializer;
 800c2b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	605a      	str	r2, [r3, #4]
 800c2c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800c2d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2dc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800c2e0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800c2e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	f7fb ffed 	bl	80082d0 <strlen>
 800c2f6:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800c2f8:	f107 0414 	add.w	r4, r7, #20
 800c2fc:	9306      	str	r3, [sp, #24]
 800c2fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c302:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	9305      	str	r3, [sp, #20]
 800c30a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c30e:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800c312:	ab02      	add	r3, sp, #8
 800c314:	ca07      	ldmia	r2, {r0, r1, r2}
 800c316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c31a:	2300      	movs	r3, #0
 800c31c:	9301      	str	r3, [sp, #4]
 800c31e:	2300      	movs	r3, #0
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	2300      	movs	r3, #0
 800c324:	2200      	movs	r2, #0
 800c326:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c32a:	4620      	mov	r0, r4
 800c32c:	f7ff fc98 	bl	800bc60 <MQTTSerialize_publish>
 800c330:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800c334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c338:	b29a      	uxth	r2, r3
 800c33a:	f107 0314 	add.w	r3, r7, #20
 800c33e:	4619      	mov	r1, r3
 800c340:	4805      	ldr	r0, [pc, #20]	@ (800c358 <MQTT_Pub+0xd8>)
 800c342:	f007 fd82 	bl	8013e4a <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 800c346:	2064      	movs	r0, #100	@ 0x64
 800c348:	f009 fd8a 	bl	8015e60 <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 800c34c:	bf00      	nop
 800c34e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}
 800c356:	bf00      	nop
 800c358:	20001430 	.word	0x20001430

0800c35c <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b0ca      	sub	sp, #296	@ 0x128
 800c360:	af04      	add	r7, sp, #16
 800c362:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c366:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c36a:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 800c36c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c374:	4618      	mov	r0, r3
 800c376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c37a:	461a      	mov	r2, r3
 800c37c:	2100      	movs	r1, #0
 800c37e:	f00d fbd7 	bl	8019b30 <memset>

    MQTTString topicString = MQTTString_initializer;
 800c382:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c386:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c392:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c396:	2200      	movs	r2, #0
 800c398:	605a      	str	r2, [r3, #4]
 800c39a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c39e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800c3a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c3aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c3ae:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800c3b2:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800c3b6:	6812      	ldr	r2, [r2, #0]
 800c3b8:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800c3ba:	f107 0014 	add.w	r0, r7, #20
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9302      	str	r3, [sp, #8]
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c3d4:	f000 f889 	bl	800c4ea <MQTTSerialize_subscribe>
 800c3d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800c3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	f107 0314 	add.w	r3, r7, #20
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4805      	ldr	r0, [pc, #20]	@ (800c400 <MQTT_Sub+0xa4>)
 800c3ea:	f007 fd2e 	bl	8013e4a <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 800c3ee:	2064      	movs	r0, #100	@ 0x64
 800c3f0:	f009 fd36 	bl	8015e60 <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 800c3f4:	bf00      	nop
 800c3f6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20001430 	.word	0x20001430

0800c404 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08c      	sub	sp, #48	@ 0x30
 800c408:	af06      	add	r7, sp, #24
 800c40a:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800c40c:	2280      	movs	r2, #128	@ 0x80
 800c40e:	2100      	movs	r1, #0
 800c410:	481a      	ldr	r0, [pc, #104]	@ (800c47c <MQTT_Receive+0x78>)
 800c412:	f00d fb8d 	bl	8019b30 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 800c416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c41a:	2100      	movs	r1, #0
 800c41c:	4818      	ldr	r0, [pc, #96]	@ (800c480 <MQTT_Receive+0x7c>)
 800c41e:	f00d fb87 	bl	8019b30 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 800c422:	2304      	movs	r3, #4
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	9303      	str	r3, [sp, #12]
 800c42a:	4b16      	ldr	r3, [pc, #88]	@ (800c484 <MQTT_Receive+0x80>)
 800c42c:	9302      	str	r3, [sp, #8]
 800c42e:	f107 0308 	add.w	r3, r7, #8
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	f107 030c 	add.w	r3, r7, #12
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	4b13      	ldr	r3, [pc, #76]	@ (800c488 <MQTT_Receive+0x84>)
 800c43c:	4a13      	ldr	r2, [pc, #76]	@ (800c48c <MQTT_Receive+0x88>)
 800c43e:	4914      	ldr	r1, [pc, #80]	@ (800c490 <MQTT_Receive+0x8c>)
 800c440:	4814      	ldr	r0, [pc, #80]	@ (800c494 <MQTT_Receive+0x90>)
 800c442:	f7ff f9ab 	bl	800b79c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4619      	mov	r1, r3
 800c44c:	480b      	ldr	r0, [pc, #44]	@ (800c47c <MQTT_Receive+0x78>)
 800c44e:	f00d fc42 	bl	8019cd6 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	4a10      	ldr	r2, [pc, #64]	@ (800c498 <MQTT_Receive+0x94>)
 800c456:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	4a0e      	ldr	r2, [pc, #56]	@ (800c498 <MQTT_Receive+0x94>)
 800c45e:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 800c462:	4619      	mov	r1, r3
 800c464:	4806      	ldr	r0, [pc, #24]	@ (800c480 <MQTT_Receive+0x7c>)
 800c466:	f00d fc36 	bl	8019cd6 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 800c46a:	4b0b      	ldr	r3, [pc, #44]	@ (800c498 <MQTT_Receive+0x94>)
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c472:	bf00      	nop
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	200006ac 	.word	0x200006ac
 800c480:	200005a8 	.word	0x200005a8
 800c484:	200006a8 	.word	0x200006a8
 800c488:	200005a6 	.word	0x200005a6
 800c48c:	200005a4 	.word	0x200005a4
 800c490:	200005a0 	.word	0x200005a0
 800c494:	2000059d 	.word	0x2000059d
 800c498:	20000578 	.word	0x20000578

0800c49c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
 800c4ae:	e013      	b.n	800c4d8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	4413      	add	r3, r2
 800c4c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4c4:	f7ff fb93 	bl	800bbee <MQTTstrlen>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	3303      	adds	r3, #3
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	dbe7      	blt.n	800c4b0 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800c4e0:	68bb      	ldr	r3, [r7, #8]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b08a      	sub	sp, #40	@ 0x28
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	71fb      	strb	r3, [r7, #7]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800c504:	2300      	movs	r3, #0
 800c506:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800c514:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c516:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c518:	f7ff ffc0 	bl	800c49c <MQTTSerialize_subscribeLength>
 800c51c:	61f8      	str	r0, [r7, #28]
 800c51e:	69f8      	ldr	r0, [r7, #28]
 800c520:	f7ff fa1a 	bl	800b958 <MQTTPacket_len>
 800c524:	4602      	mov	r2, r0
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4293      	cmp	r3, r2
 800c52a:	da03      	bge.n	800c534 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c52c:	f06f 0301 	mvn.w	r3, #1
 800c530:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800c532:	e051      	b.n	800c5d8 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800c538:	7d3b      	ldrb	r3, [r7, #20]
 800c53a:	2208      	movs	r2, #8
 800c53c:	f362 1307 	bfi	r3, r2, #4, #4
 800c540:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	7d3b      	ldrb	r3, [r7, #20]
 800c54c:	f362 03c3 	bfi	r3, r2, #3, #1
 800c550:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800c552:	7d3b      	ldrb	r3, [r7, #20]
 800c554:	2201      	movs	r2, #1
 800c556:	f362 0342 	bfi	r3, r2, #1, #2
 800c55a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800c55c:	7d3a      	ldrb	r2, [r7, #20]
 800c55e:	f107 0318 	add.w	r3, r7, #24
 800c562:	4611      	mov	r1, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f7ff fa86 	bl	800ba76 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	69f9      	ldr	r1, [r7, #28]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff f986 	bl	800b880 <MQTTPacket_encode>
 800c574:	4602      	mov	r2, r0
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	4413      	add	r3, r2
 800c57a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800c57c:	88ba      	ldrh	r2, [r7, #4]
 800c57e:	f107 0318 	add.w	r3, r7, #24
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff fa8b 	bl	800baa0 <writeInt>

	for (i = 0; i < count; ++i)
 800c58a:	2300      	movs	r3, #0
 800c58c:	623b      	str	r3, [r7, #32]
 800c58e:	e01b      	b.n	800c5c8 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800c590:	6a3a      	ldr	r2, [r7, #32]
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	461a      	mov	r2, r3
 800c59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c59e:	4413      	add	r3, r2
 800c5a0:	f107 0018 	add.w	r0, r7, #24
 800c5a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5a6:	f7ff fac3 	bl	800bb30 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5b0:	4413      	add	r3, r2
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	f107 0318 	add.w	r3, r7, #24
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fa5a 	bl	800ba76 <writeChar>
	for (i = 0; i < count; ++i)
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	623b      	str	r3, [r7, #32]
 800c5c8:	6a3a      	ldr	r2, [r7, #32]
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	dbdf      	blt.n	800c590 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3728      	adds	r7, #40	@ 0x28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <spiRead>:
#define LOW  0
#define HIGH 1


uint8_t spiRead(uint8_t reg)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	uint8_t TxDt;

	TxDt = (reg & ~RH_RF69_SPI_WRITE_MASK);
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	2102      	movs	r1, #2
 800c5fc:	480e      	ldr	r0, [pc, #56]	@ (800c638 <spiRead+0x54>)
 800c5fe:	f005 f827 	bl	8011650 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &TxDt,sizeof(TxDt), 1000);                   // Send the address with the write mask off
 800c602:	f107 010e 	add.w	r1, r7, #14
 800c606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c60a:	2201      	movs	r2, #1
 800c60c:	480b      	ldr	r0, [pc, #44]	@ (800c63c <spiRead+0x58>)
 800c60e:	f005 ff20 	bl	8012452 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, sizeof(val), 1000);                     // The written value is ignored, reg value is read
 800c612:	f107 010f 	add.w	r1, r7, #15
 800c616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c61a:	2201      	movs	r2, #1
 800c61c:	4807      	ldr	r0, [pc, #28]	@ (800c63c <spiRead+0x58>)
 800c61e:	f006 f85c 	bl	80126da <HAL_SPI_Receive>
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
 800c622:	2201      	movs	r2, #1
 800c624:	2102      	movs	r1, #2
 800c626:	4804      	ldr	r0, [pc, #16]	@ (800c638 <spiRead+0x54>)
 800c628:	f005 f812 	bl	8011650 <HAL_GPIO_WritePin>
	return val;
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	40020400 	.word	0x40020400
 800c63c:	200013d8 	.word	0x200013d8

0800c640 <spiWrite>:

uint8_t spiWrite(uint8_t reg, uint8_t val)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af02      	add	r7, sp, #8
 800c646:	4603      	mov	r3, r0
 800c648:	460a      	mov	r2, r1
 800c64a:	71fb      	strb	r3, [r7, #7]
 800c64c:	4613      	mov	r3, r2
 800c64e:	71bb      	strb	r3, [r7, #6]
	uint8_t TxDt;
	uint8_t status = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	73bb      	strb	r3, [r7, #14]

	TxDt = (reg | RH_RF69_SPI_WRITE_MASK);
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 800c65e:	2200      	movs	r2, #0
 800c660:	2102      	movs	r1, #2
 800c662:	480f      	ldr	r0, [pc, #60]	@ (800c6a0 <spiWrite+0x60>)
 800c664:	f004 fff4 	bl	8011650 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &TxDt, &status, sizeof(TxDt), 1000); // Send the address with the write mask on
 800c668:	f107 020e 	add.w	r2, r7, #14
 800c66c:	f107 010f 	add.w	r1, r7, #15
 800c670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	2301      	movs	r3, #1
 800c678:	480a      	ldr	r0, [pc, #40]	@ (800c6a4 <spiWrite+0x64>)
 800c67a:	f006 f947 	bl	801290c <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi3, &val, sizeof(val), 1000);                   // New value follows
 800c67e:	1db9      	adds	r1, r7, #6
 800c680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c684:	2201      	movs	r2, #1
 800c686:	4807      	ldr	r0, [pc, #28]	@ (800c6a4 <spiWrite+0x64>)
 800c688:	f005 fee3 	bl	8012452 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
 800c68c:	2201      	movs	r2, #1
 800c68e:	2102      	movs	r1, #2
 800c690:	4803      	ldr	r0, [pc, #12]	@ (800c6a0 <spiWrite+0x60>)
 800c692:	f004 ffdd 	bl	8011650 <HAL_GPIO_WritePin>
	return status;
 800c696:	7bbb      	ldrb	r3, [r7, #14]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	40020400 	.word	0x40020400
 800c6a4:	200013d8 	.word	0x200013d8

0800c6a8 <spiBurstWrite>:
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
	return status;
}

uint8_t spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	6039      	str	r1, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	71bb      	strb	r3, [r7, #6]
	uint8_t TxDt;
	uint8_t status = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	73bb      	strb	r3, [r7, #14]
	uint8_t TxDt1;
	TxDt = (reg | RH_RF69_SPI_WRITE_MASK);
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	4815      	ldr	r0, [pc, #84]	@ (800c720 <spiBurstWrite+0x78>)
 800c6cc:	f004 ffc0 	bl	8011650 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &TxDt, &status, sizeof(TxDt), 1000);  // Send the start address with the write mask on
 800c6d0:	f107 020e 	add.w	r2, r7, #14
 800c6d4:	f107 010f 	add.w	r1, r7, #15
 800c6d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4810      	ldr	r0, [pc, #64]	@ (800c724 <spiBurstWrite+0x7c>)
 800c6e2:	f006 f913 	bl	801290c <HAL_SPI_TransmitReceive>
	while (len--)
 800c6e6:	e00c      	b.n	800c702 <spiBurstWrite+0x5a>
	{
		TxDt1 = *src++;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	603a      	str	r2, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi3, &TxDt1, sizeof(TxDt1), 1000);            // New value follows
 800c6f2:	f107 010d 	add.w	r1, r7, #13
 800c6f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	4809      	ldr	r0, [pc, #36]	@ (800c724 <spiBurstWrite+0x7c>)
 800c6fe:	f005 fea8 	bl	8012452 <HAL_SPI_Transmit>
	while (len--)
 800c702:	79bb      	ldrb	r3, [r7, #6]
 800c704:	1e5a      	subs	r2, r3, #1
 800c706:	71ba      	strb	r2, [r7, #6]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1ed      	bne.n	800c6e8 <spiBurstWrite+0x40>
	}
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
 800c70c:	2201      	movs	r2, #1
 800c70e:	2102      	movs	r1, #2
 800c710:	4803      	ldr	r0, [pc, #12]	@ (800c720 <spiBurstWrite+0x78>)
 800c712:	f004 ff9d 	bl	8011650 <HAL_GPIO_WritePin>
	return status;
 800c716:	7bbb      	ldrb	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	40020400 	.word	0x40020400
 800c724:	200013d8 	.word	0x200013d8

0800c728 <RF69_init>:
{
	_idleMode = idleMode;
}

bool RF69_init()
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RF_RST_GPIO_Port,RF_RST_Pin,GPIO_PIN_SET);
 800c72e:	2201      	movs	r2, #1
 800c730:	2104      	movs	r1, #4
 800c732:	482c      	ldr	r0, [pc, #176]	@ (800c7e4 <RF69_init+0xbc>)
 800c734:	f004 ff8c 	bl	8011650 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c738:	2064      	movs	r0, #100	@ 0x64
 800c73a:	f004 fb1f 	bl	8010d7c <HAL_Delay>
	HAL_GPIO_WritePin(RF_RST_GPIO_Port,RF_RST_Pin,GPIO_PIN_RESET);
 800c73e:	2200      	movs	r2, #0
 800c740:	2104      	movs	r1, #4
 800c742:	4828      	ldr	r0, [pc, #160]	@ (800c7e4 <RF69_init+0xbc>)
 800c744:	f004 ff84 	bl	8011650 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c748:	2064      	movs	r0, #100	@ 0x64
 800c74a:	f004 fb17 	bl	8010d7c <HAL_Delay>

	_idleMode = RH_RF69_OPMODE_MODE_STDBY;
 800c74e:	4b26      	ldr	r3, [pc, #152]	@ (800c7e8 <RF69_init+0xc0>)
 800c750:	2204      	movs	r2, #4
 800c752:	701a      	strb	r2, [r3, #0]

	// Get the device type and check it
	_deviceType = spiRead(RH_RF69_REG_10_VERSION);
 800c754:	2010      	movs	r0, #16
 800c756:	f7ff ff45 	bl	800c5e4 <spiRead>
 800c75a:	4603      	mov	r3, r0
 800c75c:	461a      	mov	r2, r3
 800c75e:	4b23      	ldr	r3, [pc, #140]	@ (800c7ec <RF69_init+0xc4>)
 800c760:	701a      	strb	r2, [r3, #0]
	safe_printf("_deviceType=%x\n", _deviceType);
 800c762:	4b22      	ldr	r3, [pc, #136]	@ (800c7ec <RF69_init+0xc4>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	4619      	mov	r1, r3
 800c768:	4821      	ldr	r0, [pc, #132]	@ (800c7f0 <RF69_init+0xc8>)
 800c76a:	f7fe fe8b 	bl	800b484 <safe_printf>

	if (_deviceType != 0x24)
 800c76e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7ec <RF69_init+0xc4>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b24      	cmp	r3, #36	@ 0x24
 800c774:	d001      	beq.n	800c77a <RF69_init+0x52>
		return false;
 800c776:	2300      	movs	r3, #0
 800c778:	e02f      	b.n	800c7da <RF69_init+0xb2>

	setModeIdle();
 800c77a:	f000 f973 	bl	800ca64 <setModeIdle>
	// 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
	// 0 to 60 bytes data
	// RSSI Threshold -114dBm
	// We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
	// of the RH_RF69 payload
	spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thresh 15 is default
 800c77e:	218f      	movs	r1, #143	@ 0x8f
 800c780:	203c      	movs	r0, #60	@ 0x3c
 800c782:	f7ff ff5d 	bl	800c640 <spiWrite>
	// SYNCCONFIG is default. SyncSize is set later by setSyncWords()
	//	  spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
	// PAYLOADLENGTH is default
	//	  spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
	// PACKETCONFIG 2 is default
	spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
 800c786:	2130      	movs	r1, #48	@ 0x30
 800c788:	206f      	movs	r0, #111	@ 0x6f
 800c78a:	f7ff ff59 	bl	800c640 <spiWrite>
	// If high power boost set previously, disable it
	spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 800c78e:	2155      	movs	r1, #85	@ 0x55
 800c790:	205a      	movs	r0, #90	@ 0x5a
 800c792:	f7ff ff55 	bl	800c640 <spiWrite>
	spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 800c796:	2170      	movs	r1, #112	@ 0x70
 800c798:	205c      	movs	r0, #92	@ 0x5c
 800c79a:	f7ff ff51 	bl	800c640 <spiWrite>

	// The following can be changed later by the user if necessary.
	// Set up default configuration
	uint8_t syncwords[] = { 0x2d, 0xd4 };
 800c79e:	f24d 432d 	movw	r3, #54317	@ 0xd42d
 800c7a2:	80bb      	strh	r3, [r7, #4]

	setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
 800c7a4:	1d3b      	adds	r3, r7, #4
 800c7a6:	2102      	movs	r1, #2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fa81 	bl	800ccb0 <setSyncWords>
	// Reasonably fast and reliable default speed and modulation
	setModemConfig(GFSK_Rb250Fd250);
 800c7ae:	2012      	movs	r0, #18
 800c7b0:	f000 fa46 	bl	800cc40 <setModemConfig>

	// 3 would be sufficient, but this is the same as RF22's
	setPreambleLength(4);
 800c7b4:	2004      	movs	r0, #4
 800c7b6:	f000 fa63 	bl	800cc80 <setPreambleLength>
	// An innocuous ISM frequency, same as RF22's
	setFrequency(434.0);
 800c7ba:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 800c7f4 <RF69_init+0xcc>
 800c7be:	f000 f8cf 	bl	800c960 <setFrequency>
	// No encryption
	setEncryptionKey(NULL);
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	f000 fab6 	bl	800cd34 <setEncryptionKey>
	// +13dBm, same as power-on default
	setTxPower(13, RH_RF69_DEFAULT_HIGHPOWER);
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	200d      	movs	r0, #13
 800c7cc:	f000 f9a4 	bl	800cb18 <setTxPower>

	spiWrite(RH_RF69_REG_25_DIOMAPPING1, RH_RF69_DIOMAPPING1_DIO0MAPPING_00 );
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	2025      	movs	r0, #37	@ 0x25
 800c7d4:	f7ff ff34 	bl	800c640 <spiWrite>

	return true;
 800c7d8:	2301      	movs	r3, #1
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	40020400 	.word	0x40020400
 800c7e8:	200012c1 	.word	0x200012c1
 800c7ec:	200012c2 	.word	0x200012c2
 800c7f0:	0801d448 	.word	0x0801d448
 800c7f4:	43d90000 	.word	0x43d90000

0800c7f8 <readFifo>:
// Low level function reads the FIFO and checks the address
// Caution: since we put our headers in what the RH_RF69 considers to be the payload, if encryption is enabled
// we have to suffer the cost of decryption before we can determine whether the address is acceptable.
// Performance issue?
void readFifo()
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
	uint8_t Data;
	uint8_t payloadlen ;

	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, 0);
 800c7fe:	2200      	movs	r2, #0
 800c800:	2102      	movs	r1, #2
 800c802:	4845      	ldr	r0, [pc, #276]	@ (800c918 <readFifo+0x120>)
 800c804:	f004 ff24 	bl	8011650 <HAL_GPIO_WritePin>
	Data = RH_RF69_REG_00_FIFO;
 800c808:	2300      	movs	r3, #0
 800c80a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &Data, sizeof(Data), 100) ;			// Send the start address with the write mask off
 800c80c:	1df9      	adds	r1, r7, #7
 800c80e:	2364      	movs	r3, #100	@ 0x64
 800c810:	2201      	movs	r2, #1
 800c812:	4842      	ldr	r0, [pc, #264]	@ (800c91c <readFifo+0x124>)
 800c814:	f005 fe1d 	bl	8012452 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &payloadlen, sizeof(payloadlen), 100);	// First byte is payload len (counting the headers)
 800c818:	1db9      	adds	r1, r7, #6
 800c81a:	2364      	movs	r3, #100	@ 0x64
 800c81c:	2201      	movs	r2, #1
 800c81e:	483f      	ldr	r0, [pc, #252]	@ (800c91c <readFifo+0x124>)
 800c820:	f005 ff5b 	bl	80126da <HAL_SPI_Receive>
	safe_printf("PayloadLen:%d\n",payloadlen);
 800c824:	79bb      	ldrb	r3, [r7, #6]
 800c826:	4619      	mov	r1, r3
 800c828:	483d      	ldr	r0, [pc, #244]	@ (800c920 <readFifo+0x128>)
 800c82a:	f7fe fe2b 	bl	800b484 <safe_printf>
	if (payloadlen <= RH_RF69_MAX_ENCRYPTABLE_PAYLOAD_LEN && payloadlen >= RH_RF69_HEADER_LEN)
 800c82e:	79bb      	ldrb	r3, [r7, #6]
 800c830:	2b40      	cmp	r3, #64	@ 0x40
 800c832:	d868      	bhi.n	800c906 <readFifo+0x10e>
 800c834:	79bb      	ldrb	r3, [r7, #6]
 800c836:	2b03      	cmp	r3, #3
 800c838:	d965      	bls.n	800c906 <readFifo+0x10e>
	{
		HAL_SPI_Receive(&hspi3, &_rxHeaderTo, sizeof(_rxHeaderTo), 100);
 800c83a:	2364      	movs	r3, #100	@ 0x64
 800c83c:	2201      	movs	r2, #1
 800c83e:	4939      	ldr	r1, [pc, #228]	@ (800c924 <readFifo+0x12c>)
 800c840:	4836      	ldr	r0, [pc, #216]	@ (800c91c <readFifo+0x124>)
 800c842:	f005 ff4a 	bl	80126da <HAL_SPI_Receive>
		printf("_rxHeaderTo:%d\n",_rxHeaderTo);
 800c846:	4b37      	ldr	r3, [pc, #220]	@ (800c924 <readFifo+0x12c>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	4619      	mov	r1, r3
 800c84c:	4836      	ldr	r0, [pc, #216]	@ (800c928 <readFifo+0x130>)
 800c84e:	f00c ffc3 	bl	80197d8 <iprintf>
		// Check addressing
		if (_promiscuous ||	_rxHeaderTo == _thisAddress ||_rxHeaderTo == RH_BROADCAST_ADDRESS)
 800c852:	4b36      	ldr	r3, [pc, #216]	@ (800c92c <readFifo+0x134>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d109      	bne.n	800c86e <readFifo+0x76>
 800c85a:	4b32      	ldr	r3, [pc, #200]	@ (800c924 <readFifo+0x12c>)
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	4b34      	ldr	r3, [pc, #208]	@ (800c930 <readFifo+0x138>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d003      	beq.n	800c86e <readFifo+0x76>
 800c866:	4b2f      	ldr	r3, [pc, #188]	@ (800c924 <readFifo+0x12c>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	2bff      	cmp	r3, #255	@ 0xff
 800c86c:	d14b      	bne.n	800c906 <readFifo+0x10e>
		{
			// Get the rest of the headers
			HAL_SPI_Receive(&hspi3, &_rxHeaderFrom, sizeof(_rxHeaderFrom), 1000);
 800c86e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c872:	2201      	movs	r2, #1
 800c874:	492f      	ldr	r1, [pc, #188]	@ (800c934 <readFifo+0x13c>)
 800c876:	4829      	ldr	r0, [pc, #164]	@ (800c91c <readFifo+0x124>)
 800c878:	f005 ff2f 	bl	80126da <HAL_SPI_Receive>
			safe_printf("_rxHeaderFrom:%d\n",_rxHeaderFrom);
 800c87c:	4b2d      	ldr	r3, [pc, #180]	@ (800c934 <readFifo+0x13c>)
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	4619      	mov	r1, r3
 800c882:	482d      	ldr	r0, [pc, #180]	@ (800c938 <readFifo+0x140>)
 800c884:	f7fe fdfe 	bl	800b484 <safe_printf>
			HAL_SPI_Receive(&hspi3, &_rxHeaderId, sizeof(_rxHeaderId), 1000);
 800c888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c88c:	2201      	movs	r2, #1
 800c88e:	492b      	ldr	r1, [pc, #172]	@ (800c93c <readFifo+0x144>)
 800c890:	4822      	ldr	r0, [pc, #136]	@ (800c91c <readFifo+0x124>)
 800c892:	f005 ff22 	bl	80126da <HAL_SPI_Receive>
			safe_printf("_rxHeaderId:%d\n",_rxHeaderId);
 800c896:	4b29      	ldr	r3, [pc, #164]	@ (800c93c <readFifo+0x144>)
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	4619      	mov	r1, r3
 800c89c:	4828      	ldr	r0, [pc, #160]	@ (800c940 <readFifo+0x148>)
 800c89e:	f7fe fdf1 	bl	800b484 <safe_printf>
			HAL_SPI_Receive(&hspi3, &_rxHeaderFlags, sizeof(_rxHeaderFlags), 1000);
 800c8a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	4926      	ldr	r1, [pc, #152]	@ (800c944 <readFifo+0x14c>)
 800c8aa:	481c      	ldr	r0, [pc, #112]	@ (800c91c <readFifo+0x124>)
 800c8ac:	f005 ff15 	bl	80126da <HAL_SPI_Receive>
			safe_printf("_rxHeaderFlags:%d\n",_rxHeaderFlags);
 800c8b0:	4b24      	ldr	r3, [pc, #144]	@ (800c944 <readFifo+0x14c>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	4824      	ldr	r0, [pc, #144]	@ (800c948 <readFifo+0x150>)
 800c8b8:	f7fe fde4 	bl	800b484 <safe_printf>

			// And now the real payload
			for (_bufLen = 0; _bufLen < (payloadlen - RH_RF69_HEADER_LEN); _bufLen++)
 800c8bc:	4b23      	ldr	r3, [pc, #140]	@ (800c94c <readFifo+0x154>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	701a      	strb	r2, [r3, #0]
 800c8c2:	e010      	b.n	800c8e6 <readFifo+0xee>
			{
				HAL_SPI_Receive(&hspi3, &_buf[_bufLen], 1, 1000);
 800c8c4:	4b21      	ldr	r3, [pc, #132]	@ (800c94c <readFifo+0x154>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	4b21      	ldr	r3, [pc, #132]	@ (800c950 <readFifo+0x158>)
 800c8cc:	18d1      	adds	r1, r2, r3
 800c8ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	4811      	ldr	r0, [pc, #68]	@ (800c91c <readFifo+0x124>)
 800c8d6:	f005 ff00 	bl	80126da <HAL_SPI_Receive>
			for (_bufLen = 0; _bufLen < (payloadlen - RH_RF69_HEADER_LEN); _bufLen++)
 800c8da:	4b1c      	ldr	r3, [pc, #112]	@ (800c94c <readFifo+0x154>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c94c <readFifo+0x154>)
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	4b19      	ldr	r3, [pc, #100]	@ (800c94c <readFifo+0x154>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	79bb      	ldrb	r3, [r7, #6]
 800c8ee:	3b04      	subs	r3, #4
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	dbe7      	blt.n	800c8c4 <readFifo+0xcc>
			}
				_rxGood++;
 800c8f4:	4b17      	ldr	r3, [pc, #92]	@ (800c954 <readFifo+0x15c>)
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	4b15      	ldr	r3, [pc, #84]	@ (800c954 <readFifo+0x15c>)
 800c8fe:	801a      	strh	r2, [r3, #0]
				_rxBufValid = true;
 800c900:	4b15      	ldr	r3, [pc, #84]	@ (800c958 <readFifo+0x160>)
 800c902:	2201      	movs	r2, #1
 800c904:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, 1);
 800c906:	2201      	movs	r2, #1
 800c908:	2102      	movs	r1, #2
 800c90a:	4803      	ldr	r0, [pc, #12]	@ (800c918 <readFifo+0x120>)
 800c90c:	f004 fea0 	bl	8011650 <HAL_GPIO_WritePin>
	// Any junk remaining in the FIFO will be cleared next time we go to receive mode.
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	40020400 	.word	0x40020400
 800c91c:	200013d8 	.word	0x200013d8
 800c920:	0801d458 	.word	0x0801d458
 800c924:	2000130e 	.word	0x2000130e
 800c928:	0801d468 	.word	0x0801d468
 800c92c:	2000130d 	.word	0x2000130d
 800c930:	2000006c 	.word	0x2000006c
 800c934:	2000130f 	.word	0x2000130f
 800c938:	0801d478 	.word	0x0801d478
 800c93c:	20001310 	.word	0x20001310
 800c940:	0801d48c 	.word	0x0801d48c
 800c944:	20001311 	.word	0x20001311
 800c948:	0801d49c 	.word	0x0801d49c
 800c94c:	200012c4 	.word	0x200012c4
 800c950:	200012c8 	.word	0x200012c8
 800c954:	20001314 	.word	0x20001314
 800c958:	20001304 	.word	0x20001304
 800c95c:	00000000 	.word	0x00000000

0800c960 <setFrequency>:
		;                                                        // Wait for the measurement to complete
	return 166 - spiRead(RH_RF69_REG_4F_TEMP2);                  // Very approximate, based on observation
}

bool setFrequency(float centre)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t frf = (uint32_t)((centre * 1000000.0) / RH_RF69_FSTEP);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7fb fe1c 	bl	80085a8 <__aeabi_f2d>
 800c970:	a317      	add	r3, pc, #92	@ (adr r3, 800c9d0 <setFrequency+0x70>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f7fb fe6f 	bl	8008658 <__aeabi_dmul>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4610      	mov	r0, r2
 800c980:	4619      	mov	r1, r3
 800c982:	a315      	add	r3, pc, #84	@ (adr r3, 800c9d8 <setFrequency+0x78>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f7fb ff90 	bl	80088ac <__aeabi_ddiv>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4610      	mov	r0, r2
 800c992:	4619      	mov	r1, r3
 800c994:	f7fc f938 	bl	8008c08 <__aeabi_d2uiz>
 800c998:	4603      	mov	r3, r0
 800c99a:	60fb      	str	r3, [r7, #12]
	spiWrite(RH_RF69_REG_07_FRFMSB, (frf >> 16) & 0xff);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	0c1b      	lsrs	r3, r3, #16
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	2007      	movs	r0, #7
 800c9a6:	f7ff fe4b 	bl	800c640 <spiWrite>
	spiWrite(RH_RF69_REG_08_FRFMID, (frf >> 8) & 0xff);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	0a1b      	lsrs	r3, r3, #8
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	2008      	movs	r0, #8
 800c9b4:	f7ff fe44 	bl	800c640 <spiWrite>
	spiWrite(RH_RF69_REG_09_FRFLSB, frf & 0xff);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	4619      	mov	r1, r3
 800c9be:	2009      	movs	r0, #9
 800c9c0:	f7ff fe3e 	bl	800c640 <spiWrite>

	return true;
 800c9c4:	2301      	movs	r3, #1
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	412e8480 	.word	0x412e8480
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	404e8480 	.word	0x404e8480

0800c9e0 <setOpMode>:
{
	return -((int8_t)(spiRead(RH_RF69_REG_24_RSSIVALUE) >> 1));
}

void setOpMode(uint8_t mode)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	71fb      	strb	r3, [r7, #7]
	uint8_t opmode = spiRead(RH_RF69_REG_01_OPMODE);
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	f7ff fdfa 	bl	800c5e4 <spiRead>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
	opmode &= ~RH_RF69_OPMODE_MODE;
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	f023 031c 	bic.w	r3, r3, #28
 800c9fa:	73fb      	strb	r3, [r7, #15]
	opmode |= (mode & RH_RF69_OPMODE_MODE);
 800c9fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca00:	f003 031c 	and.w	r3, r3, #28
 800ca04:	b25a      	sxtb	r2, r3
 800ca06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	b25b      	sxtb	r3, r3
 800ca0e:	73fb      	strb	r3, [r7, #15]
	spiWrite(RH_RF69_REG_01_OPMODE, opmode);
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	4619      	mov	r1, r3
 800ca14:	2001      	movs	r0, #1
 800ca16:	f7ff fe13 	bl	800c640 <spiWrite>
	safe_printf("setOpMode=%x\n", opmode);
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	480f      	ldr	r0, [pc, #60]	@ (800ca5c <setOpMode+0x7c>)
 800ca20:	f7fe fd30 	bl	800b484 <safe_printf>

	// Wait for mode to change.
	while (!(spiRead(RH_RF69_REG_27_IRQFLAGS1) & RH_RF69_IRQFLAGS1_MODEREADY))
 800ca24:	bf00      	nop
 800ca26:	2027      	movs	r0, #39	@ 0x27
 800ca28:	f7ff fddc 	bl	800c5e4 <spiRead>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	b25b      	sxtb	r3, r3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	daf8      	bge.n	800ca26 <setOpMode+0x46>
		;

	// Verify new mode
	uint8_t _opmode = spiRead(RH_RF69_REG_01_OPMODE);
 800ca34:	2001      	movs	r0, #1
 800ca36:	f7ff fdd5 	bl	800c5e4 <spiRead>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]
	if (opmode != _opmode)
 800ca3e:	7bfa      	ldrb	r2, [r7, #15]
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d005      	beq.n	800ca52 <setOpMode+0x72>
	{
		safe_printf("setOpMode fail. %x %x\n", opmode, _opmode);
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
 800ca48:	7bba      	ldrb	r2, [r7, #14]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4804      	ldr	r0, [pc, #16]	@ (800ca60 <setOpMode+0x80>)
 800ca4e:	f7fe fd19 	bl	800b484 <safe_printf>
	}
}
 800ca52:	bf00      	nop
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	0801d4b0 	.word	0x0801d4b0
 800ca60:	0801d4c0 	.word	0x0801d4c0

0800ca64 <setModeIdle>:

void setModeIdle()
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
	if (_mode != RHModeIdle)
 800ca68:	4b0d      	ldr	r3, [pc, #52]	@ (800caa0 <setModeIdle+0x3c>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d014      	beq.n	800ca9a <setModeIdle+0x36>
	{
		if (_power >= 18)
 800ca70:	4b0c      	ldr	r3, [pc, #48]	@ (800caa4 <setModeIdle+0x40>)
 800ca72:	f993 3000 	ldrsb.w	r3, [r3]
 800ca76:	2b11      	cmp	r3, #17
 800ca78:	dd07      	ble.n	800ca8a <setModeIdle+0x26>
		{
			// If high power boost, return power amp to receive mode
			spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 800ca7a:	2155      	movs	r1, #85	@ 0x55
 800ca7c:	205a      	movs	r0, #90	@ 0x5a
 800ca7e:	f7ff fddf 	bl	800c640 <spiWrite>
			spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 800ca82:	2170      	movs	r1, #112	@ 0x70
 800ca84:	205c      	movs	r0, #92	@ 0x5c
 800ca86:	f7ff fddb 	bl	800c640 <spiWrite>
		}
		setOpMode(_idleMode);
 800ca8a:	4b07      	ldr	r3, [pc, #28]	@ (800caa8 <setModeIdle+0x44>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff ffa6 	bl	800c9e0 <setOpMode>
		_mode = RHModeIdle;
 800ca94:	4b02      	ldr	r3, [pc, #8]	@ (800caa0 <setModeIdle+0x3c>)
 800ca96:	2202      	movs	r2, #2
 800ca98:	701a      	strb	r2, [r3, #0]
	}
}
 800ca9a:	bf00      	nop
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	2000130c 	.word	0x2000130c
 800caa4:	200012c3 	.word	0x200012c3
 800caa8:	200012c1 	.word	0x200012c1

0800caac <setSleep>:

bool setSleep()
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
	if (_mode != RHModeSleep)
 800cab0:	4b06      	ldr	r3, [pc, #24]	@ (800cacc <setSleep+0x20>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d006      	beq.n	800cac6 <setSleep+0x1a>
	{
		spiWrite(RH_RF69_REG_01_OPMODE, RH_RF69_OPMODE_MODE_SLEEP);
 800cab8:	2100      	movs	r1, #0
 800caba:	2001      	movs	r0, #1
 800cabc:	f7ff fdc0 	bl	800c640 <spiWrite>
		_mode = RHModeSleep;
 800cac0:	4b02      	ldr	r3, [pc, #8]	@ (800cacc <setSleep+0x20>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	701a      	strb	r2, [r3, #0]
	}
	return true;
 800cac6:	2301      	movs	r3, #1
}
 800cac8:	4618      	mov	r0, r3
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	2000130c 	.word	0x2000130c

0800cad0 <setModeRx>:

void setModeRx()
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	af00      	add	r7, sp, #0
	if (_mode != RHModeRx)
 800cad4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb10 <setModeRx+0x40>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b04      	cmp	r3, #4
 800cada:	d016      	beq.n	800cb0a <setModeRx+0x3a>
	{
		if (_power >= 18)
 800cadc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb14 <setModeRx+0x44>)
 800cade:	f993 3000 	ldrsb.w	r3, [r3]
 800cae2:	2b11      	cmp	r3, #17
 800cae4:	dd07      	ble.n	800caf6 <setModeRx+0x26>
		{
			spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 800cae6:	2155      	movs	r1, #85	@ 0x55
 800cae8:	205a      	movs	r0, #90	@ 0x5a
 800caea:	f7ff fda9 	bl	800c640 <spiWrite>
			spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 800caee:	2170      	movs	r1, #112	@ 0x70
 800caf0:	205c      	movs	r0, #92	@ 0x5c
 800caf2:	f7ff fda5 	bl	800c640 <spiWrite>
		}
		spiWrite(RH_RF69_REG_25_DIOMAPPING1, RH_RF69_DIOMAPPING1_DIO0MAPPING_01);
 800caf6:	2140      	movs	r1, #64	@ 0x40
 800caf8:	2025      	movs	r0, #37	@ 0x25
 800cafa:	f7ff fda1 	bl	800c640 <spiWrite>
		setOpMode(RH_RF69_OPMODE_MODE_RX);
 800cafe:	2010      	movs	r0, #16
 800cb00:	f7ff ff6e 	bl	800c9e0 <setOpMode>
		_mode = RHModeRx;
 800cb04:	4b02      	ldr	r3, [pc, #8]	@ (800cb10 <setModeRx+0x40>)
 800cb06:	2204      	movs	r2, #4
 800cb08:	701a      	strb	r2, [r3, #0]
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	2000130c 	.word	0x2000130c
 800cb14:	200012c3 	.word	0x200012c3

0800cb18 <setTxPower>:
		_mode = RHModeTx;
	}
}

void setTxPower(int8_t power, bool ishighpowermodule)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	460a      	mov	r2, r1
 800cb22:	71fb      	strb	r3, [r7, #7]
 800cb24:	4613      	mov	r3, r2
 800cb26:	71bb      	strb	r3, [r7, #6]
  _power = power;
 800cb28:	4a36      	ldr	r2, [pc, #216]	@ (800cc04 <setTxPower+0xec>)
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	7013      	strb	r3, [r2, #0]
  uint8_t palevel;

  if (ishighpowermodule)
 800cb2e:	79bb      	ldrb	r3, [r7, #6]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d03f      	beq.n	800cbb4 <setTxPower+0x9c>
  {
	if (_power < -2)
 800cb34:	4b33      	ldr	r3, [pc, #204]	@ (800cc04 <setTxPower+0xec>)
 800cb36:	f993 3000 	ldrsb.w	r3, [r3]
 800cb3a:	f113 0f02 	cmn.w	r3, #2
 800cb3e:	da02      	bge.n	800cb46 <setTxPower+0x2e>
	  _power = -2; //RFM69HW only works down to -2.
 800cb40:	4b30      	ldr	r3, [pc, #192]	@ (800cc04 <setTxPower+0xec>)
 800cb42:	22fe      	movs	r2, #254	@ 0xfe
 800cb44:	701a      	strb	r2, [r3, #0]
	if (_power <= 13)
 800cb46:	4b2f      	ldr	r3, [pc, #188]	@ (800cc04 <setTxPower+0xec>)
 800cb48:	f993 3000 	ldrsb.w	r3, [r3]
 800cb4c:	2b0d      	cmp	r3, #13
 800cb4e:	dc0e      	bgt.n	800cb6e <setTxPower+0x56>
	{
	  // -2dBm to +13dBm
	  //Need PA1 exclusivelly on RFM69HW
	  palevel = RH_RF69_PALEVEL_PA1ON | ((_power + 18) &
 800cb50:	4b2c      	ldr	r3, [pc, #176]	@ (800cc04 <setTxPower+0xec>)
 800cb52:	f993 3000 	ldrsb.w	r3, [r3]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	3312      	adds	r3, #18
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	b25b      	sxtb	r3, r3
 800cb5e:	f003 031f 	and.w	r3, r3, #31
 800cb62:	b25b      	sxtb	r3, r3
 800cb64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb68:	b25b      	sxtb	r3, r3
 800cb6a:	73fb      	strb	r3, [r7, #15]
 800cb6c:	e041      	b.n	800cbf2 <setTxPower+0xda>
	  RH_RF69_PALEVEL_OUTPUTPOWER);
	}
	else if (_power >= 18)
 800cb6e:	4b25      	ldr	r3, [pc, #148]	@ (800cc04 <setTxPower+0xec>)
 800cb70:	f993 3000 	ldrsb.w	r3, [r3]
 800cb74:	2b11      	cmp	r3, #17
 800cb76:	dd0e      	ble.n	800cb96 <setTxPower+0x7e>
	  // +18dBm to +20dBm
	  // Need PA1+PA2
	  // Also need PA boost settings change when tx is turned on and off, see setModeTx()
	  palevel = RH_RF69_PALEVEL_PA1ON
	| RH_RF69_PALEVEL_PA2ON
	| ((_power + 11) & RH_RF69_PALEVEL_OUTPUTPOWER);
 800cb78:	4b22      	ldr	r3, [pc, #136]	@ (800cc04 <setTxPower+0xec>)
 800cb7a:	f993 3000 	ldrsb.w	r3, [r3]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	330b      	adds	r3, #11
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	b25b      	sxtb	r3, r3
 800cb86:	f003 031f 	and.w	r3, r3, #31
 800cb8a:	b25b      	sxtb	r3, r3
 800cb8c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cb90:	b25b      	sxtb	r3, r3
	  palevel = RH_RF69_PALEVEL_PA1ON
 800cb92:	73fb      	strb	r3, [r7, #15]
 800cb94:	e02d      	b.n	800cbf2 <setTxPower+0xda>
	{
	  // +14dBm to +17dBm
	  // Need PA1+PA2
	  palevel = RH_RF69_PALEVEL_PA1ON
	| RH_RF69_PALEVEL_PA2ON
	| ((_power + 14) & RH_RF69_PALEVEL_OUTPUTPOWER);
 800cb96:	4b1b      	ldr	r3, [pc, #108]	@ (800cc04 <setTxPower+0xec>)
 800cb98:	f993 3000 	ldrsb.w	r3, [r3]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	330e      	adds	r3, #14
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	b25b      	sxtb	r3, r3
 800cba4:	f003 031f 	and.w	r3, r3, #31
 800cba8:	b25b      	sxtb	r3, r3
 800cbaa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cbae:	b25b      	sxtb	r3, r3
	  palevel = RH_RF69_PALEVEL_PA1ON
 800cbb0:	73fb      	strb	r3, [r7, #15]
 800cbb2:	e01e      	b.n	800cbf2 <setTxPower+0xda>
	}
  }
  else
  {
	if (_power < -18) _power = -18;
 800cbb4:	4b13      	ldr	r3, [pc, #76]	@ (800cc04 <setTxPower+0xec>)
 800cbb6:	f993 3000 	ldrsb.w	r3, [r3]
 800cbba:	f113 0f12 	cmn.w	r3, #18
 800cbbe:	da02      	bge.n	800cbc6 <setTxPower+0xae>
 800cbc0:	4b10      	ldr	r3, [pc, #64]	@ (800cc04 <setTxPower+0xec>)
 800cbc2:	22ee      	movs	r2, #238	@ 0xee
 800cbc4:	701a      	strb	r2, [r3, #0]
	if (_power > 13) _power = 13; //limit for RFM69W
 800cbc6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <setTxPower+0xec>)
 800cbc8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbcc:	2b0d      	cmp	r3, #13
 800cbce:	dd02      	ble.n	800cbd6 <setTxPower+0xbe>
 800cbd0:	4b0c      	ldr	r3, [pc, #48]	@ (800cc04 <setTxPower+0xec>)
 800cbd2:	220d      	movs	r2, #13
 800cbd4:	701a      	strb	r2, [r3, #0]
	palevel = RH_RF69_PALEVEL_PA0ON
	  | ((_power + 18) & RH_RF69_PALEVEL_OUTPUTPOWER);
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	@ (800cc04 <setTxPower+0xec>)
 800cbd8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	3312      	adds	r3, #18
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	b25b      	sxtb	r3, r3
 800cbe4:	f003 031f 	and.w	r3, r3, #31
 800cbe8:	b25b      	sxtb	r3, r3
 800cbea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbee:	b25b      	sxtb	r3, r3
	palevel = RH_RF69_PALEVEL_PA0ON
 800cbf0:	73fb      	strb	r3, [r7, #15]
  }
  spiWrite(RH_RF69_REG_11_PALEVEL, palevel);
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	2011      	movs	r0, #17
 800cbf8:	f7ff fd22 	bl	800c640 <spiWrite>
}
 800cbfc:	bf00      	nop
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	200012c3 	.word	0x200012c3

0800cc08 <setModemRegisters>:

// Sets registers from a canned modem configuration structure
void setModemRegisters(const ModemConfig* config)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	spiBurstWrite(RH_RF69_REG_02_DATAMODUL,		&config->reg_02, 5);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2205      	movs	r2, #5
 800cc14:	4619      	mov	r1, r3
 800cc16:	2002      	movs	r0, #2
 800cc18:	f7ff fd46 	bl	800c6a8 <spiBurstWrite>
	spiBurstWrite(RH_RF69_REG_19_RXBW,			&config->reg_19, 2);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3305      	adds	r3, #5
 800cc20:	2202      	movs	r2, #2
 800cc22:	4619      	mov	r1, r3
 800cc24:	2019      	movs	r0, #25
 800cc26:	f7ff fd3f 	bl	800c6a8 <spiBurstWrite>
	spiWrite(RH_RF69_REG_37_PACKETCONFIG1,		 config->reg_37);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	79db      	ldrb	r3, [r3, #7]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	2037      	movs	r0, #55	@ 0x37
 800cc32:	f7ff fd05 	bl	800c640 <spiWrite>

}
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <setModemConfig>:

// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool setModemConfig(ModemConfigChoice index)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
	if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	2b1b      	cmp	r3, #27
 800cc4e:	d901      	bls.n	800cc54 <setModemConfig+0x14>
		return false;
 800cc50:	2300      	movs	r3, #0
 800cc52:	e00e      	b.n	800cc72 <setModemConfig+0x32>

	ModemConfig cfg;
	memcpy(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(ModemConfig));
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	4a08      	ldr	r2, [pc, #32]	@ (800cc7c <setModemConfig+0x3c>)
 800cc5a:	441a      	add	r2, r3
 800cc5c:	f107 0308 	add.w	r3, r7, #8
 800cc60:	6810      	ldr	r0, [r2, #0]
 800cc62:	6851      	ldr	r1, [r2, #4]
 800cc64:	c303      	stmia	r3!, {r0, r1}
	setModemRegisters(&cfg);
 800cc66:	f107 0308 	add.w	r3, r7, #8
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff ffcc 	bl	800cc08 <setModemRegisters>

	return true;
 800cc70:	2301      	movs	r3, #1
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	0801d62c 	.word	0x0801d62c

0800cc80 <setPreambleLength>:

void setPreambleLength(uint16_t bytes)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	80fb      	strh	r3, [r7, #6]
	spiWrite(RH_RF69_REG_2C_PREAMBLEMSB, bytes >> 8);
 800cc8a:	88fb      	ldrh	r3, [r7, #6]
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	4619      	mov	r1, r3
 800cc94:	202c      	movs	r0, #44	@ 0x2c
 800cc96:	f7ff fcd3 	bl	800c640 <spiWrite>
	spiWrite(RH_RF69_REG_2D_PREAMBLELSB, bytes & 0xff);
 800cc9a:	88fb      	ldrh	r3, [r7, #6]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	4619      	mov	r1, r3
 800cca0:	202d      	movs	r0, #45	@ 0x2d
 800cca2:	f7ff fccd 	bl	800c640 <spiWrite>
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <setSyncWords>:

void setSyncWords(const uint8_t* syncWords, uint8_t len)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
	uint8_t syncconfig = spiRead(RH_RF69_REG_2E_SYNCCONFIG);
 800ccbc:	202e      	movs	r0, #46	@ 0x2e
 800ccbe:	f7ff fc91 	bl	800c5e4 <spiRead>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73fb      	strb	r3, [r7, #15]

	if (syncWords && len && len <= 4)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d010      	beq.n	800ccee <setSyncWords+0x3e>
 800cccc:	78fb      	ldrb	r3, [r7, #3]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00d      	beq.n	800ccee <setSyncWords+0x3e>
 800ccd2:	78fb      	ldrb	r3, [r7, #3]
 800ccd4:	2b04      	cmp	r3, #4
 800ccd6:	d80a      	bhi.n	800ccee <setSyncWords+0x3e>
	{
		spiBurstWrite(RH_RF69_REG_2F_SYNCVALUE1, syncWords, len);
 800ccd8:	78fb      	ldrb	r3, [r7, #3]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	202f      	movs	r0, #47	@ 0x2f
 800cce0:	f7ff fce2 	bl	800c6a8 <spiBurstWrite>
		syncconfig |= RH_RF69_SYNCCONFIG_SYNCON;
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
 800cce6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ccea:	73fb      	strb	r3, [r7, #15]
 800ccec:	e003      	b.n	800ccf6 <setSyncWords+0x46>
	}
	else
	{
		syncconfig &= ~RH_RF69_SYNCCONFIG_SYNCON;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccf4:	73fb      	strb	r3, [r7, #15]
	}
		syncconfig &= ~RH_RF69_SYNCCONFIG_SYNCSIZE;
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800ccfc:	73fb      	strb	r3, [r7, #15]
		syncconfig |= (len-1) << 3;
 800ccfe:	78fb      	ldrb	r3, [r7, #3]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	b25b      	sxtb	r3, r3
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	b25a      	sxtb	r2, r3
 800cd08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	b25b      	sxtb	r3, r3
 800cd10:	73fb      	strb	r3, [r7, #15]
		safe_printf("syncconfig=%x\n", syncconfig);
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	4619      	mov	r1, r3
 800cd16:	4806      	ldr	r0, [pc, #24]	@ (800cd30 <setSyncWords+0x80>)
 800cd18:	f7fe fbb4 	bl	800b484 <safe_printf>
		spiWrite(RH_RF69_REG_2E_SYNCCONFIG, syncconfig);
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	202e      	movs	r0, #46	@ 0x2e
 800cd22:	f7ff fc8d 	bl	800c640 <spiWrite>

}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	0801d4d8 	.word	0x0801d4d8

0800cd34 <setEncryptionKey>:

void setEncryptionKey(uint8_t* key)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
	if (key)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d010      	beq.n	800cd64 <setEncryptionKey+0x30>
	{
		spiBurstWrite(RH_RF69_REG_3E_AESKEY1, key, 16);
 800cd42:	2210      	movs	r2, #16
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	203e      	movs	r0, #62	@ 0x3e
 800cd48:	f7ff fcae 	bl	800c6a8 <spiBurstWrite>
		spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) | RH_RF69_PACKETCONFIG2_AESON);
 800cd4c:	203d      	movs	r0, #61	@ 0x3d
 800cd4e:	f7ff fc49 	bl	800c5e4 <spiRead>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f043 0301 	orr.w	r3, r3, #1
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	203d      	movs	r0, #61	@ 0x3d
 800cd5e:	f7ff fc6f 	bl	800c640 <spiWrite>
	}
	else
	{
		spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) & ~RH_RF69_PACKETCONFIG2_AESON);
	}
}
 800cd62:	e00a      	b.n	800cd7a <setEncryptionKey+0x46>
		spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) & ~RH_RF69_PACKETCONFIG2_AESON);
 800cd64:	203d      	movs	r0, #61	@ 0x3d
 800cd66:	f7ff fc3d 	bl	800c5e4 <spiRead>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	f023 0301 	bic.w	r3, r3, #1
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	4619      	mov	r1, r3
 800cd74:	203d      	movs	r0, #61	@ 0x3d
 800cd76:	f7ff fc63 	bl	800c640 <spiWrite>
}
 800cd7a:	bf00      	nop
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <available>:

bool available()
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
	// Get the interrupt cause
	uint8_t irqflags2 = spiRead(RH_RF69_REG_28_IRQFLAGS2);
 800cd8a:	2028      	movs	r0, #40	@ 0x28
 800cd8c:	f7ff fc2a 	bl	800c5e4 <spiRead>
 800cd90:	4603      	mov	r3, r0
 800cd92:	71fb      	strb	r3, [r7, #7]
//		printf("available irqflags2=%x\n", irqflags2);
	// Must look for PAYLOADREADY, not CRCOK, since only PAYLOADREADY occurs _after_ AES decryption
	// has been done
	if (irqflags2 & RH_RF69_IRQFLAGS2_PAYLOADREADY) {
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	f003 0304 	and.w	r3, r3, #4
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d018      	beq.n	800cdd0 <available+0x4c>
		// A complete message has been received with good CRC
		_lastRssi = -((int8_t)(spiRead(RH_RF69_REG_24_RSSIVALUE) >> 1));
 800cd9e:	2024      	movs	r0, #36	@ 0x24
 800cda0:	f7ff fc20 	bl	800c5e4 <spiRead>
 800cda4:	4603      	mov	r3, r0
 800cda6:	085b      	lsrs	r3, r3, #1
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	b25b      	sxtb	r3, r3
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	425b      	negs	r3, r3
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	b21a      	sxth	r2, r3
 800cdb4:	4b0a      	ldr	r3, [pc, #40]	@ (800cde0 <available+0x5c>)
 800cdb6:	801a      	strh	r2, [r3, #0]
		_lastPreambleTime = HAL_GetTick();
 800cdb8:	f003 ffd4 	bl	8010d64 <HAL_GetTick>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	4a09      	ldr	r2, [pc, #36]	@ (800cde4 <available+0x60>)
 800cdc0:	6013      	str	r3, [r2, #0]

		setModeIdle();
 800cdc2:	f7ff fe4f 	bl	800ca64 <setModeIdle>
		// Save it in our buffer
		readFifo();
 800cdc6:	f7ff fd17 	bl	800c7f8 <readFifo>
		safe_printf("PAYLOADREADY\n");
 800cdca:	4807      	ldr	r0, [pc, #28]	@ (800cde8 <available+0x64>)
 800cdcc:	f7fe fb5a 	bl	800b484 <safe_printf>
	}
	setModeRx(); // Make sure we are receiving
 800cdd0:	f7ff fe7e 	bl	800cad0 <setModeRx>
	return _rxBufValid;
 800cdd4:	4b05      	ldr	r3, [pc, #20]	@ (800cdec <available+0x68>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20001312 	.word	0x20001312
 800cde4:	20001308 	.word	0x20001308
 800cde8:	0801d4e8 	.word	0x0801d4e8
 800cdec:	20001304 	.word	0x20001304

0800cdf0 <recv1>:
	return false;
}


bool recv1(uint8_t* buf, uint8_t* len)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
	if (!available())
 800cdfa:	f7ff ffc3 	bl	800cd84 <available>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	f083 0301 	eor.w	r3, r3, #1
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <recv1+0x1e>
	return false;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e01a      	b.n	800ce44 <recv1+0x54>

	if (buf && len)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d013      	beq.n	800ce3c <recv1+0x4c>
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d010      	beq.n	800ce3c <recv1+0x4c>
	{
	if (*len > _bufLen)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781a      	ldrb	r2, [r3, #0]
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce4c <recv1+0x5c>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d903      	bls.n	800ce2e <recv1+0x3e>
		*len = _bufLen;
 800ce26:	4b09      	ldr	r3, [pc, #36]	@ (800ce4c <recv1+0x5c>)
 800ce28:	781a      	ldrb	r2, [r3, #0]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	701a      	strb	r2, [r3, #0]
	memcpy(buf, _buf, *len);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	461a      	mov	r2, r3
 800ce34:	4906      	ldr	r1, [pc, #24]	@ (800ce50 <recv1+0x60>)
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f00c ff4d 	bl	8019cd6 <memcpy>
	}
	_rxBufValid = false; // Got the most recent message
 800ce3c:	4b05      	ldr	r3, [pc, #20]	@ (800ce54 <recv1+0x64>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
//	  printBuffer("recv:", buf, *len);
	return true;
 800ce42:	2301      	movs	r3, #1
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	200012c4 	.word	0x200012c4
 800ce50:	200012c8 	.word	0x200012c8
 800ce54:	20001304 	.word	0x20001304

0800ce58 <lastRssi>:
{
	return _rxHeaderFlags;
}

int16_t lastRssi()
{
 800ce58:	b480      	push	{r7}
 800ce5a:	af00      	add	r7, sp, #0
	return _lastRssi;
 800ce5c:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <lastRssi+0x14>)
 800ce5e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	20001312 	.word	0x20001312

0800ce70 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	80fb      	strh	r3, [r7, #6]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	80bb      	strh	r3, [r7, #4]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800ce82:	88fb      	ldrh	r3, [r7, #6]
 800ce84:	88b9      	ldrh	r1, [r7, #4]
 800ce86:	887a      	ldrh	r2, [r7, #2]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fe23 	bl	800dad4 <ST7735_DrawPixel>
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800ce96:	b590      	push	{r4, r7, lr}
 800ce98:	b085      	sub	sp, #20
 800ce9a:	af02      	add	r7, sp, #8
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	4608      	mov	r0, r1
 800cea0:	4611      	mov	r1, r2
 800cea2:	461a      	mov	r2, r3
 800cea4:	4623      	mov	r3, r4
 800cea6:	80fb      	strh	r3, [r7, #6]
 800cea8:	4603      	mov	r3, r0
 800ceaa:	80bb      	strh	r3, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	807b      	strh	r3, [r7, #2]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800ceb4:	88f8      	ldrh	r0, [r7, #6]
 800ceb6:	88b9      	ldrh	r1, [r7, #4]
 800ceb8:	887a      	ldrh	r2, [r7, #2]
 800ceba:	883c      	ldrh	r4, [r7, #0]
 800cebc:	8b3b      	ldrh	r3, [r7, #24]
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	4623      	mov	r3, r4
 800cec2:	f000 ff11 	bl	800dce8 <ST7735_FillRectangle>
}
 800cec6:	bf00      	nop
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd90      	pop	{r4, r7, pc}

0800cece <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	4603      	mov	r3, r0
 800ced6:	80fb      	strh	r3, [r7, #6]
 800ced8:	460b      	mov	r3, r1
 800ceda:	80bb      	strh	r3, [r7, #4]
 800cedc:	4613      	mov	r3, r2
 800cede:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800cee0:	887a      	ldrh	r2, [r7, #2]
 800cee2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800cee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff ffc0 	bl	800ce70 <drawPixel>
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b089      	sub	sp, #36	@ 0x24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	4604      	mov	r4, r0
 800cf00:	4608      	mov	r0, r1
 800cf02:	4611      	mov	r1, r2
 800cf04:	461a      	mov	r2, r3
 800cf06:	4623      	mov	r3, r4
 800cf08:	80fb      	strh	r3, [r7, #6]
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	80bb      	strh	r3, [r7, #4]
 800cf0e:	460b      	mov	r3, r1
 800cf10:	807b      	strh	r3, [r7, #2]
 800cf12:	4613      	mov	r3, r2
 800cf14:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800cf16:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cf1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800cf24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800cf28:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cf2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf30:	1acb      	subs	r3, r1, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	bfb8      	it	lt
 800cf36:	425b      	neglt	r3, r3
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	bfcc      	ite	gt
 800cf3c:	2301      	movgt	r3, #1
 800cf3e:	2300      	movle	r3, #0
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800cf44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	833b      	strh	r3, [r7, #24]
 800cf50:	88bb      	ldrh	r3, [r7, #4]
 800cf52:	80fb      	strh	r3, [r7, #6]
 800cf54:	8b3b      	ldrh	r3, [r7, #24]
 800cf56:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800cf58:	887b      	ldrh	r3, [r7, #2]
 800cf5a:	82fb      	strh	r3, [r7, #22]
 800cf5c:	883b      	ldrh	r3, [r7, #0]
 800cf5e:	807b      	strh	r3, [r7, #2]
 800cf60:	8afb      	ldrh	r3, [r7, #22]
 800cf62:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800cf64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	dd0b      	ble.n	800cf88 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800cf70:	88fb      	ldrh	r3, [r7, #6]
 800cf72:	82bb      	strh	r3, [r7, #20]
 800cf74:	887b      	ldrh	r3, [r7, #2]
 800cf76:	80fb      	strh	r3, [r7, #6]
 800cf78:	8abb      	ldrh	r3, [r7, #20]
 800cf7a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800cf7c:	88bb      	ldrh	r3, [r7, #4]
 800cf7e:	827b      	strh	r3, [r7, #18]
 800cf80:	883b      	ldrh	r3, [r7, #0]
 800cf82:	80bb      	strh	r3, [r7, #4]
 800cf84:	8a7b      	ldrh	r3, [r7, #18]
 800cf86:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800cf88:	887a      	ldrh	r2, [r7, #2]
 800cf8a:	88fb      	ldrh	r3, [r7, #6]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800cf92:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cf96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	bfb8      	it	lt
 800cfa0:	425b      	neglt	r3, r3
 800cfa2:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800cfa4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cfa8:	0fda      	lsrs	r2, r3, #31
 800cfaa:	4413      	add	r3, r2
 800cfac:	105b      	asrs	r3, r3, #1
 800cfae:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800cfb0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800cfb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	da02      	bge.n	800cfc2 <writeLine+0xca>
        ystep = 1;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	83bb      	strh	r3, [r7, #28]
 800cfc0:	e031      	b.n	800d026 <writeLine+0x12e>
    } else {
        ystep = -1;
 800cfc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cfc6:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800cfc8:	e02d      	b.n	800d026 <writeLine+0x12e>
        if (steep) {
 800cfca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d008      	beq.n	800cfe4 <writeLine+0xec>
            writePixel(y0, x0, color);
 800cfd2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800cfd4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800cfd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff76 	bl	800cece <writePixel>
 800cfe2:	e007      	b.n	800cff4 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800cfe4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800cfe6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800cfea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff ff6d 	bl	800cece <writePixel>
        }
        err -= dy;
 800cff4:	8bfa      	ldrh	r2, [r7, #30]
 800cff6:	89fb      	ldrh	r3, [r7, #14]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800cffe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d002:	2b00      	cmp	r3, #0
 800d004:	da09      	bge.n	800d01a <writeLine+0x122>
            y0 += ystep;
 800d006:	88ba      	ldrh	r2, [r7, #4]
 800d008:	8bbb      	ldrh	r3, [r7, #28]
 800d00a:	4413      	add	r3, r2
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800d010:	8bfa      	ldrh	r2, [r7, #30]
 800d012:	8a3b      	ldrh	r3, [r7, #16]
 800d014:	4413      	add	r3, r2
 800d016:	b29b      	uxth	r3, r3
 800d018:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800d01a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	3301      	adds	r3, #1
 800d022:	b29b      	uxth	r3, r3
 800d024:	80fb      	strh	r3, [r7, #6]
 800d026:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d02a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d02e:	429a      	cmp	r2, r3
 800d030:	ddcb      	ble.n	800cfca <writeLine+0xd2>
        }
    }
}
 800d032:	bf00      	nop
 800d034:	bf00      	nop
 800d036:	3724      	adds	r7, #36	@ 0x24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd90      	pop	{r4, r7, pc}

0800d03c <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800d03c:	b590      	push	{r4, r7, lr}
 800d03e:	b085      	sub	sp, #20
 800d040:	af02      	add	r7, sp, #8
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	4611      	mov	r1, r2
 800d048:	461a      	mov	r2, r3
 800d04a:	4623      	mov	r3, r4
 800d04c:	80fb      	strh	r3, [r7, #6]
 800d04e:	4603      	mov	r3, r0
 800d050:	80bb      	strh	r3, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	807b      	strh	r3, [r7, #2]
 800d056:	4613      	mov	r3, r2
 800d058:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800d05a:	88ba      	ldrh	r2, [r7, #4]
 800d05c:	887b      	ldrh	r3, [r7, #2]
 800d05e:	4413      	add	r3, r2
 800d060:	b29b      	uxth	r3, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	b29b      	uxth	r3, r3
 800d066:	b21c      	sxth	r4, r3
 800d068:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d06c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d070:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d074:	883b      	ldrh	r3, [r7, #0]
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	4623      	mov	r3, r4
 800d07a:	f7ff ff3d 	bl	800cef8 <writeLine>
}
 800d07e:	bf00      	nop
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	bd90      	pop	{r4, r7, pc}

0800d086 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800d086:	b590      	push	{r4, r7, lr}
 800d088:	b085      	sub	sp, #20
 800d08a:	af02      	add	r7, sp, #8
 800d08c:	4604      	mov	r4, r0
 800d08e:	4608      	mov	r0, r1
 800d090:	4611      	mov	r1, r2
 800d092:	461a      	mov	r2, r3
 800d094:	4623      	mov	r3, r4
 800d096:	80fb      	strh	r3, [r7, #6]
 800d098:	4603      	mov	r3, r0
 800d09a:	80bb      	strh	r3, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	807b      	strh	r3, [r7, #2]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800d0a4:	88fa      	ldrh	r2, [r7, #6]
 800d0a6:	887b      	ldrh	r3, [r7, #2]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	b21a      	sxth	r2, r3
 800d0b2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800d0b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d0ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d0be:	883b      	ldrh	r3, [r7, #0]
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	4623      	mov	r3, r4
 800d0c4:	f7ff ff18 	bl	800cef8 <writeLine>
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd90      	pop	{r4, r7, pc}

0800d0d0 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800d0d0:	b590      	push	{r4, r7, lr}
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	af02      	add	r7, sp, #8
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	4608      	mov	r0, r1
 800d0da:	4611      	mov	r1, r2
 800d0dc:	461a      	mov	r2, r3
 800d0de:	4623      	mov	r3, r4
 800d0e0:	80fb      	strh	r3, [r7, #6]
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	80bb      	strh	r3, [r7, #4]
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	807b      	strh	r3, [r7, #2]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800d0ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d0f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d11a      	bne.n	800d130 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800d0fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d0fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d102:	429a      	cmp	r2, r3
 800d104:	dd05      	ble.n	800d112 <drawLine+0x42>
 800d106:	88bb      	ldrh	r3, [r7, #4]
 800d108:	81bb      	strh	r3, [r7, #12]
 800d10a:	883b      	ldrh	r3, [r7, #0]
 800d10c:	80bb      	strh	r3, [r7, #4]
 800d10e:	89bb      	ldrh	r3, [r7, #12]
 800d110:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800d112:	883a      	ldrh	r2, [r7, #0]
 800d114:	88bb      	ldrh	r3, [r7, #4]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	b29b      	uxth	r3, r3
 800d11a:	3301      	adds	r3, #1
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	b21a      	sxth	r2, r3
 800d120:	8c3b      	ldrh	r3, [r7, #32]
 800d122:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d126:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d12a:	f7ff ff87 	bl	800d03c <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800d12e:	e02d      	b.n	800d18c <drawLine+0xbc>
    } else if(y0 == y1){
 800d130:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d134:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d11a      	bne.n	800d172 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 800d13c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d144:	429a      	cmp	r2, r3
 800d146:	dd05      	ble.n	800d154 <drawLine+0x84>
 800d148:	88fb      	ldrh	r3, [r7, #6]
 800d14a:	81fb      	strh	r3, [r7, #14]
 800d14c:	887b      	ldrh	r3, [r7, #2]
 800d14e:	80fb      	strh	r3, [r7, #6]
 800d150:	89fb      	ldrh	r3, [r7, #14]
 800d152:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800d154:	887a      	ldrh	r2, [r7, #2]
 800d156:	88fb      	ldrh	r3, [r7, #6]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	3301      	adds	r3, #1
 800d15e:	b29b      	uxth	r3, r3
 800d160:	b21a      	sxth	r2, r3
 800d162:	8c3b      	ldrh	r3, [r7, #32]
 800d164:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d168:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d16c:	f7ff ff8b 	bl	800d086 <drawFastHLine>
}
 800d170:	e00c      	b.n	800d18c <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800d172:	f9b7 4000 	ldrsh.w	r4, [r7]
 800d176:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d17a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d17e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d182:	8c3b      	ldrh	r3, [r7, #32]
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	4623      	mov	r3, r4
 800d188:	f7ff feb6 	bl	800cef8 <writeLine>
}
 800d18c:	bf00      	nop
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	bd90      	pop	{r4, r7, pc}

0800d194 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800d194:	b590      	push	{r4, r7, lr}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4604      	mov	r4, r0
 800d19c:	4608      	mov	r0, r1
 800d19e:	4611      	mov	r1, r2
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4623      	mov	r3, r4
 800d1a4:	80fb      	strh	r3, [r7, #6]
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	80bb      	strh	r3, [r7, #4]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	807b      	strh	r3, [r7, #2]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800d1b2:	887b      	ldrh	r3, [r7, #2]
 800d1b4:	f1c3 0301 	rsb	r3, r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800d1c0:	887b      	ldrh	r3, [r7, #2]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	03d2      	lsls	r2, r2, #15
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800d1d2:	887b      	ldrh	r3, [r7, #2]
 800d1d4:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800d1d6:	e0a5      	b.n	800d324 <drawCircleHelper+0x190>
        if (f >= 0) {
 800d1d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	db0e      	blt.n	800d1fe <drawCircleHelper+0x6a>
            y--;
 800d1e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800d1ec:	8a7b      	ldrh	r3, [r7, #18]
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800d1f4:	8afa      	ldrh	r2, [r7, #22]
 800d1f6:	8a7b      	ldrh	r3, [r7, #18]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800d1fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d202:	b29b      	uxth	r3, r3
 800d204:	3301      	adds	r3, #1
 800d206:	b29b      	uxth	r3, r3
 800d208:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800d20a:	8abb      	ldrh	r3, [r7, #20]
 800d20c:	3302      	adds	r3, #2
 800d20e:	b29b      	uxth	r3, r3
 800d210:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800d212:	8afa      	ldrh	r2, [r7, #22]
 800d214:	8abb      	ldrh	r3, [r7, #20]
 800d216:	4413      	add	r3, r2
 800d218:	b29b      	uxth	r3, r3
 800d21a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800d21c:	787b      	ldrb	r3, [r7, #1]
 800d21e:	f003 0304 	and.w	r3, r3, #4
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01b      	beq.n	800d25e <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 800d226:	88fa      	ldrh	r2, [r7, #6]
 800d228:	8a3b      	ldrh	r3, [r7, #16]
 800d22a:	4413      	add	r3, r2
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	b218      	sxth	r0, r3
 800d230:	88ba      	ldrh	r2, [r7, #4]
 800d232:	89fb      	ldrh	r3, [r7, #14]
 800d234:	4413      	add	r3, r2
 800d236:	b29b      	uxth	r3, r3
 800d238:	b21b      	sxth	r3, r3
 800d23a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d23c:	4619      	mov	r1, r3
 800d23e:	f7ff fe46 	bl	800cece <writePixel>
            writePixel(x0 + y, y0 + x, color);
 800d242:	88fa      	ldrh	r2, [r7, #6]
 800d244:	89fb      	ldrh	r3, [r7, #14]
 800d246:	4413      	add	r3, r2
 800d248:	b29b      	uxth	r3, r3
 800d24a:	b218      	sxth	r0, r3
 800d24c:	88ba      	ldrh	r2, [r7, #4]
 800d24e:	8a3b      	ldrh	r3, [r7, #16]
 800d250:	4413      	add	r3, r2
 800d252:	b29b      	uxth	r3, r3
 800d254:	b21b      	sxth	r3, r3
 800d256:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d258:	4619      	mov	r1, r3
 800d25a:	f7ff fe38 	bl	800cece <writePixel>
        }
        if (cornername & 0x2) {
 800d25e:	787b      	ldrb	r3, [r7, #1]
 800d260:	f003 0302 	and.w	r3, r3, #2
 800d264:	2b00      	cmp	r3, #0
 800d266:	d01b      	beq.n	800d2a0 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 800d268:	88fa      	ldrh	r2, [r7, #6]
 800d26a:	8a3b      	ldrh	r3, [r7, #16]
 800d26c:	4413      	add	r3, r2
 800d26e:	b29b      	uxth	r3, r3
 800d270:	b218      	sxth	r0, r3
 800d272:	88ba      	ldrh	r2, [r7, #4]
 800d274:	89fb      	ldrh	r3, [r7, #14]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	b29b      	uxth	r3, r3
 800d27a:	b21b      	sxth	r3, r3
 800d27c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d27e:	4619      	mov	r1, r3
 800d280:	f7ff fe25 	bl	800cece <writePixel>
            writePixel(x0 + y, y0 - x, color);
 800d284:	88fa      	ldrh	r2, [r7, #6]
 800d286:	89fb      	ldrh	r3, [r7, #14]
 800d288:	4413      	add	r3, r2
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	b218      	sxth	r0, r3
 800d28e:	88ba      	ldrh	r2, [r7, #4]
 800d290:	8a3b      	ldrh	r3, [r7, #16]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	b29b      	uxth	r3, r3
 800d296:	b21b      	sxth	r3, r3
 800d298:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d29a:	4619      	mov	r1, r3
 800d29c:	f7ff fe17 	bl	800cece <writePixel>
        }
        if (cornername & 0x8) {
 800d2a0:	787b      	ldrb	r3, [r7, #1]
 800d2a2:	f003 0308 	and.w	r3, r3, #8
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d01b      	beq.n	800d2e2 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800d2aa:	88fa      	ldrh	r2, [r7, #6]
 800d2ac:	89fb      	ldrh	r3, [r7, #14]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	b218      	sxth	r0, r3
 800d2b4:	88ba      	ldrh	r2, [r7, #4]
 800d2b6:	8a3b      	ldrh	r3, [r7, #16]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	b21b      	sxth	r3, r3
 800d2be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f7ff fe04 	bl	800cece <writePixel>
            writePixel(x0 - x, y0 + y, color);
 800d2c6:	88fa      	ldrh	r2, [r7, #6]
 800d2c8:	8a3b      	ldrh	r3, [r7, #16]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	b218      	sxth	r0, r3
 800d2d0:	88ba      	ldrh	r2, [r7, #4]
 800d2d2:	89fb      	ldrh	r3, [r7, #14]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	b21b      	sxth	r3, r3
 800d2da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2dc:	4619      	mov	r1, r3
 800d2de:	f7ff fdf6 	bl	800cece <writePixel>
        }
        if (cornername & 0x1) {
 800d2e2:	787b      	ldrb	r3, [r7, #1]
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01b      	beq.n	800d324 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800d2ec:	88fa      	ldrh	r2, [r7, #6]
 800d2ee:	89fb      	ldrh	r3, [r7, #14]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	b218      	sxth	r0, r3
 800d2f6:	88ba      	ldrh	r2, [r7, #4]
 800d2f8:	8a3b      	ldrh	r3, [r7, #16]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	b21b      	sxth	r3, r3
 800d300:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d302:	4619      	mov	r1, r3
 800d304:	f7ff fde3 	bl	800cece <writePixel>
            writePixel(x0 - x, y0 - y, color);
 800d308:	88fa      	ldrh	r2, [r7, #6]
 800d30a:	8a3b      	ldrh	r3, [r7, #16]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	b29b      	uxth	r3, r3
 800d310:	b218      	sxth	r0, r3
 800d312:	88ba      	ldrh	r2, [r7, #4]
 800d314:	89fb      	ldrh	r3, [r7, #14]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	b29b      	uxth	r3, r3
 800d31a:	b21b      	sxth	r3, r3
 800d31c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d31e:	4619      	mov	r1, r3
 800d320:	f7ff fdd5 	bl	800cece <writePixel>
    while (x<y) {
 800d324:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	f6ff af53 	blt.w	800d1d8 <drawCircleHelper+0x44>
        }
    }
}
 800d332:	bf00      	nop
 800d334:	bf00      	nop
 800d336:	371c      	adds	r7, #28
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd90      	pop	{r4, r7, pc}

0800d33c <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	4604      	mov	r4, r0
 800d344:	4608      	mov	r0, r1
 800d346:	4611      	mov	r1, r2
 800d348:	461a      	mov	r2, r3
 800d34a:	4623      	mov	r3, r4
 800d34c:	80fb      	strh	r3, [r7, #6]
 800d34e:	4603      	mov	r3, r0
 800d350:	80bb      	strh	r3, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	807b      	strh	r3, [r7, #2]
 800d356:	4613      	mov	r3, r2
 800d358:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800d35a:	887b      	ldrh	r3, [r7, #2]
 800d35c:	f1c3 0301 	rsb	r3, r3, #1
 800d360:	b29b      	uxth	r3, r3
 800d362:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800d364:	2301      	movs	r3, #1
 800d366:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800d368:	887b      	ldrh	r3, [r7, #2]
 800d36a:	461a      	mov	r2, r3
 800d36c:	03d2      	lsls	r2, r2, #15
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	b29b      	uxth	r3, r3
 800d374:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800d37a:	887b      	ldrh	r3, [r7, #2]
 800d37c:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 800d37e:	8a3b      	ldrh	r3, [r7, #16]
 800d380:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800d382:	89fb      	ldrh	r3, [r7, #14]
 800d384:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 800d386:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	3301      	adds	r3, #1
 800d38e:	b29b      	uxth	r3, r3
 800d390:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 800d392:	e095      	b.n	800d4c0 <fillCircleHelper+0x184>
        if (f >= 0) {
 800d394:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	db0e      	blt.n	800d3ba <fillCircleHelper+0x7e>
            y--;
 800d39c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800d3a8:	8a7b      	ldrh	r3, [r7, #18]
 800d3aa:	3302      	adds	r3, #2
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800d3b0:	8afa      	ldrh	r2, [r7, #22]
 800d3b2:	8a7b      	ldrh	r3, [r7, #18]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800d3ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800d3c6:	8abb      	ldrh	r3, [r7, #20]
 800d3c8:	3302      	adds	r3, #2
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800d3ce:	8afa      	ldrh	r2, [r7, #22]
 800d3d0:	8abb      	ldrh	r3, [r7, #20]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 800d3d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d3dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	db31      	blt.n	800d448 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800d3e4:	787b      	ldrb	r3, [r7, #1]
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d013      	beq.n	800d416 <fillCircleHelper+0xda>
 800d3ee:	88fa      	ldrh	r2, [r7, #6]
 800d3f0:	8a3b      	ldrh	r3, [r7, #16]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	b218      	sxth	r0, r3
 800d3f8:	88ba      	ldrh	r2, [r7, #4]
 800d3fa:	89fb      	ldrh	r3, [r7, #14]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	b219      	sxth	r1, r3
 800d402:	89fb      	ldrh	r3, [r7, #14]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	b29a      	uxth	r2, r3
 800d408:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d40a:	4413      	add	r3, r2
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	b21a      	sxth	r2, r3
 800d410:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d412:	f7ff fe13 	bl	800d03c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800d416:	787b      	ldrb	r3, [r7, #1]
 800d418:	f003 0302 	and.w	r3, r3, #2
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d013      	beq.n	800d448 <fillCircleHelper+0x10c>
 800d420:	88fa      	ldrh	r2, [r7, #6]
 800d422:	8a3b      	ldrh	r3, [r7, #16]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	b29b      	uxth	r3, r3
 800d428:	b218      	sxth	r0, r3
 800d42a:	88ba      	ldrh	r2, [r7, #4]
 800d42c:	89fb      	ldrh	r3, [r7, #14]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	b29b      	uxth	r3, r3
 800d432:	b219      	sxth	r1, r3
 800d434:	89fb      	ldrh	r3, [r7, #14]
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	b29a      	uxth	r2, r3
 800d43a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d43c:	4413      	add	r3, r2
 800d43e:	b29b      	uxth	r3, r3
 800d440:	b21a      	sxth	r2, r3
 800d442:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d444:	f7ff fdfa 	bl	800d03c <drawFastVLine>
        }
        if(y != py) {
 800d448:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d44c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d450:	429a      	cmp	r2, r3
 800d452:	d033      	beq.n	800d4bc <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 800d454:	787b      	ldrb	r3, [r7, #1]
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d013      	beq.n	800d486 <fillCircleHelper+0x14a>
 800d45e:	88fa      	ldrh	r2, [r7, #6]
 800d460:	897b      	ldrh	r3, [r7, #10]
 800d462:	4413      	add	r3, r2
 800d464:	b29b      	uxth	r3, r3
 800d466:	b218      	sxth	r0, r3
 800d468:	88ba      	ldrh	r2, [r7, #4]
 800d46a:	89bb      	ldrh	r3, [r7, #12]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	b29b      	uxth	r3, r3
 800d470:	b219      	sxth	r1, r3
 800d472:	89bb      	ldrh	r3, [r7, #12]
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	b29a      	uxth	r2, r3
 800d478:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d47a:	4413      	add	r3, r2
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	b21a      	sxth	r2, r3
 800d480:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d482:	f7ff fddb 	bl	800d03c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800d486:	787b      	ldrb	r3, [r7, #1]
 800d488:	f003 0302 	and.w	r3, r3, #2
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d013      	beq.n	800d4b8 <fillCircleHelper+0x17c>
 800d490:	88fa      	ldrh	r2, [r7, #6]
 800d492:	897b      	ldrh	r3, [r7, #10]
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	b29b      	uxth	r3, r3
 800d498:	b218      	sxth	r0, r3
 800d49a:	88ba      	ldrh	r2, [r7, #4]
 800d49c:	89bb      	ldrh	r3, [r7, #12]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	b219      	sxth	r1, r3
 800d4a4:	89bb      	ldrh	r3, [r7, #12]
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4ac:	4413      	add	r3, r2
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	b21a      	sxth	r2, r3
 800d4b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d4b4:	f7ff fdc2 	bl	800d03c <drawFastVLine>
            py = y;
 800d4b8:	89fb      	ldrh	r3, [r7, #14]
 800d4ba:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800d4bc:	8a3b      	ldrh	r3, [r7, #16]
 800d4be:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 800d4c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d4c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	f6ff af63 	blt.w	800d394 <fillCircleHelper+0x58>
    }
}
 800d4ce:	bf00      	nop
 800d4d0:	bf00      	nop
 800d4d2:	371c      	adds	r7, #28
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd90      	pop	{r4, r7, pc}

0800d4d8 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800d4d8:	b590      	push	{r4, r7, lr}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af02      	add	r7, sp, #8
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	4623      	mov	r3, r4
 800d4e8:	80fb      	strh	r3, [r7, #6]
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	80bb      	strh	r3, [r7, #4]
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	807b      	strh	r3, [r7, #2]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800d4f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d4fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4fe:	4293      	cmp	r3, r2
 800d500:	bfa8      	it	ge
 800d502:	4613      	movge	r3, r2
 800d504:	b21b      	sxth	r3, r3
 800d506:	0fda      	lsrs	r2, r3, #31
 800d508:	4413      	add	r3, r2
 800d50a:	105b      	asrs	r3, r3, #1
 800d50c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800d50e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d512:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d516:	429a      	cmp	r2, r3
 800d518:	dd01      	ble.n	800d51e <drawRoundRect+0x46>
 800d51a:	89fb      	ldrh	r3, [r7, #14]
 800d51c:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800d51e:	88fa      	ldrh	r2, [r7, #6]
 800d520:	8c3b      	ldrh	r3, [r7, #32]
 800d522:	4413      	add	r3, r2
 800d524:	b29b      	uxth	r3, r3
 800d526:	b218      	sxth	r0, r3
 800d528:	887a      	ldrh	r2, [r7, #2]
 800d52a:	8c3b      	ldrh	r3, [r7, #32]
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	b29b      	uxth	r3, r3
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	b29b      	uxth	r3, r3
 800d534:	b21a      	sxth	r2, r3
 800d536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d538:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d53c:	f7ff fda3 	bl	800d086 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800d540:	88fa      	ldrh	r2, [r7, #6]
 800d542:	8c3b      	ldrh	r3, [r7, #32]
 800d544:	4413      	add	r3, r2
 800d546:	b29b      	uxth	r3, r3
 800d548:	b218      	sxth	r0, r3
 800d54a:	88ba      	ldrh	r2, [r7, #4]
 800d54c:	883b      	ldrh	r3, [r7, #0]
 800d54e:	4413      	add	r3, r2
 800d550:	b29b      	uxth	r3, r3
 800d552:	3b01      	subs	r3, #1
 800d554:	b29b      	uxth	r3, r3
 800d556:	b219      	sxth	r1, r3
 800d558:	887a      	ldrh	r2, [r7, #2]
 800d55a:	8c3b      	ldrh	r3, [r7, #32]
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	b29b      	uxth	r3, r3
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	b29b      	uxth	r3, r3
 800d564:	b21a      	sxth	r2, r3
 800d566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d568:	f7ff fd8d 	bl	800d086 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 800d56c:	88ba      	ldrh	r2, [r7, #4]
 800d56e:	8c3b      	ldrh	r3, [r7, #32]
 800d570:	4413      	add	r3, r2
 800d572:	b29b      	uxth	r3, r3
 800d574:	b219      	sxth	r1, r3
 800d576:	883a      	ldrh	r2, [r7, #0]
 800d578:	8c3b      	ldrh	r3, [r7, #32]
 800d57a:	005b      	lsls	r3, r3, #1
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	b29b      	uxth	r3, r3
 800d582:	b21a      	sxth	r2, r3
 800d584:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d586:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d58a:	f7ff fd57 	bl	800d03c <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800d58e:	88fa      	ldrh	r2, [r7, #6]
 800d590:	887b      	ldrh	r3, [r7, #2]
 800d592:	4413      	add	r3, r2
 800d594:	b29b      	uxth	r3, r3
 800d596:	3b01      	subs	r3, #1
 800d598:	b29b      	uxth	r3, r3
 800d59a:	b218      	sxth	r0, r3
 800d59c:	88ba      	ldrh	r2, [r7, #4]
 800d59e:	8c3b      	ldrh	r3, [r7, #32]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	b219      	sxth	r1, r3
 800d5a6:	883a      	ldrh	r2, [r7, #0]
 800d5a8:	8c3b      	ldrh	r3, [r7, #32]
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	b21a      	sxth	r2, r3
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5b6:	f7ff fd41 	bl	800d03c <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	8c3b      	ldrh	r3, [r7, #32]
 800d5be:	4413      	add	r3, r2
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	b218      	sxth	r0, r3
 800d5c4:	88ba      	ldrh	r2, [r7, #4]
 800d5c6:	8c3b      	ldrh	r3, [r7, #32]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	b219      	sxth	r1, r3
 800d5ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f7ff fddc 	bl	800d194 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800d5dc:	88fa      	ldrh	r2, [r7, #6]
 800d5de:	887b      	ldrh	r3, [r7, #2]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	8c3b      	ldrh	r3, [r7, #32]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	b218      	sxth	r0, r3
 800d5f0:	88ba      	ldrh	r2, [r7, #4]
 800d5f2:	8c3b      	ldrh	r3, [r7, #32]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	b219      	sxth	r1, r3
 800d5fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	2302      	movs	r3, #2
 800d604:	f7ff fdc6 	bl	800d194 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800d608:	88fa      	ldrh	r2, [r7, #6]
 800d60a:	887b      	ldrh	r3, [r7, #2]
 800d60c:	4413      	add	r3, r2
 800d60e:	b29a      	uxth	r2, r3
 800d610:	8c3b      	ldrh	r3, [r7, #32]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	b29b      	uxth	r3, r3
 800d616:	3b01      	subs	r3, #1
 800d618:	b29b      	uxth	r3, r3
 800d61a:	b218      	sxth	r0, r3
 800d61c:	88ba      	ldrh	r2, [r7, #4]
 800d61e:	883b      	ldrh	r3, [r7, #0]
 800d620:	4413      	add	r3, r2
 800d622:	b29a      	uxth	r2, r3
 800d624:	8c3b      	ldrh	r3, [r7, #32]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3b01      	subs	r3, #1
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	b219      	sxth	r1, r3
 800d630:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	2304      	movs	r3, #4
 800d63a:	f7ff fdab 	bl	800d194 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800d63e:	88fa      	ldrh	r2, [r7, #6]
 800d640:	8c3b      	ldrh	r3, [r7, #32]
 800d642:	4413      	add	r3, r2
 800d644:	b29b      	uxth	r3, r3
 800d646:	b218      	sxth	r0, r3
 800d648:	88ba      	ldrh	r2, [r7, #4]
 800d64a:	883b      	ldrh	r3, [r7, #0]
 800d64c:	4413      	add	r3, r2
 800d64e:	b29a      	uxth	r2, r3
 800d650:	8c3b      	ldrh	r3, [r7, #32]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	b29b      	uxth	r3, r3
 800d656:	3b01      	subs	r3, #1
 800d658:	b29b      	uxth	r3, r3
 800d65a:	b219      	sxth	r1, r3
 800d65c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d660:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	2308      	movs	r3, #8
 800d666:	f7ff fd95 	bl	800d194 <drawCircleHelper>
}
 800d66a:	bf00      	nop
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd90      	pop	{r4, r7, pc}

0800d672 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800d672:	b590      	push	{r4, r7, lr}
 800d674:	b087      	sub	sp, #28
 800d676:	af02      	add	r7, sp, #8
 800d678:	4604      	mov	r4, r0
 800d67a:	4608      	mov	r0, r1
 800d67c:	4611      	mov	r1, r2
 800d67e:	461a      	mov	r2, r3
 800d680:	4623      	mov	r3, r4
 800d682:	80fb      	strh	r3, [r7, #6]
 800d684:	4603      	mov	r3, r0
 800d686:	80bb      	strh	r3, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	807b      	strh	r3, [r7, #2]
 800d68c:	4613      	mov	r3, r2
 800d68e:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800d690:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d694:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d698:	4293      	cmp	r3, r2
 800d69a:	bfa8      	it	ge
 800d69c:	4613      	movge	r3, r2
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	0fda      	lsrs	r2, r3, #31
 800d6a2:	4413      	add	r3, r2
 800d6a4:	105b      	asrs	r3, r3, #1
 800d6a6:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800d6a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	dd01      	ble.n	800d6b8 <fillRoundRect+0x46>
 800d6b4:	89fb      	ldrh	r3, [r7, #14]
 800d6b6:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 800d6b8:	88fa      	ldrh	r2, [r7, #6]
 800d6ba:	8c3b      	ldrh	r3, [r7, #32]
 800d6bc:	4413      	add	r3, r2
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	b218      	sxth	r0, r3
 800d6c2:	887a      	ldrh	r2, [r7, #2]
 800d6c4:	8c3b      	ldrh	r3, [r7, #32]
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	b21a      	sxth	r2, r3
 800d6d0:	f9b7 4000 	ldrsh.w	r4, [r7]
 800d6d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d6d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	4623      	mov	r3, r4
 800d6de:	f7ff fbda 	bl	800ce96 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800d6e2:	88fa      	ldrh	r2, [r7, #6]
 800d6e4:	887b      	ldrh	r3, [r7, #2]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	8c3b      	ldrh	r3, [r7, #32]
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	b218      	sxth	r0, r3
 800d6f6:	88ba      	ldrh	r2, [r7, #4]
 800d6f8:	8c3b      	ldrh	r3, [r7, #32]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	b219      	sxth	r1, r3
 800d700:	883a      	ldrh	r2, [r7, #0]
 800d702:	8c3b      	ldrh	r3, [r7, #32]
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	b29b      	uxth	r3, r3
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	3b01      	subs	r3, #1
 800d70e:	b29b      	uxth	r3, r3
 800d710:	b21b      	sxth	r3, r3
 800d712:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800d716:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d718:	9201      	str	r2, [sp, #4]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	2301      	movs	r3, #1
 800d71e:	4622      	mov	r2, r4
 800d720:	f7ff fe0c 	bl	800d33c <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800d724:	88fa      	ldrh	r2, [r7, #6]
 800d726:	8c3b      	ldrh	r3, [r7, #32]
 800d728:	4413      	add	r3, r2
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	b218      	sxth	r0, r3
 800d72e:	88ba      	ldrh	r2, [r7, #4]
 800d730:	8c3b      	ldrh	r3, [r7, #32]
 800d732:	4413      	add	r3, r2
 800d734:	b29b      	uxth	r3, r3
 800d736:	b219      	sxth	r1, r3
 800d738:	883a      	ldrh	r2, [r7, #0]
 800d73a:	8c3b      	ldrh	r3, [r7, #32]
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	b29b      	uxth	r3, r3
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	b29b      	uxth	r3, r3
 800d744:	3b01      	subs	r3, #1
 800d746:	b29b      	uxth	r3, r3
 800d748:	b21b      	sxth	r3, r3
 800d74a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800d74e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d750:	9201      	str	r2, [sp, #4]
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	2302      	movs	r3, #2
 800d756:	4622      	mov	r2, r4
 800d758:	f7ff fdf0 	bl	800d33c <fillCircleHelper>
}
 800d75c:	bf00      	nop
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	bd90      	pop	{r4, r7, pc}

0800d764 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af02      	add	r7, sp, #8
 800d76a:	4603      	mov	r3, r0
 800d76c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800d76e:	4b08      	ldr	r3, [pc, #32]	@ (800d790 <fillScreen+0x2c>)
 800d770:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d774:	4b07      	ldr	r3, [pc, #28]	@ (800d794 <fillScreen+0x30>)
 800d776:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	460b      	mov	r3, r1
 800d780:	2100      	movs	r1, #0
 800d782:	2000      	movs	r0, #0
 800d784:	f7ff fb87 	bl	800ce96 <fillRect>
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20001316 	.word	0x20001316
 800d794:	20001318 	.word	0x20001318

0800d798 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800d79c:	2200      	movs	r2, #0
 800d79e:	2102      	movs	r1, #2
 800d7a0:	4802      	ldr	r0, [pc, #8]	@ (800d7ac <ST7735_Select+0x14>)
 800d7a2:	f003 ff55 	bl	8011650 <HAL_GPIO_WritePin>
}
 800d7a6:	bf00      	nop
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	40020000 	.word	0x40020000

0800d7b0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	4802      	ldr	r0, [pc, #8]	@ (800d7c4 <ST7735_Unselect+0x14>)
 800d7ba:	f003 ff49 	bl	8011650 <HAL_GPIO_WritePin>
}
 800d7be:	bf00      	nop
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	40020000 	.word	0x40020000

0800d7c8 <ST7735_Reset>:

void ST7735_Reset()
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2110      	movs	r1, #16
 800d7d0:	4806      	ldr	r0, [pc, #24]	@ (800d7ec <ST7735_Reset+0x24>)
 800d7d2:	f003 ff3d 	bl	8011650 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800d7d6:	2005      	movs	r0, #5
 800d7d8:	f003 fad0 	bl	8010d7c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800d7dc:	2201      	movs	r2, #1
 800d7de:	2110      	movs	r1, #16
 800d7e0:	4802      	ldr	r0, [pc, #8]	@ (800d7ec <ST7735_Reset+0x24>)
 800d7e2:	f003 ff35 	bl	8011650 <HAL_GPIO_WritePin>
}
 800d7e6:	bf00      	nop
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	40020000 	.word	0x40020000

0800d7f0 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	2110      	movs	r1, #16
 800d7fe:	4807      	ldr	r0, [pc, #28]	@ (800d81c <ST7735_WriteCommand+0x2c>)
 800d800:	f003 ff26 	bl	8011650 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800d804:	1df9      	adds	r1, r7, #7
 800d806:	f04f 33ff 	mov.w	r3, #4294967295
 800d80a:	2201      	movs	r2, #1
 800d80c:	4804      	ldr	r0, [pc, #16]	@ (800d820 <ST7735_WriteCommand+0x30>)
 800d80e:	f004 fe20 	bl	8012452 <HAL_SPI_Transmit>
}
 800d812:	bf00      	nop
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	40020800 	.word	0x40020800
 800d820:	20001328 	.word	0x20001328

0800d824 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800d82e:	2201      	movs	r2, #1
 800d830:	2110      	movs	r1, #16
 800d832:	4807      	ldr	r0, [pc, #28]	@ (800d850 <ST7735_WriteData+0x2c>)
 800d834:	f003 ff0c 	bl	8011650 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	f04f 33ff 	mov.w	r3, #4294967295
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	4804      	ldr	r0, [pc, #16]	@ (800d854 <ST7735_WriteData+0x30>)
 800d844:	f004 fe05 	bl	8012452 <HAL_SPI_Transmit>
}
 800d848:	bf00      	nop
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	40020800 	.word	0x40020800
 800d854:	20001328 	.word	0x20001328

0800d858 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	607a      	str	r2, [r7, #4]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800d86a:	e034      	b.n	800d8d6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	607a      	str	r2, [r7, #4]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800d876:	7afb      	ldrb	r3, [r7, #11]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff ffb9 	bl	800d7f0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	1c5a      	adds	r2, r3, #1
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800d888:	7abb      	ldrb	r3, [r7, #10]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d890:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800d892:	7abb      	ldrb	r3, [r7, #10]
 800d894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d898:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800d89a:	7abb      	ldrb	r3, [r7, #10]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d008      	beq.n	800d8b2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800d8a0:	7abb      	ldrb	r3, [r7, #10]
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ffbd 	bl	800d824 <ST7735_WriteData>
            addr += numArgs;
 800d8aa:	7abb      	ldrb	r3, [r7, #10]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800d8b2:	89bb      	ldrh	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00e      	beq.n	800d8d6 <DisplayInit+0x7e>
            ms = *addr++;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	607a      	str	r2, [r7, #4]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800d8c2:	89bb      	ldrh	r3, [r7, #12]
 800d8c4:	2bff      	cmp	r3, #255	@ 0xff
 800d8c6:	d102      	bne.n	800d8ce <DisplayInit+0x76>
 800d8c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d8cc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800d8ce:	89bb      	ldrh	r3, [r7, #12]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f003 fa53 	bl	8010d7c <HAL_Delay>
    while(numCommands--) {
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	1e5a      	subs	r2, r3, #1
 800d8da:	73fa      	strb	r2, [r7, #15]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1c5      	bne.n	800d86c <DisplayInit+0x14>
        }
    }
}
 800d8e0:	bf00      	nop
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800d8ec:	b590      	push	{r4, r7, lr}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4623      	mov	r3, r4
 800d8fc:	71fb      	strb	r3, [r7, #7]
 800d8fe:	4603      	mov	r3, r0
 800d900:	71bb      	strb	r3, [r7, #6]
 800d902:	460b      	mov	r3, r1
 800d904:	717b      	strb	r3, [r7, #5]
 800d906:	4613      	mov	r3, r2
 800d908:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800d90a:	202a      	movs	r0, #42	@ 0x2a
 800d90c:	f7ff ff70 	bl	800d7f0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800d910:	2300      	movs	r3, #0
 800d912:	733b      	strb	r3, [r7, #12]
 800d914:	4b17      	ldr	r3, [pc, #92]	@ (800d974 <ST7735_SetAddressWindow+0x88>)
 800d916:	781a      	ldrb	r2, [r3, #0]
 800d918:	79fb      	ldrb	r3, [r7, #7]
 800d91a:	4413      	add	r3, r2
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	737b      	strb	r3, [r7, #13]
 800d920:	2300      	movs	r3, #0
 800d922:	73bb      	strb	r3, [r7, #14]
 800d924:	4b13      	ldr	r3, [pc, #76]	@ (800d974 <ST7735_SetAddressWindow+0x88>)
 800d926:	781a      	ldrb	r2, [r3, #0]
 800d928:	797b      	ldrb	r3, [r7, #5]
 800d92a:	4413      	add	r3, r2
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	2104      	movs	r1, #4
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff ff74 	bl	800d824 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800d93c:	202b      	movs	r0, #43	@ 0x2b
 800d93e:	f7ff ff57 	bl	800d7f0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800d942:	4b0d      	ldr	r3, [pc, #52]	@ (800d978 <ST7735_SetAddressWindow+0x8c>)
 800d944:	781a      	ldrb	r2, [r3, #0]
 800d946:	79bb      	ldrb	r3, [r7, #6]
 800d948:	4413      	add	r3, r2
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800d94e:	4b0a      	ldr	r3, [pc, #40]	@ (800d978 <ST7735_SetAddressWindow+0x8c>)
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	793b      	ldrb	r3, [r7, #4]
 800d954:	4413      	add	r3, r2
 800d956:	b2db      	uxtb	r3, r3
 800d958:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800d95a:	f107 030c 	add.w	r3, r7, #12
 800d95e:	2104      	movs	r1, #4
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff ff5f 	bl	800d824 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800d966:	202c      	movs	r0, #44	@ 0x2c
 800d968:	f7ff ff42 	bl	800d7f0 <ST7735_WriteCommand>
}
 800d96c:	bf00      	nop
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	bd90      	pop	{r4, r7, pc}
 800d974:	2000131d 	.word	0x2000131d
 800d978:	2000131e 	.word	0x2000131e

0800d97c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800d986:	f7ff ff07 	bl	800d798 <ST7735_Select>
    ST7735_Reset();
 800d98a:	f7ff ff1d 	bl	800d7c8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800d98e:	480c      	ldr	r0, [pc, #48]	@ (800d9c0 <ST7735_Init+0x44>)
 800d990:	f7ff ff62 	bl	800d858 <DisplayInit>
    DisplayInit(init_cmds2);
 800d994:	480b      	ldr	r0, [pc, #44]	@ (800d9c4 <ST7735_Init+0x48>)
 800d996:	f7ff ff5f 	bl	800d858 <DisplayInit>
    DisplayInit(init_cmds3);
 800d99a:	480b      	ldr	r0, [pc, #44]	@ (800d9c8 <ST7735_Init+0x4c>)
 800d99c:	f7ff ff5c 	bl	800d858 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800d9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <ST7735_Init+0x50>)
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800d9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d0 <ST7735_Init+0x54>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 f810 	bl	800d9d4 <ST7735_SetRotation>
    ST7735_Unselect();
 800d9b4:	f7ff fefc 	bl	800d7b0 <ST7735_Unselect>

}
 800d9b8:	bf00      	nop
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	0801d704 	.word	0x0801d704
 800d9c4:	0801d73c 	.word	0x0801d73c
 800d9c8:	0801d74c 	.word	0x0801d74c
 800d9cc:	2000131b 	.word	0x2000131b
 800d9d0:	2000131c 	.word	0x2000131c

0800d9d4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	4603      	mov	r3, r0
 800d9dc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	f003 0303 	and.w	r3, r3, #3
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	4b33      	ldr	r3, [pc, #204]	@ (800dab8 <ST7735_SetRotation+0xe4>)
 800d9ec:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800d9ee:	4b32      	ldr	r3, [pc, #200]	@ (800dab8 <ST7735_SetRotation+0xe4>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d84e      	bhi.n	800da94 <ST7735_SetRotation+0xc0>
 800d9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9fc <ST7735_SetRotation+0x28>)
 800d9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fc:	0800da0d 	.word	0x0800da0d
 800da00:	0800da2f 	.word	0x0800da2f
 800da04:	0800da51 	.word	0x0800da51
 800da08:	0800da73 	.word	0x0800da73
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800da0c:	23c0      	movs	r3, #192	@ 0xc0
 800da0e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800da10:	4b2a      	ldr	r3, [pc, #168]	@ (800dabc <ST7735_SetRotation+0xe8>)
 800da12:	22a0      	movs	r2, #160	@ 0xa0
 800da14:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800da16:	4b2a      	ldr	r3, [pc, #168]	@ (800dac0 <ST7735_SetRotation+0xec>)
 800da18:	2280      	movs	r2, #128	@ 0x80
 800da1a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800da1c:	4b29      	ldr	r3, [pc, #164]	@ (800dac4 <ST7735_SetRotation+0xf0>)
 800da1e:	781a      	ldrb	r2, [r3, #0]
 800da20:	4b29      	ldr	r3, [pc, #164]	@ (800dac8 <ST7735_SetRotation+0xf4>)
 800da22:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800da24:	4b29      	ldr	r3, [pc, #164]	@ (800dacc <ST7735_SetRotation+0xf8>)
 800da26:	781a      	ldrb	r2, [r3, #0]
 800da28:	4b29      	ldr	r3, [pc, #164]	@ (800dad0 <ST7735_SetRotation+0xfc>)
 800da2a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800da2c:	e032      	b.n	800da94 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800da2e:	23a0      	movs	r3, #160	@ 0xa0
 800da30:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800da32:	4b23      	ldr	r3, [pc, #140]	@ (800dac0 <ST7735_SetRotation+0xec>)
 800da34:	22a0      	movs	r2, #160	@ 0xa0
 800da36:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800da38:	4b20      	ldr	r3, [pc, #128]	@ (800dabc <ST7735_SetRotation+0xe8>)
 800da3a:	2280      	movs	r2, #128	@ 0x80
 800da3c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800da3e:	4b21      	ldr	r3, [pc, #132]	@ (800dac4 <ST7735_SetRotation+0xf0>)
 800da40:	781a      	ldrb	r2, [r3, #0]
 800da42:	4b23      	ldr	r3, [pc, #140]	@ (800dad0 <ST7735_SetRotation+0xfc>)
 800da44:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800da46:	4b21      	ldr	r3, [pc, #132]	@ (800dacc <ST7735_SetRotation+0xf8>)
 800da48:	781a      	ldrb	r2, [r3, #0]
 800da4a:	4b1f      	ldr	r3, [pc, #124]	@ (800dac8 <ST7735_SetRotation+0xf4>)
 800da4c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800da4e:	e021      	b.n	800da94 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800da54:	4b19      	ldr	r3, [pc, #100]	@ (800dabc <ST7735_SetRotation+0xe8>)
 800da56:	22a0      	movs	r2, #160	@ 0xa0
 800da58:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800da5a:	4b19      	ldr	r3, [pc, #100]	@ (800dac0 <ST7735_SetRotation+0xec>)
 800da5c:	2280      	movs	r2, #128	@ 0x80
 800da5e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800da60:	4b18      	ldr	r3, [pc, #96]	@ (800dac4 <ST7735_SetRotation+0xf0>)
 800da62:	781a      	ldrb	r2, [r3, #0]
 800da64:	4b18      	ldr	r3, [pc, #96]	@ (800dac8 <ST7735_SetRotation+0xf4>)
 800da66:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800da68:	4b18      	ldr	r3, [pc, #96]	@ (800dacc <ST7735_SetRotation+0xf8>)
 800da6a:	781a      	ldrb	r2, [r3, #0]
 800da6c:	4b18      	ldr	r3, [pc, #96]	@ (800dad0 <ST7735_SetRotation+0xfc>)
 800da6e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800da70:	e010      	b.n	800da94 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800da72:	2360      	movs	r3, #96	@ 0x60
 800da74:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800da76:	4b12      	ldr	r3, [pc, #72]	@ (800dac0 <ST7735_SetRotation+0xec>)
 800da78:	22a0      	movs	r2, #160	@ 0xa0
 800da7a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800da7c:	4b0f      	ldr	r3, [pc, #60]	@ (800dabc <ST7735_SetRotation+0xe8>)
 800da7e:	2280      	movs	r2, #128	@ 0x80
 800da80:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800da82:	4b10      	ldr	r3, [pc, #64]	@ (800dac4 <ST7735_SetRotation+0xf0>)
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	4b12      	ldr	r3, [pc, #72]	@ (800dad0 <ST7735_SetRotation+0xfc>)
 800da88:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800da8a:	4b10      	ldr	r3, [pc, #64]	@ (800dacc <ST7735_SetRotation+0xf8>)
 800da8c:	781a      	ldrb	r2, [r3, #0]
 800da8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dac8 <ST7735_SetRotation+0xf4>)
 800da90:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800da92:	bf00      	nop
  }
  ST7735_Select();
 800da94:	f7ff fe80 	bl	800d798 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800da98:	2036      	movs	r0, #54	@ 0x36
 800da9a:	f7ff fea9 	bl	800d7f0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800da9e:	f107 030f 	add.w	r3, r7, #15
 800daa2:	2101      	movs	r1, #1
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7ff febd 	bl	800d824 <ST7735_WriteData>
  ST7735_Unselect();
 800daaa:	f7ff fe81 	bl	800d7b0 <ST7735_Unselect>
}
 800daae:	bf00      	nop
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	2000131a 	.word	0x2000131a
 800dabc:	20001318 	.word	0x20001318
 800dac0:	20001316 	.word	0x20001316
 800dac4:	2000131b 	.word	0x2000131b
 800dac8:	2000131d 	.word	0x2000131d
 800dacc:	2000131c 	.word	0x2000131c
 800dad0:	2000131e 	.word	0x2000131e

0800dad4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	80fb      	strh	r3, [r7, #6]
 800dade:	460b      	mov	r3, r1
 800dae0:	80bb      	strh	r3, [r7, #4]
 800dae2:	4613      	mov	r3, r2
 800dae4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800dae6:	88fb      	ldrh	r3, [r7, #6]
 800dae8:	4a17      	ldr	r2, [pc, #92]	@ (800db48 <ST7735_DrawPixel+0x74>)
 800daea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800daee:	4293      	cmp	r3, r2
 800daf0:	da26      	bge.n	800db40 <ST7735_DrawPixel+0x6c>
 800daf2:	88bb      	ldrh	r3, [r7, #4]
 800daf4:	4a15      	ldr	r2, [pc, #84]	@ (800db4c <ST7735_DrawPixel+0x78>)
 800daf6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dafa:	4293      	cmp	r3, r2
 800dafc:	da20      	bge.n	800db40 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800dafe:	f7ff fe4b 	bl	800d798 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800db02:	88fb      	ldrh	r3, [r7, #6]
 800db04:	b2d8      	uxtb	r0, r3
 800db06:	88bb      	ldrh	r3, [r7, #4]
 800db08:	b2d9      	uxtb	r1, r3
 800db0a:	88fb      	ldrh	r3, [r7, #6]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	3301      	adds	r3, #1
 800db10:	b2da      	uxtb	r2, r3
 800db12:	88bb      	ldrh	r3, [r7, #4]
 800db14:	b2db      	uxtb	r3, r3
 800db16:	3301      	adds	r3, #1
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	f7ff fee7 	bl	800d8ec <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800db1e:	887b      	ldrh	r3, [r7, #2]
 800db20:	0a1b      	lsrs	r3, r3, #8
 800db22:	b29b      	uxth	r3, r3
 800db24:	b2db      	uxtb	r3, r3
 800db26:	733b      	strb	r3, [r7, #12]
 800db28:	887b      	ldrh	r3, [r7, #2]
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800db2e:	f107 030c 	add.w	r3, r7, #12
 800db32:	2102      	movs	r1, #2
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fe75 	bl	800d824 <ST7735_WriteData>

    ST7735_Unselect();
 800db3a:	f7ff fe39 	bl	800d7b0 <ST7735_Unselect>
 800db3e:	e000      	b.n	800db42 <ST7735_DrawPixel+0x6e>
        return;
 800db40:	bf00      	nop
}
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20001316 	.word	0x20001316
 800db4c:	20001318 	.word	0x20001318

0800db50 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800db50:	b082      	sub	sp, #8
 800db52:	b590      	push	{r4, r7, lr}
 800db54:	b089      	sub	sp, #36	@ 0x24
 800db56:	af00      	add	r7, sp, #0
 800db58:	637b      	str	r3, [r7, #52]	@ 0x34
 800db5a:	4603      	mov	r3, r0
 800db5c:	80fb      	strh	r3, [r7, #6]
 800db5e:	460b      	mov	r3, r1
 800db60:	80bb      	strh	r3, [r7, #4]
 800db62:	4613      	mov	r3, r2
 800db64:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800db66:	88fb      	ldrh	r3, [r7, #6]
 800db68:	b2d8      	uxtb	r0, r3
 800db6a:	88bb      	ldrh	r3, [r7, #4]
 800db6c:	b2d9      	uxtb	r1, r3
 800db6e:	88fb      	ldrh	r3, [r7, #6]
 800db70:	b2da      	uxtb	r2, r3
 800db72:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800db76:	4413      	add	r3, r2
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	3b01      	subs	r3, #1
 800db7c:	b2dc      	uxtb	r4, r3
 800db7e:	88bb      	ldrh	r3, [r7, #4]
 800db80:	b2da      	uxtb	r2, r3
 800db82:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800db86:	4413      	add	r3, r2
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	3b01      	subs	r3, #1
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	4622      	mov	r2, r4
 800db90:	f7ff feac 	bl	800d8ec <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800db94:	2300      	movs	r3, #0
 800db96:	61fb      	str	r3, [r7, #28]
 800db98:	e043      	b.n	800dc22 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800db9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db9c:	78fb      	ldrb	r3, [r7, #3]
 800db9e:	3b20      	subs	r3, #32
 800dba0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800dba4:	fb01 f303 	mul.w	r3, r1, r3
 800dba8:	4619      	mov	r1, r3
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	440b      	add	r3, r1
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	4413      	add	r3, r2
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61bb      	str	r3, [r7, #24]
 800dbba:	e029      	b.n	800dc10 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800dbbc:	697a      	ldr	r2, [r7, #20]
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00e      	beq.n	800dbea <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800dbcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dbce:	0a1b      	lsrs	r3, r3, #8
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	743b      	strb	r3, [r7, #16]
 800dbd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800dbdc:	f107 0310 	add.w	r3, r7, #16
 800dbe0:	2102      	movs	r1, #2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7ff fe1e 	bl	800d824 <ST7735_WriteData>
 800dbe8:	e00f      	b.n	800dc0a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800dbea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	733b      	strb	r3, [r7, #12]
 800dbf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800dbfe:	f107 030c 	add.w	r3, r7, #12
 800dc02:	2102      	movs	r1, #2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff fe0d 	bl	800d824 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	61bb      	str	r3, [r7, #24]
 800dc10:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800dc14:	461a      	mov	r2, r3
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d3cf      	bcc.n	800dbbc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	61fb      	str	r3, [r7, #28]
 800dc22:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800dc26:	461a      	mov	r2, r3
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d3b5      	bcc.n	800db9a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800dc2e:	bf00      	nop
 800dc30:	bf00      	nop
 800dc32:	3724      	adds	r7, #36	@ 0x24
 800dc34:	46bd      	mov	sp, r7
 800dc36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800dc3a:	b002      	add	sp, #8
 800dc3c:	4770      	bx	lr
	...

0800dc40 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800dc40:	b082      	sub	sp, #8
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b086      	sub	sp, #24
 800dc46:	af04      	add	r7, sp, #16
 800dc48:	603a      	str	r2, [r7, #0]
 800dc4a:	617b      	str	r3, [r7, #20]
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	80fb      	strh	r3, [r7, #6]
 800dc50:	460b      	mov	r3, r1
 800dc52:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800dc54:	f7ff fda0 	bl	800d798 <ST7735_Select>

    while(*str) {
 800dc58:	e033      	b.n	800dcc2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800dc5a:	88fb      	ldrh	r3, [r7, #6]
 800dc5c:	7d3a      	ldrb	r2, [r7, #20]
 800dc5e:	4413      	add	r3, r2
 800dc60:	4a1f      	ldr	r2, [pc, #124]	@ (800dce0 <ST7735_WriteString+0xa0>)
 800dc62:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc66:	4293      	cmp	r3, r2
 800dc68:	db16      	blt.n	800dc98 <ST7735_WriteString+0x58>
            x = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800dc6e:	7d7b      	ldrb	r3, [r7, #21]
 800dc70:	461a      	mov	r2, r3
 800dc72:	88bb      	ldrh	r3, [r7, #4]
 800dc74:	4413      	add	r3, r2
 800dc76:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800dc78:	88bb      	ldrh	r3, [r7, #4]
 800dc7a:	7d7a      	ldrb	r2, [r7, #21]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	4a19      	ldr	r2, [pc, #100]	@ (800dce4 <ST7735_WriteString+0xa4>)
 800dc80:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc84:	4293      	cmp	r3, r2
 800dc86:	da21      	bge.n	800dccc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b20      	cmp	r3, #32
 800dc8e:	d103      	bne.n	800dc98 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	3301      	adds	r3, #1
 800dc94:	603b      	str	r3, [r7, #0]
                continue;
 800dc96:	e014      	b.n	800dcc2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	88b9      	ldrh	r1, [r7, #4]
 800dc9e:	88f8      	ldrh	r0, [r7, #6]
 800dca0:	8c3b      	ldrh	r3, [r7, #32]
 800dca2:	9302      	str	r3, [sp, #8]
 800dca4:	8bbb      	ldrh	r3, [r7, #28]
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f7ff ff4f 	bl	800db50 <ST7735_WriteChar>
        x += font.width;
 800dcb2:	7d3b      	ldrb	r3, [r7, #20]
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	88fb      	ldrh	r3, [r7, #6]
 800dcb8:	4413      	add	r3, r2
 800dcba:	80fb      	strh	r3, [r7, #6]
        str++;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	603b      	str	r3, [r7, #0]
    while(*str) {
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1c7      	bne.n	800dc5a <ST7735_WriteString+0x1a>
 800dcca:	e000      	b.n	800dcce <ST7735_WriteString+0x8e>
                break;
 800dccc:	bf00      	nop
    }

    ST7735_Unselect();
 800dcce:	f7ff fd6f 	bl	800d7b0 <ST7735_Unselect>
}
 800dcd2:	bf00      	nop
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcdc:	b002      	add	sp, #8
 800dcde:	4770      	bx	lr
 800dce0:	20001316 	.word	0x20001316
 800dce4:	20001318 	.word	0x20001318

0800dce8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	4623      	mov	r3, r4
 800dcf8:	80fb      	strh	r3, [r7, #6]
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	80bb      	strh	r3, [r7, #4]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	807b      	strh	r3, [r7, #2]
 800dd02:	4613      	mov	r3, r2
 800dd04:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800dd06:	88fb      	ldrh	r3, [r7, #6]
 800dd08:	4a37      	ldr	r2, [pc, #220]	@ (800dde8 <ST7735_FillRectangle+0x100>)
 800dd0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	da66      	bge.n	800dde0 <ST7735_FillRectangle+0xf8>
 800dd12:	88bb      	ldrh	r3, [r7, #4]
 800dd14:	4a35      	ldr	r2, [pc, #212]	@ (800ddec <ST7735_FillRectangle+0x104>)
 800dd16:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	da60      	bge.n	800dde0 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800dd1e:	88fa      	ldrh	r2, [r7, #6]
 800dd20:	887b      	ldrh	r3, [r7, #2]
 800dd22:	4413      	add	r3, r2
 800dd24:	4a30      	ldr	r2, [pc, #192]	@ (800dde8 <ST7735_FillRectangle+0x100>)
 800dd26:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	dd06      	ble.n	800dd3c <ST7735_FillRectangle+0x54>
 800dd2e:	4b2e      	ldr	r3, [pc, #184]	@ (800dde8 <ST7735_FillRectangle+0x100>)
 800dd30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	88fb      	ldrh	r3, [r7, #6]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800dd3c:	88ba      	ldrh	r2, [r7, #4]
 800dd3e:	883b      	ldrh	r3, [r7, #0]
 800dd40:	4413      	add	r3, r2
 800dd42:	4a2a      	ldr	r2, [pc, #168]	@ (800ddec <ST7735_FillRectangle+0x104>)
 800dd44:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	dd06      	ble.n	800dd5a <ST7735_FillRectangle+0x72>
 800dd4c:	4b27      	ldr	r3, [pc, #156]	@ (800ddec <ST7735_FillRectangle+0x104>)
 800dd4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	88bb      	ldrh	r3, [r7, #4]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800dd5a:	f7ff fd1d 	bl	800d798 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800dd5e:	88fb      	ldrh	r3, [r7, #6]
 800dd60:	b2d8      	uxtb	r0, r3
 800dd62:	88bb      	ldrh	r3, [r7, #4]
 800dd64:	b2d9      	uxtb	r1, r3
 800dd66:	88fb      	ldrh	r3, [r7, #6]
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	887b      	ldrh	r3, [r7, #2]
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	4413      	add	r3, r2
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	3b01      	subs	r3, #1
 800dd74:	b2dc      	uxtb	r4, r3
 800dd76:	88bb      	ldrh	r3, [r7, #4]
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	883b      	ldrh	r3, [r7, #0]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	4413      	add	r3, r2
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	4622      	mov	r2, r4
 800dd88:	f7ff fdb0 	bl	800d8ec <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800dd8c:	8c3b      	ldrh	r3, [r7, #32]
 800dd8e:	0a1b      	lsrs	r3, r3, #8
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	733b      	strb	r3, [r7, #12]
 800dd96:	8c3b      	ldrh	r3, [r7, #32]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	2110      	movs	r1, #16
 800dda0:	4813      	ldr	r0, [pc, #76]	@ (800ddf0 <ST7735_FillRectangle+0x108>)
 800dda2:	f003 fc55 	bl	8011650 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800dda6:	883b      	ldrh	r3, [r7, #0]
 800dda8:	80bb      	strh	r3, [r7, #4]
 800ddaa:	e013      	b.n	800ddd4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 800ddac:	887b      	ldrh	r3, [r7, #2]
 800ddae:	80fb      	strh	r3, [r7, #6]
 800ddb0:	e00a      	b.n	800ddc8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800ddb2:	f107 010c 	add.w	r1, r7, #12
 800ddb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddba:	2202      	movs	r2, #2
 800ddbc:	480d      	ldr	r0, [pc, #52]	@ (800ddf4 <ST7735_FillRectangle+0x10c>)
 800ddbe:	f004 fb48 	bl	8012452 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800ddc2:	88fb      	ldrh	r3, [r7, #6]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	80fb      	strh	r3, [r7, #6]
 800ddc8:	88fb      	ldrh	r3, [r7, #6]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1f1      	bne.n	800ddb2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800ddce:	88bb      	ldrh	r3, [r7, #4]
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	80bb      	strh	r3, [r7, #4]
 800ddd4:	88bb      	ldrh	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1e8      	bne.n	800ddac <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800ddda:	f7ff fce9 	bl	800d7b0 <ST7735_Unselect>
 800ddde:	e000      	b.n	800dde2 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800dde0:	bf00      	nop
}
 800dde2:	3714      	adds	r7, #20
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd90      	pop	{r4, r7, pc}
 800dde8:	20001316 	.word	0x20001316
 800ddec:	20001318 	.word	0x20001318
 800ddf0:	40020800 	.word	0x40020800
 800ddf4:	20001328 	.word	0x20001328

0800ddf8 <displayOnwardsLogoOptimized>:
    ST7735_WriteString(start_x, start_y, "on", Font_16x26, RED, BLACK);
    ST7735_WriteString(start_x + 32, start_y, "words", Font_16x26, WHITE, BLACK);
}

// Optimized version with exact positioning
void displayOnwardsLogoOptimized(void) {
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af04      	add	r7, sp, #16
    ST7735_SetRotation(1);
 800ddfe:	2001      	movs	r0, #1
 800de00:	f7ff fde8 	bl	800d9d4 <ST7735_SetRotation>
    fillScreen(BLACK);
 800de04:	2000      	movs	r0, #0
 800de06:	f7ff fcad 	bl	800d764 <fillScreen>
    // Exact calculations for 160×128 display
    // Font_16x26: each character is 16px wide, 26px tall
    // "onwards" = 7 characters = 112px total width

    // Perfect center positioning
    int x_pos = 24;  // (160 - 112) / 2 = 24
 800de0a:	2318      	movs	r3, #24
 800de0c:	607b      	str	r3, [r7, #4]
    int y_pos = 51;  // (128 - 26) / 2 = 51
 800de0e:	2333      	movs	r3, #51	@ 0x33
 800de10:	603b      	str	r3, [r7, #0]

    // Draw "on" in red (positions 0-1, 32px wide)
    ST7735_WriteString(x_pos, y_pos, "on", Font_16x26, RED, BLACK);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	b298      	uxth	r0, r3
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	b299      	uxth	r1, r3
 800de1a:	4b11      	ldr	r3, [pc, #68]	@ (800de60 <displayOnwardsLogoOptimized+0x68>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	9202      	str	r2, [sp, #8]
 800de20:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800de24:	9201      	str	r2, [sp, #4]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	9200      	str	r2, [sp, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a0d      	ldr	r2, [pc, #52]	@ (800de64 <displayOnwardsLogoOptimized+0x6c>)
 800de2e:	f7ff ff07 	bl	800dc40 <ST7735_WriteString>

    // Draw "wards" in white (positions 2-6, 80px wide)
    ST7735_WriteString(x_pos + 32, y_pos, "words", Font_16x26, WHITE, BLACK);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	b29b      	uxth	r3, r3
 800de36:	3320      	adds	r3, #32
 800de38:	b298      	uxth	r0, r3
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	b299      	uxth	r1, r3
 800de3e:	4b08      	ldr	r3, [pc, #32]	@ (800de60 <displayOnwardsLogoOptimized+0x68>)
 800de40:	2200      	movs	r2, #0
 800de42:	9202      	str	r2, [sp, #8]
 800de44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de48:	9201      	str	r2, [sp, #4]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	9200      	str	r2, [sp, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a05      	ldr	r2, [pc, #20]	@ (800de68 <displayOnwardsLogoOptimized+0x70>)
 800de52:	f7ff fef5 	bl	800dc40 <ST7735_WriteString>
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20000078 	.word	0x20000078
 800de64:	0801d55c 	.word	0x0801d55c
 800de68:	0801d560 	.word	0x0801d560

0800de6c <showStartupLogoAndMenu>:
    HAL_Delay(3000);
    printf("Logo display complete\n");
}

// Integration with your menu system
void showStartupLogoAndMenu(void) {
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
    // Show logo first
    displayOnwardsLogoOptimized();
 800de70:	f7ff ffc2 	bl	800ddf8 <displayOnwardsLogoOptimized>
    HAL_Delay(3000);
 800de74:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800de78:	f002 ff80 	bl	8010d7c <HAL_Delay>

    // Transition to menu
    fillScreen(BLACK);
 800de7c:	2000      	movs	r0, #0
 800de7e:	f7ff fc71 	bl	800d764 <fillScreen>
    HAL_Delay(200);
 800de82:	20c8      	movs	r0, #200	@ 0xc8
 800de84:	f002 ff7a 	bl	8010d7c <HAL_Delay>
}
 800de88:	bf00      	nop
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <case_insensitive_strcmp+0x16>
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e056      	b.n	800df54 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d10d      	bne.n	800deca <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	e050      	b.n	800df54 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <case_insensitive_strcmp+0x32>
        {
            return 0;
 800deba:	2300      	movs	r3, #0
 800debc:	e04a      	b.n	800df54 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3301      	adds	r3, #1
 800dec2:	607b      	str	r3, [r7, #4]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	3301      	adds	r3, #1
 800dec8:	603b      	str	r3, [r7, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	73fb      	strb	r3, [r7, #15]
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	3301      	adds	r3, #1
 800ded4:	4a22      	ldr	r2, [pc, #136]	@ (800df60 <case_insensitive_strcmp+0xd4>)
 800ded6:	4413      	add	r3, r2
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	f003 0303 	and.w	r3, r3, #3
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d103      	bne.n	800deea <case_insensitive_strcmp+0x5e>
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
 800dee4:	f103 0220 	add.w	r2, r3, #32
 800dee8:	e000      	b.n	800deec <case_insensitive_strcmp+0x60>
 800deea:	7bfa      	ldrb	r2, [r7, #15]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	73bb      	strb	r3, [r7, #14]
 800def2:	7bbb      	ldrb	r3, [r7, #14]
 800def4:	3301      	adds	r3, #1
 800def6:	491a      	ldr	r1, [pc, #104]	@ (800df60 <case_insensitive_strcmp+0xd4>)
 800def8:	440b      	add	r3, r1
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	f003 0303 	and.w	r3, r3, #3
 800df00:	2b01      	cmp	r3, #1
 800df02:	d102      	bne.n	800df0a <case_insensitive_strcmp+0x7e>
 800df04:	7bbb      	ldrb	r3, [r7, #14]
 800df06:	3320      	adds	r3, #32
 800df08:	e000      	b.n	800df0c <case_insensitive_strcmp+0x80>
 800df0a:	7bbb      	ldrb	r3, [r7, #14]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d0d0      	beq.n	800deb2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	737b      	strb	r3, [r7, #13]
 800df16:	7b7b      	ldrb	r3, [r7, #13]
 800df18:	3301      	adds	r3, #1
 800df1a:	4a11      	ldr	r2, [pc, #68]	@ (800df60 <case_insensitive_strcmp+0xd4>)
 800df1c:	4413      	add	r3, r2
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	f003 0303 	and.w	r3, r3, #3
 800df24:	2b01      	cmp	r3, #1
 800df26:	d103      	bne.n	800df30 <case_insensitive_strcmp+0xa4>
 800df28:	7b7b      	ldrb	r3, [r7, #13]
 800df2a:	f103 0220 	add.w	r2, r3, #32
 800df2e:	e000      	b.n	800df32 <case_insensitive_strcmp+0xa6>
 800df30:	7b7a      	ldrb	r2, [r7, #13]
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	733b      	strb	r3, [r7, #12]
 800df38:	7b3b      	ldrb	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	4908      	ldr	r1, [pc, #32]	@ (800df60 <case_insensitive_strcmp+0xd4>)
 800df3e:	440b      	add	r3, r1
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	f003 0303 	and.w	r3, r3, #3
 800df46:	2b01      	cmp	r3, #1
 800df48:	d102      	bne.n	800df50 <case_insensitive_strcmp+0xc4>
 800df4a:	7b3b      	ldrb	r3, [r7, #12]
 800df4c:	3320      	adds	r3, #32
 800df4e:	e000      	b.n	800df52 <case_insensitive_strcmp+0xc6>
 800df50:	7b3b      	ldrb	r3, [r7, #12]
 800df52:	1ad3      	subs	r3, r2, r3
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	0801f490 	.word	0x0801f490

0800df64 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <cJSON_strdup+0x1c>
    {
        return NULL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	e015      	b.n	800dfac <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7fa f9a5 	bl	80082d0 <strlen>
 800df86:	4603      	mov	r3, r0
 800df88:	3301      	adds	r3, #1
 800df8a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	4798      	blx	r3
 800df94:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <cJSON_strdup+0x3c>
    {
        return NULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	e005      	b.n	800dfac <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	68b8      	ldr	r0, [r7, #8]
 800dfa6:	f00b fe96 	bl	8019cd6 <memcpy>

    return copy;
 800dfaa:	68bb      	ldr	r3, [r7, #8]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2028      	movs	r0, #40	@ 0x28
 800dfc2:	4798      	blx	r3
 800dfc4:	60f8      	str	r0, [r7, #12]
    if (node)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d004      	beq.n	800dfd6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800dfcc:	2228      	movs	r2, #40	@ 0x28
 800dfce:	2100      	movs	r1, #0
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f00b fdad 	bl	8019b30 <memset>
    }

    return node;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800dfec:	e03d      	b.n	800e06a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d108      	bne.n	800e012 <cJSON_Delete+0x32>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d004      	beq.n	800e012 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7ff ffe7 	bl	800dfe0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10c      	bne.n	800e038 <cJSON_Delete+0x58>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d008      	beq.n	800e038 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800e026:	4b15      	ldr	r3, [pc, #84]	@ (800e07c <cJSON_Delete+0x9c>)
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	6912      	ldr	r2, [r2, #16]
 800e02e:	4610      	mov	r0, r2
 800e030:	4798      	blx	r3
            item->valuestring = NULL;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10c      	bne.n	800e05e <cJSON_Delete+0x7e>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a1b      	ldr	r3, [r3, #32]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d008      	beq.n	800e05e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800e04c:	4b0b      	ldr	r3, [pc, #44]	@ (800e07c <cJSON_Delete+0x9c>)
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	6a12      	ldr	r2, [r2, #32]
 800e054:	4610      	mov	r0, r2
 800e056:	4798      	blx	r3
            item->string = NULL;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800e05e:	4b07      	ldr	r3, [pc, #28]	@ (800e07c <cJSON_Delete+0x9c>)
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	4798      	blx	r3
        item = next;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1be      	bne.n	800dfee <cJSON_Delete+0xe>
    }
}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20000080 	.word	0x20000080

0800e080 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800e080:	b480      	push	{r7}
 800e082:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800e084:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800e086:	4618      	mov	r0, r3
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b098      	sub	sp, #96	@ 0x60
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
    double number = 0;
 800e09a:	f04f 0200 	mov.w	r2, #0
 800e09e:	f04f 0300 	mov.w	r3, #0
 800e0a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800e0aa:	f7ff ffe9 	bl	800e080 <get_decimal_point>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d003      	beq.n	800e0c6 <parse_number+0x36>
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d101      	bne.n	800e0ca <parse_number+0x3a>
    {
        return false;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	e0a0      	b.n	800e20c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0ce:	e03d      	b.n	800e14c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	6899      	ldr	r1, [r3, #8]
 800e0d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0da:	440b      	add	r3, r1
 800e0dc:	4413      	add	r3, r2
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b45      	cmp	r3, #69	@ 0x45
 800e0e2:	dc17      	bgt.n	800e114 <parse_number+0x84>
 800e0e4:	2b2b      	cmp	r3, #43	@ 0x2b
 800e0e6:	db40      	blt.n	800e16a <parse_number+0xda>
 800e0e8:	3b2b      	subs	r3, #43	@ 0x2b
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	409a      	lsls	r2, r3
 800e0ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e220 <parse_number+0x190>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bf14      	ite	ne
 800e0f6:	2301      	movne	r3, #1
 800e0f8:	2300      	moveq	r3, #0
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10b      	bne.n	800e118 <parse_number+0x88>
 800e100:	f002 0308 	and.w	r3, r2, #8
 800e104:	2b00      	cmp	r3, #0
 800e106:	bf14      	ite	ne
 800e108:	2301      	movne	r3, #1
 800e10a:	2300      	moveq	r3, #0
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d111      	bne.n	800e136 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800e112:	e02a      	b.n	800e16a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800e114:	2b65      	cmp	r3, #101	@ 0x65
 800e116:	d128      	bne.n	800e16a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	6899      	ldr	r1, [r3, #8]
 800e120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e122:	440b      	add	r3, r1
 800e124:	4413      	add	r3, r2
 800e126:	7819      	ldrb	r1, [r3, #0]
 800e128:	f107 0208 	add.w	r2, r7, #8
 800e12c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e12e:	4413      	add	r3, r2
 800e130:	460a      	mov	r2, r1
 800e132:	701a      	strb	r2, [r3, #0]
                break;
 800e134:	e007      	b.n	800e146 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800e136:	f107 0208 	add.w	r2, r7, #8
 800e13a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e13c:	4413      	add	r3, r2
 800e13e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800e142:	701a      	strb	r2, [r3, #0]
                break;
 800e144:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e148:	3301      	adds	r3, #1
 800e14a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e14c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e14e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e150:	d80d      	bhi.n	800e16e <parse_number+0xde>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00a      	beq.n	800e16e <parse_number+0xde>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	689a      	ldr	r2, [r3, #8]
 800e15c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e15e:	441a      	add	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	429a      	cmp	r2, r3
 800e166:	d3b3      	bcc.n	800e0d0 <parse_number+0x40>
        }
    }
loop_end:
 800e168:	e001      	b.n	800e16e <parse_number+0xde>
                goto loop_end;
 800e16a:	bf00      	nop
 800e16c:	e000      	b.n	800e170 <parse_number+0xe0>
loop_end:
 800e16e:	bf00      	nop
    number_c_string[i] = '\0';
 800e170:	f107 0208 	add.w	r2, r7, #8
 800e174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e176:	4413      	add	r3, r2
 800e178:	2200      	movs	r2, #0
 800e17a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800e17c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e180:	f107 0308 	add.w	r3, r7, #8
 800e184:	4611      	mov	r1, r2
 800e186:	4618      	mov	r0, r3
 800e188:	f00a fe02 	bl	8018d90 <strtod>
 800e18c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800e190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e192:	f107 0308 	add.w	r3, r7, #8
 800e196:	429a      	cmp	r2, r3
 800e198:	d101      	bne.n	800e19e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800e19a:	2300      	movs	r3, #0
 800e19c:	e036      	b.n	800e20c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e1a4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800e1a8:	a31b      	add	r3, pc, #108	@ (adr r3, 800e218 <parse_number+0x188>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e1b2:	f7fa fcd7 	bl	8008b64 <__aeabi_dcmpge>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d004      	beq.n	800e1c6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e1c2:	615a      	str	r2, [r3, #20]
 800e1c4:	e015      	b.n	800e1f2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800e1c6:	f04f 0200 	mov.w	r2, #0
 800e1ca:	4b16      	ldr	r3, [pc, #88]	@ (800e224 <parse_number+0x194>)
 800e1cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e1d0:	f7fa fcbe 	bl	8008b50 <__aeabi_dcmple>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d004      	beq.n	800e1e4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e1e0:	615a      	str	r2, [r3, #20]
 800e1e2:	e006      	b.n	800e1f2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800e1e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e1e8:	f7fa fce6 	bl	8008bb8 <__aeabi_d2iz>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2208      	movs	r2, #8
 800e1f6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e1fe:	f107 0208 	add.w	r2, r7, #8
 800e202:	1a8a      	subs	r2, r1, r2
 800e204:	441a      	add	r2, r3
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	609a      	str	r2, [r3, #8]
    return true;
 800e20a:	2301      	movs	r3, #1
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3760      	adds	r7, #96	@ 0x60
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	f3af 8000 	nop.w
 800e218:	ffc00000 	.word	0xffc00000
 800e21c:	41dfffff 	.word	0x41dfffff
 800e220:	04007fe5 	.word	0x04007fe5
 800e224:	c1e00000 	.word	0xc1e00000

0800e228 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800e232:	2300      	movs	r3, #0
 800e234:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d003      	beq.n	800e248 <ensure+0x20>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d101      	bne.n	800e24c <ensure+0x24>
    {
        return NULL;
 800e248:	2300      	movs	r3, #0
 800e24a:	e083      	b.n	800e354 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d007      	beq.n	800e264 <ensure+0x3c>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689a      	ldr	r2, [r3, #8]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d301      	bcc.n	800e264 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800e260:	2300      	movs	r3, #0
 800e262:	e077      	b.n	800e354 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	da01      	bge.n	800e26e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	e072      	b.n	800e354 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	689a      	ldr	r2, [r3, #8]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	4413      	add	r3, r2
 800e276:	3301      	adds	r3, #1
 800e278:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	429a      	cmp	r2, r3
 800e282:	d805      	bhi.n	800e290 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	4413      	add	r3, r2
 800e28e:	e061      	b.n	800e354 <ensure+0x12c>
    }

    if (p->noalloc) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d001      	beq.n	800e29c <ensure+0x74>
        return NULL;
 800e298:	2300      	movs	r3, #0
 800e29a:	e05b      	b.n	800e354 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2a2:	d308      	bcc.n	800e2b6 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	db03      	blt.n	800e2b2 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800e2aa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e2ae:	60bb      	str	r3, [r7, #8]
 800e2b0:	e004      	b.n	800e2bc <ensure+0x94>
        }
        else
        {
            return NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e04e      	b.n	800e354 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a1b      	ldr	r3, [r3, #32]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d018      	beq.n	800e2f6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	6812      	ldr	r2, [r2, #0]
 800e2cc:	68b9      	ldr	r1, [r7, #8]
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	4798      	blx	r3
 800e2d2:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d132      	bne.n	800e340 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	69db      	ldr	r3, [r3, #28]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	6812      	ldr	r2, [r2, #0]
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	4798      	blx	r3
            p->length = 0;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	601a      	str	r2, [r3, #0]

            return NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	e02e      	b.n	800e354 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	68b8      	ldr	r0, [r7, #8]
 800e2fc:	4798      	blx	r3
 800e2fe:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10d      	bne.n	800e322 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	69db      	ldr	r3, [r3, #28]
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	6812      	ldr	r2, [r2, #0]
 800e30e:	4610      	mov	r0, r2
 800e310:	4798      	blx	r3
            p->length = 0;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]

            return NULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	e018      	b.n	800e354 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6819      	ldr	r1, [r3, #0]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	3301      	adds	r3, #1
 800e32c:	461a      	mov	r2, r3
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f00b fcd1 	bl	8019cd6 <memcpy>
        p->hooks.deallocate(p->buffer);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	6812      	ldr	r2, [r2, #0]
 800e33c:	4610      	mov	r0, r2
 800e33e:	4798      	blx	r3
    }
    p->length = newsize;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4413      	add	r3, r2
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800e35c:	b590      	push	{r4, r7, lr}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800e364:	2300      	movs	r3, #0
 800e366:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d013      	beq.n	800e396 <update_offset+0x3a>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00f      	beq.n	800e396 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	4413      	add	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	689c      	ldr	r4, [r3, #8]
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f7f9 ffa2 	bl	80082d0 <strlen>
 800e38c:	4603      	mov	r3, r0
 800e38e:	18e2      	adds	r2, r4, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	609a      	str	r2, [r3, #8]
 800e394:	e000      	b.n	800e398 <update_offset+0x3c>
        return;
 800e396:	bf00      	nop
}
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd90      	pop	{r4, r7, pc}
	...

0800e3a0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800e3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3a4:	b087      	sub	sp, #28
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	ed87 0b02 	vstr	d0, [r7, #8]
 800e3ac:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800e3b0:	68b8      	ldr	r0, [r7, #8]
 800e3b2:	68fe      	ldr	r6, [r7, #12]
 800e3b4:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800e3b8:	683a      	ldr	r2, [r7, #0]
 800e3ba:	687e      	ldr	r6, [r7, #4]
 800e3bc:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e3c0:	f7fa fbda 	bl	8008b78 <__aeabi_dcmpgt>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d004      	beq.n	800e3d4 <compare_double+0x34>
 800e3ca:	68bc      	ldr	r4, [r7, #8]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e3d2:	e003      	b.n	800e3dc <compare_double+0x3c>
 800e3d4:	683c      	ldr	r4, [r7, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e3dc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800e3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e3e8:	f7f9 ff7e 	bl	80082e8 <__aeabi_dsub>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4690      	mov	r8, r2
 800e3f2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800e3f6:	f04f 0200 	mov.w	r2, #0
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e42c <compare_double+0x8c>)
 800e3fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e400:	f7fa f92a 	bl	8008658 <__aeabi_dmul>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	2101      	movs	r1, #1
 800e40a:	460c      	mov	r4, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7fa fb9e 	bl	8008b50 <__aeabi_dcmple>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <compare_double+0x7e>
 800e41a:	2300      	movs	r3, #0
 800e41c:	461c      	mov	r4, r3
 800e41e:	b2e3      	uxtb	r3, r4
}
 800e420:	4618      	mov	r0, r3
 800e422:	371c      	adds	r7, #28
 800e424:	46bd      	mov	sp, r7
 800e426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42a:	bf00      	nop
 800e42c:	3cb00000 	.word	0x3cb00000

0800e430 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800e430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e432:	b093      	sub	sp, #76	@ 0x4c
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800e43a:	2300      	movs	r3, #0
 800e43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e444:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800e450:	f107 0314 	add.w	r3, r7, #20
 800e454:	2200      	movs	r2, #0
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	605a      	str	r2, [r3, #4]
 800e45a:	609a      	str	r2, [r3, #8]
 800e45c:	60da      	str	r2, [r3, #12]
 800e45e:	611a      	str	r2, [r3, #16]
 800e460:	615a      	str	r2, [r3, #20]
 800e462:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800e464:	f7ff fe0c 	bl	800e080 <get_decimal_point>
 800e468:	4603      	mov	r3, r0
 800e46a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800e46e:	f04f 0200 	mov.w	r2, #0
 800e472:	f04f 0300 	mov.w	r3, #0
 800e476:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <print_number+0x54>
    {
        return false;
 800e480:	2300      	movs	r3, #0
 800e482:	e0b4      	b.n	800e5ee <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800e484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e488:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e48c:	f7fa fb7e 	bl	8008b8c <__aeabi_dcmpun>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d121      	bne.n	800e4da <print_number+0xaa>
 800e496:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800e498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e49a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e49e:	2301      	movs	r3, #1
 800e4a0:	461e      	mov	r6, r3
 800e4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a6:	4b54      	ldr	r3, [pc, #336]	@ (800e5f8 <print_number+0x1c8>)
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	f7fa fb6e 	bl	8008b8c <__aeabi_dcmpun>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10b      	bne.n	800e4ce <print_number+0x9e>
 800e4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800e5f8 <print_number+0x1c8>)
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f7fa fb46 	bl	8008b50 <__aeabi_dcmple>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d101      	bne.n	800e4ce <print_number+0x9e>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	461e      	mov	r6, r3
 800e4ce:	b2f3      	uxtb	r3, r6
 800e4d0:	f083 0301 	eor.w	r3, r3, #1
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d007      	beq.n	800e4ea <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800e4da:	f107 0314 	add.w	r3, r7, #20
 800e4de:	4947      	ldr	r1, [pc, #284]	@ (800e5fc <print_number+0x1cc>)
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f00b f9c1 	bl	8019868 <siprintf>
 800e4e6:	6478      	str	r0, [r7, #68]	@ 0x44
 800e4e8:	e03f      	b.n	800e56a <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fa f848 	bl	8008584 <__aeabi_i2d>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e4fc:	f7fa fb14 	bl	8008b28 <__aeabi_dcmpeq>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d009      	beq.n	800e51a <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	695a      	ldr	r2, [r3, #20]
 800e50a:	f107 0314 	add.w	r3, r7, #20
 800e50e:	493c      	ldr	r1, [pc, #240]	@ (800e600 <print_number+0x1d0>)
 800e510:	4618      	mov	r0, r3
 800e512:	f00b f9a9 	bl	8019868 <siprintf>
 800e516:	6478      	str	r0, [r7, #68]	@ 0x44
 800e518:	e027      	b.n	800e56a <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800e51a:	f107 0014 	add.w	r0, r7, #20
 800e51e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e522:	4938      	ldr	r1, [pc, #224]	@ (800e604 <print_number+0x1d4>)
 800e524:	f00b f9a0 	bl	8019868 <siprintf>
 800e528:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800e52a:	f107 0208 	add.w	r2, r7, #8
 800e52e:	f107 0314 	add.w	r3, r7, #20
 800e532:	4935      	ldr	r1, [pc, #212]	@ (800e608 <print_number+0x1d8>)
 800e534:	4618      	mov	r0, r3
 800e536:	f00b f9b9 	bl	80198ac <siscanf>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d10c      	bne.n	800e55a <print_number+0x12a>
 800e540:	ed97 7b02 	vldr	d7, [r7, #8]
 800e544:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800e548:	eeb0 0a47 	vmov.f32	s0, s14
 800e54c:	eef0 0a67 	vmov.f32	s1, s15
 800e550:	f7ff ff26 	bl	800e3a0 <compare_double>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d107      	bne.n	800e56a <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800e55a:	f107 0014 	add.w	r0, r7, #20
 800e55e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e562:	492a      	ldr	r1, [pc, #168]	@ (800e60c <print_number+0x1dc>)
 800e564:	f00b f980 	bl	8019868 <siprintf>
 800e568:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800e56a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	db02      	blt.n	800e576 <print_number+0x146>
 800e570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e572:	2b19      	cmp	r3, #25
 800e574:	dd01      	ble.n	800e57a <print_number+0x14a>
    {
        return false;
 800e576:	2300      	movs	r3, #0
 800e578:	e039      	b.n	800e5ee <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800e57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e57c:	3301      	adds	r3, #1
 800e57e:	4619      	mov	r1, r3
 800e580:	6838      	ldr	r0, [r7, #0]
 800e582:	f7ff fe51 	bl	800e228 <ensure>
 800e586:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800e588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d101      	bne.n	800e592 <print_number+0x162>
    {
        return false;
 800e58e:	2300      	movs	r3, #0
 800e590:	e02d      	b.n	800e5ee <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800e592:	2300      	movs	r3, #0
 800e594:	643b      	str	r3, [r7, #64]	@ 0x40
 800e596:	e01a      	b.n	800e5ce <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800e598:	f107 0214 	add.w	r2, r7, #20
 800e59c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e59e:	4413      	add	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d105      	bne.n	800e5b6 <print_number+0x186>
        {
            output_pointer[i] = '.';
 800e5aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ae:	4413      	add	r3, r2
 800e5b0:	222e      	movs	r2, #46	@ 0x2e
 800e5b2:	701a      	strb	r2, [r3, #0]
            continue;
 800e5b4:	e008      	b.n	800e5c8 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800e5b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ba:	4413      	add	r3, r2
 800e5bc:	f107 0114 	add.w	r1, r7, #20
 800e5c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5c2:	440a      	add	r2, r1
 800e5c4:	7812      	ldrb	r2, [r2, #0]
 800e5c6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800e5c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d3e0      	bcc.n	800e598 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800e5d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5da:	4413      	add	r3, r2
 800e5dc:	2200      	movs	r2, #0
 800e5de:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	689a      	ldr	r2, [r3, #8]
 800e5e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e6:	441a      	add	r2, r3
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	609a      	str	r2, [r3, #8]

    return true;
 800e5ec:	2301      	movs	r3, #1
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	374c      	adds	r7, #76	@ 0x4c
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	7fefffff 	.word	0x7fefffff
 800e5fc:	0801d5b8 	.word	0x0801d5b8
 800e600:	0801d5c0 	.word	0x0801d5c0
 800e604:	0801d5c4 	.word	0x0801d5c4
 800e608:	0801d5cc 	.word	0x0801d5cc
 800e60c:	0801d5d0 	.word	0x0801d5d0

0800e610 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800e620:	2300      	movs	r3, #0
 800e622:	60bb      	str	r3, [r7, #8]
 800e624:	e04c      	b.n	800e6c0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	4413      	add	r3, r2
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e630:	d90f      	bls.n	800e652 <parse_hex4+0x42>
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	4413      	add	r3, r2
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b39      	cmp	r3, #57	@ 0x39
 800e63c:	d809      	bhi.n	800e652 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	4413      	add	r3, r2
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	3b30      	subs	r3, #48	@ 0x30
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	e02d      	b.n	800e6ae <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	4413      	add	r3, r2
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	2b40      	cmp	r3, #64	@ 0x40
 800e65c:	d90f      	bls.n	800e67e <parse_hex4+0x6e>
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	4413      	add	r3, r2
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	2b46      	cmp	r3, #70	@ 0x46
 800e668:	d809      	bhi.n	800e67e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	4413      	add	r3, r2
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	461a      	mov	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	4413      	add	r3, r2
 800e678:	3b37      	subs	r3, #55	@ 0x37
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	e017      	b.n	800e6ae <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	4413      	add	r3, r2
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	2b60      	cmp	r3, #96	@ 0x60
 800e688:	d90f      	bls.n	800e6aa <parse_hex4+0x9a>
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	4413      	add	r3, r2
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2b66      	cmp	r3, #102	@ 0x66
 800e694:	d809      	bhi.n	800e6aa <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	4413      	add	r3, r2
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	3b57      	subs	r3, #87	@ 0x57
 800e6a6:	60fb      	str	r3, [r7, #12]
 800e6a8:	e001      	b.n	800e6ae <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e00c      	b.n	800e6c8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d802      	bhi.n	800e6ba <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	60bb      	str	r3, [r7, #8]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d9af      	bls.n	800e626 <parse_hex4+0x16>
        }
    }

    return h;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08a      	sub	sp, #40	@ 0x28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800e6fe:	2300      	movs	r3, #0
 800e700:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800e704:	68ba      	ldr	r2, [r7, #8]
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	2b05      	cmp	r3, #5
 800e70c:	f340 80b7 	ble.w	800e87e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	3302      	adds	r3, #2
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff ff7b 	bl	800e610 <parse_hex4>
 800e71a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e722:	d304      	bcc.n	800e72e <utf16_literal_to_utf8+0x5a>
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e72a:	f0c0 80aa 	bcc.w	800e882 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800e734:	d337      	bcc.n	800e7a6 <utf16_literal_to_utf8+0xd2>
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e73c:	d233      	bcs.n	800e7a6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	3306      	adds	r3, #6
 800e742:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800e744:	2300      	movs	r3, #0
 800e746:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800e748:	230c      	movs	r3, #12
 800e74a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	2b05      	cmp	r3, #5
 800e756:	f340 8096 	ble.w	800e886 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b5c      	cmp	r3, #92	@ 0x5c
 800e760:	f040 8093 	bne.w	800e88a <utf16_literal_to_utf8+0x1b6>
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	3301      	adds	r3, #1
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2b75      	cmp	r3, #117	@ 0x75
 800e76c:	f040 808d 	bne.w	800e88a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	3302      	adds	r3, #2
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff ff4b 	bl	800e610 <parse_hex4>
 800e77a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e782:	f0c0 8084 	bcc.w	800e88e <utf16_literal_to_utf8+0x1ba>
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e78c:	d27f      	bcs.n	800e88e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	029a      	lsls	r2, r3, #10
 800e792:	4b43      	ldr	r3, [pc, #268]	@ (800e8a0 <utf16_literal_to_utf8+0x1cc>)
 800e794:	4013      	ands	r3, r2
 800e796:	693a      	ldr	r2, [r7, #16]
 800e798:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e79c:	4313      	orrs	r3, r2
 800e79e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e7a2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800e7a4:	e004      	b.n	800e7b0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800e7a6:	2306      	movs	r3, #6
 800e7a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7b4:	d803      	bhi.n	800e7be <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e7bc:	e01f      	b.n	800e7fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800e7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7c4:	d206      	bcs.n	800e7d4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800e7cc:	23c0      	movs	r3, #192	@ 0xc0
 800e7ce:	f887 3020 	strb.w	r3, [r7, #32]
 800e7d2:	e014      	b.n	800e7fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7da:	d206      	bcs.n	800e7ea <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800e7e2:	23e0      	movs	r3, #224	@ 0xe0
 800e7e4:	f887 3020 	strb.w	r3, [r7, #32]
 800e7e8:	e009      	b.n	800e7fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ec:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800e7f0:	d24f      	bcs.n	800e892 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800e7f2:	2304      	movs	r3, #4
 800e7f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800e7f8:	23f0      	movs	r3, #240	@ 0xf0
 800e7fa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e7fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e802:	3b01      	subs	r3, #1
 800e804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e808:	e015      	b.n	800e836 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e812:	b2da      	uxtb	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6819      	ldr	r1, [r3, #0]
 800e818:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e81c:	440b      	add	r3, r1
 800e81e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e822:	b2d2      	uxtb	r2, r2
 800e824:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	099b      	lsrs	r3, r3, #6
 800e82a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e82c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e830:	3b01      	subs	r3, #1
 800e832:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e836:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e5      	bne.n	800e80a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800e83e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e842:	2b01      	cmp	r3, #1
 800e844:	d909      	bls.n	800e85a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800e846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e848:	b2d9      	uxtb	r1, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e852:	430a      	orrs	r2, r1
 800e854:	b2d2      	uxtb	r2, r2
 800e856:	701a      	strb	r2, [r3, #0]
 800e858:	e007      	b.n	800e86a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800e85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e866:	b2d2      	uxtb	r2, r2
 800e868:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e872:	441a      	add	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800e878:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e87c:	e00b      	b.n	800e896 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800e87e:	bf00      	nop
 800e880:	e008      	b.n	800e894 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e882:	bf00      	nop
 800e884:	e006      	b.n	800e894 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e886:	bf00      	nop
 800e888:	e004      	b.n	800e894 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e88a:	bf00      	nop
 800e88c:	e002      	b.n	800e894 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e88e:	bf00      	nop
 800e890:	e000      	b.n	800e894 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e892:	bf00      	nop

fail:
    return 0;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3728      	adds	r7, #40	@ 0x28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	000ffc00 	.word	0x000ffc00

0800e8a4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b08a      	sub	sp, #40	@ 0x28
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	4413      	add	r3, r2
 800e8c8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	4413      	add	r3, r2
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b22      	cmp	r3, #34	@ 0x22
 800e8e0:	f040 8103 	bne.w	800eaea <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e8ec:	e017      	b.n	800e91e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8f4:	d110      	bne.n	800e918 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	461a      	mov	r2, r3
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	429a      	cmp	r2, r3
 800e908:	f080 80f1 	bcs.w	800eaee <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	3301      	adds	r3, #1
 800e910:	61bb      	str	r3, [r7, #24]
                input_end++;
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	3301      	adds	r3, #1
 800e916:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	3301      	adds	r3, #1
 800e91c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6a3a      	ldr	r2, [r7, #32]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	461a      	mov	r2, r3
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d203      	bcs.n	800e938 <parse_string+0x94>
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	2b22      	cmp	r3, #34	@ 0x22
 800e936:	d1da      	bne.n	800e8ee <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6a3a      	ldr	r2, [r7, #32]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	461a      	mov	r2, r3
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	429a      	cmp	r2, r3
 800e948:	f080 80d3 	bcs.w	800eaf2 <parse_string+0x24e>
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	2b22      	cmp	r3, #34	@ 0x22
 800e952:	f040 80ce 	bne.w	800eaf2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	4413      	add	r3, r2
 800e960:	6a3a      	ldr	r2, [r7, #32]
 800e962:	1ad3      	subs	r3, r2, r3
 800e964:	461a      	mov	r2, r3
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	3201      	adds	r2, #1
 800e974:	4610      	mov	r0, r2
 800e976:	4798      	blx	r3
 800e978:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 80ba 	beq.w	800eaf6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800e986:	e094      	b.n	800eab2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800e988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e98e:	d008      	beq.n	800e9a2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800e990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e992:	1c53      	adds	r3, r2, #1
 800e994:	627b      	str	r3, [r7, #36]	@ 0x24
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	1c59      	adds	r1, r3, #1
 800e99a:	60f9      	str	r1, [r7, #12]
 800e99c:	7812      	ldrb	r2, [r2, #0]
 800e99e:	701a      	strb	r2, [r3, #0]
 800e9a0:	e087      	b.n	800eab2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800e9a6:	6a3a      	ldr	r2, [r7, #32]
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f340 80a4 	ble.w	800eafa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b75      	cmp	r3, #117	@ 0x75
 800e9ba:	f300 80a0 	bgt.w	800eafe <parse_string+0x25a>
 800e9be:	2b5c      	cmp	r3, #92	@ 0x5c
 800e9c0:	da04      	bge.n	800e9cc <parse_string+0x128>
 800e9c2:	2b22      	cmp	r3, #34	@ 0x22
 800e9c4:	d05c      	beq.n	800ea80 <parse_string+0x1dc>
 800e9c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9c8:	d05a      	beq.n	800ea80 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800e9ca:	e098      	b.n	800eafe <parse_string+0x25a>
            switch (input_pointer[1])
 800e9cc:	3b5c      	subs	r3, #92	@ 0x5c
 800e9ce:	2b19      	cmp	r3, #25
 800e9d0:	f200 8095 	bhi.w	800eafe <parse_string+0x25a>
 800e9d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e9dc <parse_string+0x138>)
 800e9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9da:	bf00      	nop
 800e9dc:	0800ea81 	.word	0x0800ea81
 800e9e0:	0800eaff 	.word	0x0800eaff
 800e9e4:	0800eaff 	.word	0x0800eaff
 800e9e8:	0800eaff 	.word	0x0800eaff
 800e9ec:	0800eaff 	.word	0x0800eaff
 800e9f0:	0800eaff 	.word	0x0800eaff
 800e9f4:	0800ea45 	.word	0x0800ea45
 800e9f8:	0800eaff 	.word	0x0800eaff
 800e9fc:	0800eaff 	.word	0x0800eaff
 800ea00:	0800eaff 	.word	0x0800eaff
 800ea04:	0800ea51 	.word	0x0800ea51
 800ea08:	0800eaff 	.word	0x0800eaff
 800ea0c:	0800eaff 	.word	0x0800eaff
 800ea10:	0800eaff 	.word	0x0800eaff
 800ea14:	0800eaff 	.word	0x0800eaff
 800ea18:	0800eaff 	.word	0x0800eaff
 800ea1c:	0800eaff 	.word	0x0800eaff
 800ea20:	0800eaff 	.word	0x0800eaff
 800ea24:	0800ea5d 	.word	0x0800ea5d
 800ea28:	0800eaff 	.word	0x0800eaff
 800ea2c:	0800eaff 	.word	0x0800eaff
 800ea30:	0800eaff 	.word	0x0800eaff
 800ea34:	0800ea69 	.word	0x0800ea69
 800ea38:	0800eaff 	.word	0x0800eaff
 800ea3c:	0800ea75 	.word	0x0800ea75
 800ea40:	0800ea91 	.word	0x0800ea91
                    *output_pointer++ = '\b';
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	60fa      	str	r2, [r7, #12]
 800ea4a:	2208      	movs	r2, #8
 800ea4c:	701a      	strb	r2, [r3, #0]
                    break;
 800ea4e:	e02c      	b.n	800eaaa <parse_string+0x206>
                    *output_pointer++ = '\f';
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	1c5a      	adds	r2, r3, #1
 800ea54:	60fa      	str	r2, [r7, #12]
 800ea56:	220c      	movs	r2, #12
 800ea58:	701a      	strb	r2, [r3, #0]
                    break;
 800ea5a:	e026      	b.n	800eaaa <parse_string+0x206>
                    *output_pointer++ = '\n';
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	60fa      	str	r2, [r7, #12]
 800ea62:	220a      	movs	r2, #10
 800ea64:	701a      	strb	r2, [r3, #0]
                    break;
 800ea66:	e020      	b.n	800eaaa <parse_string+0x206>
                    *output_pointer++ = '\r';
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	60fa      	str	r2, [r7, #12]
 800ea6e:	220d      	movs	r2, #13
 800ea70:	701a      	strb	r2, [r3, #0]
                    break;
 800ea72:	e01a      	b.n	800eaaa <parse_string+0x206>
                    *output_pointer++ = '\t';
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	60fa      	str	r2, [r7, #12]
 800ea7a:	2209      	movs	r2, #9
 800ea7c:	701a      	strb	r2, [r3, #0]
                    break;
 800ea7e:	e014      	b.n	800eaaa <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800ea80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea82:	1c5a      	adds	r2, r3, #1
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	1c59      	adds	r1, r3, #1
 800ea88:	60f9      	str	r1, [r7, #12]
 800ea8a:	7812      	ldrb	r2, [r2, #0]
 800ea8c:	701a      	strb	r2, [r3, #0]
                    break;
 800ea8e:	e00c      	b.n	800eaaa <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800ea90:	f107 030c 	add.w	r3, r7, #12
 800ea94:	461a      	mov	r2, r3
 800ea96:	6a39      	ldr	r1, [r7, #32]
 800ea98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea9a:	f7ff fe1b 	bl	800e6d4 <utf16_literal_to_utf8>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d02c      	beq.n	800eb02 <parse_string+0x25e>
                    break;
 800eaa8:	bf00      	nop
            }
            input_pointer += sequence_length;
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
 800eaac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaae:	4413      	add	r3, r2
 800eab0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800eab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	f4ff af66 	bcc.w	800e988 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2210      	movs	r2, #16
 800eac6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	6a3a      	ldr	r2, [r7, #32]
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	461a      	mov	r2, r3
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	609a      	str	r2, [r3, #8]

    return true;
 800eae6:	2301      	movs	r3, #1
 800eae8:	e020      	b.n	800eb2c <parse_string+0x288>
        goto fail;
 800eaea:	bf00      	nop
 800eaec:	e00a      	b.n	800eb04 <parse_string+0x260>
                    goto fail;
 800eaee:	bf00      	nop
 800eaf0:	e008      	b.n	800eb04 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800eaf2:	bf00      	nop
 800eaf4:	e006      	b.n	800eb04 <parse_string+0x260>
            goto fail; /* allocation failure */
 800eaf6:	bf00      	nop
 800eaf8:	e004      	b.n	800eb04 <parse_string+0x260>
                goto fail;
 800eafa:	bf00      	nop
 800eafc:	e002      	b.n	800eb04 <parse_string+0x260>
                    goto fail;
 800eafe:	bf00      	nop
 800eb00:	e000      	b.n	800eb04 <parse_string+0x260>
                        goto fail;
 800eb02:	bf00      	nop

fail:
    if (output != NULL)
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d005      	beq.n	800eb16 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	695b      	ldr	r3, [r3, #20]
 800eb0e:	69f8      	ldr	r0, [r7, #28]
 800eb10:	4798      	blx	r3
        output = NULL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800eb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	609a      	str	r2, [r3, #8]
    }

    return false;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3728      	adds	r7, #40	@ 0x28
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <print_string_ptr+0x28>
    {
        return false;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e110      	b.n	800ed7e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d111      	bne.n	800eb86 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800eb62:	2103      	movs	r1, #3
 800eb64:	6838      	ldr	r0, [r7, #0]
 800eb66:	f7ff fb5f 	bl	800e228 <ensure>
 800eb6a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <print_string_ptr+0x42>
        {
            return false;
 800eb72:	2300      	movs	r3, #0
 800eb74:	e103      	b.n	800ed7e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	4a83      	ldr	r2, [pc, #524]	@ (800ed88 <print_string_ptr+0x254>)
 800eb7a:	8811      	ldrh	r1, [r2, #0]
 800eb7c:	7892      	ldrb	r2, [r2, #2]
 800eb7e:	8019      	strh	r1, [r3, #0]
 800eb80:	709a      	strb	r2, [r3, #2]

        return true;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e0fb      	b.n	800ed7e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	e024      	b.n	800ebd6 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	2b22      	cmp	r3, #34	@ 0x22
 800eb92:	dc0f      	bgt.n	800ebb4 <print_string_ptr+0x80>
 800eb94:	2b08      	cmp	r3, #8
 800eb96:	db13      	blt.n	800ebc0 <print_string_ptr+0x8c>
 800eb98:	3b08      	subs	r3, #8
 800eb9a:	4a7c      	ldr	r2, [pc, #496]	@ (800ed8c <print_string_ptr+0x258>)
 800eb9c:	fa22 f303 	lsr.w	r3, r2, r3
 800eba0:	f003 0301 	and.w	r3, r3, #1
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bf14      	ite	ne
 800eba8:	2301      	movne	r3, #1
 800ebaa:	2300      	moveq	r3, #0
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d102      	bne.n	800ebb8 <print_string_ptr+0x84>
 800ebb2:	e005      	b.n	800ebc0 <print_string_ptr+0x8c>
 800ebb4:	2b5c      	cmp	r3, #92	@ 0x5c
 800ebb6:	d103      	bne.n	800ebc0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	617b      	str	r3, [r7, #20]
                break;
 800ebbe:	e007      	b.n	800ebd0 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	2b1f      	cmp	r3, #31
 800ebc6:	d802      	bhi.n	800ebce <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	3305      	adds	r3, #5
 800ebcc:	617b      	str	r3, [r7, #20]
                }
                break;
 800ebce:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	61fb      	str	r3, [r7, #28]
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1d6      	bne.n	800eb8c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	4413      	add	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3303      	adds	r3, #3
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	6838      	ldr	r0, [r7, #0]
 800ebf4:	f7ff fb18 	bl	800e228 <ensure>
 800ebf8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <print_string_ptr+0xd0>
    {
        return false;
 800ec00:	2300      	movs	r3, #0
 800ec02:	e0bc      	b.n	800ed7e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d117      	bne.n	800ec3a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	2222      	movs	r2, #34	@ 0x22
 800ec0e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	3301      	adds	r3, #1
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	6879      	ldr	r1, [r7, #4]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f00b f85c 	bl	8019cd6 <memcpy>
        output[output_length + 1] = '\"';
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3301      	adds	r3, #1
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	4413      	add	r3, r2
 800ec26:	2222      	movs	r2, #34	@ 0x22
 800ec28:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3302      	adds	r3, #2
 800ec2e:	693a      	ldr	r2, [r7, #16]
 800ec30:	4413      	add	r3, r2
 800ec32:	2200      	movs	r2, #0
 800ec34:	701a      	strb	r2, [r3, #0]

        return true;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e0a1      	b.n	800ed7e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	2222      	movs	r2, #34	@ 0x22
 800ec3e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	3301      	adds	r3, #1
 800ec44:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	61fb      	str	r3, [r7, #28]
 800ec4a:	e086      	b.n	800ed5a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	2b1f      	cmp	r3, #31
 800ec52:	d90c      	bls.n	800ec6e <print_string_ptr+0x13a>
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	2b22      	cmp	r3, #34	@ 0x22
 800ec5a:	d008      	beq.n	800ec6e <print_string_ptr+0x13a>
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec62:	d004      	beq.n	800ec6e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	781a      	ldrb	r2, [r3, #0]
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	701a      	strb	r2, [r3, #0]
 800ec6c:	e06f      	b.n	800ed4e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	61ba      	str	r2, [r7, #24]
 800ec74:	225c      	movs	r2, #92	@ 0x5c
 800ec76:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	2b22      	cmp	r3, #34	@ 0x22
 800ec7e:	dc3d      	bgt.n	800ecfc <print_string_ptr+0x1c8>
 800ec80:	2b08      	cmp	r3, #8
 800ec82:	db59      	blt.n	800ed38 <print_string_ptr+0x204>
 800ec84:	3b08      	subs	r3, #8
 800ec86:	2b1a      	cmp	r3, #26
 800ec88:	d856      	bhi.n	800ed38 <print_string_ptr+0x204>
 800ec8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec90 <print_string_ptr+0x15c>)
 800ec8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec90:	0800ed11 	.word	0x0800ed11
 800ec94:	0800ed31 	.word	0x0800ed31
 800ec98:	0800ed21 	.word	0x0800ed21
 800ec9c:	0800ed39 	.word	0x0800ed39
 800eca0:	0800ed19 	.word	0x0800ed19
 800eca4:	0800ed29 	.word	0x0800ed29
 800eca8:	0800ed39 	.word	0x0800ed39
 800ecac:	0800ed39 	.word	0x0800ed39
 800ecb0:	0800ed39 	.word	0x0800ed39
 800ecb4:	0800ed39 	.word	0x0800ed39
 800ecb8:	0800ed39 	.word	0x0800ed39
 800ecbc:	0800ed39 	.word	0x0800ed39
 800ecc0:	0800ed39 	.word	0x0800ed39
 800ecc4:	0800ed39 	.word	0x0800ed39
 800ecc8:	0800ed39 	.word	0x0800ed39
 800eccc:	0800ed39 	.word	0x0800ed39
 800ecd0:	0800ed39 	.word	0x0800ed39
 800ecd4:	0800ed39 	.word	0x0800ed39
 800ecd8:	0800ed39 	.word	0x0800ed39
 800ecdc:	0800ed39 	.word	0x0800ed39
 800ece0:	0800ed39 	.word	0x0800ed39
 800ece4:	0800ed39 	.word	0x0800ed39
 800ece8:	0800ed39 	.word	0x0800ed39
 800ecec:	0800ed39 	.word	0x0800ed39
 800ecf0:	0800ed39 	.word	0x0800ed39
 800ecf4:	0800ed39 	.word	0x0800ed39
 800ecf8:	0800ed09 	.word	0x0800ed09
 800ecfc:	2b5c      	cmp	r3, #92	@ 0x5c
 800ecfe:	d11b      	bne.n	800ed38 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	225c      	movs	r2, #92	@ 0x5c
 800ed04:	701a      	strb	r2, [r3, #0]
                    break;
 800ed06:	e022      	b.n	800ed4e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	2222      	movs	r2, #34	@ 0x22
 800ed0c:	701a      	strb	r2, [r3, #0]
                    break;
 800ed0e:	e01e      	b.n	800ed4e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	2262      	movs	r2, #98	@ 0x62
 800ed14:	701a      	strb	r2, [r3, #0]
                    break;
 800ed16:	e01a      	b.n	800ed4e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	2266      	movs	r2, #102	@ 0x66
 800ed1c:	701a      	strb	r2, [r3, #0]
                    break;
 800ed1e:	e016      	b.n	800ed4e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	226e      	movs	r2, #110	@ 0x6e
 800ed24:	701a      	strb	r2, [r3, #0]
                    break;
 800ed26:	e012      	b.n	800ed4e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	2272      	movs	r2, #114	@ 0x72
 800ed2c:	701a      	strb	r2, [r3, #0]
                    break;
 800ed2e:	e00e      	b.n	800ed4e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	2274      	movs	r2, #116	@ 0x74
 800ed34:	701a      	strb	r2, [r3, #0]
                    break;
 800ed36:	e00a      	b.n	800ed4e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	4914      	ldr	r1, [pc, #80]	@ (800ed90 <print_string_ptr+0x25c>)
 800ed40:	69b8      	ldr	r0, [r7, #24]
 800ed42:	f00a fd91 	bl	8019868 <siprintf>
                    output_pointer += 4;
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	3304      	adds	r3, #4
 800ed4a:	61bb      	str	r3, [r7, #24]
                    break;
 800ed4c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	3301      	adds	r3, #1
 800ed52:	61fb      	str	r3, [r7, #28]
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	3301      	adds	r3, #1
 800ed58:	61bb      	str	r3, [r7, #24]
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f47f af74 	bne.w	800ec4c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	3301      	adds	r3, #1
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	2222      	movs	r2, #34	@ 0x22
 800ed6e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	3302      	adds	r3, #2
 800ed74:	693a      	ldr	r2, [r7, #16]
 800ed76:	4413      	add	r3, r2
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]

    return true;
 800ed7c:	2301      	movs	r3, #1
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3720      	adds	r7, #32
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	0801d5d8 	.word	0x0801d5d8
 800ed8c:	04000037 	.word	0x04000037
 800ed90:	0801d5dc 	.word	0x0801d5dc

0800ed94 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	6839      	ldr	r1, [r7, #0]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff fec5 	bl	800eb34 <print_string_ptr>
 800edaa:	4603      	mov	r3, r0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3708      	adds	r7, #8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d003      	beq.n	800edca <buffer_skip_whitespace+0x16>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800edca:	2300      	movs	r3, #0
 800edcc:	e02c      	b.n	800ee28 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d005      	beq.n	800ede0 <buffer_skip_whitespace+0x2c>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	689a      	ldr	r2, [r3, #8]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d306      	bcc.n	800edee <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	e021      	b.n	800ee28 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00d      	beq.n	800ee10 <buffer_skip_whitespace+0x5c>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	689a      	ldr	r2, [r3, #8]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d207      	bcs.n	800ee10 <buffer_skip_whitespace+0x5c>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	4413      	add	r3, r2
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b20      	cmp	r3, #32
 800ee0e:	d9e9      	bls.n	800ede4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	689a      	ldr	r2, [r3, #8]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d104      	bne.n	800ee26 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	1e5a      	subs	r2, r3, #1
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800ee26:	687b      	ldr	r3, [r7, #4]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d007      	beq.n	800ee52 <skip_utf8_bom+0x1e>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d003      	beq.n	800ee52 <skip_utf8_bom+0x1e>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d001      	beq.n	800ee56 <skip_utf8_bom+0x22>
    {
        return NULL;
 800ee52:	2300      	movs	r3, #0
 800ee54:	e01c      	b.n	800ee90 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d018      	beq.n	800ee8e <skip_utf8_bom+0x5a>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	1d1a      	adds	r2, r3, #4
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d211      	bcs.n	800ee8e <skip_utf8_bom+0x5a>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	4413      	add	r3, r2
 800ee74:	2203      	movs	r2, #3
 800ee76:	4908      	ldr	r1, [pc, #32]	@ (800ee98 <skip_utf8_bom+0x64>)
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f00a fe61 	bl	8019b40 <strncmp>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d104      	bne.n	800ee8e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	1cda      	adds	r2, r3, #3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800ee8e:	687b      	ldr	r3, [r7, #4]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	0801d5e4 	.word	0x0801d5e4

0800ee9c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e00c      	b.n	800eecc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7f9 fa0c 	bl	80082d0 <strlen>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	3301      	adds	r3, #1
 800eebc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	6979      	ldr	r1, [r7, #20]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f000 f805 	bl	800eed4 <cJSON_ParseWithLengthOpts>
 800eeca:	4603      	mov	r3, r0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08e      	sub	sp, #56	@ 0x38
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800eee2:	f107 0318 	add.w	r3, r7, #24
 800eee6:	2200      	movs	r2, #0
 800eee8:	601a      	str	r2, [r3, #0]
 800eeea:	605a      	str	r2, [r3, #4]
 800eeec:	609a      	str	r2, [r3, #8]
 800eeee:	60da      	str	r2, [r3, #12]
 800eef0:	611a      	str	r2, [r3, #16]
 800eef2:	615a      	str	r2, [r3, #20]
 800eef4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800eefa:	4b41      	ldr	r3, [pc, #260]	@ (800f000 <cJSON_ParseWithLengthOpts+0x12c>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800ef00:	4b3f      	ldr	r3, [pc, #252]	@ (800f000 <cJSON_ParseWithLengthOpts+0x12c>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d042      	beq.n	800ef92 <cJSON_ParseWithLengthOpts+0xbe>
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d03f      	beq.n	800ef92 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800ef1e:	4a39      	ldr	r2, [pc, #228]	@ (800f004 <cJSON_ParseWithLengthOpts+0x130>)
 800ef20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ef24:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800ef2a:	4836      	ldr	r0, [pc, #216]	@ (800f004 <cJSON_ParseWithLengthOpts+0x130>)
 800ef2c:	f7ff f842 	bl	800dfb4 <cJSON_New_Item>
 800ef30:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800ef32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d02e      	beq.n	800ef96 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800ef38:	f107 0318 	add.w	r3, r7, #24
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff ff79 	bl	800ee34 <skip_utf8_bom>
 800ef42:	4603      	mov	r3, r0
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff ff35 	bl	800edb4 <buffer_skip_whitespace>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef50:	f000 f902 	bl	800f158 <parse_value>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d01f      	beq.n	800ef9a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00e      	beq.n	800ef7e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800ef60:	f107 0318 	add.w	r3, r7, #24
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff ff25 	bl	800edb4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800ef6a:	6a3a      	ldr	r2, [r7, #32]
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d215      	bcs.n	800ef9e <cJSON_ParseWithLengthOpts+0xca>
 800ef72:	69ba      	ldr	r2, [r7, #24]
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	4413      	add	r3, r2
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10f      	bne.n	800ef9e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d004      	beq.n	800ef8e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800ef84:	69ba      	ldr	r2, [r7, #24]
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	441a      	add	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800ef8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef90:	e031      	b.n	800eff6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800ef92:	bf00      	nop
 800ef94:	e004      	b.n	800efa0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800ef96:	bf00      	nop
 800ef98:	e002      	b.n	800efa0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800ef9a:	bf00      	nop
 800ef9c:	e000      	b.n	800efa0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800ef9e:	bf00      	nop

fail:
    if (item != NULL)
 800efa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d002      	beq.n	800efac <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800efa6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800efa8:	f7ff f81a 	bl	800dfe0 <cJSON_Delete>
    }

    if (value != NULL)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d020      	beq.n	800eff4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800efba:	6a3a      	ldr	r2, [r7, #32]
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d202      	bcs.n	800efc8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800efc2:	6a3b      	ldr	r3, [r7, #32]
 800efc4:	617b      	str	r3, [r7, #20]
 800efc6:	e005      	b.n	800efd4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d004      	beq.n	800efe4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800efda:	693a      	ldr	r2, [r7, #16]
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	441a      	add	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800efe4:	4b06      	ldr	r3, [pc, #24]	@ (800f000 <cJSON_ParseWithLengthOpts+0x12c>)
 800efe6:	461a      	mov	r2, r3
 800efe8:	f107 0310 	add.w	r3, r7, #16
 800efec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eff0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800eff4:	2300      	movs	r3, #0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3738      	adds	r7, #56	@ 0x38
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20001320 	.word	0x20001320
 800f004:	20000080 	.word	0x20000080

0800f008 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800f010:	2200      	movs	r2, #0
 800f012:	2100      	movs	r1, #0
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ff41 	bl	800ee9c <cJSON_ParseWithOpts>
 800f01a:	4603      	mov	r3, r0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	@ 0x38
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800f034:	f107 0310 	add.w	r3, r7, #16
 800f038:	2224      	movs	r2, #36	@ 0x24
 800f03a:	2100      	movs	r1, #0
 800f03c:	4618      	mov	r0, r3
 800f03e:	f00a fd77 	bl	8019b30 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a3b      	ldr	r2, [pc, #236]	@ (800f134 <print+0x110>)
 800f048:	6812      	ldr	r2, [r2, #0]
 800f04a:	4610      	mov	r0, r2
 800f04c:	4798      	blx	r3
 800f04e:	4603      	mov	r3, r0
 800f050:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800f052:	4b38      	ldr	r3, [pc, #224]	@ (800f134 <print+0x110>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f062:	ca07      	ldmia	r2, {r0, r1, r2}
 800f064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d042      	beq.n	800f0f4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800f06e:	f107 0310 	add.w	r3, r7, #16
 800f072:	4619      	mov	r1, r3
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f000 f95b 	bl	800f330 <print_value>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d03b      	beq.n	800f0f8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800f080:	f107 0310 	add.w	r3, r7, #16
 800f084:	4618      	mov	r0, r3
 800f086:	f7ff f969 	bl	800e35c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00d      	beq.n	800f0ae <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	6938      	ldr	r0, [r7, #16]
 800f098:	69ba      	ldr	r2, [r7, #24]
 800f09a:	3201      	adds	r2, #1
 800f09c:	4611      	mov	r1, r2
 800f09e:	4798      	blx	r3
 800f0a0:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800f0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d029      	beq.n	800f0fc <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	613b      	str	r3, [r7, #16]
 800f0ac:	e020      	b.n	800f0f0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	3201      	adds	r2, #1
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	4798      	blx	r3
 800f0ba:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800f0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d01e      	beq.n	800f100 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800f0c2:	6939      	ldr	r1, [r7, #16]
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	bf28      	it	cs
 800f0ce:	4613      	movcs	r3, r2
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f0d4:	f00a fdff 	bl	8019cd6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0dc:	4413      	add	r3, r2
 800f0de:	2200      	movs	r2, #0
 800f0e0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	4798      	blx	r3
        buffer->buffer = NULL;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800f0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0f2:	e01a      	b.n	800f12a <print+0x106>
        goto fail;
 800f0f4:	bf00      	nop
 800f0f6:	e004      	b.n	800f102 <print+0xde>
        goto fail;
 800f0f8:	bf00      	nop
 800f0fa:	e002      	b.n	800f102 <print+0xde>
            goto fail;
 800f0fc:	bf00      	nop
 800f0fe:	e000      	b.n	800f102 <print+0xde>
            goto fail;
 800f100:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d006      	beq.n	800f116 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	4610      	mov	r0, r2
 800f110:	4798      	blx	r3
        buffer->buffer = NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800f116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d005      	beq.n	800f128 <print+0x104>
    {
        hooks->deallocate(printed);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f122:	4798      	blx	r3
        printed = NULL;
 800f124:	2300      	movs	r3, #0
 800f126:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3738      	adds	r7, #56	@ 0x38
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	0801f230 	.word	0x0801f230

0800f138 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800f140:	4a04      	ldr	r2, [pc, #16]	@ (800f154 <cJSON_PrintUnformatted+0x1c>)
 800f142:	2100      	movs	r1, #0
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff ff6d 	bl	800f024 <print>
 800f14a:	4603      	mov	r3, r0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	20000080 	.word	0x20000080

0800f158 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d003      	beq.n	800f170 <parse_value+0x18>
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d101      	bne.n	800f174 <parse_value+0x1c>
    {
        return false; /* no input */
 800f170:	2300      	movs	r3, #0
 800f172:	e0d2      	b.n	800f31a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d01d      	beq.n	800f1b6 <parse_value+0x5e>
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	1d1a      	adds	r2, r3, #4
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	429a      	cmp	r2, r3
 800f186:	d816      	bhi.n	800f1b6 <parse_value+0x5e>
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	4413      	add	r3, r2
 800f192:	2204      	movs	r2, #4
 800f194:	4963      	ldr	r1, [pc, #396]	@ (800f324 <parse_value+0x1cc>)
 800f196:	4618      	mov	r0, r3
 800f198:	f00a fcd2 	bl	8019b40 <strncmp>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d109      	bne.n	800f1b6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2204      	movs	r2, #4
 800f1a6:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	1d1a      	adds	r2, r3, #4
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	609a      	str	r2, [r3, #8]
        return true;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e0b1      	b.n	800f31a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d01d      	beq.n	800f1f8 <parse_value+0xa0>
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	1d5a      	adds	r2, r3, #5
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d816      	bhi.n	800f1f8 <parse_value+0xa0>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	689b      	ldr	r3, [r3, #8]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	2205      	movs	r2, #5
 800f1d6:	4954      	ldr	r1, [pc, #336]	@ (800f328 <parse_value+0x1d0>)
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f00a fcb1 	bl	8019b40 <strncmp>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d109      	bne.n	800f1f8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	1d5a      	adds	r2, r3, #5
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	609a      	str	r2, [r3, #8]
        return true;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e090      	b.n	800f31a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d020      	beq.n	800f240 <parse_value+0xe8>
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	1d1a      	adds	r2, r3, #4
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d819      	bhi.n	800f240 <parse_value+0xe8>
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	4413      	add	r3, r2
 800f216:	2204      	movs	r2, #4
 800f218:	4944      	ldr	r1, [pc, #272]	@ (800f32c <parse_value+0x1d4>)
 800f21a:	4618      	mov	r0, r3
 800f21c:	f00a fc90 	bl	8019b40 <strncmp>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10c      	bne.n	800f240 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2202      	movs	r2, #2
 800f22a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	1d1a      	adds	r2, r3, #4
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	609a      	str	r2, [r3, #8]
        return true;
 800f23c:	2301      	movs	r3, #1
 800f23e:	e06c      	b.n	800f31a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d013      	beq.n	800f26e <parse_value+0x116>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	689a      	ldr	r2, [r3, #8]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d20d      	bcs.n	800f26e <parse_value+0x116>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	4413      	add	r3, r2
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b22      	cmp	r3, #34	@ 0x22
 800f260:	d105      	bne.n	800f26e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff fb1d 	bl	800e8a4 <parse_string>
 800f26a:	4603      	mov	r3, r0
 800f26c:	e055      	b.n	800f31a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d023      	beq.n	800f2bc <parse_value+0x164>
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	689a      	ldr	r2, [r3, #8]
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d21d      	bcs.n	800f2bc <parse_value+0x164>
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	689b      	ldr	r3, [r3, #8]
 800f288:	4413      	add	r3, r2
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	2b2d      	cmp	r3, #45	@ 0x2d
 800f28e:	d00f      	beq.n	800f2b0 <parse_value+0x158>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	689b      	ldr	r3, [r3, #8]
 800f298:	4413      	add	r3, r2
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f29e:	d90d      	bls.n	800f2bc <parse_value+0x164>
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b39      	cmp	r3, #57	@ 0x39
 800f2ae:	d805      	bhi.n	800f2bc <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7fe feec 	bl	800e090 <parse_number>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	e02e      	b.n	800f31a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d013      	beq.n	800f2ea <parse_value+0x192>
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	689a      	ldr	r2, [r3, #8]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d20d      	bcs.n	800f2ea <parse_value+0x192>
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	2b5b      	cmp	r3, #91	@ 0x5b
 800f2dc:	d105      	bne.n	800f2ea <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 f909 	bl	800f4f8 <parse_array>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	e017      	b.n	800f31a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d013      	beq.n	800f318 <parse_value+0x1c0>
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	689a      	ldr	r2, [r3, #8]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d20d      	bcs.n	800f318 <parse_value+0x1c0>
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	4413      	add	r3, r2
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	2b7b      	cmp	r3, #123	@ 0x7b
 800f30a:	d105      	bne.n	800f318 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fa3c 	bl	800f78c <parse_object>
 800f314:	4603      	mov	r3, r0
 800f316:	e000      	b.n	800f31a <parse_value+0x1c2>
    }

    return false;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	0801d5b8 	.word	0x0801d5b8
 800f328:	0801d5e8 	.word	0x0801d5e8
 800f32c:	0801d5f0 	.word	0x0801d5f0

0800f330 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800f33a:	2300      	movs	r3, #0
 800f33c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <print_value+0x1a>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <print_value+0x1e>
    {
        return false;
 800f34a:	2300      	movs	r3, #0
 800f34c:	e0c9      	b.n	800f4e2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b80      	cmp	r3, #128	@ 0x80
 800f356:	f000 808e 	beq.w	800f476 <print_value+0x146>
 800f35a:	2b80      	cmp	r3, #128	@ 0x80
 800f35c:	f300 80c0 	bgt.w	800f4e0 <print_value+0x1b0>
 800f360:	2b20      	cmp	r3, #32
 800f362:	dc49      	bgt.n	800f3f8 <print_value+0xc8>
 800f364:	2b00      	cmp	r3, #0
 800f366:	f340 80bb 	ble.w	800f4e0 <print_value+0x1b0>
 800f36a:	3b01      	subs	r3, #1
 800f36c:	2b1f      	cmp	r3, #31
 800f36e:	f200 80b7 	bhi.w	800f4e0 <print_value+0x1b0>
 800f372:	a201      	add	r2, pc, #4	@ (adr r2, 800f378 <print_value+0x48>)
 800f374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f378:	0800f423 	.word	0x0800f423
 800f37c:	0800f447 	.word	0x0800f447
 800f380:	0800f4e1 	.word	0x0800f4e1
 800f384:	0800f3ff 	.word	0x0800f3ff
 800f388:	0800f4e1 	.word	0x0800f4e1
 800f38c:	0800f4e1 	.word	0x0800f4e1
 800f390:	0800f4e1 	.word	0x0800f4e1
 800f394:	0800f46b 	.word	0x0800f46b
 800f398:	0800f4e1 	.word	0x0800f4e1
 800f39c:	0800f4e1 	.word	0x0800f4e1
 800f3a0:	0800f4e1 	.word	0x0800f4e1
 800f3a4:	0800f4e1 	.word	0x0800f4e1
 800f3a8:	0800f4e1 	.word	0x0800f4e1
 800f3ac:	0800f4e1 	.word	0x0800f4e1
 800f3b0:	0800f4e1 	.word	0x0800f4e1
 800f3b4:	0800f4bd 	.word	0x0800f4bd
 800f3b8:	0800f4e1 	.word	0x0800f4e1
 800f3bc:	0800f4e1 	.word	0x0800f4e1
 800f3c0:	0800f4e1 	.word	0x0800f4e1
 800f3c4:	0800f4e1 	.word	0x0800f4e1
 800f3c8:	0800f4e1 	.word	0x0800f4e1
 800f3cc:	0800f4e1 	.word	0x0800f4e1
 800f3d0:	0800f4e1 	.word	0x0800f4e1
 800f3d4:	0800f4e1 	.word	0x0800f4e1
 800f3d8:	0800f4e1 	.word	0x0800f4e1
 800f3dc:	0800f4e1 	.word	0x0800f4e1
 800f3e0:	0800f4e1 	.word	0x0800f4e1
 800f3e4:	0800f4e1 	.word	0x0800f4e1
 800f3e8:	0800f4e1 	.word	0x0800f4e1
 800f3ec:	0800f4e1 	.word	0x0800f4e1
 800f3f0:	0800f4e1 	.word	0x0800f4e1
 800f3f4:	0800f4c9 	.word	0x0800f4c9
 800f3f8:	2b40      	cmp	r3, #64	@ 0x40
 800f3fa:	d06b      	beq.n	800f4d4 <print_value+0x1a4>
 800f3fc:	e070      	b.n	800f4e0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800f3fe:	2105      	movs	r1, #5
 800f400:	6838      	ldr	r0, [r7, #0]
 800f402:	f7fe ff11 	bl	800e228 <ensure>
 800f406:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d101      	bne.n	800f412 <print_value+0xe2>
            {
                return false;
 800f40e:	2300      	movs	r3, #0
 800f410:	e067      	b.n	800f4e2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	4a35      	ldr	r2, [pc, #212]	@ (800f4ec <print_value+0x1bc>)
 800f416:	6810      	ldr	r0, [r2, #0]
 800f418:	6018      	str	r0, [r3, #0]
 800f41a:	7912      	ldrb	r2, [r2, #4]
 800f41c:	711a      	strb	r2, [r3, #4]
            return true;
 800f41e:	2301      	movs	r3, #1
 800f420:	e05f      	b.n	800f4e2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800f422:	2106      	movs	r1, #6
 800f424:	6838      	ldr	r0, [r7, #0]
 800f426:	f7fe feff 	bl	800e228 <ensure>
 800f42a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <print_value+0x106>
            {
                return false;
 800f432:	2300      	movs	r3, #0
 800f434:	e055      	b.n	800f4e2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	4a2d      	ldr	r2, [pc, #180]	@ (800f4f0 <print_value+0x1c0>)
 800f43a:	6810      	ldr	r0, [r2, #0]
 800f43c:	6018      	str	r0, [r3, #0]
 800f43e:	8892      	ldrh	r2, [r2, #4]
 800f440:	809a      	strh	r2, [r3, #4]
            return true;
 800f442:	2301      	movs	r3, #1
 800f444:	e04d      	b.n	800f4e2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800f446:	2105      	movs	r1, #5
 800f448:	6838      	ldr	r0, [r7, #0]
 800f44a:	f7fe feed 	bl	800e228 <ensure>
 800f44e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d101      	bne.n	800f45a <print_value+0x12a>
            {
                return false;
 800f456:	2300      	movs	r3, #0
 800f458:	e043      	b.n	800f4e2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	4a25      	ldr	r2, [pc, #148]	@ (800f4f4 <print_value+0x1c4>)
 800f45e:	6810      	ldr	r0, [r2, #0]
 800f460:	6018      	str	r0, [r3, #0]
 800f462:	7912      	ldrb	r2, [r2, #4]
 800f464:	711a      	strb	r2, [r3, #4]
            return true;
 800f466:	2301      	movs	r3, #1
 800f468:	e03b      	b.n	800f4e2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800f46a:	6839      	ldr	r1, [r7, #0]
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7fe ffdf 	bl	800e430 <print_number>
 800f472:	4603      	mov	r3, r0
 800f474:	e035      	b.n	800f4e2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	691b      	ldr	r3, [r3, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <print_value+0x156>
            {
                return false;
 800f482:	2300      	movs	r3, #0
 800f484:	e02d      	b.n	800f4e2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7f8 ff20 	bl	80082d0 <strlen>
 800f490:	4603      	mov	r3, r0
 800f492:	3301      	adds	r3, #1
 800f494:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	6838      	ldr	r0, [r7, #0]
 800f49a:	f7fe fec5 	bl	800e228 <ensure>
 800f49e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d101      	bne.n	800f4aa <print_value+0x17a>
            {
                return false;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e01b      	b.n	800f4e2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f00a fc0f 	bl	8019cd6 <memcpy>
            return true;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e012      	b.n	800f4e2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7ff fc68 	bl	800ed94 <print_string>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	e00c      	b.n	800f4e2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f8d8 	bl	800f680 <print_array>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	e006      	b.n	800f4e2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fa64 	bl	800f9a4 <print_object>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	e000      	b.n	800f4e2 <print_value+0x1b2>

        default:
            return false;
 800f4e0:	2300      	movs	r3, #0
    }
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	0801d5b8 	.word	0x0801d5b8
 800f4f0:	0801d5e8 	.word	0x0801d5e8
 800f4f4:	0801d5f0 	.word	0x0801d5f0

0800f4f8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800f502:	2300      	movs	r3, #0
 800f504:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f506:	2300      	movs	r3, #0
 800f508:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f512:	d301      	bcc.n	800f518 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800f514:	2300      	movs	r3, #0
 800f516:	e0af      	b.n	800f678 <parse_array+0x180>
    }
    input_buffer->depth++;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	1c5a      	adds	r2, r3, #1
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	4413      	add	r3, r2
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b5b      	cmp	r3, #91	@ 0x5b
 800f530:	f040 8094 	bne.w	800f65c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	1c5a      	adds	r2, r3, #1
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f53e:	6838      	ldr	r0, [r7, #0]
 800f540:	f7ff fc38 	bl	800edb4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00d      	beq.n	800f566 <parse_array+0x6e>
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	689a      	ldr	r2, [r3, #8]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d207      	bcs.n	800f566 <parse_array+0x6e>
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	4413      	add	r3, r2
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	2b5d      	cmp	r3, #93	@ 0x5d
 800f564:	d061      	beq.n	800f62a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d005      	beq.n	800f578 <parse_array+0x80>
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	689a      	ldr	r2, [r3, #8]
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	429a      	cmp	r2, r3
 800f576:	d305      	bcc.n	800f584 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	689b      	ldr	r3, [r3, #8]
 800f57c:	1e5a      	subs	r2, r3, #1
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	609a      	str	r2, [r3, #8]
        goto fail;
 800f582:	e072      	b.n	800f66a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	1e5a      	subs	r2, r3, #1
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	3310      	adds	r3, #16
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe fd0e 	bl	800dfb4 <cJSON_New_Item>
 800f598:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d05f      	beq.n	800f660 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	617b      	str	r3, [r7, #20]
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	613b      	str	r3, [r7, #16]
 800f5ae:	e007      	b.n	800f5c0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	1c5a      	adds	r2, r3, #1
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f5ca:	6838      	ldr	r0, [r7, #0]
 800f5cc:	f7ff fbf2 	bl	800edb4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6938      	ldr	r0, [r7, #16]
 800f5d4:	f7ff fdc0 	bl	800f158 <parse_value>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d042      	beq.n	800f664 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f5de:	6838      	ldr	r0, [r7, #0]
 800f5e0:	f7ff fbe8 	bl	800edb4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00d      	beq.n	800f606 <parse_array+0x10e>
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	689a      	ldr	r2, [r3, #8]
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d207      	bcs.n	800f606 <parse_array+0x10e>
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	689b      	ldr	r3, [r3, #8]
 800f5fe:	4413      	add	r3, r2
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	2b2c      	cmp	r3, #44	@ 0x2c
 800f604:	d0c3      	beq.n	800f58e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d02d      	beq.n	800f668 <parse_array+0x170>
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	689a      	ldr	r2, [r3, #8]
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	429a      	cmp	r2, r3
 800f616:	d227      	bcs.n	800f668 <parse_array+0x170>
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	4413      	add	r3, r2
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b5d      	cmp	r3, #93	@ 0x5d
 800f626:	d11f      	bne.n	800f668 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800f628:	e000      	b.n	800f62c <parse_array+0x134>
        goto success;
 800f62a:	bf00      	nop
    input_buffer->depth--;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	1e5a      	subs	r2, r3, #1
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d002      	beq.n	800f642 <parse_array+0x14a>
        head->prev = current_item;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2220      	movs	r2, #32
 800f646:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	609a      	str	r2, [r3, #8]

    return true;
 800f658:	2301      	movs	r3, #1
 800f65a:	e00d      	b.n	800f678 <parse_array+0x180>
        goto fail;
 800f65c:	bf00      	nop
 800f65e:	e004      	b.n	800f66a <parse_array+0x172>
            goto fail; /* allocation failure */
 800f660:	bf00      	nop
 800f662:	e002      	b.n	800f66a <parse_array+0x172>
            goto fail; /* failed to parse value */
 800f664:	bf00      	nop
 800f666:	e000      	b.n	800f66a <parse_array+0x172>
        goto fail; /* expected end of array */
 800f668:	bf00      	nop

fail:
    if (head != NULL)
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800f670:	6978      	ldr	r0, [r7, #20]
 800f672:	f7fe fcb5 	bl	800dfe0 <cJSON_Delete>
    }

    return false;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3718      	adds	r7, #24
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800f68a:	2300      	movs	r3, #0
 800f68c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800f68e:	2300      	movs	r3, #0
 800f690:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <print_array+0x22>
    {
        return false;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	e070      	b.n	800f784 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	6838      	ldr	r0, [r7, #0]
 800f6a6:	f7fe fdbf 	bl	800e228 <ensure>
 800f6aa:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d101      	bne.n	800f6b6 <print_array+0x36>
    {
        return false;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	e066      	b.n	800f784 <print_array+0x104>
    }

    *output_pointer = '[';
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	225b      	movs	r2, #91	@ 0x5b
 800f6ba:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	1c5a      	adds	r2, r3, #1
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	1c5a      	adds	r2, r3, #1
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800f6d0:	e03d      	b.n	800f74e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800f6d2:	6839      	ldr	r1, [r7, #0]
 800f6d4:	6938      	ldr	r0, [r7, #16]
 800f6d6:	f7ff fe2b 	bl	800f330 <print_value>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <print_array+0x64>
        {
            return false;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	e04f      	b.n	800f784 <print_array+0x104>
        }
        update_offset(output_buffer);
 800f6e4:	6838      	ldr	r0, [r7, #0]
 800f6e6:	f7fe fe39 	bl	800e35c <update_offset>
        if (current_element->next)
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d02a      	beq.n	800f748 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	695b      	ldr	r3, [r3, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d001      	beq.n	800f6fe <print_array+0x7e>
 800f6fa:	2302      	movs	r3, #2
 800f6fc:	e000      	b.n	800f700 <print_array+0x80>
 800f6fe:	2301      	movs	r3, #1
 800f700:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3301      	adds	r3, #1
 800f706:	4619      	mov	r1, r3
 800f708:	6838      	ldr	r0, [r7, #0]
 800f70a:	f7fe fd8d 	bl	800e228 <ensure>
 800f70e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d101      	bne.n	800f71a <print_array+0x9a>
            {
                return false;
 800f716:	2300      	movs	r3, #0
 800f718:	e034      	b.n	800f784 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	617a      	str	r2, [r7, #20]
 800f720:	222c      	movs	r2, #44	@ 0x2c
 800f722:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	695b      	ldr	r3, [r3, #20]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d004      	beq.n	800f736 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	1c5a      	adds	r2, r3, #1
 800f730:	617a      	str	r2, [r7, #20]
 800f732:	2220      	movs	r2, #32
 800f734:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	2200      	movs	r2, #0
 800f73a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	689a      	ldr	r2, [r3, #8]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	441a      	add	r2, r3
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1be      	bne.n	800f6d2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800f754:	2102      	movs	r1, #2
 800f756:	6838      	ldr	r0, [r7, #0]
 800f758:	f7fe fd66 	bl	800e228 <ensure>
 800f75c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d101      	bne.n	800f768 <print_array+0xe8>
    {
        return false;
 800f764:	2300      	movs	r3, #0
 800f766:	e00d      	b.n	800f784 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	1c5a      	adds	r2, r3, #1
 800f76c:	617a      	str	r2, [r7, #20]
 800f76e:	225d      	movs	r2, #93	@ 0x5d
 800f770:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2200      	movs	r2, #0
 800f776:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	1e5a      	subs	r2, r3, #1
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	60da      	str	r2, [r3, #12]

    return true;
 800f782:	2301      	movs	r3, #1
}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800f796:	2300      	movs	r3, #0
 800f798:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f7a6:	d301      	bcc.n	800f7ac <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e0f7      	b.n	800f99c <parse_object+0x210>
    }
    input_buffer->depth++;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	1c5a      	adds	r2, r3, #1
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 80db 	beq.w	800f974 <parse_object+0x1e8>
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	689a      	ldr	r2, [r3, #8]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	f080 80d4 	bcs.w	800f974 <parse_object+0x1e8>
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b7b      	cmp	r3, #123	@ 0x7b
 800f7da:	f040 80cb 	bne.w	800f974 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f7e8:	6838      	ldr	r0, [r7, #0]
 800f7ea:	f7ff fae3 	bl	800edb4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d00e      	beq.n	800f812 <parse_object+0x86>
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	689a      	ldr	r2, [r3, #8]
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d208      	bcs.n	800f812 <parse_object+0x86>
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b7d      	cmp	r3, #125	@ 0x7d
 800f80e:	f000 8098 	beq.w	800f942 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <parse_object+0x98>
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	689a      	ldr	r2, [r3, #8]
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d305      	bcc.n	800f830 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	1e5a      	subs	r2, r3, #1
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	609a      	str	r2, [r3, #8]
        goto fail;
 800f82e:	e0ae      	b.n	800f98e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	1e5a      	subs	r2, r3, #1
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	3310      	adds	r3, #16
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fe fbb8 	bl	800dfb4 <cJSON_New_Item>
 800f844:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f000 8095 	beq.w	800f978 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d104      	bne.n	800f85e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	617b      	str	r3, [r7, #20]
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	613b      	str	r3, [r7, #16]
 800f85c:	e007      	b.n	800f86e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 8083 	beq.w	800f97c <parse_object+0x1f0>
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	429a      	cmp	r2, r3
 800f882:	d27b      	bcs.n	800f97c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	1c5a      	adds	r2, r3, #1
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f88e:	6838      	ldr	r0, [r7, #0]
 800f890:	f7ff fa90 	bl	800edb4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6938      	ldr	r0, [r7, #16]
 800f898:	f7ff f804 	bl	800e8a4 <parse_string>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d06e      	beq.n	800f980 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800f8a2:	6838      	ldr	r0, [r7, #0]
 800f8a4:	f7ff fa86 	bl	800edb4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	691a      	ldr	r2, [r3, #16]
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d063      	beq.n	800f984 <parse_object+0x1f8>
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	689a      	ldr	r2, [r3, #8]
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d25d      	bcs.n	800f984 <parse_object+0x1f8>
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b3a      	cmp	r3, #58	@ 0x3a
 800f8d6:	d155      	bne.n	800f984 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	1c5a      	adds	r2, r3, #1
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f8e2:	6838      	ldr	r0, [r7, #0]
 800f8e4:	f7ff fa66 	bl	800edb4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f8e8:	6839      	ldr	r1, [r7, #0]
 800f8ea:	6938      	ldr	r0, [r7, #16]
 800f8ec:	f7ff fc34 	bl	800f158 <parse_value>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d048      	beq.n	800f988 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f8f6:	6838      	ldr	r0, [r7, #0]
 800f8f8:	f7ff fa5c 	bl	800edb4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00d      	beq.n	800f91e <parse_object+0x192>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	689a      	ldr	r2, [r3, #8]
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d207      	bcs.n	800f91e <parse_object+0x192>
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	4413      	add	r3, r2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	2b2c      	cmp	r3, #44	@ 0x2c
 800f91c:	d08d      	beq.n	800f83a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d033      	beq.n	800f98c <parse_object+0x200>
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	689a      	ldr	r2, [r3, #8]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d22d      	bcs.n	800f98c <parse_object+0x200>
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b7d      	cmp	r3, #125	@ 0x7d
 800f93e:	d125      	bne.n	800f98c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800f940:	e000      	b.n	800f944 <parse_object+0x1b8>
        goto success; /* empty object */
 800f942:	bf00      	nop
    input_buffer->depth--;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	1e5a      	subs	r2, r3, #1
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <parse_object+0x1ce>
        head->prev = current_item;
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2240      	movs	r2, #64	@ 0x40
 800f95e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	609a      	str	r2, [r3, #8]
    return true;
 800f970:	2301      	movs	r3, #1
 800f972:	e013      	b.n	800f99c <parse_object+0x210>
        goto fail; /* not an object */
 800f974:	bf00      	nop
 800f976:	e00a      	b.n	800f98e <parse_object+0x202>
            goto fail; /* allocation failure */
 800f978:	bf00      	nop
 800f97a:	e008      	b.n	800f98e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800f97c:	bf00      	nop
 800f97e:	e006      	b.n	800f98e <parse_object+0x202>
            goto fail; /* failed to parse name */
 800f980:	bf00      	nop
 800f982:	e004      	b.n	800f98e <parse_object+0x202>
            goto fail; /* invalid object */
 800f984:	bf00      	nop
 800f986:	e002      	b.n	800f98e <parse_object+0x202>
            goto fail; /* failed to parse value */
 800f988:	bf00      	nop
 800f98a:	e000      	b.n	800f98e <parse_object+0x202>
        goto fail; /* expected end of object */
 800f98c:	bf00      	nop

fail:
    if (head != NULL)
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d002      	beq.n	800f99a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800f994:	6978      	ldr	r0, [r7, #20]
 800f996:	f7fe fb23 	bl	800dfe0 <cJSON_Delete>
    }

    return false;
 800f99a:	2300      	movs	r3, #0
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3718      	adds	r7, #24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <print_object+0x22>
    {
        return false;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e108      	b.n	800fbd8 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d001      	beq.n	800f9d2 <print_object+0x2e>
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e000      	b.n	800f9d4 <print_object+0x30>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	4619      	mov	r1, r3
 800f9dc:	6838      	ldr	r0, [r7, #0]
 800f9de:	f7fe fc23 	bl	800e228 <ensure>
 800f9e2:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d101      	bne.n	800f9ee <print_object+0x4a>
    {
        return false;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e0f4      	b.n	800fbd8 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	61fa      	str	r2, [r7, #28]
 800f9f4:	227b      	movs	r2, #123	@ 0x7b
 800f9f6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	1c5a      	adds	r2, r3, #1
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d004      	beq.n	800fa14 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	61fa      	str	r2, [r7, #28]
 800fa10:	220a      	movs	r2, #10
 800fa12:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	689a      	ldr	r2, [r3, #8]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	441a      	add	r2, r3
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	609a      	str	r2, [r3, #8]

    while (current_item)
 800fa20:	e0a0      	b.n	800fb64 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	695b      	ldr	r3, [r3, #20]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d022      	beq.n	800fa70 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	6838      	ldr	r0, [r7, #0]
 800fa32:	f7fe fbf9 	bl	800e228 <ensure>
 800fa36:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d101      	bne.n	800fa42 <print_object+0x9e>
            {
                return false;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e0ca      	b.n	800fbd8 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800fa42:	2300      	movs	r3, #0
 800fa44:	617b      	str	r3, [r7, #20]
 800fa46:	e007      	b.n	800fa58 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	61fa      	str	r2, [r7, #28]
 800fa4e:	2209      	movs	r2, #9
 800fa50:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	3301      	adds	r3, #1
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	697a      	ldr	r2, [r7, #20]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d3f2      	bcc.n	800fa48 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	689a      	ldr	r2, [r3, #8]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	441a      	add	r2, r3
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	6a1b      	ldr	r3, [r3, #32]
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7ff f85c 	bl	800eb34 <print_string_ptr>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <print_object+0xe2>
        {
            return false;
 800fa82:	2300      	movs	r3, #0
 800fa84:	e0a8      	b.n	800fbd8 <print_object+0x234>
        }
        update_offset(output_buffer);
 800fa86:	6838      	ldr	r0, [r7, #0]
 800fa88:	f7fe fc68 	bl	800e35c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	695b      	ldr	r3, [r3, #20]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <print_object+0xf4>
 800fa94:	2302      	movs	r3, #2
 800fa96:	e000      	b.n	800fa9a <print_object+0xf6>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800fa9c:	68f9      	ldr	r1, [r7, #12]
 800fa9e:	6838      	ldr	r0, [r7, #0]
 800faa0:	f7fe fbc2 	bl	800e228 <ensure>
 800faa4:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d101      	bne.n	800fab0 <print_object+0x10c>
        {
            return false;
 800faac:	2300      	movs	r3, #0
 800faae:	e093      	b.n	800fbd8 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	61fa      	str	r2, [r7, #28]
 800fab6:	223a      	movs	r2, #58	@ 0x3a
 800fab8:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d004      	beq.n	800facc <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	1c5a      	adds	r2, r3, #1
 800fac6:	61fa      	str	r2, [r7, #28]
 800fac8:	2209      	movs	r2, #9
 800faca:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	689a      	ldr	r2, [r3, #8]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	441a      	add	r2, r3
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800fad8:	6839      	ldr	r1, [r7, #0]
 800fada:	69b8      	ldr	r0, [r7, #24]
 800fadc:	f7ff fc28 	bl	800f330 <print_value>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <print_object+0x146>
        {
            return false;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e076      	b.n	800fbd8 <print_object+0x234>
        }
        update_offset(output_buffer);
 800faea:	6838      	ldr	r0, [r7, #0]
 800faec:	f7fe fc36 	bl	800e35c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	695b      	ldr	r3, [r3, #20]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <print_object+0x158>
 800faf8:	2201      	movs	r2, #1
 800fafa:	e000      	b.n	800fafe <print_object+0x15a>
 800fafc:	2200      	movs	r2, #0
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d001      	beq.n	800fb0a <print_object+0x166>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e000      	b.n	800fb0c <print_object+0x168>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	4413      	add	r3, r2
 800fb0e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	3301      	adds	r3, #1
 800fb14:	4619      	mov	r1, r3
 800fb16:	6838      	ldr	r0, [r7, #0]
 800fb18:	f7fe fb86 	bl	800e228 <ensure>
 800fb1c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d101      	bne.n	800fb28 <print_object+0x184>
        {
            return false;
 800fb24:	2300      	movs	r3, #0
 800fb26:	e057      	b.n	800fbd8 <print_object+0x234>
        }
        if (current_item->next)
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d004      	beq.n	800fb3a <print_object+0x196>
        {
            *output_pointer++ = ',';
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	1c5a      	adds	r2, r3, #1
 800fb34:	61fa      	str	r2, [r7, #28]
 800fb36:	222c      	movs	r2, #44	@ 0x2c
 800fb38:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d004      	beq.n	800fb4c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	1c5a      	adds	r2, r3, #1
 800fb46:	61fa      	str	r2, [r7, #28]
 800fb48:	220a      	movs	r2, #10
 800fb4a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	689a      	ldr	r2, [r3, #8]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	441a      	add	r2, r3
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f47f af5b 	bne.w	800fa22 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	695b      	ldr	r3, [r3, #20]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d003      	beq.n	800fb7c <print_object+0x1d8>
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	e000      	b.n	800fb7e <print_object+0x1da>
 800fb7c:	2302      	movs	r3, #2
 800fb7e:	4619      	mov	r1, r3
 800fb80:	6838      	ldr	r0, [r7, #0]
 800fb82:	f7fe fb51 	bl	800e228 <ensure>
 800fb86:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d101      	bne.n	800fb92 <print_object+0x1ee>
    {
        return false;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e022      	b.n	800fbd8 <print_object+0x234>
    }
    if (output_buffer->format)
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d010      	beq.n	800fbbc <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	613b      	str	r3, [r7, #16]
 800fb9e:	e007      	b.n	800fbb0 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	1c5a      	adds	r2, r3, #1
 800fba4:	61fa      	str	r2, [r7, #28]
 800fba6:	2209      	movs	r2, #9
 800fba8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	3301      	adds	r3, #1
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d3f1      	bcc.n	800fba0 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	61fa      	str	r2, [r7, #28]
 800fbc2:	227d      	movs	r2, #125	@ 0x7d
 800fbc4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	1e5a      	subs	r2, r3, #1
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	60da      	str	r2, [r3, #12]

    return true;
 800fbd6:	2301      	movs	r3, #1
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3720      	adds	r7, #32
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800fbec:	2300      	movs	r3, #0
 800fbee:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d002      	beq.n	800fbfc <get_object_item+0x1c>
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d101      	bne.n	800fc00 <get_object_item+0x20>
    {
        return NULL;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e033      	b.n	800fc68 <get_object_item+0x88>
    }

    current_element = object->child;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d017      	beq.n	800fc3c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800fc0c:	e002      	b.n	800fc14 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d01c      	beq.n	800fc54 <get_object_item+0x74>
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6a1b      	ldr	r3, [r3, #32]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d018      	beq.n	800fc54 <get_object_item+0x74>
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	4619      	mov	r1, r3
 800fc28:	68b8      	ldr	r0, [r7, #8]
 800fc2a:	f7f8 faf1 	bl	8008210 <strcmp>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1ec      	bne.n	800fc0e <get_object_item+0x2e>
 800fc34:	e00e      	b.n	800fc54 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d008      	beq.n	800fc54 <get_object_item+0x74>
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	6a1b      	ldr	r3, [r3, #32]
 800fc46:	4619      	mov	r1, r3
 800fc48:	68b8      	ldr	r0, [r7, #8]
 800fc4a:	f7fe f91f 	bl	800de8c <case_insensitive_strcmp>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d1f0      	bne.n	800fc36 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d003      	beq.n	800fc62 <get_object_item+0x82>
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <get_object_item+0x86>
        return NULL;
 800fc62:	2300      	movs	r3, #0
 800fc64:	e000      	b.n	800fc68 <get_object_item+0x88>
    }

    return current_element;
 800fc66:	697b      	ldr	r3, [r7, #20]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	6839      	ldr	r1, [r7, #0]
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7ff ffae 	bl	800fbe0 <get_object_item>
 800fc84:	4603      	mov	r3, r0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b083      	sub	sp, #12
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	605a      	str	r2, [r3, #4]
}
 800fca4:	bf00      	nop
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d006      	beq.n	800fcd2 <add_item_to_array+0x22>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d003      	beq.n	800fcd2 <add_item_to_array+0x22>
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d101      	bne.n	800fcd6 <add_item_to_array+0x26>
    {
        return false;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	e01e      	b.n	800fd14 <add_item_to_array+0x64>
    }

    child = array->child;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d109      	bne.n	800fcf6 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	683a      	ldr	r2, [r7, #0]
 800fcec:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	601a      	str	r2, [r3, #0]
 800fcf4:	e00d      	b.n	800fd12 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d009      	beq.n	800fd12 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff ffc2 	bl	800fc8e <suffix_object>
            array->child->prev = item;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	683a      	ldr	r2, [r7, #0]
 800fd10:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800fd12:	2301      	movs	r3, #1
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800fd24:	687b      	ldr	r3, [r7, #4]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	370c      	adds	r7, #12
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b086      	sub	sp, #24
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	60b9      	str	r1, [r7, #8]
 800fd3c:	607a      	str	r2, [r7, #4]
 800fd3e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800fd40:	2300      	movs	r3, #0
 800fd42:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800fd44:	2300      	movs	r3, #0
 800fd46:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d009      	beq.n	800fd62 <add_item_to_object+0x30>
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d006      	beq.n	800fd62 <add_item_to_object+0x30>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <add_item_to_object+0x30>
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d101      	bne.n	800fd66 <add_item_to_object+0x34>
    {
        return false;
 800fd62:	2300      	movs	r3, #0
 800fd64:	e036      	b.n	800fdd4 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800fd66:	6a3b      	ldr	r3, [r7, #32]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d009      	beq.n	800fd80 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800fd6c:	68b8      	ldr	r0, [r7, #8]
 800fd6e:	f7ff ffd5 	bl	800fd1c <cast_away_const>
 800fd72:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fd7c:	613b      	str	r3, [r7, #16]
 800fd7e:	e00e      	b.n	800fd9e <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	68b8      	ldr	r0, [r7, #8]
 800fd84:	f7fe f8ee 	bl	800df64 <cJSON_strdup>
 800fd88:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <add_item_to_object+0x62>
        {
            return false;
 800fd90:	2300      	movs	r3, #0
 800fd92:	e01f      	b.n	800fdd4 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fd9c:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d109      	bne.n	800fdbe <add_item_to_object+0x8c>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a1b      	ldr	r3, [r3, #32]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d005      	beq.n	800fdbe <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	6a12      	ldr	r2, [r2, #32]
 800fdba:	4610      	mov	r0, r2
 800fdbc:	4798      	blx	r3
    }

    item->string = new_key;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	697a      	ldr	r2, [r7, #20]
 800fdc2:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	693a      	ldr	r2, [r7, #16]
 800fdc8:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f7ff ff6f 	bl	800fcb0 <add_item_to_array>
 800fdd2:	4603      	mov	r3, r0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3718      	adds	r7, #24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b088      	sub	sp, #32
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800fdea:	ed97 0b00 	vldr	d0, [r7]
 800fdee:	f000 f81b 	bl	800fe28 <cJSON_CreateNumber>
 800fdf2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	4b09      	ldr	r3, [pc, #36]	@ (800fe20 <cJSON_AddNumberToObject+0x44>)
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	68b9      	ldr	r1, [r7, #8]
 800fdfe:	68f8      	ldr	r0, [r7, #12]
 800fe00:	f7ff ff97 	bl	800fd32 <add_item_to_object>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	e003      	b.n	800fe16 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800fe0e:	6978      	ldr	r0, [r7, #20]
 800fe10:	f7fe f8e6 	bl	800dfe0 <cJSON_Delete>
    return NULL;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3718      	adds	r7, #24
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	20000080 	.word	0x20000080
 800fe24:	00000000 	.word	0x00000000

0800fe28 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800fe32:	481f      	ldr	r0, [pc, #124]	@ (800feb0 <cJSON_CreateNumber+0x88>)
 800fe34:	f7fe f8be 	bl	800dfb4 <cJSON_New_Item>
 800fe38:	60f8      	str	r0, [r7, #12]
    if(item)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d02c      	beq.n	800fe9a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2208      	movs	r2, #8
 800fe44:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800fe46:	68f9      	ldr	r1, [r7, #12]
 800fe48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe4c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800fe50:	a315      	add	r3, pc, #84	@ (adr r3, 800fea8 <cJSON_CreateNumber+0x80>)
 800fe52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe5a:	f7f8 fe83 	bl	8008b64 <__aeabi_dcmpge>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800fe6a:	615a      	str	r2, [r3, #20]
 800fe6c:	e015      	b.n	800fe9a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800fe6e:	f04f 0200 	mov.w	r2, #0
 800fe72:	4b10      	ldr	r3, [pc, #64]	@ (800feb4 <cJSON_CreateNumber+0x8c>)
 800fe74:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe78:	f7f8 fe6a 	bl	8008b50 <__aeabi_dcmple>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d004      	beq.n	800fe8c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fe88:	615a      	str	r2, [r3, #20]
 800fe8a:	e006      	b.n	800fe9a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800fe8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe90:	f7f8 fe92 	bl	8008bb8 <__aeabi_d2iz>
 800fe94:	4602      	mov	r2, r0
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	f3af 8000 	nop.w
 800fea8:	ffc00000 	.word	0xffc00000
 800feac:	41dfffff 	.word	0x41dfffff
 800feb0:	20000080 	.word	0x20000080
 800feb4:	c1e00000 	.word	0xc1e00000

0800feb8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800febe:	4807      	ldr	r0, [pc, #28]	@ (800fedc <cJSON_CreateObject+0x24>)
 800fec0:	f7fe f878 	bl	800dfb4 <cJSON_New_Item>
 800fec4:	6078      	str	r0, [r7, #4]
    if (item)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2240      	movs	r2, #64	@ 0x40
 800fed0:	60da      	str	r2, [r3, #12]
    }

    return item;
 800fed2:	687b      	ldr	r3, [r7, #4]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20000080 	.word	0x20000080

0800fee0 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d101      	bne.n	800fef2 <cJSON_IsNumber+0x12>
    {
        return false;
 800feee:	2300      	movs	r3, #0
 800fef0:	e007      	b.n	800ff02 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	2b08      	cmp	r3, #8
 800fefa:	bf0c      	ite	eq
 800fefc:	2301      	moveq	r3, #1
 800fefe:	2300      	movne	r3, #0
 800ff00:	b2db      	uxtb	r3, r3
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	370c      	adds	r7, #12
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b083      	sub	sp, #12
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <cJSON_IsString+0x12>
    {
        return false;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	e007      	b.n	800ff30 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b10      	cmp	r3, #16
 800ff28:	bf0c      	ite	eq
 800ff2a:	2301      	moveq	r3, #1
 800ff2c:	2300      	movne	r3, #0
 800ff2e:	b2db      	uxtb	r3, r3
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ff40:	f000 feda 	bl	8010cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ff44:	f000 f812 	bl	800ff6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ff48:	f000 f9a2 	bl	8010290 <MX_GPIO_Init>
  MX_SPI1_Init();
 800ff4c:	f000 f880 	bl	8010050 <MX_SPI1_Init>
  MX_SPI2_Init();
 800ff50:	f000 f8b6 	bl	80100c0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800ff54:	f000 f948 	bl	80101e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800ff58:	f000 f970 	bl	801023c <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800ff5c:	f000 f8e4 	bl	8010128 <MX_SPI3_Init>
  MX_UART4_Init();
 800ff60:	f000 f918 	bl	8010194 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  user_app_init();
 800ff64:	f7fb fa26 	bl	800b3b4 <user_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ff68:	bf00      	nop
 800ff6a:	e7fd      	b.n	800ff68 <main+0x2c>

0800ff6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b094      	sub	sp, #80	@ 0x50
 800ff70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ff72:	f107 031c 	add.w	r3, r7, #28
 800ff76:	2234      	movs	r2, #52	@ 0x34
 800ff78:	2100      	movs	r1, #0
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f009 fdd8 	bl	8019b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ff80:	f107 0308 	add.w	r3, r7, #8
 800ff84:	2200      	movs	r2, #0
 800ff86:	601a      	str	r2, [r3, #0]
 800ff88:	605a      	str	r2, [r3, #4]
 800ff8a:	609a      	str	r2, [r3, #8]
 800ff8c:	60da      	str	r2, [r3, #12]
 800ff8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ff90:	2300      	movs	r3, #0
 800ff92:	607b      	str	r3, [r7, #4]
 800ff94:	4b2c      	ldr	r3, [pc, #176]	@ (8010048 <SystemClock_Config+0xdc>)
 800ff96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff98:	4a2b      	ldr	r2, [pc, #172]	@ (8010048 <SystemClock_Config+0xdc>)
 800ff9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ff9e:	6413      	str	r3, [r2, #64]	@ 0x40
 800ffa0:	4b29      	ldr	r3, [pc, #164]	@ (8010048 <SystemClock_Config+0xdc>)
 800ffa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ffa8:	607b      	str	r3, [r7, #4]
 800ffaa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ffac:	2300      	movs	r3, #0
 800ffae:	603b      	str	r3, [r7, #0]
 800ffb0:	4b26      	ldr	r3, [pc, #152]	@ (801004c <SystemClock_Config+0xe0>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a25      	ldr	r2, [pc, #148]	@ (801004c <SystemClock_Config+0xe0>)
 800ffb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ffba:	6013      	str	r3, [r2, #0]
 800ffbc:	4b23      	ldr	r3, [pc, #140]	@ (801004c <SystemClock_Config+0xe0>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ffc4:	603b      	str	r3, [r7, #0]
 800ffc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ffc8:	2302      	movs	r3, #2
 800ffca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ffd0:	2310      	movs	r3, #16
 800ffd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ffdc:	2308      	movs	r3, #8
 800ffde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800ffe0:	23b4      	movs	r3, #180	@ 0xb4
 800ffe2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800ffe8:	2302      	movs	r3, #2
 800ffea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ffec:	2302      	movs	r3, #2
 800ffee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fff0:	f107 031c 	add.w	r3, r7, #28
 800fff4:	4618      	mov	r0, r3
 800fff6:	f001 fedd 	bl	8011db4 <HAL_RCC_OscConfig>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d001      	beq.n	8010004 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8010000:	f000 fa30 	bl	8010464 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8010004:	f001 fb90 	bl	8011728 <HAL_PWREx_EnableOverDrive>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d001      	beq.n	8010012 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 801000e:	f000 fa29 	bl	8010464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010012:	230f      	movs	r3, #15
 8010014:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010016:	2302      	movs	r3, #2
 8010018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801001a:	2300      	movs	r3, #0
 801001c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801001e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8010022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010028:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801002a:	f107 0308 	add.w	r3, r7, #8
 801002e:	2105      	movs	r1, #5
 8010030:	4618      	mov	r0, r3
 8010032:	f001 fbc9 	bl	80117c8 <HAL_RCC_ClockConfig>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d001      	beq.n	8010040 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 801003c:	f000 fa12 	bl	8010464 <Error_Handler>
  }
}
 8010040:	bf00      	nop
 8010042:	3750      	adds	r7, #80	@ 0x50
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	40023800 	.word	0x40023800
 801004c:	40007000 	.word	0x40007000

08010050 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8010054:	4b18      	ldr	r3, [pc, #96]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010056:	4a19      	ldr	r2, [pc, #100]	@ (80100bc <MX_SPI1_Init+0x6c>)
 8010058:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801005a:	4b17      	ldr	r3, [pc, #92]	@ (80100b8 <MX_SPI1_Init+0x68>)
 801005c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8010060:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8010062:	4b15      	ldr	r3, [pc, #84]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010064:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8010068:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801006a:	4b13      	ldr	r3, [pc, #76]	@ (80100b8 <MX_SPI1_Init+0x68>)
 801006c:	2200      	movs	r2, #0
 801006e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010070:	4b11      	ldr	r3, [pc, #68]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010072:	2200      	movs	r2, #0
 8010074:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010076:	4b10      	ldr	r3, [pc, #64]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010078:	2200      	movs	r2, #0
 801007a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801007c:	4b0e      	ldr	r3, [pc, #56]	@ (80100b8 <MX_SPI1_Init+0x68>)
 801007e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010082:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8010084:	4b0c      	ldr	r3, [pc, #48]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010086:	2208      	movs	r2, #8
 8010088:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801008a:	4b0b      	ldr	r3, [pc, #44]	@ (80100b8 <MX_SPI1_Init+0x68>)
 801008c:	2200      	movs	r2, #0
 801008e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010090:	4b09      	ldr	r3, [pc, #36]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010092:	2200      	movs	r2, #0
 8010094:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010096:	4b08      	ldr	r3, [pc, #32]	@ (80100b8 <MX_SPI1_Init+0x68>)
 8010098:	2200      	movs	r2, #0
 801009a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801009c:	4b06      	ldr	r3, [pc, #24]	@ (80100b8 <MX_SPI1_Init+0x68>)
 801009e:	220a      	movs	r2, #10
 80100a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80100a2:	4805      	ldr	r0, [pc, #20]	@ (80100b8 <MX_SPI1_Init+0x68>)
 80100a4:	f002 f924 	bl	80122f0 <HAL_SPI_Init>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80100ae:	f000 f9d9 	bl	8010464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80100b2:	bf00      	nop
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	20001328 	.word	0x20001328
 80100bc:	40013000 	.word	0x40013000

080100c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80100c4:	4b16      	ldr	r3, [pc, #88]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100c6:	4a17      	ldr	r2, [pc, #92]	@ (8010124 <MX_SPI2_Init+0x64>)
 80100c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80100ca:	4b15      	ldr	r3, [pc, #84]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80100d0:	4b13      	ldr	r3, [pc, #76]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80100d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80100d8:	4b11      	ldr	r3, [pc, #68]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100da:	2200      	movs	r2, #0
 80100dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80100de:	4b10      	ldr	r3, [pc, #64]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80100e4:	4b0e      	ldr	r3, [pc, #56]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80100ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80100f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80100f8:	4b09      	ldr	r3, [pc, #36]	@ (8010120 <MX_SPI2_Init+0x60>)
 80100fa:	2200      	movs	r2, #0
 80100fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80100fe:	4b08      	ldr	r3, [pc, #32]	@ (8010120 <MX_SPI2_Init+0x60>)
 8010100:	2200      	movs	r2, #0
 8010102:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010104:	4b06      	ldr	r3, [pc, #24]	@ (8010120 <MX_SPI2_Init+0x60>)
 8010106:	220a      	movs	r2, #10
 8010108:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801010a:	4805      	ldr	r0, [pc, #20]	@ (8010120 <MX_SPI2_Init+0x60>)
 801010c:	f002 f8f0 	bl	80122f0 <HAL_SPI_Init>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d001      	beq.n	801011a <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8010116:	f000 f9a5 	bl	8010464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801011a:	bf00      	nop
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	20001380 	.word	0x20001380
 8010124:	40003800 	.word	0x40003800

08010128 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801012c:	4b17      	ldr	r3, [pc, #92]	@ (801018c <MX_SPI3_Init+0x64>)
 801012e:	4a18      	ldr	r2, [pc, #96]	@ (8010190 <MX_SPI3_Init+0x68>)
 8010130:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8010132:	4b16      	ldr	r3, [pc, #88]	@ (801018c <MX_SPI3_Init+0x64>)
 8010134:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8010138:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801013a:	4b14      	ldr	r3, [pc, #80]	@ (801018c <MX_SPI3_Init+0x64>)
 801013c:	2200      	movs	r2, #0
 801013e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8010140:	4b12      	ldr	r3, [pc, #72]	@ (801018c <MX_SPI3_Init+0x64>)
 8010142:	2200      	movs	r2, #0
 8010144:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010146:	4b11      	ldr	r3, [pc, #68]	@ (801018c <MX_SPI3_Init+0x64>)
 8010148:	2200      	movs	r2, #0
 801014a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801014c:	4b0f      	ldr	r3, [pc, #60]	@ (801018c <MX_SPI3_Init+0x64>)
 801014e:	2200      	movs	r2, #0
 8010150:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8010152:	4b0e      	ldr	r3, [pc, #56]	@ (801018c <MX_SPI3_Init+0x64>)
 8010154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010158:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801015a:	4b0c      	ldr	r3, [pc, #48]	@ (801018c <MX_SPI3_Init+0x64>)
 801015c:	2218      	movs	r2, #24
 801015e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010160:	4b0a      	ldr	r3, [pc, #40]	@ (801018c <MX_SPI3_Init+0x64>)
 8010162:	2200      	movs	r2, #0
 8010164:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8010166:	4b09      	ldr	r3, [pc, #36]	@ (801018c <MX_SPI3_Init+0x64>)
 8010168:	2200      	movs	r2, #0
 801016a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801016c:	4b07      	ldr	r3, [pc, #28]	@ (801018c <MX_SPI3_Init+0x64>)
 801016e:	2200      	movs	r2, #0
 8010170:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8010172:	4b06      	ldr	r3, [pc, #24]	@ (801018c <MX_SPI3_Init+0x64>)
 8010174:	220a      	movs	r2, #10
 8010176:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8010178:	4804      	ldr	r0, [pc, #16]	@ (801018c <MX_SPI3_Init+0x64>)
 801017a:	f002 f8b9 	bl	80122f0 <HAL_SPI_Init>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d001      	beq.n	8010188 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8010184:	f000 f96e 	bl	8010464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8010188:	bf00      	nop
 801018a:	bd80      	pop	{r7, pc}
 801018c:	200013d8 	.word	0x200013d8
 8010190:	40003c00 	.word	0x40003c00

08010194 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8010198:	4b11      	ldr	r3, [pc, #68]	@ (80101e0 <MX_UART4_Init+0x4c>)
 801019a:	4a12      	ldr	r2, [pc, #72]	@ (80101e4 <MX_UART4_Init+0x50>)
 801019c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801019e:	4b10      	ldr	r3, [pc, #64]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80101a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80101a6:	4b0e      	ldr	r3, [pc, #56]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101a8:	2200      	movs	r2, #0
 80101aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80101ac:	4b0c      	ldr	r3, [pc, #48]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80101b2:	4b0b      	ldr	r3, [pc, #44]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101b4:	2200      	movs	r2, #0
 80101b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80101b8:	4b09      	ldr	r3, [pc, #36]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101ba:	220c      	movs	r2, #12
 80101bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80101be:	4b08      	ldr	r3, [pc, #32]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80101c4:	4b06      	ldr	r3, [pc, #24]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80101ca:	4805      	ldr	r0, [pc, #20]	@ (80101e0 <MX_UART4_Init+0x4c>)
 80101cc:	f003 fd30 	bl	8013c30 <HAL_UART_Init>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d001      	beq.n	80101da <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80101d6:	f000 f945 	bl	8010464 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80101da:	bf00      	nop
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	20001430 	.word	0x20001430
 80101e4:	40004c00 	.word	0x40004c00

080101e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80101ec:	4b11      	ldr	r3, [pc, #68]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 80101ee:	4a12      	ldr	r2, [pc, #72]	@ (8010238 <MX_USART2_UART_Init+0x50>)
 80101f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80101f2:	4b10      	ldr	r3, [pc, #64]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 80101f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80101f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80101fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010200:	4b0c      	ldr	r3, [pc, #48]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 8010202:	2200      	movs	r2, #0
 8010204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010206:	4b0b      	ldr	r3, [pc, #44]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 8010208:	2200      	movs	r2, #0
 801020a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801020c:	4b09      	ldr	r3, [pc, #36]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 801020e:	220c      	movs	r2, #12
 8010210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010212:	4b08      	ldr	r3, [pc, #32]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 8010214:	2200      	movs	r2, #0
 8010216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010218:	4b06      	ldr	r3, [pc, #24]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 801021a:	2200      	movs	r2, #0
 801021c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801021e:	4805      	ldr	r0, [pc, #20]	@ (8010234 <MX_USART2_UART_Init+0x4c>)
 8010220:	f003 fd06 	bl	8013c30 <HAL_UART_Init>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d001      	beq.n	801022e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801022a:	f000 f91b 	bl	8010464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801022e:	bf00      	nop
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	20001478 	.word	0x20001478
 8010238:	40004400 	.word	0x40004400

0801023c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8010240:	4b11      	ldr	r3, [pc, #68]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010242:	4a12      	ldr	r2, [pc, #72]	@ (801028c <MX_USART3_UART_Init+0x50>)
 8010244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8010246:	4b10      	ldr	r3, [pc, #64]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801024c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801024e:	4b0e      	ldr	r3, [pc, #56]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010250:	2200      	movs	r2, #0
 8010252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8010254:	4b0c      	ldr	r3, [pc, #48]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010256:	2200      	movs	r2, #0
 8010258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801025a:	4b0b      	ldr	r3, [pc, #44]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 801025c:	2200      	movs	r2, #0
 801025e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8010260:	4b09      	ldr	r3, [pc, #36]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010262:	220c      	movs	r2, #12
 8010264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010266:	4b08      	ldr	r3, [pc, #32]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010268:	2200      	movs	r2, #0
 801026a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801026c:	4b06      	ldr	r3, [pc, #24]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 801026e:	2200      	movs	r2, #0
 8010270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8010272:	4805      	ldr	r0, [pc, #20]	@ (8010288 <MX_USART3_UART_Init+0x4c>)
 8010274:	f003 fcdc 	bl	8013c30 <HAL_UART_Init>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 801027e:	f000 f8f1 	bl	8010464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8010282:	bf00      	nop
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	200014c0 	.word	0x200014c0
 801028c:	40004800 	.word	0x40004800

08010290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	@ 0x28
 8010294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010296:	f107 0314 	add.w	r3, r7, #20
 801029a:	2200      	movs	r2, #0
 801029c:	601a      	str	r2, [r3, #0]
 801029e:	605a      	str	r2, [r3, #4]
 80102a0:	609a      	str	r2, [r3, #8]
 80102a2:	60da      	str	r2, [r3, #12]
 80102a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80102a6:	2300      	movs	r3, #0
 80102a8:	613b      	str	r3, [r7, #16]
 80102aa:	4b60      	ldr	r3, [pc, #384]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ae:	4a5f      	ldr	r2, [pc, #380]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80102b6:	4b5d      	ldr	r3, [pc, #372]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102be:	613b      	str	r3, [r7, #16]
 80102c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80102c2:	2300      	movs	r3, #0
 80102c4:	60fb      	str	r3, [r7, #12]
 80102c6:	4b59      	ldr	r3, [pc, #356]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ca:	4a58      	ldr	r2, [pc, #352]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102cc:	f043 0304 	orr.w	r3, r3, #4
 80102d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80102d2:	4b56      	ldr	r3, [pc, #344]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102d6:	f003 0304 	and.w	r3, r3, #4
 80102da:	60fb      	str	r3, [r7, #12]
 80102dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80102de:	2300      	movs	r3, #0
 80102e0:	60bb      	str	r3, [r7, #8]
 80102e2:	4b52      	ldr	r3, [pc, #328]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102e6:	4a51      	ldr	r2, [pc, #324]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102e8:	f043 0301 	orr.w	r3, r3, #1
 80102ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80102ee:	4b4f      	ldr	r3, [pc, #316]	@ (801042c <MX_GPIO_Init+0x19c>)
 80102f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	60bb      	str	r3, [r7, #8]
 80102f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80102fa:	2300      	movs	r3, #0
 80102fc:	607b      	str	r3, [r7, #4]
 80102fe:	4b4b      	ldr	r3, [pc, #300]	@ (801042c <MX_GPIO_Init+0x19c>)
 8010300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010302:	4a4a      	ldr	r2, [pc, #296]	@ (801042c <MX_GPIO_Init+0x19c>)
 8010304:	f043 0302 	orr.w	r3, r3, #2
 8010308:	6313      	str	r3, [r2, #48]	@ 0x30
 801030a:	4b48      	ldr	r3, [pc, #288]	@ (801042c <MX_GPIO_Init+0x19c>)
 801030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801030e:	f003 0302 	and.w	r3, r3, #2
 8010312:	607b      	str	r3, [r7, #4]
 8010314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 8010316:	2200      	movs	r2, #0
 8010318:	2102      	movs	r1, #2
 801031a:	4845      	ldr	r0, [pc, #276]	@ (8010430 <MX_GPIO_Init+0x1a0>)
 801031c:	f001 f998 	bl	8011650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_4_Pin, GPIO_PIN_RESET);
 8010320:	2200      	movs	r2, #0
 8010322:	215c      	movs	r1, #92	@ 0x5c
 8010324:	4843      	ldr	r0, [pc, #268]	@ (8010434 <MX_GPIO_Init+0x1a4>)
 8010326:	f001 f993 	bl	8011650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 801032a:	2200      	movs	r2, #0
 801032c:	2113      	movs	r1, #19
 801032e:	4842      	ldr	r0, [pc, #264]	@ (8010438 <MX_GPIO_Init+0x1a8>)
 8010330:	f001 f98e 	bl	8011650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_CS_Pin|RF_RST_Pin|TOUCH_LED4_Pin, GPIO_PIN_RESET);
 8010334:	2200      	movs	r2, #0
 8010336:	f244 0106 	movw	r1, #16390	@ 0x4006
 801033a:	4840      	ldr	r0, [pc, #256]	@ (801043c <MX_GPIO_Init+0x1ac>)
 801033c:	f001 f988 	bl	8011650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_RELAY_2_Pin|L_RELAY_1_Pin, GPIO_PIN_SET);
 8010340:	2201      	movs	r2, #1
 8010342:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8010346:	483b      	ldr	r0, [pc, #236]	@ (8010434 <MX_GPIO_Init+0x1a4>)
 8010348:	f001 f982 	bl	8011650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_RELAY_3_GPIO_Port, L_RELAY_3_Pin, GPIO_PIN_SET);
 801034c:	2201      	movs	r2, #1
 801034e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010352:	483a      	ldr	r0, [pc, #232]	@ (801043c <MX_GPIO_Init+0x1ac>)
 8010354:	f001 f97c 	bl	8011650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 8010358:	2302      	movs	r3, #2
 801035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801035c:	2301      	movs	r3, #1
 801035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010360:	2300      	movs	r3, #0
 8010362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010364:	2300      	movs	r3, #0
 8010366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 8010368:	f107 0314 	add.w	r3, r7, #20
 801036c:	4619      	mov	r1, r3
 801036e:	4830      	ldr	r0, [pc, #192]	@ (8010430 <MX_GPIO_Init+0x1a0>)
 8010370:	f000 fece 	bl	8011110 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 L_RELAY_2_Pin
                           L_RELAY_1_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_2_Pin
 8010374:	f44f 7347 	mov.w	r3, #796	@ 0x31c
 8010378:	617b      	str	r3, [r7, #20]
                          |L_RELAY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801037a:	2301      	movs	r3, #1
 801037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801037e:	2300      	movs	r3, #0
 8010380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010382:	2300      	movs	r3, #0
 8010384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010386:	f107 0314 	add.w	r3, r7, #20
 801038a:	4619      	mov	r1, r3
 801038c:	4829      	ldr	r0, [pc, #164]	@ (8010434 <MX_GPIO_Init+0x1a4>)
 801038e:	f000 febf 	bl	8011110 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_BACKLIT_Pin PA1 PA4 */
  GPIO_InitStruct.Pin = DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4;
 8010392:	2313      	movs	r3, #19
 8010394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010396:	2301      	movs	r3, #1
 8010398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801039a:	2300      	movs	r3, #0
 801039c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801039e:	2300      	movs	r3, #0
 80103a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103a2:	f107 0314 	add.w	r3, r7, #20
 80103a6:	4619      	mov	r1, r3
 80103a8:	4823      	ldr	r0, [pc, #140]	@ (8010438 <MX_GPIO_Init+0x1a8>)
 80103aa:	f000 feb1 	bl	8011110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CS_Pin RF_RST_Pin TOUCH_LED4_Pin L_RELAY_3_Pin */
  GPIO_InitStruct.Pin = RF_CS_Pin|RF_RST_Pin|TOUCH_LED4_Pin|L_RELAY_3_Pin;
 80103ae:	f244 1306 	movw	r3, #16646	@ 0x4106
 80103b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80103b4:	2301      	movs	r3, #1
 80103b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103b8:	2300      	movs	r3, #0
 80103ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103bc:	2300      	movs	r3, #0
 80103be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80103c0:	f107 0314 	add.w	r3, r7, #20
 80103c4:	4619      	mov	r1, r3
 80103c6:	481d      	ldr	r0, [pc, #116]	@ (801043c <MX_GPIO_Init+0x1ac>)
 80103c8:	f000 fea2 	bl	8011110 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_RELAY_4_Pin */
  GPIO_InitStruct.Pin = L_RELAY_4_Pin;
 80103cc:	2340      	movs	r3, #64	@ 0x40
 80103ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80103d0:	2301      	movs	r3, #1
 80103d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80103d4:	2302      	movs	r3, #2
 80103d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103d8:	2300      	movs	r3, #0
 80103da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L_RELAY_4_GPIO_Port, &GPIO_InitStruct);
 80103dc:	f107 0314 	add.w	r3, r7, #20
 80103e0:	4619      	mov	r1, r3
 80103e2:	4814      	ldr	r0, [pc, #80]	@ (8010434 <MX_GPIO_Init+0x1a4>)
 80103e4:	f000 fe94 	bl	8011110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80103e8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80103ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80103ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80103f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80103f4:	2302      	movs	r3, #2
 80103f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	4619      	mov	r1, r3
 80103fe:	480e      	ldr	r0, [pc, #56]	@ (8010438 <MX_GPIO_Init+0x1a8>)
 8010400:	f000 fe86 	bl	8011110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010404:	2200      	movs	r2, #0
 8010406:	2100      	movs	r1, #0
 8010408:	2017      	movs	r0, #23
 801040a:	f000 fdb7 	bl	8010f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801040e:	2017      	movs	r0, #23
 8010410:	f000 fdd0 	bl	8010fb4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010414:	2200      	movs	r2, #0
 8010416:	2100      	movs	r1, #0
 8010418:	2028      	movs	r0, #40	@ 0x28
 801041a:	f000 fdaf 	bl	8010f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801041e:	2028      	movs	r0, #40	@ 0x28
 8010420:	f000 fdc8 	bl	8010fb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8010424:	bf00      	nop
 8010426:	3728      	adds	r7, #40	@ 0x28
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	40023800 	.word	0x40023800
 8010430:	40021c00 	.word	0x40021c00
 8010434:	40020800 	.word	0x40020800
 8010438:	40020000 	.word	0x40020000
 801043c:	40020400 	.word	0x40020400

08010440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a04      	ldr	r2, [pc, #16]	@ (8010460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d101      	bne.n	8010456 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8010452:	f000 fc73 	bl	8010d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	40010000 	.word	0x40010000

08010464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010468:	b672      	cpsid	i
}
 801046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801046c:	bf00      	nop
 801046e:	e7fd      	b.n	801046c <Error_Handler+0x8>

08010470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010476:	2300      	movs	r3, #0
 8010478:	607b      	str	r3, [r7, #4]
 801047a:	4b10      	ldr	r3, [pc, #64]	@ (80104bc <HAL_MspInit+0x4c>)
 801047c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801047e:	4a0f      	ldr	r2, [pc, #60]	@ (80104bc <HAL_MspInit+0x4c>)
 8010480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010484:	6453      	str	r3, [r2, #68]	@ 0x44
 8010486:	4b0d      	ldr	r3, [pc, #52]	@ (80104bc <HAL_MspInit+0x4c>)
 8010488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801048a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801048e:	607b      	str	r3, [r7, #4]
 8010490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010492:	2300      	movs	r3, #0
 8010494:	603b      	str	r3, [r7, #0]
 8010496:	4b09      	ldr	r3, [pc, #36]	@ (80104bc <HAL_MspInit+0x4c>)
 8010498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801049a:	4a08      	ldr	r2, [pc, #32]	@ (80104bc <HAL_MspInit+0x4c>)
 801049c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80104a2:	4b06      	ldr	r3, [pc, #24]	@ (80104bc <HAL_MspInit+0x4c>)
 80104a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104aa:	603b      	str	r3, [r7, #0]
 80104ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80104ae:	bf00      	nop
 80104b0:	370c      	adds	r7, #12
 80104b2:	46bd      	mov	sp, r7
 80104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop
 80104bc:	40023800 	.word	0x40023800

080104c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b08e      	sub	sp, #56	@ 0x38
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80104cc:	2200      	movs	r2, #0
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	605a      	str	r2, [r3, #4]
 80104d2:	609a      	str	r2, [r3, #8]
 80104d4:	60da      	str	r2, [r3, #12]
 80104d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a66      	ldr	r2, [pc, #408]	@ (8010678 <HAL_SPI_MspInit+0x1b8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d12c      	bne.n	801053c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80104e2:	2300      	movs	r3, #0
 80104e4:	623b      	str	r3, [r7, #32]
 80104e6:	4b65      	ldr	r3, [pc, #404]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 80104e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ea:	4a64      	ldr	r2, [pc, #400]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 80104ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80104f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80104f2:	4b62      	ldr	r3, [pc, #392]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 80104f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80104fa:	623b      	str	r3, [r7, #32]
 80104fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80104fe:	2300      	movs	r3, #0
 8010500:	61fb      	str	r3, [r7, #28]
 8010502:	4b5e      	ldr	r3, [pc, #376]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010506:	4a5d      	ldr	r2, [pc, #372]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010508:	f043 0301 	orr.w	r3, r3, #1
 801050c:	6313      	str	r3, [r2, #48]	@ 0x30
 801050e:	4b5b      	ldr	r3, [pc, #364]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010512:	f003 0301 	and.w	r3, r3, #1
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 801051a:	23a0      	movs	r3, #160	@ 0xa0
 801051c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801051e:	2302      	movs	r3, #2
 8010520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010522:	2300      	movs	r3, #0
 8010524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010526:	2303      	movs	r3, #3
 8010528:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801052a:	2305      	movs	r3, #5
 801052c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801052e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010532:	4619      	mov	r1, r3
 8010534:	4852      	ldr	r0, [pc, #328]	@ (8010680 <HAL_SPI_MspInit+0x1c0>)
 8010536:	f000 fdeb 	bl	8011110 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 801053a:	e099      	b.n	8010670 <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI2)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a50      	ldr	r2, [pc, #320]	@ (8010684 <HAL_SPI_MspInit+0x1c4>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d153      	bne.n	80105ee <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010546:	2300      	movs	r3, #0
 8010548:	61bb      	str	r3, [r7, #24]
 801054a:	4b4c      	ldr	r3, [pc, #304]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 801054c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801054e:	4a4b      	ldr	r2, [pc, #300]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010554:	6413      	str	r3, [r2, #64]	@ 0x40
 8010556:	4b49      	ldr	r3, [pc, #292]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801055a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801055e:	61bb      	str	r3, [r7, #24]
 8010560:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010562:	2300      	movs	r3, #0
 8010564:	617b      	str	r3, [r7, #20]
 8010566:	4b45      	ldr	r3, [pc, #276]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801056a:	4a44      	ldr	r2, [pc, #272]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 801056c:	f043 0304 	orr.w	r3, r3, #4
 8010570:	6313      	str	r3, [r2, #48]	@ 0x30
 8010572:	4b42      	ldr	r3, [pc, #264]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010576:	f003 0304 	and.w	r3, r3, #4
 801057a:	617b      	str	r3, [r7, #20]
 801057c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801057e:	2300      	movs	r3, #0
 8010580:	613b      	str	r3, [r7, #16]
 8010582:	4b3e      	ldr	r3, [pc, #248]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010586:	4a3d      	ldr	r2, [pc, #244]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010588:	f043 0302 	orr.w	r3, r3, #2
 801058c:	6313      	str	r3, [r2, #48]	@ 0x30
 801058e:	4b3b      	ldr	r3, [pc, #236]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010592:	f003 0302 	and.w	r3, r3, #2
 8010596:	613b      	str	r3, [r7, #16]
 8010598:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801059a:	2302      	movs	r3, #2
 801059c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801059e:	2302      	movs	r3, #2
 80105a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105a6:	2303      	movs	r3, #3
 80105a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80105aa:	2307      	movs	r3, #7
 80105ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80105b2:	4619      	mov	r1, r3
 80105b4:	4834      	ldr	r0, [pc, #208]	@ (8010688 <HAL_SPI_MspInit+0x1c8>)
 80105b6:	f000 fdab 	bl	8011110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80105ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80105be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105c0:	2302      	movs	r3, #2
 80105c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105c4:	2300      	movs	r3, #0
 80105c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105c8:	2303      	movs	r3, #3
 80105ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80105cc:	2305      	movs	r3, #5
 80105ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80105d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80105d4:	4619      	mov	r1, r3
 80105d6:	482d      	ldr	r0, [pc, #180]	@ (801068c <HAL_SPI_MspInit+0x1cc>)
 80105d8:	f000 fd9a 	bl	8011110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80105dc:	2200      	movs	r2, #0
 80105de:	2105      	movs	r1, #5
 80105e0:	2024      	movs	r0, #36	@ 0x24
 80105e2:	f000 fccb 	bl	8010f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80105e6:	2024      	movs	r0, #36	@ 0x24
 80105e8:	f000 fce4 	bl	8010fb4 <HAL_NVIC_EnableIRQ>
}
 80105ec:	e040      	b.n	8010670 <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI3)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a27      	ldr	r2, [pc, #156]	@ (8010690 <HAL_SPI_MspInit+0x1d0>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d13b      	bne.n	8010670 <HAL_SPI_MspInit+0x1b0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80105f8:	2300      	movs	r3, #0
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	4b1f      	ldr	r3, [pc, #124]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 80105fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010600:	4a1e      	ldr	r2, [pc, #120]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010606:	6413      	str	r3, [r2, #64]	@ 0x40
 8010608:	4b1c      	ldr	r3, [pc, #112]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 801060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801060c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010614:	2300      	movs	r3, #0
 8010616:	60bb      	str	r3, [r7, #8]
 8010618:	4b18      	ldr	r3, [pc, #96]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 801061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801061c:	4a17      	ldr	r2, [pc, #92]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 801061e:	f043 0302 	orr.w	r3, r3, #2
 8010622:	6313      	str	r3, [r2, #48]	@ 0x30
 8010624:	4b15      	ldr	r3, [pc, #84]	@ (801067c <HAL_SPI_MspInit+0x1bc>)
 8010626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010628:	f003 0302 	and.w	r3, r3, #2
 801062c:	60bb      	str	r3, [r7, #8]
 801062e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RF_MOSI_Pin;
 8010630:	2301      	movs	r3, #1
 8010632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010634:	2302      	movs	r3, #2
 8010636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010638:	2300      	movs	r3, #0
 801063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801063c:	2303      	movs	r3, #3
 801063e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8010640:	2307      	movs	r3, #7
 8010642:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8010644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010648:	4619      	mov	r1, r3
 801064a:	4810      	ldr	r0, [pc, #64]	@ (801068c <HAL_SPI_MspInit+0x1cc>)
 801064c:	f000 fd60 	bl	8011110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin;
 8010650:	2318      	movs	r3, #24
 8010652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010654:	2302      	movs	r3, #2
 8010656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010658:	2300      	movs	r3, #0
 801065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801065c:	2303      	movs	r3, #3
 801065e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010660:	2306      	movs	r3, #6
 8010662:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010668:	4619      	mov	r1, r3
 801066a:	4808      	ldr	r0, [pc, #32]	@ (801068c <HAL_SPI_MspInit+0x1cc>)
 801066c:	f000 fd50 	bl	8011110 <HAL_GPIO_Init>
}
 8010670:	bf00      	nop
 8010672:	3738      	adds	r7, #56	@ 0x38
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	40013000 	.word	0x40013000
 801067c:	40023800 	.word	0x40023800
 8010680:	40020000 	.word	0x40020000
 8010684:	40003800 	.word	0x40003800
 8010688:	40020800 	.word	0x40020800
 801068c:	40020400 	.word	0x40020400
 8010690:	40003c00 	.word	0x40003c00

08010694 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a1c      	ldr	r2, [pc, #112]	@ (8010714 <HAL_SPI_MspDeInit+0x80>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d10a      	bne.n	80106bc <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80106a6:	4b1c      	ldr	r3, [pc, #112]	@ (8010718 <HAL_SPI_MspDeInit+0x84>)
 80106a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106aa:	4a1b      	ldr	r2, [pc, #108]	@ (8010718 <HAL_SPI_MspDeInit+0x84>)
 80106ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106b0:	6453      	str	r3, [r2, #68]	@ 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80106b2:	21a0      	movs	r1, #160	@ 0xa0
 80106b4:	4819      	ldr	r0, [pc, #100]	@ (801071c <HAL_SPI_MspDeInit+0x88>)
 80106b6:	f000 febf 	bl	8011438 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80106ba:	e026      	b.n	801070a <HAL_SPI_MspDeInit+0x76>
  else if(hspi->Instance==SPI2)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a17      	ldr	r2, [pc, #92]	@ (8010720 <HAL_SPI_MspDeInit+0x8c>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d112      	bne.n	80106ec <HAL_SPI_MspDeInit+0x58>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80106c6:	4b14      	ldr	r3, [pc, #80]	@ (8010718 <HAL_SPI_MspDeInit+0x84>)
 80106c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106ca:	4a13      	ldr	r2, [pc, #76]	@ (8010718 <HAL_SPI_MspDeInit+0x84>)
 80106cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80106d0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 80106d2:	2102      	movs	r1, #2
 80106d4:	4813      	ldr	r0, [pc, #76]	@ (8010724 <HAL_SPI_MspDeInit+0x90>)
 80106d6:	f000 feaf 	bl	8011438 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80106da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80106de:	4812      	ldr	r0, [pc, #72]	@ (8010728 <HAL_SPI_MspDeInit+0x94>)
 80106e0:	f000 feaa 	bl	8011438 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80106e4:	2024      	movs	r0, #36	@ 0x24
 80106e6:	f000 fc73 	bl	8010fd0 <HAL_NVIC_DisableIRQ>
}
 80106ea:	e00e      	b.n	801070a <HAL_SPI_MspDeInit+0x76>
  else if(hspi->Instance==SPI3)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a0e      	ldr	r2, [pc, #56]	@ (801072c <HAL_SPI_MspDeInit+0x98>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d109      	bne.n	801070a <HAL_SPI_MspDeInit+0x76>
    __HAL_RCC_SPI3_CLK_DISABLE();
 80106f6:	4b08      	ldr	r3, [pc, #32]	@ (8010718 <HAL_SPI_MspDeInit+0x84>)
 80106f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106fa:	4a07      	ldr	r2, [pc, #28]	@ (8010718 <HAL_SPI_MspDeInit+0x84>)
 80106fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010700:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, RF_MOSI_Pin|RF_SCK_Pin|RF_MISO_Pin);
 8010702:	2119      	movs	r1, #25
 8010704:	4808      	ldr	r0, [pc, #32]	@ (8010728 <HAL_SPI_MspDeInit+0x94>)
 8010706:	f000 fe97 	bl	8011438 <HAL_GPIO_DeInit>
}
 801070a:	bf00      	nop
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	40013000 	.word	0x40013000
 8010718:	40023800 	.word	0x40023800
 801071c:	40020000 	.word	0x40020000
 8010720:	40003800 	.word	0x40003800
 8010724:	40020800 	.word	0x40020800
 8010728:	40020400 	.word	0x40020400
 801072c:	40003c00 	.word	0x40003c00

08010730 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b08e      	sub	sp, #56	@ 0x38
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801073c:	2200      	movs	r2, #0
 801073e:	601a      	str	r2, [r3, #0]
 8010740:	605a      	str	r2, [r3, #4]
 8010742:	609a      	str	r2, [r3, #8]
 8010744:	60da      	str	r2, [r3, #12]
 8010746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4a63      	ldr	r2, [pc, #396]	@ (80108dc <HAL_UART_MspInit+0x1ac>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d135      	bne.n	80107be <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010752:	2300      	movs	r3, #0
 8010754:	623b      	str	r3, [r7, #32]
 8010756:	4b62      	ldr	r3, [pc, #392]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801075a:	4a61      	ldr	r2, [pc, #388]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 801075c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010760:	6413      	str	r3, [r2, #64]	@ 0x40
 8010762:	4b5f      	ldr	r3, [pc, #380]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801076a:	623b      	str	r3, [r7, #32]
 801076c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801076e:	2300      	movs	r3, #0
 8010770:	61fb      	str	r3, [r7, #28]
 8010772:	4b5b      	ldr	r3, [pc, #364]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010776:	4a5a      	ldr	r2, [pc, #360]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010778:	f043 0304 	orr.w	r3, r3, #4
 801077c:	6313      	str	r3, [r2, #48]	@ 0x30
 801077e:	4b58      	ldr	r3, [pc, #352]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010782:	f003 0304 	and.w	r3, r3, #4
 8010786:	61fb      	str	r3, [r7, #28]
 8010788:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801078a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 801078e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010790:	2302      	movs	r3, #2
 8010792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010794:	2300      	movs	r3, #0
 8010796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010798:	2303      	movs	r3, #3
 801079a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 801079c:	2308      	movs	r3, #8
 801079e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80107a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107a4:	4619      	mov	r1, r3
 80107a6:	484f      	ldr	r0, [pc, #316]	@ (80108e4 <HAL_UART_MspInit+0x1b4>)
 80107a8:	f000 fcb2 	bl	8011110 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80107ac:	2200      	movs	r2, #0
 80107ae:	2100      	movs	r1, #0
 80107b0:	2034      	movs	r0, #52	@ 0x34
 80107b2:	f000 fbe3 	bl	8010f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80107b6:	2034      	movs	r0, #52	@ 0x34
 80107b8:	f000 fbfc 	bl	8010fb4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80107bc:	e089      	b.n	80108d2 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a49      	ldr	r2, [pc, #292]	@ (80108e8 <HAL_UART_MspInit+0x1b8>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d12c      	bne.n	8010822 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80107c8:	2300      	movs	r3, #0
 80107ca:	61bb      	str	r3, [r7, #24]
 80107cc:	4b44      	ldr	r3, [pc, #272]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 80107ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107d0:	4a43      	ldr	r2, [pc, #268]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 80107d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80107d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80107d8:	4b41      	ldr	r3, [pc, #260]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 80107da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107e0:	61bb      	str	r3, [r7, #24]
 80107e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80107e4:	2300      	movs	r3, #0
 80107e6:	617b      	str	r3, [r7, #20]
 80107e8:	4b3d      	ldr	r3, [pc, #244]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 80107ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ec:	4a3c      	ldr	r2, [pc, #240]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 80107ee:	f043 0301 	orr.w	r3, r3, #1
 80107f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80107f4:	4b3a      	ldr	r3, [pc, #232]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 80107f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107f8:	f003 0301 	and.w	r3, r3, #1
 80107fc:	617b      	str	r3, [r7, #20]
 80107fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8010800:	230c      	movs	r3, #12
 8010802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010804:	2302      	movs	r3, #2
 8010806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010808:	2300      	movs	r3, #0
 801080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801080c:	2303      	movs	r3, #3
 801080e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010810:	2307      	movs	r3, #7
 8010812:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010818:	4619      	mov	r1, r3
 801081a:	4834      	ldr	r0, [pc, #208]	@ (80108ec <HAL_UART_MspInit+0x1bc>)
 801081c:	f000 fc78 	bl	8011110 <HAL_GPIO_Init>
}
 8010820:	e057      	b.n	80108d2 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a32      	ldr	r2, [pc, #200]	@ (80108f0 <HAL_UART_MspInit+0x1c0>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d152      	bne.n	80108d2 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 801082c:	2300      	movs	r3, #0
 801082e:	613b      	str	r3, [r7, #16]
 8010830:	4b2b      	ldr	r3, [pc, #172]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010834:	4a2a      	ldr	r2, [pc, #168]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010836:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801083a:	6413      	str	r3, [r2, #64]	@ 0x40
 801083c:	4b28      	ldr	r3, [pc, #160]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 801083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010844:	613b      	str	r3, [r7, #16]
 8010846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010848:	2300      	movs	r3, #0
 801084a:	60fb      	str	r3, [r7, #12]
 801084c:	4b24      	ldr	r3, [pc, #144]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 801084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010850:	4a23      	ldr	r2, [pc, #140]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010852:	f043 0304 	orr.w	r3, r3, #4
 8010856:	6313      	str	r3, [r2, #48]	@ 0x30
 8010858:	4b21      	ldr	r3, [pc, #132]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 801085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801085c:	f003 0304 	and.w	r3, r3, #4
 8010860:	60fb      	str	r3, [r7, #12]
 8010862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010864:	2300      	movs	r3, #0
 8010866:	60bb      	str	r3, [r7, #8]
 8010868:	4b1d      	ldr	r3, [pc, #116]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 801086a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801086c:	4a1c      	ldr	r2, [pc, #112]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 801086e:	f043 0302 	orr.w	r3, r3, #2
 8010872:	6313      	str	r3, [r2, #48]	@ 0x30
 8010874:	4b1a      	ldr	r3, [pc, #104]	@ (80108e0 <HAL_UART_MspInit+0x1b0>)
 8010876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010878:	f003 0302 	and.w	r3, r3, #2
 801087c:	60bb      	str	r3, [r7, #8]
 801087e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8010880:	2320      	movs	r3, #32
 8010882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010884:	2302      	movs	r3, #2
 8010886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010888:	2300      	movs	r3, #0
 801088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801088c:	2303      	movs	r3, #3
 801088e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010890:	2307      	movs	r3, #7
 8010892:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010898:	4619      	mov	r1, r3
 801089a:	4812      	ldr	r0, [pc, #72]	@ (80108e4 <HAL_UART_MspInit+0x1b4>)
 801089c:	f000 fc38 	bl	8011110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80108a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108a6:	2302      	movs	r3, #2
 80108a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108ae:	2303      	movs	r3, #3
 80108b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80108b2:	2307      	movs	r3, #7
 80108b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80108b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108ba:	4619      	mov	r1, r3
 80108bc:	480d      	ldr	r0, [pc, #52]	@ (80108f4 <HAL_UART_MspInit+0x1c4>)
 80108be:	f000 fc27 	bl	8011110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80108c2:	2200      	movs	r2, #0
 80108c4:	2106      	movs	r1, #6
 80108c6:	2027      	movs	r0, #39	@ 0x27
 80108c8:	f000 fb58 	bl	8010f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80108cc:	2027      	movs	r0, #39	@ 0x27
 80108ce:	f000 fb71 	bl	8010fb4 <HAL_NVIC_EnableIRQ>
}
 80108d2:	bf00      	nop
 80108d4:	3738      	adds	r7, #56	@ 0x38
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	40004c00 	.word	0x40004c00
 80108e0:	40023800 	.word	0x40023800
 80108e4:	40020800 	.word	0x40020800
 80108e8:	40004400 	.word	0x40004400
 80108ec:	40020000 	.word	0x40020000
 80108f0:	40004800 	.word	0x40004800
 80108f4:	40020400 	.word	0x40020400

080108f8 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a1e      	ldr	r2, [pc, #120]	@ (8010980 <HAL_UART_MspDeInit+0x88>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d10e      	bne.n	8010928 <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN UART4_MspDeInit 0 */

    /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 801090a:	4b1e      	ldr	r3, [pc, #120]	@ (8010984 <HAL_UART_MspDeInit+0x8c>)
 801090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801090e:	4a1d      	ldr	r2, [pc, #116]	@ (8010984 <HAL_UART_MspDeInit+0x8c>)
 8010910:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8010914:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8010916:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801091a:	481b      	ldr	r0, [pc, #108]	@ (8010988 <HAL_UART_MspDeInit+0x90>)
 801091c:	f000 fd8c 	bl	8011438 <HAL_GPIO_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8010920:	2034      	movs	r0, #52	@ 0x34
 8010922:	f000 fb55 	bl	8010fd0 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8010926:	e026      	b.n	8010976 <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART2)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a17      	ldr	r2, [pc, #92]	@ (801098c <HAL_UART_MspDeInit+0x94>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d10a      	bne.n	8010948 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART2_CLK_DISABLE();
 8010932:	4b14      	ldr	r3, [pc, #80]	@ (8010984 <HAL_UART_MspDeInit+0x8c>)
 8010934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010936:	4a13      	ldr	r2, [pc, #76]	@ (8010984 <HAL_UART_MspDeInit+0x8c>)
 8010938:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801093c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 801093e:	210c      	movs	r1, #12
 8010940:	4813      	ldr	r0, [pc, #76]	@ (8010990 <HAL_UART_MspDeInit+0x98>)
 8010942:	f000 fd79 	bl	8011438 <HAL_GPIO_DeInit>
}
 8010946:	e016      	b.n	8010976 <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART3)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a11      	ldr	r2, [pc, #68]	@ (8010994 <HAL_UART_MspDeInit+0x9c>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d111      	bne.n	8010976 <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8010952:	4b0c      	ldr	r3, [pc, #48]	@ (8010984 <HAL_UART_MspDeInit+0x8c>)
 8010954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010956:	4a0b      	ldr	r2, [pc, #44]	@ (8010984 <HAL_UART_MspDeInit+0x8c>)
 8010958:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801095c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 801095e:	2120      	movs	r1, #32
 8010960:	4809      	ldr	r0, [pc, #36]	@ (8010988 <HAL_UART_MspDeInit+0x90>)
 8010962:	f000 fd69 	bl	8011438 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8010966:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801096a:	480b      	ldr	r0, [pc, #44]	@ (8010998 <HAL_UART_MspDeInit+0xa0>)
 801096c:	f000 fd64 	bl	8011438 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8010970:	2027      	movs	r0, #39	@ 0x27
 8010972:	f000 fb2d 	bl	8010fd0 <HAL_NVIC_DisableIRQ>
}
 8010976:	bf00      	nop
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	40004c00 	.word	0x40004c00
 8010984:	40023800 	.word	0x40023800
 8010988:	40020800 	.word	0x40020800
 801098c:	40004400 	.word	0x40004400
 8010990:	40020000 	.word	0x40020000
 8010994:	40004800 	.word	0x40004800
 8010998:	40020400 	.word	0x40020400

0801099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b08c      	sub	sp, #48	@ 0x30
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80109a4:	2300      	movs	r3, #0
 80109a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80109a8:	2300      	movs	r3, #0
 80109aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80109ac:	2300      	movs	r3, #0
 80109ae:	60bb      	str	r3, [r7, #8]
 80109b0:	4b2f      	ldr	r3, [pc, #188]	@ (8010a70 <HAL_InitTick+0xd4>)
 80109b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109b4:	4a2e      	ldr	r2, [pc, #184]	@ (8010a70 <HAL_InitTick+0xd4>)
 80109b6:	f043 0301 	orr.w	r3, r3, #1
 80109ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80109bc:	4b2c      	ldr	r3, [pc, #176]	@ (8010a70 <HAL_InitTick+0xd4>)
 80109be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109c0:	f003 0301 	and.w	r3, r3, #1
 80109c4:	60bb      	str	r3, [r7, #8]
 80109c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80109c8:	f107 020c 	add.w	r2, r7, #12
 80109cc:	f107 0310 	add.w	r3, r7, #16
 80109d0:	4611      	mov	r1, r2
 80109d2:	4618      	mov	r0, r3
 80109d4:	f001 f812 	bl	80119fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80109d8:	f000 fffc 	bl	80119d4 <HAL_RCC_GetPCLK2Freq>
 80109dc:	4603      	mov	r3, r0
 80109de:	005b      	lsls	r3, r3, #1
 80109e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80109e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e4:	4a23      	ldr	r2, [pc, #140]	@ (8010a74 <HAL_InitTick+0xd8>)
 80109e6:	fba2 2303 	umull	r2, r3, r2, r3
 80109ea:	0c9b      	lsrs	r3, r3, #18
 80109ec:	3b01      	subs	r3, #1
 80109ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80109f0:	4b21      	ldr	r3, [pc, #132]	@ (8010a78 <HAL_InitTick+0xdc>)
 80109f2:	4a22      	ldr	r2, [pc, #136]	@ (8010a7c <HAL_InitTick+0xe0>)
 80109f4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80109f6:	4b20      	ldr	r3, [pc, #128]	@ (8010a78 <HAL_InitTick+0xdc>)
 80109f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80109fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80109fe:	4a1e      	ldr	r2, [pc, #120]	@ (8010a78 <HAL_InitTick+0xdc>)
 8010a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010a04:	4b1c      	ldr	r3, [pc, #112]	@ (8010a78 <HAL_InitTick+0xdc>)
 8010a06:	2200      	movs	r2, #0
 8010a08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8010a78 <HAL_InitTick+0xdc>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010a10:	4b19      	ldr	r3, [pc, #100]	@ (8010a78 <HAL_InitTick+0xdc>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8010a16:	4818      	ldr	r0, [pc, #96]	@ (8010a78 <HAL_InitTick+0xdc>)
 8010a18:	f002 fe6f 	bl	80136fa <HAL_TIM_Base_Init>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8010a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d11b      	bne.n	8010a62 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8010a2a:	4813      	ldr	r0, [pc, #76]	@ (8010a78 <HAL_InitTick+0xdc>)
 8010a2c:	f002 febe 	bl	80137ac <HAL_TIM_Base_Start_IT>
 8010a30:	4603      	mov	r3, r0
 8010a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8010a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d111      	bne.n	8010a62 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8010a3e:	2019      	movs	r0, #25
 8010a40:	f000 fab8 	bl	8010fb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b0f      	cmp	r3, #15
 8010a48:	d808      	bhi.n	8010a5c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	6879      	ldr	r1, [r7, #4]
 8010a4e:	2019      	movs	r0, #25
 8010a50:	f000 fa94 	bl	8010f7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8010a54:	4a0a      	ldr	r2, [pc, #40]	@ (8010a80 <HAL_InitTick+0xe4>)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6013      	str	r3, [r2, #0]
 8010a5a:	e002      	b.n	8010a62 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8010a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3730      	adds	r7, #48	@ 0x30
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	40023800 	.word	0x40023800
 8010a74:	431bde83 	.word	0x431bde83
 8010a78:	20001508 	.word	0x20001508
 8010a7c:	40010000 	.word	0x40010000
 8010a80:	20000090 	.word	0x20000090

08010a84 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8010a84:	b480      	push	{r7}
 8010a86:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8010a88:	4b06      	ldr	r3, [pc, #24]	@ (8010aa4 <HAL_SuspendTick+0x20>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	68da      	ldr	r2, [r3, #12]
 8010a8e:	4b05      	ldr	r3, [pc, #20]	@ (8010aa4 <HAL_SuspendTick+0x20>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f022 0201 	bic.w	r2, r2, #1
 8010a96:	60da      	str	r2, [r3, #12]
}
 8010a98:	bf00      	nop
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop
 8010aa4:	20001508 	.word	0x20001508

08010aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010aac:	bf00      	nop
 8010aae:	e7fd      	b.n	8010aac <NMI_Handler+0x4>

08010ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010ab4:	bf00      	nop
 8010ab6:	e7fd      	b.n	8010ab4 <HardFault_Handler+0x4>

08010ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010abc:	bf00      	nop
 8010abe:	e7fd      	b.n	8010abc <MemManage_Handler+0x4>

08010ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010ac4:	bf00      	nop
 8010ac6:	e7fd      	b.n	8010ac4 <BusFault_Handler+0x4>

08010ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010acc:	bf00      	nop
 8010ace:	e7fd      	b.n	8010acc <UsageFault_Handler+0x4>

08010ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010ad4:	bf00      	nop
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8010ae2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010ae6:	f000 fde7 	bl	80116b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8010aea:	bf00      	nop
 8010aec:	bd80      	pop	{r7, pc}
	...

08010af0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8010af4:	4802      	ldr	r0, [pc, #8]	@ (8010b00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010af6:	f002 fec9 	bl	801388c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010afa:	bf00      	nop
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	20001508 	.word	0x20001508

08010b04 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010b08:	4802      	ldr	r0, [pc, #8]	@ (8010b14 <SPI2_IRQHandler+0x10>)
 8010b0a:	f002 f9cf 	bl	8012eac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8010b0e:	bf00      	nop
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	20001380 	.word	0x20001380

08010b18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8010b1c:	4802      	ldr	r0, [pc, #8]	@ (8010b28 <USART3_IRQHandler+0x10>)
 8010b1e:	f003 f9ef 	bl	8013f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8010b22:	bf00      	nop
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	200014c0 	.word	0x200014c0

08010b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8010b30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8010b34:	f000 fdc0 	bl	80116b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8010b38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8010b3c:	f000 fdbc 	bl	80116b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010b40:	bf00      	nop
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8010b48:	4802      	ldr	r0, [pc, #8]	@ (8010b54 <UART4_IRQHandler+0x10>)
 8010b4a:	f003 f9d9 	bl	8013f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8010b4e:	bf00      	nop
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	20001430 	.word	0x20001430

08010b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	af00      	add	r7, sp, #0
  return 1;
 8010b5c:	2301      	movs	r3, #1
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <_kill>:

int _kill(int pid, int sig)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010b72:	f009 f87b 	bl	8019c6c <__errno>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2216      	movs	r2, #22
 8010b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8010b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <_exit>:

void _exit (int status)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010b90:	f04f 31ff 	mov.w	r1, #4294967295
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ffe7 	bl	8010b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010b9a:	bf00      	nop
 8010b9c:	e7fd      	b.n	8010b9a <_exit+0x12>

08010b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b086      	sub	sp, #24
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	60f8      	str	r0, [r7, #12]
 8010ba6:	60b9      	str	r1, [r7, #8]
 8010ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010baa:	2300      	movs	r3, #0
 8010bac:	617b      	str	r3, [r7, #20]
 8010bae:	e00a      	b.n	8010bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010bb0:	f3af 8000 	nop.w
 8010bb4:	4601      	mov	r1, r0
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	60ba      	str	r2, [r7, #8]
 8010bbc:	b2ca      	uxtb	r2, r1
 8010bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	617b      	str	r3, [r7, #20]
 8010bc6:	697a      	ldr	r2, [r7, #20]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	dbf0      	blt.n	8010bb0 <_read+0x12>
  }

  return len;
 8010bce:	687b      	ldr	r3, [r7, #4]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3718      	adds	r7, #24
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010be4:	2300      	movs	r3, #0
 8010be6:	617b      	str	r3, [r7, #20]
 8010be8:	e009      	b.n	8010bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	60ba      	str	r2, [r7, #8]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	617b      	str	r3, [r7, #20]
 8010bfe:	697a      	ldr	r2, [r7, #20]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	dbf1      	blt.n	8010bea <_write+0x12>
  }
  return len;
 8010c06:	687b      	ldr	r3, [r7, #4]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_close>:

int _close(int file)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010c38:	605a      	str	r2, [r3, #4]
  return 0;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <_isatty>:

int _isatty(int file)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010c50:	2301      	movs	r3, #1
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr

08010c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010c5e:	b480      	push	{r7}
 8010c60:	b085      	sub	sp, #20
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	60f8      	str	r0, [r7, #12]
 8010c66:	60b9      	str	r1, [r7, #8]
 8010c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010c7c:	4b07      	ldr	r3, [pc, #28]	@ (8010c9c <SystemInit+0x24>)
 8010c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c82:	4a06      	ldr	r2, [pc, #24]	@ (8010c9c <SystemInit+0x24>)
 8010c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010c8c:	4b03      	ldr	r3, [pc, #12]	@ (8010c9c <SystemInit+0x24>)
 8010c8e:	4a04      	ldr	r2, [pc, #16]	@ (8010ca0 <SystemInit+0x28>)
 8010c90:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010c92:	bf00      	nop
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr
 8010c9c:	e000ed00 	.word	0xe000ed00
 8010ca0:	08008000 	.word	0x08008000

08010ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8010cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8010ca8:	f7ff ffe6 	bl	8010c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010cac:	480c      	ldr	r0, [pc, #48]	@ (8010ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010cae:	490d      	ldr	r1, [pc, #52]	@ (8010ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8010ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010cb4:	e002      	b.n	8010cbc <LoopCopyDataInit>

08010cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010cba:	3304      	adds	r3, #4

08010cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010cc0:	d3f9      	bcc.n	8010cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8010cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8010cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8010cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010cc8:	e001      	b.n	8010cce <LoopFillZerobss>

08010cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010ccc:	3204      	adds	r2, #4

08010cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010cd0:	d3fb      	bcc.n	8010cca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8010cd2:	f008 ffd1 	bl	8019c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010cd6:	f7ff f931 	bl	800ff3c <main>
  bx  lr    
 8010cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010ce4:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8010ce8:	0801f6a0 	.word	0x0801f6a0
  ldr r2, =_sbss
 8010cec:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8010cf0:	2001444c 	.word	0x2001444c

08010cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010cf4:	e7fe      	b.n	8010cf4 <ADC_IRQHandler>
	...

08010cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8010d38 <HAL_Init+0x40>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a0d      	ldr	r2, [pc, #52]	@ (8010d38 <HAL_Init+0x40>)
 8010d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010d08:	4b0b      	ldr	r3, [pc, #44]	@ (8010d38 <HAL_Init+0x40>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8010d38 <HAL_Init+0x40>)
 8010d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010d14:	4b08      	ldr	r3, [pc, #32]	@ (8010d38 <HAL_Init+0x40>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4a07      	ldr	r2, [pc, #28]	@ (8010d38 <HAL_Init+0x40>)
 8010d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010d20:	2003      	movs	r0, #3
 8010d22:	f000 f920 	bl	8010f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010d26:	200f      	movs	r0, #15
 8010d28:	f7ff fe38 	bl	801099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010d2c:	f7ff fba0 	bl	8010470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	40023c00 	.word	0x40023c00

08010d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010d40:	4b06      	ldr	r3, [pc, #24]	@ (8010d5c <HAL_IncTick+0x20>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	461a      	mov	r2, r3
 8010d46:	4b06      	ldr	r3, [pc, #24]	@ (8010d60 <HAL_IncTick+0x24>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4413      	add	r3, r2
 8010d4c:	4a04      	ldr	r2, [pc, #16]	@ (8010d60 <HAL_IncTick+0x24>)
 8010d4e:	6013      	str	r3, [r2, #0]
}
 8010d50:	bf00      	nop
 8010d52:	46bd      	mov	sp, r7
 8010d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop
 8010d5c:	20000094 	.word	0x20000094
 8010d60:	20001550 	.word	0x20001550

08010d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d64:	b480      	push	{r7}
 8010d66:	af00      	add	r7, sp, #0
  return uwTick;
 8010d68:	4b03      	ldr	r3, [pc, #12]	@ (8010d78 <HAL_GetTick+0x14>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	20001550 	.word	0x20001550

08010d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010d84:	f7ff ffee 	bl	8010d64 <HAL_GetTick>
 8010d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d94:	d005      	beq.n	8010da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010d96:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc0 <HAL_Delay+0x44>)
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	4413      	add	r3, r2
 8010da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010da2:	bf00      	nop
 8010da4:	f7ff ffde 	bl	8010d64 <HAL_GetTick>
 8010da8:	4602      	mov	r2, r0
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d8f7      	bhi.n	8010da4 <HAL_Delay+0x28>
  {
  }
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20000094 	.word	0x20000094

08010dc4 <__NVIC_SetPriorityGrouping>:
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f003 0307 	and.w	r3, r3, #7
 8010dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8010e08 <__NVIC_SetPriorityGrouping+0x44>)
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010de0:	4013      	ands	r3, r2
 8010de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010df6:	4a04      	ldr	r2, [pc, #16]	@ (8010e08 <__NVIC_SetPriorityGrouping+0x44>)
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	60d3      	str	r3, [r2, #12]
}
 8010dfc:	bf00      	nop
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	e000ed00 	.word	0xe000ed00

08010e0c <__NVIC_GetPriorityGrouping>:
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010e10:	4b04      	ldr	r3, [pc, #16]	@ (8010e24 <__NVIC_GetPriorityGrouping+0x18>)
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	0a1b      	lsrs	r3, r3, #8
 8010e16:	f003 0307 	and.w	r3, r3, #7
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	e000ed00 	.word	0xe000ed00

08010e28 <__NVIC_EnableIRQ>:
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	db0b      	blt.n	8010e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	f003 021f 	and.w	r2, r3, #31
 8010e40:	4907      	ldr	r1, [pc, #28]	@ (8010e60 <__NVIC_EnableIRQ+0x38>)
 8010e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e46:	095b      	lsrs	r3, r3, #5
 8010e48:	2001      	movs	r0, #1
 8010e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8010e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e52:	bf00      	nop
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	e000e100 	.word	0xe000e100

08010e64 <__NVIC_DisableIRQ>:
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	db12      	blt.n	8010e9c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	f003 021f 	and.w	r2, r3, #31
 8010e7c:	490a      	ldr	r1, [pc, #40]	@ (8010ea8 <__NVIC_DisableIRQ+0x44>)
 8010e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e82:	095b      	lsrs	r3, r3, #5
 8010e84:	2001      	movs	r0, #1
 8010e86:	fa00 f202 	lsl.w	r2, r0, r2
 8010e8a:	3320      	adds	r3, #32
 8010e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010e90:	f3bf 8f4f 	dsb	sy
}
 8010e94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010e96:	f3bf 8f6f 	isb	sy
}
 8010e9a:	bf00      	nop
}
 8010e9c:	bf00      	nop
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr
 8010ea8:	e000e100 	.word	0xe000e100

08010eac <__NVIC_SetPriority>:
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	6039      	str	r1, [r7, #0]
 8010eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	db0a      	blt.n	8010ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	490c      	ldr	r1, [pc, #48]	@ (8010ef8 <__NVIC_SetPriority+0x4c>)
 8010ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eca:	0112      	lsls	r2, r2, #4
 8010ecc:	b2d2      	uxtb	r2, r2
 8010ece:	440b      	add	r3, r1
 8010ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010ed4:	e00a      	b.n	8010eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	4908      	ldr	r1, [pc, #32]	@ (8010efc <__NVIC_SetPriority+0x50>)
 8010edc:	79fb      	ldrb	r3, [r7, #7]
 8010ede:	f003 030f 	and.w	r3, r3, #15
 8010ee2:	3b04      	subs	r3, #4
 8010ee4:	0112      	lsls	r2, r2, #4
 8010ee6:	b2d2      	uxtb	r2, r2
 8010ee8:	440b      	add	r3, r1
 8010eea:	761a      	strb	r2, [r3, #24]
}
 8010eec:	bf00      	nop
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr
 8010ef8:	e000e100 	.word	0xe000e100
 8010efc:	e000ed00 	.word	0xe000ed00

08010f00 <NVIC_EncodePriority>:
{
 8010f00:	b480      	push	{r7}
 8010f02:	b089      	sub	sp, #36	@ 0x24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f003 0307 	and.w	r3, r3, #7
 8010f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	f1c3 0307 	rsb	r3, r3, #7
 8010f1a:	2b04      	cmp	r3, #4
 8010f1c:	bf28      	it	cs
 8010f1e:	2304      	movcs	r3, #4
 8010f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	3304      	adds	r3, #4
 8010f26:	2b06      	cmp	r3, #6
 8010f28:	d902      	bls.n	8010f30 <NVIC_EncodePriority+0x30>
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	3b03      	subs	r3, #3
 8010f2e:	e000      	b.n	8010f32 <NVIC_EncodePriority+0x32>
 8010f30:	2300      	movs	r3, #0
 8010f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f34:	f04f 32ff 	mov.w	r2, #4294967295
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f3e:	43da      	mvns	r2, r3
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	401a      	ands	r2, r3
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010f48:	f04f 31ff 	mov.w	r1, #4294967295
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f52:	43d9      	mvns	r1, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f58:	4313      	orrs	r3, r2
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3724      	adds	r7, #36	@ 0x24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr

08010f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b082      	sub	sp, #8
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f7ff ff28 	bl	8010dc4 <__NVIC_SetPriorityGrouping>
}
 8010f74:	bf00      	nop
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b086      	sub	sp, #24
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	4603      	mov	r3, r0
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
 8010f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010f8e:	f7ff ff3d 	bl	8010e0c <__NVIC_GetPriorityGrouping>
 8010f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	68b9      	ldr	r1, [r7, #8]
 8010f98:	6978      	ldr	r0, [r7, #20]
 8010f9a:	f7ff ffb1 	bl	8010f00 <NVIC_EncodePriority>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff ff80 	bl	8010eac <__NVIC_SetPriority>
}
 8010fac:	bf00      	nop
 8010fae:	3718      	adds	r7, #24
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	4603      	mov	r3, r0
 8010fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7ff ff30 	bl	8010e28 <__NVIC_EnableIRQ>
}
 8010fc8:	bf00      	nop
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7ff ff40 	bl	8010e64 <__NVIC_DisableIRQ>
}
 8010fe4:	bf00      	nop
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010ffa:	f7ff feb3 	bl	8010d64 <HAL_GetTick>
 8010ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011006:	b2db      	uxtb	r3, r3
 8011008:	2b02      	cmp	r3, #2
 801100a:	d008      	beq.n	801101e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2280      	movs	r2, #128	@ 0x80
 8011010:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2200      	movs	r2, #0
 8011016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 801101a:	2301      	movs	r3, #1
 801101c:	e052      	b.n	80110c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f022 0216 	bic.w	r2, r2, #22
 801102c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	695a      	ldr	r2, [r3, #20]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801103c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011042:	2b00      	cmp	r3, #0
 8011044:	d103      	bne.n	801104e <HAL_DMA_Abort+0x62>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801104a:	2b00      	cmp	r3, #0
 801104c:	d007      	beq.n	801105e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f022 0208 	bic.w	r2, r2, #8
 801105c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f022 0201 	bic.w	r2, r2, #1
 801106c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801106e:	e013      	b.n	8011098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011070:	f7ff fe78 	bl	8010d64 <HAL_GetTick>
 8011074:	4602      	mov	r2, r0
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	1ad3      	subs	r3, r2, r3
 801107a:	2b05      	cmp	r3, #5
 801107c:	d90c      	bls.n	8011098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2220      	movs	r2, #32
 8011082:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2203      	movs	r2, #3
 8011088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8011094:	2303      	movs	r3, #3
 8011096:	e015      	b.n	80110c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f003 0301 	and.w	r3, r3, #1
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d1e4      	bne.n	8011070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110aa:	223f      	movs	r2, #63	@ 0x3f
 80110ac:	409a      	lsls	r2, r3
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80110c2:	2300      	movs	r3, #0
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d004      	beq.n	80110ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2280      	movs	r2, #128	@ 0x80
 80110e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80110e6:	2301      	movs	r3, #1
 80110e8:	e00c      	b.n	8011104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2205      	movs	r2, #5
 80110ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f022 0201 	bic.w	r2, r2, #1
 8011100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011102:	2300      	movs	r3, #0
}
 8011104:	4618      	mov	r0, r3
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011110:	b480      	push	{r7}
 8011112:	b089      	sub	sp, #36	@ 0x24
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801111a:	2300      	movs	r3, #0
 801111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801111e:	2300      	movs	r3, #0
 8011120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011122:	2300      	movs	r3, #0
 8011124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011126:	2300      	movs	r3, #0
 8011128:	61fb      	str	r3, [r7, #28]
 801112a:	e165      	b.n	80113f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801112c:	2201      	movs	r2, #1
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	fa02 f303 	lsl.w	r3, r2, r3
 8011134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	697a      	ldr	r2, [r7, #20]
 801113c:	4013      	ands	r3, r2
 801113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011140:	693a      	ldr	r2, [r7, #16]
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	429a      	cmp	r2, r3
 8011146:	f040 8154 	bne.w	80113f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	f003 0303 	and.w	r3, r3, #3
 8011152:	2b01      	cmp	r3, #1
 8011154:	d005      	beq.n	8011162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801115e:	2b02      	cmp	r3, #2
 8011160:	d130      	bne.n	80111c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	2203      	movs	r2, #3
 801116e:	fa02 f303 	lsl.w	r3, r2, r3
 8011172:	43db      	mvns	r3, r3
 8011174:	69ba      	ldr	r2, [r7, #24]
 8011176:	4013      	ands	r3, r2
 8011178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	68da      	ldr	r2, [r3, #12]
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	005b      	lsls	r3, r3, #1
 8011182:	fa02 f303 	lsl.w	r3, r2, r3
 8011186:	69ba      	ldr	r2, [r7, #24]
 8011188:	4313      	orrs	r3, r2
 801118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	69ba      	ldr	r2, [r7, #24]
 8011190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011198:	2201      	movs	r2, #1
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	fa02 f303 	lsl.w	r3, r2, r3
 80111a0:	43db      	mvns	r3, r3
 80111a2:	69ba      	ldr	r2, [r7, #24]
 80111a4:	4013      	ands	r3, r2
 80111a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	091b      	lsrs	r3, r3, #4
 80111ae:	f003 0201 	and.w	r2, r3, #1
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	fa02 f303 	lsl.w	r3, r2, r3
 80111b8:	69ba      	ldr	r2, [r7, #24]
 80111ba:	4313      	orrs	r3, r2
 80111bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	69ba      	ldr	r2, [r7, #24]
 80111c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	f003 0303 	and.w	r3, r3, #3
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	d017      	beq.n	8011200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	005b      	lsls	r3, r3, #1
 80111da:	2203      	movs	r2, #3
 80111dc:	fa02 f303 	lsl.w	r3, r2, r3
 80111e0:	43db      	mvns	r3, r3
 80111e2:	69ba      	ldr	r2, [r7, #24]
 80111e4:	4013      	ands	r3, r2
 80111e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	689a      	ldr	r2, [r3, #8]
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	005b      	lsls	r3, r3, #1
 80111f0:	fa02 f303 	lsl.w	r3, r2, r3
 80111f4:	69ba      	ldr	r2, [r7, #24]
 80111f6:	4313      	orrs	r3, r2
 80111f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	69ba      	ldr	r2, [r7, #24]
 80111fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	f003 0303 	and.w	r3, r3, #3
 8011208:	2b02      	cmp	r3, #2
 801120a:	d123      	bne.n	8011254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801120c:	69fb      	ldr	r3, [r7, #28]
 801120e:	08da      	lsrs	r2, r3, #3
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	3208      	adds	r2, #8
 8011214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	f003 0307 	and.w	r3, r3, #7
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	220f      	movs	r2, #15
 8011224:	fa02 f303 	lsl.w	r3, r2, r3
 8011228:	43db      	mvns	r3, r3
 801122a:	69ba      	ldr	r2, [r7, #24]
 801122c:	4013      	ands	r3, r2
 801122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	691a      	ldr	r2, [r3, #16]
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	f003 0307 	and.w	r3, r3, #7
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	fa02 f303 	lsl.w	r3, r2, r3
 8011240:	69ba      	ldr	r2, [r7, #24]
 8011242:	4313      	orrs	r3, r2
 8011244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	08da      	lsrs	r2, r3, #3
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	3208      	adds	r2, #8
 801124e:	69b9      	ldr	r1, [r7, #24]
 8011250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	2203      	movs	r2, #3
 8011260:	fa02 f303 	lsl.w	r3, r2, r3
 8011264:	43db      	mvns	r3, r3
 8011266:	69ba      	ldr	r2, [r7, #24]
 8011268:	4013      	ands	r3, r2
 801126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f003 0203 	and.w	r2, r3, #3
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	005b      	lsls	r3, r3, #1
 8011278:	fa02 f303 	lsl.w	r3, r2, r3
 801127c:	69ba      	ldr	r2, [r7, #24]
 801127e:	4313      	orrs	r3, r2
 8011280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	69ba      	ldr	r2, [r7, #24]
 8011286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011290:	2b00      	cmp	r3, #0
 8011292:	f000 80ae 	beq.w	80113f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011296:	2300      	movs	r3, #0
 8011298:	60fb      	str	r3, [r7, #12]
 801129a:	4b5d      	ldr	r3, [pc, #372]	@ (8011410 <HAL_GPIO_Init+0x300>)
 801129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801129e:	4a5c      	ldr	r2, [pc, #368]	@ (8011410 <HAL_GPIO_Init+0x300>)
 80112a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80112a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80112a6:	4b5a      	ldr	r3, [pc, #360]	@ (8011410 <HAL_GPIO_Init+0x300>)
 80112a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80112ae:	60fb      	str	r3, [r7, #12]
 80112b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80112b2:	4a58      	ldr	r2, [pc, #352]	@ (8011414 <HAL_GPIO_Init+0x304>)
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	089b      	lsrs	r3, r3, #2
 80112b8:	3302      	adds	r3, #2
 80112ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	f003 0303 	and.w	r3, r3, #3
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	220f      	movs	r2, #15
 80112ca:	fa02 f303 	lsl.w	r3, r2, r3
 80112ce:	43db      	mvns	r3, r3
 80112d0:	69ba      	ldr	r2, [r7, #24]
 80112d2:	4013      	ands	r3, r2
 80112d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a4f      	ldr	r2, [pc, #316]	@ (8011418 <HAL_GPIO_Init+0x308>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d025      	beq.n	801132a <HAL_GPIO_Init+0x21a>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a4e      	ldr	r2, [pc, #312]	@ (801141c <HAL_GPIO_Init+0x30c>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d01f      	beq.n	8011326 <HAL_GPIO_Init+0x216>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a4d      	ldr	r2, [pc, #308]	@ (8011420 <HAL_GPIO_Init+0x310>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d019      	beq.n	8011322 <HAL_GPIO_Init+0x212>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a4c      	ldr	r2, [pc, #304]	@ (8011424 <HAL_GPIO_Init+0x314>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d013      	beq.n	801131e <HAL_GPIO_Init+0x20e>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4a4b      	ldr	r2, [pc, #300]	@ (8011428 <HAL_GPIO_Init+0x318>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d00d      	beq.n	801131a <HAL_GPIO_Init+0x20a>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a4a      	ldr	r2, [pc, #296]	@ (801142c <HAL_GPIO_Init+0x31c>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d007      	beq.n	8011316 <HAL_GPIO_Init+0x206>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a49      	ldr	r2, [pc, #292]	@ (8011430 <HAL_GPIO_Init+0x320>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d101      	bne.n	8011312 <HAL_GPIO_Init+0x202>
 801130e:	2306      	movs	r3, #6
 8011310:	e00c      	b.n	801132c <HAL_GPIO_Init+0x21c>
 8011312:	2307      	movs	r3, #7
 8011314:	e00a      	b.n	801132c <HAL_GPIO_Init+0x21c>
 8011316:	2305      	movs	r3, #5
 8011318:	e008      	b.n	801132c <HAL_GPIO_Init+0x21c>
 801131a:	2304      	movs	r3, #4
 801131c:	e006      	b.n	801132c <HAL_GPIO_Init+0x21c>
 801131e:	2303      	movs	r3, #3
 8011320:	e004      	b.n	801132c <HAL_GPIO_Init+0x21c>
 8011322:	2302      	movs	r3, #2
 8011324:	e002      	b.n	801132c <HAL_GPIO_Init+0x21c>
 8011326:	2301      	movs	r3, #1
 8011328:	e000      	b.n	801132c <HAL_GPIO_Init+0x21c>
 801132a:	2300      	movs	r3, #0
 801132c:	69fa      	ldr	r2, [r7, #28]
 801132e:	f002 0203 	and.w	r2, r2, #3
 8011332:	0092      	lsls	r2, r2, #2
 8011334:	4093      	lsls	r3, r2
 8011336:	69ba      	ldr	r2, [r7, #24]
 8011338:	4313      	orrs	r3, r2
 801133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801133c:	4935      	ldr	r1, [pc, #212]	@ (8011414 <HAL_GPIO_Init+0x304>)
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	089b      	lsrs	r3, r3, #2
 8011342:	3302      	adds	r3, #2
 8011344:	69ba      	ldr	r2, [r7, #24]
 8011346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801134a:	4b3a      	ldr	r3, [pc, #232]	@ (8011434 <HAL_GPIO_Init+0x324>)
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	43db      	mvns	r3, r3
 8011354:	69ba      	ldr	r2, [r7, #24]
 8011356:	4013      	ands	r3, r2
 8011358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011362:	2b00      	cmp	r3, #0
 8011364:	d003      	beq.n	801136e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8011366:	69ba      	ldr	r2, [r7, #24]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	4313      	orrs	r3, r2
 801136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801136e:	4a31      	ldr	r2, [pc, #196]	@ (8011434 <HAL_GPIO_Init+0x324>)
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011374:	4b2f      	ldr	r3, [pc, #188]	@ (8011434 <HAL_GPIO_Init+0x324>)
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	43db      	mvns	r3, r3
 801137e:	69ba      	ldr	r2, [r7, #24]
 8011380:	4013      	ands	r3, r2
 8011382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801138c:	2b00      	cmp	r3, #0
 801138e:	d003      	beq.n	8011398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8011390:	69ba      	ldr	r2, [r7, #24]
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	4313      	orrs	r3, r2
 8011396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011398:	4a26      	ldr	r2, [pc, #152]	@ (8011434 <HAL_GPIO_Init+0x324>)
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801139e:	4b25      	ldr	r3, [pc, #148]	@ (8011434 <HAL_GPIO_Init+0x324>)
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	43db      	mvns	r3, r3
 80113a8:	69ba      	ldr	r2, [r7, #24]
 80113aa:	4013      	ands	r3, r2
 80113ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d003      	beq.n	80113c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80113ba:	69ba      	ldr	r2, [r7, #24]
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	4313      	orrs	r3, r2
 80113c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80113c2:	4a1c      	ldr	r2, [pc, #112]	@ (8011434 <HAL_GPIO_Init+0x324>)
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80113c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011434 <HAL_GPIO_Init+0x324>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	43db      	mvns	r3, r3
 80113d2:	69ba      	ldr	r2, [r7, #24]
 80113d4:	4013      	ands	r3, r2
 80113d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d003      	beq.n	80113ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80113e4:	69ba      	ldr	r2, [r7, #24]
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	4313      	orrs	r3, r2
 80113ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80113ec:	4a11      	ldr	r2, [pc, #68]	@ (8011434 <HAL_GPIO_Init+0x324>)
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	3301      	adds	r3, #1
 80113f6:	61fb      	str	r3, [r7, #28]
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	2b0f      	cmp	r3, #15
 80113fc:	f67f ae96 	bls.w	801112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011400:	bf00      	nop
 8011402:	bf00      	nop
 8011404:	3724      	adds	r7, #36	@ 0x24
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	40023800 	.word	0x40023800
 8011414:	40013800 	.word	0x40013800
 8011418:	40020000 	.word	0x40020000
 801141c:	40020400 	.word	0x40020400
 8011420:	40020800 	.word	0x40020800
 8011424:	40020c00 	.word	0x40020c00
 8011428:	40021000 	.word	0x40021000
 801142c:	40021400 	.word	0x40021400
 8011430:	40021800 	.word	0x40021800
 8011434:	40013c00 	.word	0x40013c00

08011438 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011438:	b480      	push	{r7}
 801143a:	b087      	sub	sp, #28
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011442:	2300      	movs	r3, #0
 8011444:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8011446:	2300      	movs	r3, #0
 8011448:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801144a:	2300      	movs	r3, #0
 801144c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801144e:	2300      	movs	r3, #0
 8011450:	617b      	str	r3, [r7, #20]
 8011452:	e0c7      	b.n	80115e4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011454:	2201      	movs	r2, #1
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	fa02 f303 	lsl.w	r3, r2, r3
 801145c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	4013      	ands	r3, r2
 8011464:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	429a      	cmp	r2, r3
 801146c:	f040 80b7 	bne.w	80115de <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011470:	4a62      	ldr	r2, [pc, #392]	@ (80115fc <HAL_GPIO_DeInit+0x1c4>)
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	089b      	lsrs	r3, r3, #2
 8011476:	3302      	adds	r3, #2
 8011478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801147c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	f003 0303 	and.w	r3, r3, #3
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	220f      	movs	r2, #15
 8011488:	fa02 f303 	lsl.w	r3, r2, r3
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	4013      	ands	r3, r2
 8011490:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4a5a      	ldr	r2, [pc, #360]	@ (8011600 <HAL_GPIO_DeInit+0x1c8>)
 8011496:	4293      	cmp	r3, r2
 8011498:	d025      	beq.n	80114e6 <HAL_GPIO_DeInit+0xae>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4a59      	ldr	r2, [pc, #356]	@ (8011604 <HAL_GPIO_DeInit+0x1cc>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d01f      	beq.n	80114e2 <HAL_GPIO_DeInit+0xaa>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4a58      	ldr	r2, [pc, #352]	@ (8011608 <HAL_GPIO_DeInit+0x1d0>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d019      	beq.n	80114de <HAL_GPIO_DeInit+0xa6>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4a57      	ldr	r2, [pc, #348]	@ (801160c <HAL_GPIO_DeInit+0x1d4>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d013      	beq.n	80114da <HAL_GPIO_DeInit+0xa2>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4a56      	ldr	r2, [pc, #344]	@ (8011610 <HAL_GPIO_DeInit+0x1d8>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d00d      	beq.n	80114d6 <HAL_GPIO_DeInit+0x9e>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a55      	ldr	r2, [pc, #340]	@ (8011614 <HAL_GPIO_DeInit+0x1dc>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d007      	beq.n	80114d2 <HAL_GPIO_DeInit+0x9a>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	4a54      	ldr	r2, [pc, #336]	@ (8011618 <HAL_GPIO_DeInit+0x1e0>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d101      	bne.n	80114ce <HAL_GPIO_DeInit+0x96>
 80114ca:	2306      	movs	r3, #6
 80114cc:	e00c      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114ce:	2307      	movs	r3, #7
 80114d0:	e00a      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114d2:	2305      	movs	r3, #5
 80114d4:	e008      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114d6:	2304      	movs	r3, #4
 80114d8:	e006      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114da:	2303      	movs	r3, #3
 80114dc:	e004      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114de:	2302      	movs	r3, #2
 80114e0:	e002      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e000      	b.n	80114e8 <HAL_GPIO_DeInit+0xb0>
 80114e6:	2300      	movs	r3, #0
 80114e8:	697a      	ldr	r2, [r7, #20]
 80114ea:	f002 0203 	and.w	r2, r2, #3
 80114ee:	0092      	lsls	r2, r2, #2
 80114f0:	4093      	lsls	r3, r2
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d132      	bne.n	801155e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80114f8:	4b48      	ldr	r3, [pc, #288]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	43db      	mvns	r3, r3
 8011500:	4946      	ldr	r1, [pc, #280]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 8011502:	4013      	ands	r3, r2
 8011504:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8011506:	4b45      	ldr	r3, [pc, #276]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 8011508:	685a      	ldr	r2, [r3, #4]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	43db      	mvns	r3, r3
 801150e:	4943      	ldr	r1, [pc, #268]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 8011510:	4013      	ands	r3, r2
 8011512:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011514:	4b41      	ldr	r3, [pc, #260]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 8011516:	68da      	ldr	r2, [r3, #12]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	43db      	mvns	r3, r3
 801151c:	493f      	ldr	r1, [pc, #252]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 801151e:	4013      	ands	r3, r2
 8011520:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011522:	4b3e      	ldr	r3, [pc, #248]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 8011524:	689a      	ldr	r2, [r3, #8]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	43db      	mvns	r3, r3
 801152a:	493c      	ldr	r1, [pc, #240]	@ (801161c <HAL_GPIO_DeInit+0x1e4>)
 801152c:	4013      	ands	r3, r2
 801152e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	f003 0303 	and.w	r3, r3, #3
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	220f      	movs	r2, #15
 801153a:	fa02 f303 	lsl.w	r3, r2, r3
 801153e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011540:	4a2e      	ldr	r2, [pc, #184]	@ (80115fc <HAL_GPIO_DeInit+0x1c4>)
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	089b      	lsrs	r3, r3, #2
 8011546:	3302      	adds	r3, #2
 8011548:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	43da      	mvns	r2, r3
 8011550:	482a      	ldr	r0, [pc, #168]	@ (80115fc <HAL_GPIO_DeInit+0x1c4>)
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	089b      	lsrs	r3, r3, #2
 8011556:	400a      	ands	r2, r1
 8011558:	3302      	adds	r3, #2
 801155a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	2103      	movs	r1, #3
 8011568:	fa01 f303 	lsl.w	r3, r1, r3
 801156c:	43db      	mvns	r3, r3
 801156e:	401a      	ands	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	08da      	lsrs	r2, r3, #3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	3208      	adds	r2, #8
 801157c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f003 0307 	and.w	r3, r3, #7
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	220f      	movs	r2, #15
 801158a:	fa02 f303 	lsl.w	r3, r2, r3
 801158e:	43db      	mvns	r3, r3
 8011590:	697a      	ldr	r2, [r7, #20]
 8011592:	08d2      	lsrs	r2, r2, #3
 8011594:	4019      	ands	r1, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	3208      	adds	r2, #8
 801159a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	68da      	ldr	r2, [r3, #12]
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	005b      	lsls	r3, r3, #1
 80115a6:	2103      	movs	r1, #3
 80115a8:	fa01 f303 	lsl.w	r3, r1, r3
 80115ac:	43db      	mvns	r3, r3
 80115ae:	401a      	ands	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	685a      	ldr	r2, [r3, #4]
 80115b8:	2101      	movs	r1, #1
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	fa01 f303 	lsl.w	r3, r1, r3
 80115c0:	43db      	mvns	r3, r3
 80115c2:	401a      	ands	r2, r3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	689a      	ldr	r2, [r3, #8]
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	2103      	movs	r1, #3
 80115d2:	fa01 f303 	lsl.w	r3, r1, r3
 80115d6:	43db      	mvns	r3, r3
 80115d8:	401a      	ands	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	3301      	adds	r3, #1
 80115e2:	617b      	str	r3, [r7, #20]
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	2b0f      	cmp	r3, #15
 80115e8:	f67f af34 	bls.w	8011454 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80115ec:	bf00      	nop
 80115ee:	bf00      	nop
 80115f0:	371c      	adds	r7, #28
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	40013800 	.word	0x40013800
 8011600:	40020000 	.word	0x40020000
 8011604:	40020400 	.word	0x40020400
 8011608:	40020800 	.word	0x40020800
 801160c:	40020c00 	.word	0x40020c00
 8011610:	40021000 	.word	0x40021000
 8011614:	40021400 	.word	0x40021400
 8011618:	40021800 	.word	0x40021800
 801161c:	40013c00 	.word	0x40013c00

08011620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	460b      	mov	r3, r1
 801162a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	691a      	ldr	r2, [r3, #16]
 8011630:	887b      	ldrh	r3, [r7, #2]
 8011632:	4013      	ands	r3, r2
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011638:	2301      	movs	r3, #1
 801163a:	73fb      	strb	r3, [r7, #15]
 801163c:	e001      	b.n	8011642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801163e:	2300      	movs	r3, #0
 8011640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011642:	7bfb      	ldrb	r3, [r7, #15]
}
 8011644:	4618      	mov	r0, r3
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	460b      	mov	r3, r1
 801165a:	807b      	strh	r3, [r7, #2]
 801165c:	4613      	mov	r3, r2
 801165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011660:	787b      	ldrb	r3, [r7, #1]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d003      	beq.n	801166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011666:	887a      	ldrh	r2, [r7, #2]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801166c:	e003      	b.n	8011676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801166e:	887b      	ldrh	r3, [r7, #2]
 8011670:	041a      	lsls	r2, r3, #16
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	619a      	str	r2, [r3, #24]
}
 8011676:	bf00      	nop
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011682:	b480      	push	{r7}
 8011684:	b085      	sub	sp, #20
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	460b      	mov	r3, r1
 801168c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011694:	887a      	ldrh	r2, [r7, #2]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	4013      	ands	r3, r2
 801169a:	041a      	lsls	r2, r3, #16
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	43d9      	mvns	r1, r3
 80116a0:	887b      	ldrh	r3, [r7, #2]
 80116a2:	400b      	ands	r3, r1
 80116a4:	431a      	orrs	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	619a      	str	r2, [r3, #24]
}
 80116aa:	bf00      	nop
 80116ac:	3714      	adds	r7, #20
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
	...

080116b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	4603      	mov	r3, r0
 80116c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80116c2:	4b08      	ldr	r3, [pc, #32]	@ (80116e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80116c4:	695a      	ldr	r2, [r3, #20]
 80116c6:	88fb      	ldrh	r3, [r7, #6]
 80116c8:	4013      	ands	r3, r2
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d006      	beq.n	80116dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80116ce:	4a05      	ldr	r2, [pc, #20]	@ (80116e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80116d0:	88fb      	ldrh	r3, [r7, #6]
 80116d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80116d4:	88fb      	ldrh	r3, [r7, #6]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7f8 fbe0 	bl	8009e9c <HAL_GPIO_EXTI_Callback>
  }
}
 80116dc:	bf00      	nop
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	40013c00 	.word	0x40013c00

080116e8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b083      	sub	sp, #12
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	460b      	mov	r3, r1
 80116f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80116f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011724 <HAL_PWR_EnterSLEEPMode+0x3c>)
 80116f6:	691b      	ldr	r3, [r3, #16]
 80116f8:	4a0a      	ldr	r2, [pc, #40]	@ (8011724 <HAL_PWR_EnterSLEEPMode+0x3c>)
 80116fa:	f023 0304 	bic.w	r3, r3, #4
 80116fe:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011700:	78fb      	ldrb	r3, [r7, #3]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d101      	bne.n	801170a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011706:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8011708:	e005      	b.n	8011716 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 801170a:	78fb      	ldrb	r3, [r7, #3]
 801170c:	2b03      	cmp	r3, #3
 801170e:	d001      	beq.n	8011714 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8011710:	bf40      	sev
      __WFE();
 8011712:	bf20      	wfe
    __WFE();
 8011714:	bf20      	wfe
}
 8011716:	bf00      	nop
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
 8011724:	e000ed00 	.word	0xe000ed00

08011728 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801172e:	2300      	movs	r3, #0
 8011730:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8011732:	2300      	movs	r3, #0
 8011734:	603b      	str	r3, [r7, #0]
 8011736:	4b20      	ldr	r3, [pc, #128]	@ (80117b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8011738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801173a:	4a1f      	ldr	r2, [pc, #124]	@ (80117b8 <HAL_PWREx_EnableOverDrive+0x90>)
 801173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011740:	6413      	str	r3, [r2, #64]	@ 0x40
 8011742:	4b1d      	ldr	r3, [pc, #116]	@ (80117b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8011744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801174a:	603b      	str	r3, [r7, #0]
 801174c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801174e:	4b1b      	ldr	r3, [pc, #108]	@ (80117bc <HAL_PWREx_EnableOverDrive+0x94>)
 8011750:	2201      	movs	r2, #1
 8011752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011754:	f7ff fb06 	bl	8010d64 <HAL_GetTick>
 8011758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801175a:	e009      	b.n	8011770 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801175c:	f7ff fb02 	bl	8010d64 <HAL_GetTick>
 8011760:	4602      	mov	r2, r0
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801176a:	d901      	bls.n	8011770 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e01f      	b.n	80117b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011770:	4b13      	ldr	r3, [pc, #76]	@ (80117c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801177c:	d1ee      	bne.n	801175c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801177e:	4b11      	ldr	r3, [pc, #68]	@ (80117c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8011780:	2201      	movs	r2, #1
 8011782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011784:	f7ff faee 	bl	8010d64 <HAL_GetTick>
 8011788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801178a:	e009      	b.n	80117a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801178c:	f7ff faea 	bl	8010d64 <HAL_GetTick>
 8011790:	4602      	mov	r2, r0
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	1ad3      	subs	r3, r2, r3
 8011796:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801179a:	d901      	bls.n	80117a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801179c:	2303      	movs	r3, #3
 801179e:	e007      	b.n	80117b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80117a0:	4b07      	ldr	r3, [pc, #28]	@ (80117c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80117ac:	d1ee      	bne.n	801178c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	40023800 	.word	0x40023800
 80117bc:	420e0040 	.word	0x420e0040
 80117c0:	40007000 	.word	0x40007000
 80117c4:	420e0044 	.word	0x420e0044

080117c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d101      	bne.n	80117dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80117d8:	2301      	movs	r3, #1
 80117da:	e0cc      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80117dc:	4b68      	ldr	r3, [pc, #416]	@ (8011980 <HAL_RCC_ClockConfig+0x1b8>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f003 030f 	and.w	r3, r3, #15
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d90c      	bls.n	8011804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80117ea:	4b65      	ldr	r3, [pc, #404]	@ (8011980 <HAL_RCC_ClockConfig+0x1b8>)
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	b2d2      	uxtb	r2, r2
 80117f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80117f2:	4b63      	ldr	r3, [pc, #396]	@ (8011980 <HAL_RCC_ClockConfig+0x1b8>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f003 030f 	and.w	r3, r3, #15
 80117fa:	683a      	ldr	r2, [r7, #0]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d001      	beq.n	8011804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011800:	2301      	movs	r3, #1
 8011802:	e0b8      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f003 0302 	and.w	r3, r3, #2
 801180c:	2b00      	cmp	r3, #0
 801180e:	d020      	beq.n	8011852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 0304 	and.w	r3, r3, #4
 8011818:	2b00      	cmp	r3, #0
 801181a:	d005      	beq.n	8011828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801181c:	4b59      	ldr	r3, [pc, #356]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801181e:	689b      	ldr	r3, [r3, #8]
 8011820:	4a58      	ldr	r2, [pc, #352]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8011826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f003 0308 	and.w	r3, r3, #8
 8011830:	2b00      	cmp	r3, #0
 8011832:	d005      	beq.n	8011840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011834:	4b53      	ldr	r3, [pc, #332]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	4a52      	ldr	r2, [pc, #328]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801183a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801183e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011840:	4b50      	ldr	r3, [pc, #320]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	494d      	ldr	r1, [pc, #308]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801184e:	4313      	orrs	r3, r2
 8011850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f003 0301 	and.w	r3, r3, #1
 801185a:	2b00      	cmp	r3, #0
 801185c:	d044      	beq.n	80118e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	2b01      	cmp	r3, #1
 8011864:	d107      	bne.n	8011876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011866:	4b47      	ldr	r3, [pc, #284]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801186e:	2b00      	cmp	r3, #0
 8011870:	d119      	bne.n	80118a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011872:	2301      	movs	r3, #1
 8011874:	e07f      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	2b02      	cmp	r3, #2
 801187c:	d003      	beq.n	8011886 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011882:	2b03      	cmp	r3, #3
 8011884:	d107      	bne.n	8011896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011886:	4b3f      	ldr	r3, [pc, #252]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801188e:	2b00      	cmp	r3, #0
 8011890:	d109      	bne.n	80118a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011892:	2301      	movs	r3, #1
 8011894:	e06f      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011896:	4b3b      	ldr	r3, [pc, #236]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f003 0302 	and.w	r3, r3, #2
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d101      	bne.n	80118a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118a2:	2301      	movs	r3, #1
 80118a4:	e067      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80118a6:	4b37      	ldr	r3, [pc, #220]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	f023 0203 	bic.w	r2, r3, #3
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	4934      	ldr	r1, [pc, #208]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 80118b4:	4313      	orrs	r3, r2
 80118b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80118b8:	f7ff fa54 	bl	8010d64 <HAL_GetTick>
 80118bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80118be:	e00a      	b.n	80118d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118c0:	f7ff fa50 	bl	8010d64 <HAL_GetTick>
 80118c4:	4602      	mov	r2, r0
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	1ad3      	subs	r3, r2, r3
 80118ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d901      	bls.n	80118d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80118d2:	2303      	movs	r3, #3
 80118d4:	e04f      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80118d6:	4b2b      	ldr	r3, [pc, #172]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	f003 020c 	and.w	r2, r3, #12
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d1eb      	bne.n	80118c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80118e8:	4b25      	ldr	r3, [pc, #148]	@ (8011980 <HAL_RCC_ClockConfig+0x1b8>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f003 030f 	and.w	r3, r3, #15
 80118f0:	683a      	ldr	r2, [r7, #0]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d20c      	bcs.n	8011910 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80118f6:	4b22      	ldr	r3, [pc, #136]	@ (8011980 <HAL_RCC_ClockConfig+0x1b8>)
 80118f8:	683a      	ldr	r2, [r7, #0]
 80118fa:	b2d2      	uxtb	r2, r2
 80118fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80118fe:	4b20      	ldr	r3, [pc, #128]	@ (8011980 <HAL_RCC_ClockConfig+0x1b8>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f003 030f 	and.w	r3, r3, #15
 8011906:	683a      	ldr	r2, [r7, #0]
 8011908:	429a      	cmp	r2, r3
 801190a:	d001      	beq.n	8011910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801190c:	2301      	movs	r3, #1
 801190e:	e032      	b.n	8011976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f003 0304 	and.w	r3, r3, #4
 8011918:	2b00      	cmp	r3, #0
 801191a:	d008      	beq.n	801192e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801191c:	4b19      	ldr	r3, [pc, #100]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	4916      	ldr	r1, [pc, #88]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801192a:	4313      	orrs	r3, r2
 801192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f003 0308 	and.w	r3, r3, #8
 8011936:	2b00      	cmp	r3, #0
 8011938:	d009      	beq.n	801194e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801193a:	4b12      	ldr	r3, [pc, #72]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	00db      	lsls	r3, r3, #3
 8011948:	490e      	ldr	r1, [pc, #56]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 801194a:	4313      	orrs	r3, r2
 801194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801194e:	f000 f887 	bl	8011a60 <HAL_RCC_GetSysClockFreq>
 8011952:	4602      	mov	r2, r0
 8011954:	4b0b      	ldr	r3, [pc, #44]	@ (8011984 <HAL_RCC_ClockConfig+0x1bc>)
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	091b      	lsrs	r3, r3, #4
 801195a:	f003 030f 	and.w	r3, r3, #15
 801195e:	490a      	ldr	r1, [pc, #40]	@ (8011988 <HAL_RCC_ClockConfig+0x1c0>)
 8011960:	5ccb      	ldrb	r3, [r1, r3]
 8011962:	fa22 f303 	lsr.w	r3, r2, r3
 8011966:	4a09      	ldr	r2, [pc, #36]	@ (801198c <HAL_RCC_ClockConfig+0x1c4>)
 8011968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 801196a:	4b09      	ldr	r3, [pc, #36]	@ (8011990 <HAL_RCC_ClockConfig+0x1c8>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff f814 	bl	801099c <HAL_InitTick>

  return HAL_OK;
 8011974:	2300      	movs	r3, #0
}
 8011976:	4618      	mov	r0, r3
 8011978:	3710      	adds	r7, #16
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	40023c00 	.word	0x40023c00
 8011984:	40023800 	.word	0x40023800
 8011988:	0801f234 	.word	0x0801f234
 801198c:	2000008c 	.word	0x2000008c
 8011990:	20000090 	.word	0x20000090

08011994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011994:	b480      	push	{r7}
 8011996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011998:	4b03      	ldr	r3, [pc, #12]	@ (80119a8 <HAL_RCC_GetHCLKFreq+0x14>)
 801199a:	681b      	ldr	r3, [r3, #0]
}
 801199c:	4618      	mov	r0, r3
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	2000008c 	.word	0x2000008c

080119ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80119b0:	f7ff fff0 	bl	8011994 <HAL_RCC_GetHCLKFreq>
 80119b4:	4602      	mov	r2, r0
 80119b6:	4b05      	ldr	r3, [pc, #20]	@ (80119cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	0a9b      	lsrs	r3, r3, #10
 80119bc:	f003 0307 	and.w	r3, r3, #7
 80119c0:	4903      	ldr	r1, [pc, #12]	@ (80119d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80119c2:	5ccb      	ldrb	r3, [r1, r3]
 80119c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	40023800 	.word	0x40023800
 80119d0:	0801f244 	.word	0x0801f244

080119d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80119d8:	f7ff ffdc 	bl	8011994 <HAL_RCC_GetHCLKFreq>
 80119dc:	4602      	mov	r2, r0
 80119de:	4b05      	ldr	r3, [pc, #20]	@ (80119f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80119e0:	689b      	ldr	r3, [r3, #8]
 80119e2:	0b5b      	lsrs	r3, r3, #13
 80119e4:	f003 0307 	and.w	r3, r3, #7
 80119e8:	4903      	ldr	r1, [pc, #12]	@ (80119f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80119ea:	5ccb      	ldrb	r3, [r1, r3]
 80119ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	40023800 	.word	0x40023800
 80119f8:	0801f244 	.word	0x0801f244

080119fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80119fc:	b480      	push	{r7}
 80119fe:	b083      	sub	sp, #12
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	220f      	movs	r2, #15
 8011a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011a0c:	4b12      	ldr	r3, [pc, #72]	@ (8011a58 <HAL_RCC_GetClockConfig+0x5c>)
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	f003 0203 	and.w	r2, r3, #3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011a18:	4b0f      	ldr	r3, [pc, #60]	@ (8011a58 <HAL_RCC_GetClockConfig+0x5c>)
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011a24:	4b0c      	ldr	r3, [pc, #48]	@ (8011a58 <HAL_RCC_GetClockConfig+0x5c>)
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011a30:	4b09      	ldr	r3, [pc, #36]	@ (8011a58 <HAL_RCC_GetClockConfig+0x5c>)
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	08db      	lsrs	r3, r3, #3
 8011a36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011a3e:	4b07      	ldr	r3, [pc, #28]	@ (8011a5c <HAL_RCC_GetClockConfig+0x60>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f003 020f 	and.w	r2, r3, #15
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	601a      	str	r2, [r3, #0]
}
 8011a4a:	bf00      	nop
 8011a4c:	370c      	adds	r7, #12
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	40023800 	.word	0x40023800
 8011a5c:	40023c00 	.word	0x40023c00

08011a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a64:	b0a6      	sub	sp, #152	@ 0x98
 8011a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8011a74:	2300      	movs	r3, #0
 8011a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8011a80:	2300      	movs	r3, #0
 8011a82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011a86:	4bc8      	ldr	r3, [pc, #800]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011a88:	689b      	ldr	r3, [r3, #8]
 8011a8a:	f003 030c 	and.w	r3, r3, #12
 8011a8e:	2b0c      	cmp	r3, #12
 8011a90:	f200 817e 	bhi.w	8011d90 <HAL_RCC_GetSysClockFreq+0x330>
 8011a94:	a201      	add	r2, pc, #4	@ (adr r2, 8011a9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8011a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9a:	bf00      	nop
 8011a9c:	08011ad1 	.word	0x08011ad1
 8011aa0:	08011d91 	.word	0x08011d91
 8011aa4:	08011d91 	.word	0x08011d91
 8011aa8:	08011d91 	.word	0x08011d91
 8011aac:	08011ad9 	.word	0x08011ad9
 8011ab0:	08011d91 	.word	0x08011d91
 8011ab4:	08011d91 	.word	0x08011d91
 8011ab8:	08011d91 	.word	0x08011d91
 8011abc:	08011ae1 	.word	0x08011ae1
 8011ac0:	08011d91 	.word	0x08011d91
 8011ac4:	08011d91 	.word	0x08011d91
 8011ac8:	08011d91 	.word	0x08011d91
 8011acc:	08011c4b 	.word	0x08011c4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011ad0:	4bb6      	ldr	r3, [pc, #728]	@ (8011dac <HAL_RCC_GetSysClockFreq+0x34c>)
 8011ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011ad6:	e15f      	b.n	8011d98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011ad8:	4bb5      	ldr	r3, [pc, #724]	@ (8011db0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011ada:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011ade:	e15b      	b.n	8011d98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011ae0:	4bb1      	ldr	r3, [pc, #708]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011ae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011aec:	4bae      	ldr	r3, [pc, #696]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d031      	beq.n	8011b5c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011af8:	4bab      	ldr	r3, [pc, #684]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	099b      	lsrs	r3, r3, #6
 8011afe:	2200      	movs	r2, #0
 8011b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8011b10:	4ba7      	ldr	r3, [pc, #668]	@ (8011db0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011b12:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8011b16:	462a      	mov	r2, r5
 8011b18:	fb03 f202 	mul.w	r2, r3, r2
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4621      	mov	r1, r4
 8011b20:	fb01 f303 	mul.w	r3, r1, r3
 8011b24:	4413      	add	r3, r2
 8011b26:	4aa2      	ldr	r2, [pc, #648]	@ (8011db0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011b28:	4621      	mov	r1, r4
 8011b2a:	fba1 1202 	umull	r1, r2, r1, r2
 8011b2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011b30:	460a      	mov	r2, r1
 8011b32:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011b34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011b36:	4413      	add	r3, r2
 8011b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011b3e:	2200      	movs	r2, #0
 8011b40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011b44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011b48:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8011b4c:	f7f7 f87c 	bl	8008c48 <__aeabi_uldivmod>
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	4613      	mov	r3, r2
 8011b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011b5a:	e064      	b.n	8011c26 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b5c:	4b92      	ldr	r3, [pc, #584]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	099b      	lsrs	r3, r3, #6
 8011b62:	2200      	movs	r2, #0
 8011b64:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b66:	657a      	str	r2, [r7, #84]	@ 0x54
 8011b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b70:	2300      	movs	r3, #0
 8011b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b74:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8011b78:	4622      	mov	r2, r4
 8011b7a:	462b      	mov	r3, r5
 8011b7c:	f04f 0000 	mov.w	r0, #0
 8011b80:	f04f 0100 	mov.w	r1, #0
 8011b84:	0159      	lsls	r1, r3, #5
 8011b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011b8a:	0150      	lsls	r0, r2, #5
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4621      	mov	r1, r4
 8011b92:	1a51      	subs	r1, r2, r1
 8011b94:	6139      	str	r1, [r7, #16]
 8011b96:	4629      	mov	r1, r5
 8011b98:	eb63 0301 	sbc.w	r3, r3, r1
 8011b9c:	617b      	str	r3, [r7, #20]
 8011b9e:	f04f 0200 	mov.w	r2, #0
 8011ba2:	f04f 0300 	mov.w	r3, #0
 8011ba6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011baa:	4659      	mov	r1, fp
 8011bac:	018b      	lsls	r3, r1, #6
 8011bae:	4651      	mov	r1, sl
 8011bb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011bb4:	4651      	mov	r1, sl
 8011bb6:	018a      	lsls	r2, r1, #6
 8011bb8:	4651      	mov	r1, sl
 8011bba:	ebb2 0801 	subs.w	r8, r2, r1
 8011bbe:	4659      	mov	r1, fp
 8011bc0:	eb63 0901 	sbc.w	r9, r3, r1
 8011bc4:	f04f 0200 	mov.w	r2, #0
 8011bc8:	f04f 0300 	mov.w	r3, #0
 8011bcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011bd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011bd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011bd8:	4690      	mov	r8, r2
 8011bda:	4699      	mov	r9, r3
 8011bdc:	4623      	mov	r3, r4
 8011bde:	eb18 0303 	adds.w	r3, r8, r3
 8011be2:	60bb      	str	r3, [r7, #8]
 8011be4:	462b      	mov	r3, r5
 8011be6:	eb49 0303 	adc.w	r3, r9, r3
 8011bea:	60fb      	str	r3, [r7, #12]
 8011bec:	f04f 0200 	mov.w	r2, #0
 8011bf0:	f04f 0300 	mov.w	r3, #0
 8011bf4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	028b      	lsls	r3, r1, #10
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011c02:	4621      	mov	r1, r4
 8011c04:	028a      	lsls	r2, r1, #10
 8011c06:	4610      	mov	r0, r2
 8011c08:	4619      	mov	r1, r3
 8011c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c0e:	2200      	movs	r2, #0
 8011c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8011c14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011c18:	f7f7 f816 	bl	8008c48 <__aeabi_uldivmod>
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	4613      	mov	r3, r2
 8011c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8011c26:	4b60      	ldr	r3, [pc, #384]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	0c1b      	lsrs	r3, r3, #16
 8011c2c:	f003 0303 	and.w	r3, r3, #3
 8011c30:	3301      	adds	r3, #1
 8011c32:	005b      	lsls	r3, r3, #1
 8011c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8011c38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011c48:	e0a6      	b.n	8011d98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011c4a:	4b57      	ldr	r3, [pc, #348]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011c56:	4b54      	ldr	r3, [pc, #336]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d02a      	beq.n	8011cb8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c62:	4b51      	ldr	r3, [pc, #324]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	099b      	lsrs	r3, r3, #6
 8011c68:	2200      	movs	r2, #0
 8011c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8011c74:	2100      	movs	r1, #0
 8011c76:	4b4e      	ldr	r3, [pc, #312]	@ (8011db0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011c78:	fb03 f201 	mul.w	r2, r3, r1
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	fb00 f303 	mul.w	r3, r0, r3
 8011c82:	4413      	add	r3, r2
 8011c84:	4a4a      	ldr	r2, [pc, #296]	@ (8011db0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011c86:	fba0 1202 	umull	r1, r2, r0, r2
 8011c8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8011c8c:	460a      	mov	r2, r1
 8011c8e:	673a      	str	r2, [r7, #112]	@ 0x70
 8011c90:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011c92:	4413      	add	r3, r2
 8011c94:	677b      	str	r3, [r7, #116]	@ 0x74
 8011c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c9e:	637a      	str	r2, [r7, #52]	@ 0x34
 8011ca0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8011ca4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8011ca8:	f7f6 ffce 	bl	8008c48 <__aeabi_uldivmod>
 8011cac:	4602      	mov	r2, r0
 8011cae:	460b      	mov	r3, r1
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011cb6:	e05b      	b.n	8011d70 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	099b      	lsrs	r3, r3, #6
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cca:	623b      	str	r3, [r7, #32]
 8011ccc:	2300      	movs	r3, #0
 8011cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011cd4:	4642      	mov	r2, r8
 8011cd6:	464b      	mov	r3, r9
 8011cd8:	f04f 0000 	mov.w	r0, #0
 8011cdc:	f04f 0100 	mov.w	r1, #0
 8011ce0:	0159      	lsls	r1, r3, #5
 8011ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011ce6:	0150      	lsls	r0, r2, #5
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	4641      	mov	r1, r8
 8011cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8011cf2:	4649      	mov	r1, r9
 8011cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8011cf8:	f04f 0200 	mov.w	r2, #0
 8011cfc:	f04f 0300 	mov.w	r3, #0
 8011d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8011d10:	eb63 050b 	sbc.w	r5, r3, fp
 8011d14:	f04f 0200 	mov.w	r2, #0
 8011d18:	f04f 0300 	mov.w	r3, #0
 8011d1c:	00eb      	lsls	r3, r5, #3
 8011d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011d22:	00e2      	lsls	r2, r4, #3
 8011d24:	4614      	mov	r4, r2
 8011d26:	461d      	mov	r5, r3
 8011d28:	4643      	mov	r3, r8
 8011d2a:	18e3      	adds	r3, r4, r3
 8011d2c:	603b      	str	r3, [r7, #0]
 8011d2e:	464b      	mov	r3, r9
 8011d30:	eb45 0303 	adc.w	r3, r5, r3
 8011d34:	607b      	str	r3, [r7, #4]
 8011d36:	f04f 0200 	mov.w	r2, #0
 8011d3a:	f04f 0300 	mov.w	r3, #0
 8011d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011d42:	4629      	mov	r1, r5
 8011d44:	028b      	lsls	r3, r1, #10
 8011d46:	4621      	mov	r1, r4
 8011d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011d4c:	4621      	mov	r1, r4
 8011d4e:	028a      	lsls	r2, r1, #10
 8011d50:	4610      	mov	r0, r2
 8011d52:	4619      	mov	r1, r3
 8011d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d58:	2200      	movs	r2, #0
 8011d5a:	61bb      	str	r3, [r7, #24]
 8011d5c:	61fa      	str	r2, [r7, #28]
 8011d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011d62:	f7f6 ff71 	bl	8008c48 <__aeabi_uldivmod>
 8011d66:	4602      	mov	r2, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	4613      	mov	r3, r2
 8011d6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8011d70:	4b0d      	ldr	r3, [pc, #52]	@ (8011da8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	0f1b      	lsrs	r3, r3, #28
 8011d76:	f003 0307 	and.w	r3, r3, #7
 8011d7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8011d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011d8e:	e003      	b.n	8011d98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011d90:	4b06      	ldr	r3, [pc, #24]	@ (8011dac <HAL_RCC_GetSysClockFreq+0x34c>)
 8011d92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3798      	adds	r7, #152	@ 0x98
 8011da0:	46bd      	mov	sp, r7
 8011da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011da6:	bf00      	nop
 8011da8:	40023800 	.word	0x40023800
 8011dac:	00f42400 	.word	0x00f42400
 8011db0:	017d7840 	.word	0x017d7840

08011db4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d101      	bne.n	8011dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	e28d      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f003 0301 	and.w	r3, r3, #1
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 8083 	beq.w	8011eda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8011dd4:	4b94      	ldr	r3, [pc, #592]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011dd6:	689b      	ldr	r3, [r3, #8]
 8011dd8:	f003 030c 	and.w	r3, r3, #12
 8011ddc:	2b04      	cmp	r3, #4
 8011dde:	d019      	beq.n	8011e14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011de0:	4b91      	ldr	r3, [pc, #580]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	f003 030c 	and.w	r3, r3, #12
        || \
 8011de8:	2b08      	cmp	r3, #8
 8011dea:	d106      	bne.n	8011dfa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011dec:	4b8e      	ldr	r3, [pc, #568]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011df8:	d00c      	beq.n	8011e14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011dfc:	689b      	ldr	r3, [r3, #8]
 8011dfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011e02:	2b0c      	cmp	r3, #12
 8011e04:	d112      	bne.n	8011e2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011e06:	4b88      	ldr	r3, [pc, #544]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011e12:	d10b      	bne.n	8011e2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011e14:	4b84      	ldr	r3, [pc, #528]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d05b      	beq.n	8011ed8 <HAL_RCC_OscConfig+0x124>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d157      	bne.n	8011ed8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	e25a      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e34:	d106      	bne.n	8011e44 <HAL_RCC_OscConfig+0x90>
 8011e36:	4b7c      	ldr	r3, [pc, #496]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e40:	6013      	str	r3, [r2, #0]
 8011e42:	e01d      	b.n	8011e80 <HAL_RCC_OscConfig+0xcc>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011e4c:	d10c      	bne.n	8011e68 <HAL_RCC_OscConfig+0xb4>
 8011e4e:	4b76      	ldr	r3, [pc, #472]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a75      	ldr	r2, [pc, #468]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011e58:	6013      	str	r3, [r2, #0]
 8011e5a:	4b73      	ldr	r3, [pc, #460]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	4a72      	ldr	r2, [pc, #456]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e64:	6013      	str	r3, [r2, #0]
 8011e66:	e00b      	b.n	8011e80 <HAL_RCC_OscConfig+0xcc>
 8011e68:	4b6f      	ldr	r3, [pc, #444]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011e72:	6013      	str	r3, [r2, #0]
 8011e74:	4b6c      	ldr	r3, [pc, #432]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4a6b      	ldr	r2, [pc, #428]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d013      	beq.n	8011eb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e88:	f7fe ff6c 	bl	8010d64 <HAL_GetTick>
 8011e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011e8e:	e008      	b.n	8011ea2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011e90:	f7fe ff68 	bl	8010d64 <HAL_GetTick>
 8011e94:	4602      	mov	r2, r0
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	1ad3      	subs	r3, r2, r3
 8011e9a:	2b64      	cmp	r3, #100	@ 0x64
 8011e9c:	d901      	bls.n	8011ea2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8011e9e:	2303      	movs	r3, #3
 8011ea0:	e21f      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ea2:	4b61      	ldr	r3, [pc, #388]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d0f0      	beq.n	8011e90 <HAL_RCC_OscConfig+0xdc>
 8011eae:	e014      	b.n	8011eda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011eb0:	f7fe ff58 	bl	8010d64 <HAL_GetTick>
 8011eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011eb6:	e008      	b.n	8011eca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011eb8:	f7fe ff54 	bl	8010d64 <HAL_GetTick>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	2b64      	cmp	r3, #100	@ 0x64
 8011ec4:	d901      	bls.n	8011eca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e20b      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011eca:	4b57      	ldr	r3, [pc, #348]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1f0      	bne.n	8011eb8 <HAL_RCC_OscConfig+0x104>
 8011ed6:	e000      	b.n	8011eda <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f003 0302 	and.w	r3, r3, #2
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d06f      	beq.n	8011fc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8011ee6:	4b50      	ldr	r3, [pc, #320]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	f003 030c 	and.w	r3, r3, #12
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d017      	beq.n	8011f22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011ef4:	689b      	ldr	r3, [r3, #8]
 8011ef6:	f003 030c 	and.w	r3, r3, #12
        || \
 8011efa:	2b08      	cmp	r3, #8
 8011efc:	d105      	bne.n	8011f0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011efe:	4b4a      	ldr	r3, [pc, #296]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00b      	beq.n	8011f22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011f0a:	4b47      	ldr	r3, [pc, #284]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011f12:	2b0c      	cmp	r3, #12
 8011f14:	d11c      	bne.n	8011f50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011f16:	4b44      	ldr	r3, [pc, #272]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d116      	bne.n	8011f50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011f22:	4b41      	ldr	r3, [pc, #260]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f003 0302 	and.w	r3, r3, #2
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d005      	beq.n	8011f3a <HAL_RCC_OscConfig+0x186>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d001      	beq.n	8011f3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8011f36:	2301      	movs	r3, #1
 8011f38:	e1d3      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	4937      	ldr	r1, [pc, #220]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011f4e:	e03a      	b.n	8011fc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d020      	beq.n	8011f9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011f58:	4b34      	ldr	r3, [pc, #208]	@ (801202c <HAL_RCC_OscConfig+0x278>)
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f5e:	f7fe ff01 	bl	8010d64 <HAL_GetTick>
 8011f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f64:	e008      	b.n	8011f78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011f66:	f7fe fefd 	bl	8010d64 <HAL_GetTick>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	1ad3      	subs	r3, r2, r3
 8011f70:	2b02      	cmp	r3, #2
 8011f72:	d901      	bls.n	8011f78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8011f74:	2303      	movs	r3, #3
 8011f76:	e1b4      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f78:	4b2b      	ldr	r3, [pc, #172]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f003 0302 	and.w	r3, r3, #2
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d0f0      	beq.n	8011f66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011f84:	4b28      	ldr	r3, [pc, #160]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	4925      	ldr	r1, [pc, #148]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011f94:	4313      	orrs	r3, r2
 8011f96:	600b      	str	r3, [r1, #0]
 8011f98:	e015      	b.n	8011fc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011f9a:	4b24      	ldr	r3, [pc, #144]	@ (801202c <HAL_RCC_OscConfig+0x278>)
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011fa0:	f7fe fee0 	bl	8010d64 <HAL_GetTick>
 8011fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011fa6:	e008      	b.n	8011fba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011fa8:	f7fe fedc 	bl	8010d64 <HAL_GetTick>
 8011fac:	4602      	mov	r2, r0
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d901      	bls.n	8011fba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8011fb6:	2303      	movs	r3, #3
 8011fb8:	e193      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011fba:	4b1b      	ldr	r3, [pc, #108]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f003 0302 	and.w	r3, r3, #2
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d1f0      	bne.n	8011fa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	f003 0308 	and.w	r3, r3, #8
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d036      	beq.n	8012040 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	695b      	ldr	r3, [r3, #20]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d016      	beq.n	8012008 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011fda:	4b15      	ldr	r3, [pc, #84]	@ (8012030 <HAL_RCC_OscConfig+0x27c>)
 8011fdc:	2201      	movs	r2, #1
 8011fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011fe0:	f7fe fec0 	bl	8010d64 <HAL_GetTick>
 8011fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011fe6:	e008      	b.n	8011ffa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011fe8:	f7fe febc 	bl	8010d64 <HAL_GetTick>
 8011fec:	4602      	mov	r2, r0
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	1ad3      	subs	r3, r2, r3
 8011ff2:	2b02      	cmp	r3, #2
 8011ff4:	d901      	bls.n	8011ffa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8011ff6:	2303      	movs	r3, #3
 8011ff8:	e173      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8012028 <HAL_RCC_OscConfig+0x274>)
 8011ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ffe:	f003 0302 	and.w	r3, r3, #2
 8012002:	2b00      	cmp	r3, #0
 8012004:	d0f0      	beq.n	8011fe8 <HAL_RCC_OscConfig+0x234>
 8012006:	e01b      	b.n	8012040 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012008:	4b09      	ldr	r3, [pc, #36]	@ (8012030 <HAL_RCC_OscConfig+0x27c>)
 801200a:	2200      	movs	r2, #0
 801200c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801200e:	f7fe fea9 	bl	8010d64 <HAL_GetTick>
 8012012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012014:	e00e      	b.n	8012034 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012016:	f7fe fea5 	bl	8010d64 <HAL_GetTick>
 801201a:	4602      	mov	r2, r0
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b02      	cmp	r3, #2
 8012022:	d907      	bls.n	8012034 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8012024:	2303      	movs	r3, #3
 8012026:	e15c      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
 8012028:	40023800 	.word	0x40023800
 801202c:	42470000 	.word	0x42470000
 8012030:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012034:	4b8a      	ldr	r3, [pc, #552]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012038:	f003 0302 	and.w	r3, r3, #2
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1ea      	bne.n	8012016 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f003 0304 	and.w	r3, r3, #4
 8012048:	2b00      	cmp	r3, #0
 801204a:	f000 8097 	beq.w	801217c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801204e:	2300      	movs	r3, #0
 8012050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012052:	4b83      	ldr	r3, [pc, #524]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801205a:	2b00      	cmp	r3, #0
 801205c:	d10f      	bne.n	801207e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801205e:	2300      	movs	r3, #0
 8012060:	60bb      	str	r3, [r7, #8]
 8012062:	4b7f      	ldr	r3, [pc, #508]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012066:	4a7e      	ldr	r2, [pc, #504]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801206c:	6413      	str	r3, [r2, #64]	@ 0x40
 801206e:	4b7c      	ldr	r3, [pc, #496]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012076:	60bb      	str	r3, [r7, #8]
 8012078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801207a:	2301      	movs	r3, #1
 801207c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801207e:	4b79      	ldr	r3, [pc, #484]	@ (8012264 <HAL_RCC_OscConfig+0x4b0>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012086:	2b00      	cmp	r3, #0
 8012088:	d118      	bne.n	80120bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801208a:	4b76      	ldr	r3, [pc, #472]	@ (8012264 <HAL_RCC_OscConfig+0x4b0>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4a75      	ldr	r2, [pc, #468]	@ (8012264 <HAL_RCC_OscConfig+0x4b0>)
 8012090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012096:	f7fe fe65 	bl	8010d64 <HAL_GetTick>
 801209a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801209c:	e008      	b.n	80120b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801209e:	f7fe fe61 	bl	8010d64 <HAL_GetTick>
 80120a2:	4602      	mov	r2, r0
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	1ad3      	subs	r3, r2, r3
 80120a8:	2b02      	cmp	r3, #2
 80120aa:	d901      	bls.n	80120b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80120ac:	2303      	movs	r3, #3
 80120ae:	e118      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80120b0:	4b6c      	ldr	r3, [pc, #432]	@ (8012264 <HAL_RCC_OscConfig+0x4b0>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d0f0      	beq.n	801209e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d106      	bne.n	80120d2 <HAL_RCC_OscConfig+0x31e>
 80120c4:	4b66      	ldr	r3, [pc, #408]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120c8:	4a65      	ldr	r2, [pc, #404]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120ca:	f043 0301 	orr.w	r3, r3, #1
 80120ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80120d0:	e01c      	b.n	801210c <HAL_RCC_OscConfig+0x358>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	2b05      	cmp	r3, #5
 80120d8:	d10c      	bne.n	80120f4 <HAL_RCC_OscConfig+0x340>
 80120da:	4b61      	ldr	r3, [pc, #388]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120de:	4a60      	ldr	r2, [pc, #384]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120e0:	f043 0304 	orr.w	r3, r3, #4
 80120e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80120e6:	4b5e      	ldr	r3, [pc, #376]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120ea:	4a5d      	ldr	r2, [pc, #372]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120ec:	f043 0301 	orr.w	r3, r3, #1
 80120f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80120f2:	e00b      	b.n	801210c <HAL_RCC_OscConfig+0x358>
 80120f4:	4b5a      	ldr	r3, [pc, #360]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120f8:	4a59      	ldr	r2, [pc, #356]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80120fa:	f023 0301 	bic.w	r3, r3, #1
 80120fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8012100:	4b57      	ldr	r3, [pc, #348]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012104:	4a56      	ldr	r2, [pc, #344]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012106:	f023 0304 	bic.w	r3, r3, #4
 801210a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d015      	beq.n	8012140 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012114:	f7fe fe26 	bl	8010d64 <HAL_GetTick>
 8012118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801211a:	e00a      	b.n	8012132 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801211c:	f7fe fe22 	bl	8010d64 <HAL_GetTick>
 8012120:	4602      	mov	r2, r0
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	1ad3      	subs	r3, r2, r3
 8012126:	f241 3288 	movw	r2, #5000	@ 0x1388
 801212a:	4293      	cmp	r3, r2
 801212c:	d901      	bls.n	8012132 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801212e:	2303      	movs	r3, #3
 8012130:	e0d7      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012132:	4b4b      	ldr	r3, [pc, #300]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012136:	f003 0302 	and.w	r3, r3, #2
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0ee      	beq.n	801211c <HAL_RCC_OscConfig+0x368>
 801213e:	e014      	b.n	801216a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012140:	f7fe fe10 	bl	8010d64 <HAL_GetTick>
 8012144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012146:	e00a      	b.n	801215e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012148:	f7fe fe0c 	bl	8010d64 <HAL_GetTick>
 801214c:	4602      	mov	r2, r0
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012156:	4293      	cmp	r3, r2
 8012158:	d901      	bls.n	801215e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801215a:	2303      	movs	r3, #3
 801215c:	e0c1      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801215e:	4b40      	ldr	r3, [pc, #256]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012162:	f003 0302 	and.w	r3, r3, #2
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1ee      	bne.n	8012148 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	2b01      	cmp	r3, #1
 801216e:	d105      	bne.n	801217c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012170:	4b3b      	ldr	r3, [pc, #236]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012174:	4a3a      	ldr	r2, [pc, #232]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801217a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	699b      	ldr	r3, [r3, #24]
 8012180:	2b00      	cmp	r3, #0
 8012182:	f000 80ad 	beq.w	80122e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012186:	4b36      	ldr	r3, [pc, #216]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	f003 030c 	and.w	r3, r3, #12
 801218e:	2b08      	cmp	r3, #8
 8012190:	d060      	beq.n	8012254 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	699b      	ldr	r3, [r3, #24]
 8012196:	2b02      	cmp	r3, #2
 8012198:	d145      	bne.n	8012226 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801219a:	4b33      	ldr	r3, [pc, #204]	@ (8012268 <HAL_RCC_OscConfig+0x4b4>)
 801219c:	2200      	movs	r2, #0
 801219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121a0:	f7fe fde0 	bl	8010d64 <HAL_GetTick>
 80121a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80121a6:	e008      	b.n	80121ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80121a8:	f7fe fddc 	bl	8010d64 <HAL_GetTick>
 80121ac:	4602      	mov	r2, r0
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	2b02      	cmp	r3, #2
 80121b4:	d901      	bls.n	80121ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80121b6:	2303      	movs	r3, #3
 80121b8:	e093      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80121ba:	4b29      	ldr	r3, [pc, #164]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d1f0      	bne.n	80121a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	69da      	ldr	r2, [r3, #28]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6a1b      	ldr	r3, [r3, #32]
 80121ce:	431a      	orrs	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121d4:	019b      	lsls	r3, r3, #6
 80121d6:	431a      	orrs	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121dc:	085b      	lsrs	r3, r3, #1
 80121de:	3b01      	subs	r3, #1
 80121e0:	041b      	lsls	r3, r3, #16
 80121e2:	431a      	orrs	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121e8:	061b      	lsls	r3, r3, #24
 80121ea:	431a      	orrs	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121f0:	071b      	lsls	r3, r3, #28
 80121f2:	491b      	ldr	r1, [pc, #108]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 80121f4:	4313      	orrs	r3, r2
 80121f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80121f8:	4b1b      	ldr	r3, [pc, #108]	@ (8012268 <HAL_RCC_OscConfig+0x4b4>)
 80121fa:	2201      	movs	r2, #1
 80121fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121fe:	f7fe fdb1 	bl	8010d64 <HAL_GetTick>
 8012202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012204:	e008      	b.n	8012218 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012206:	f7fe fdad 	bl	8010d64 <HAL_GetTick>
 801220a:	4602      	mov	r2, r0
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	2b02      	cmp	r3, #2
 8012212:	d901      	bls.n	8012218 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8012214:	2303      	movs	r3, #3
 8012216:	e064      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012218:	4b11      	ldr	r3, [pc, #68]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012220:	2b00      	cmp	r3, #0
 8012222:	d0f0      	beq.n	8012206 <HAL_RCC_OscConfig+0x452>
 8012224:	e05c      	b.n	80122e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012226:	4b10      	ldr	r3, [pc, #64]	@ (8012268 <HAL_RCC_OscConfig+0x4b4>)
 8012228:	2200      	movs	r2, #0
 801222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801222c:	f7fe fd9a 	bl	8010d64 <HAL_GetTick>
 8012230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012232:	e008      	b.n	8012246 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012234:	f7fe fd96 	bl	8010d64 <HAL_GetTick>
 8012238:	4602      	mov	r2, r0
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	2b02      	cmp	r3, #2
 8012240:	d901      	bls.n	8012246 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8012242:	2303      	movs	r3, #3
 8012244:	e04d      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012246:	4b06      	ldr	r3, [pc, #24]	@ (8012260 <HAL_RCC_OscConfig+0x4ac>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1f0      	bne.n	8012234 <HAL_RCC_OscConfig+0x480>
 8012252:	e045      	b.n	80122e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	699b      	ldr	r3, [r3, #24]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d107      	bne.n	801226c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801225c:	2301      	movs	r3, #1
 801225e:	e040      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
 8012260:	40023800 	.word	0x40023800
 8012264:	40007000 	.word	0x40007000
 8012268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801226c:	4b1f      	ldr	r3, [pc, #124]	@ (80122ec <HAL_RCC_OscConfig+0x538>)
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	699b      	ldr	r3, [r3, #24]
 8012276:	2b01      	cmp	r3, #1
 8012278:	d030      	beq.n	80122dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012284:	429a      	cmp	r2, r3
 8012286:	d129      	bne.n	80122dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012292:	429a      	cmp	r2, r3
 8012294:	d122      	bne.n	80122dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801229c:	4013      	ands	r3, r2
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80122a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d119      	bne.n	80122dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122b2:	085b      	lsrs	r3, r3, #1
 80122b4:	3b01      	subs	r3, #1
 80122b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d10f      	bne.n	80122dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d107      	bne.n	80122dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80122d8:	429a      	cmp	r2, r3
 80122da:	d001      	beq.n	80122e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80122dc:	2301      	movs	r3, #1
 80122de:	e000      	b.n	80122e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3718      	adds	r7, #24
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	40023800 	.word	0x40023800

080122f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80122fe:	2301      	movs	r3, #1
 8012300:	e07b      	b.n	80123fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012306:	2b00      	cmp	r3, #0
 8012308:	d108      	bne.n	801231c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012312:	d009      	beq.n	8012328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	61da      	str	r2, [r3, #28]
 801231a:	e005      	b.n	8012328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b00      	cmp	r3, #0
 8012338:	d106      	bne.n	8012348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2200      	movs	r2, #0
 801233e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f7fe f8bc 	bl	80104c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2202      	movs	r2, #2
 801234c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801235e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8012370:	431a      	orrs	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801237a:	431a      	orrs	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	691b      	ldr	r3, [r3, #16]
 8012380:	f003 0302 	and.w	r3, r3, #2
 8012384:	431a      	orrs	r2, r3
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	f003 0301 	and.w	r3, r3, #1
 801238e:	431a      	orrs	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	699b      	ldr	r3, [r3, #24]
 8012394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012398:	431a      	orrs	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80123a2:	431a      	orrs	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6a1b      	ldr	r3, [r3, #32]
 80123a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123ac:	ea42 0103 	orr.w	r1, r2, r3
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	430a      	orrs	r2, r1
 80123be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	699b      	ldr	r3, [r3, #24]
 80123c4:	0c1b      	lsrs	r3, r3, #16
 80123c6:	f003 0104 	and.w	r1, r3, #4
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123ce:	f003 0210 	and.w	r2, r3, #16
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	430a      	orrs	r2, r1
 80123d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	69da      	ldr	r2, [r3, #28]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80123e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2201      	movs	r2, #1
 80123f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b082      	sub	sp, #8
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d101      	bne.n	8012414 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012410:	2301      	movs	r3, #1
 8012412:	e01a      	b.n	801244a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2202      	movs	r2, #2
 8012418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801242a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7fe f931 	bl	8010694 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8012448:	2300      	movs	r3, #0
}
 801244a:	4618      	mov	r0, r3
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}

08012452 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012452:	b580      	push	{r7, lr}
 8012454:	b088      	sub	sp, #32
 8012456:	af00      	add	r7, sp, #0
 8012458:	60f8      	str	r0, [r7, #12]
 801245a:	60b9      	str	r1, [r7, #8]
 801245c:	603b      	str	r3, [r7, #0]
 801245e:	4613      	mov	r3, r2
 8012460:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012462:	f7fe fc7f 	bl	8010d64 <HAL_GetTick>
 8012466:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8012468:	88fb      	ldrh	r3, [r7, #6]
 801246a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b01      	cmp	r3, #1
 8012476:	d001      	beq.n	801247c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8012478:	2302      	movs	r3, #2
 801247a:	e12a      	b.n	80126d2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d002      	beq.n	8012488 <HAL_SPI_Transmit+0x36>
 8012482:	88fb      	ldrh	r3, [r7, #6]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d101      	bne.n	801248c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8012488:	2301      	movs	r3, #1
 801248a:	e122      	b.n	80126d2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012492:	2b01      	cmp	r3, #1
 8012494:	d101      	bne.n	801249a <HAL_SPI_Transmit+0x48>
 8012496:	2302      	movs	r3, #2
 8012498:	e11b      	b.n	80126d2 <HAL_SPI_Transmit+0x280>
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2201      	movs	r2, #1
 801249e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2203      	movs	r2, #3
 80124a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2200      	movs	r2, #0
 80124ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	68ba      	ldr	r2, [r7, #8]
 80124b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	88fa      	ldrh	r2, [r7, #6]
 80124ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	88fa      	ldrh	r2, [r7, #6]
 80124c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2200      	movs	r2, #0
 80124c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2200      	movs	r2, #0
 80124cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2200      	movs	r2, #0
 80124d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2200      	movs	r2, #0
 80124d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2200      	movs	r2, #0
 80124de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	689b      	ldr	r3, [r3, #8]
 80124e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80124e8:	d10f      	bne.n	801250a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80124f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012514:	2b40      	cmp	r3, #64	@ 0x40
 8012516:	d007      	beq.n	8012528 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012530:	d152      	bne.n	80125d8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d002      	beq.n	8012540 <HAL_SPI_Transmit+0xee>
 801253a:	8b7b      	ldrh	r3, [r7, #26]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d145      	bne.n	80125cc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012544:	881a      	ldrh	r2, [r3, #0]
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012550:	1c9a      	adds	r2, r3, #2
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801255a:	b29b      	uxth	r3, r3
 801255c:	3b01      	subs	r3, #1
 801255e:	b29a      	uxth	r2, r3
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012564:	e032      	b.n	80125cc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	f003 0302 	and.w	r3, r3, #2
 8012570:	2b02      	cmp	r3, #2
 8012572:	d112      	bne.n	801259a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012578:	881a      	ldrh	r2, [r3, #0]
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012584:	1c9a      	adds	r2, r3, #2
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801258e:	b29b      	uxth	r3, r3
 8012590:	3b01      	subs	r3, #1
 8012592:	b29a      	uxth	r2, r3
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	86da      	strh	r2, [r3, #54]	@ 0x36
 8012598:	e018      	b.n	80125cc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801259a:	f7fe fbe3 	bl	8010d64 <HAL_GetTick>
 801259e:	4602      	mov	r2, r0
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	683a      	ldr	r2, [r7, #0]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d803      	bhi.n	80125b2 <HAL_SPI_Transmit+0x160>
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b0:	d102      	bne.n	80125b8 <HAL_SPI_Transmit+0x166>
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d109      	bne.n	80125cc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2201      	movs	r2, #1
 80125bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2200      	movs	r2, #0
 80125c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80125c8:	2303      	movs	r3, #3
 80125ca:	e082      	b.n	80126d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d1c7      	bne.n	8012566 <HAL_SPI_Transmit+0x114>
 80125d6:	e053      	b.n	8012680 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <HAL_SPI_Transmit+0x194>
 80125e0:	8b7b      	ldrh	r3, [r7, #26]
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d147      	bne.n	8012676 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	330c      	adds	r3, #12
 80125f0:	7812      	ldrb	r2, [r2, #0]
 80125f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125f8:	1c5a      	adds	r2, r3, #1
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012602:	b29b      	uxth	r3, r3
 8012604:	3b01      	subs	r3, #1
 8012606:	b29a      	uxth	r2, r3
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 801260c:	e033      	b.n	8012676 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	689b      	ldr	r3, [r3, #8]
 8012614:	f003 0302 	and.w	r3, r3, #2
 8012618:	2b02      	cmp	r3, #2
 801261a:	d113      	bne.n	8012644 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	330c      	adds	r3, #12
 8012626:	7812      	ldrb	r2, [r2, #0]
 8012628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801262e:	1c5a      	adds	r2, r3, #1
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012638:	b29b      	uxth	r3, r3
 801263a:	3b01      	subs	r3, #1
 801263c:	b29a      	uxth	r2, r3
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	86da      	strh	r2, [r3, #54]	@ 0x36
 8012642:	e018      	b.n	8012676 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012644:	f7fe fb8e 	bl	8010d64 <HAL_GetTick>
 8012648:	4602      	mov	r2, r0
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	1ad3      	subs	r3, r2, r3
 801264e:	683a      	ldr	r2, [r7, #0]
 8012650:	429a      	cmp	r2, r3
 8012652:	d803      	bhi.n	801265c <HAL_SPI_Transmit+0x20a>
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801265a:	d102      	bne.n	8012662 <HAL_SPI_Transmit+0x210>
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d109      	bne.n	8012676 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2201      	movs	r2, #1
 8012666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2200      	movs	r2, #0
 801266e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8012672:	2303      	movs	r3, #3
 8012674:	e02d      	b.n	80126d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801267a:	b29b      	uxth	r3, r3
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1c6      	bne.n	801260e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012680:	69fa      	ldr	r2, [r7, #28]
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f000 ff31 	bl	80134ec <SPI_EndRxTxTransaction>
 801268a:	4603      	mov	r3, r0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2220      	movs	r2, #32
 8012694:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d10a      	bne.n	80126b4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801269e:	2300      	movs	r3, #0
 80126a0:	617b      	str	r3, [r7, #20]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	617b      	str	r3, [r7, #20]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	689b      	ldr	r3, [r3, #8]
 80126b0:	617b      	str	r3, [r7, #20]
 80126b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d001      	beq.n	80126d0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80126cc:	2301      	movs	r3, #1
 80126ce:	e000      	b.n	80126d2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80126d0:	2300      	movs	r3, #0
  }
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3720      	adds	r7, #32
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b088      	sub	sp, #32
 80126de:	af02      	add	r7, sp, #8
 80126e0:	60f8      	str	r0, [r7, #12]
 80126e2:	60b9      	str	r1, [r7, #8]
 80126e4:	603b      	str	r3, [r7, #0]
 80126e6:	4613      	mov	r3, r2
 80126e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d001      	beq.n	80126fa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80126f6:	2302      	movs	r3, #2
 80126f8:	e104      	b.n	8012904 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <HAL_SPI_Receive+0x2c>
 8012700:	88fb      	ldrh	r3, [r7, #6]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d101      	bne.n	801270a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8012706:	2301      	movs	r3, #1
 8012708:	e0fc      	b.n	8012904 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012712:	d112      	bne.n	801273a <HAL_SPI_Receive+0x60>
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d10e      	bne.n	801273a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2204      	movs	r2, #4
 8012720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012724:	88fa      	ldrh	r2, [r7, #6]
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	4613      	mov	r3, r2
 801272c:	68ba      	ldr	r2, [r7, #8]
 801272e:	68b9      	ldr	r1, [r7, #8]
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f000 f8eb 	bl	801290c <HAL_SPI_TransmitReceive>
 8012736:	4603      	mov	r3, r0
 8012738:	e0e4      	b.n	8012904 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801273a:	f7fe fb13 	bl	8010d64 <HAL_GetTick>
 801273e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012746:	2b01      	cmp	r3, #1
 8012748:	d101      	bne.n	801274e <HAL_SPI_Receive+0x74>
 801274a:	2302      	movs	r3, #2
 801274c:	e0da      	b.n	8012904 <HAL_SPI_Receive+0x22a>
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2201      	movs	r2, #1
 8012752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2204      	movs	r2, #4
 801275a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2200      	movs	r2, #0
 8012762:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	68ba      	ldr	r2, [r7, #8]
 8012768:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	88fa      	ldrh	r2, [r7, #6]
 801276e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	88fa      	ldrh	r2, [r7, #6]
 8012774:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2200      	movs	r2, #0
 801277a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2200      	movs	r2, #0
 8012780:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2200      	movs	r2, #0
 8012786:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	2200      	movs	r2, #0
 801278c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801279c:	d10f      	bne.n	80127be <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80127ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80127bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127c8:	2b40      	cmp	r3, #64	@ 0x40
 80127ca:	d007      	beq.n	80127dc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80127da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d170      	bne.n	80128c6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80127e4:	e035      	b.n	8012852 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	f003 0301 	and.w	r3, r3, #1
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	d115      	bne.n	8012820 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f103 020c 	add.w	r2, r3, #12
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012800:	7812      	ldrb	r2, [r2, #0]
 8012802:	b2d2      	uxtb	r2, r2
 8012804:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801280a:	1c5a      	adds	r2, r3, #1
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012814:	b29b      	uxth	r3, r3
 8012816:	3b01      	subs	r3, #1
 8012818:	b29a      	uxth	r2, r3
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801281e:	e018      	b.n	8012852 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012820:	f7fe faa0 	bl	8010d64 <HAL_GetTick>
 8012824:	4602      	mov	r2, r0
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	683a      	ldr	r2, [r7, #0]
 801282c:	429a      	cmp	r2, r3
 801282e:	d803      	bhi.n	8012838 <HAL_SPI_Receive+0x15e>
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012836:	d102      	bne.n	801283e <HAL_SPI_Receive+0x164>
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d109      	bne.n	8012852 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	2201      	movs	r2, #1
 8012842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2200      	movs	r2, #0
 801284a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801284e:	2303      	movs	r3, #3
 8012850:	e058      	b.n	8012904 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012856:	b29b      	uxth	r3, r3
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1c4      	bne.n	80127e6 <HAL_SPI_Receive+0x10c>
 801285c:	e038      	b.n	80128d0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	f003 0301 	and.w	r3, r3, #1
 8012868:	2b01      	cmp	r3, #1
 801286a:	d113      	bne.n	8012894 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	68da      	ldr	r2, [r3, #12]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012876:	b292      	uxth	r2, r2
 8012878:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801287e:	1c9a      	adds	r2, r3, #2
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012888:	b29b      	uxth	r3, r3
 801288a:	3b01      	subs	r3, #1
 801288c:	b29a      	uxth	r2, r3
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012892:	e018      	b.n	80128c6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012894:	f7fe fa66 	bl	8010d64 <HAL_GetTick>
 8012898:	4602      	mov	r2, r0
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	1ad3      	subs	r3, r2, r3
 801289e:	683a      	ldr	r2, [r7, #0]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d803      	bhi.n	80128ac <HAL_SPI_Receive+0x1d2>
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128aa:	d102      	bne.n	80128b2 <HAL_SPI_Receive+0x1d8>
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d109      	bne.n	80128c6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2201      	movs	r2, #1
 80128b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80128c2:	2303      	movs	r3, #3
 80128c4:	e01e      	b.n	8012904 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1c6      	bne.n	801285e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	6839      	ldr	r1, [r7, #0]
 80128d4:	68f8      	ldr	r0, [r7, #12]
 80128d6:	f000 fda3 	bl	8013420 <SPI_EndRxTransaction>
 80128da:	4603      	mov	r3, r0
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d002      	beq.n	80128e6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2220      	movs	r2, #32
 80128e4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2201      	movs	r2, #1
 80128ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d001      	beq.n	8012902 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80128fe:	2301      	movs	r3, #1
 8012900:	e000      	b.n	8012904 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8012902:	2300      	movs	r3, #0
  }
}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b08a      	sub	sp, #40	@ 0x28
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
 8012918:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801291a:	2301      	movs	r3, #1
 801291c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801291e:	f7fe fa21 	bl	8010d64 <HAL_GetTick>
 8012922:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801292a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8012932:	887b      	ldrh	r3, [r7, #2]
 8012934:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012936:	7ffb      	ldrb	r3, [r7, #31]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d00c      	beq.n	8012956 <HAL_SPI_TransmitReceive+0x4a>
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012942:	d106      	bne.n	8012952 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	689b      	ldr	r3, [r3, #8]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <HAL_SPI_TransmitReceive+0x46>
 801294c:	7ffb      	ldrb	r3, [r7, #31]
 801294e:	2b04      	cmp	r3, #4
 8012950:	d001      	beq.n	8012956 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8012952:	2302      	movs	r3, #2
 8012954:	e17f      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d005      	beq.n	8012968 <HAL_SPI_TransmitReceive+0x5c>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d002      	beq.n	8012968 <HAL_SPI_TransmitReceive+0x5c>
 8012962:	887b      	ldrh	r3, [r7, #2]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d101      	bne.n	801296c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8012968:	2301      	movs	r3, #1
 801296a:	e174      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012972:	2b01      	cmp	r3, #1
 8012974:	d101      	bne.n	801297a <HAL_SPI_TransmitReceive+0x6e>
 8012976:	2302      	movs	r3, #2
 8012978:	e16d      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2201      	movs	r2, #1
 801297e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012988:	b2db      	uxtb	r3, r3
 801298a:	2b04      	cmp	r3, #4
 801298c:	d003      	beq.n	8012996 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2205      	movs	r2, #5
 8012992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2200      	movs	r2, #0
 801299a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	887a      	ldrh	r2, [r7, #2]
 80129a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	887a      	ldrh	r2, [r7, #2]
 80129ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	68ba      	ldr	r2, [r7, #8]
 80129b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	887a      	ldrh	r2, [r7, #2]
 80129b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	887a      	ldrh	r2, [r7, #2]
 80129be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2200      	movs	r2, #0
 80129c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2200      	movs	r2, #0
 80129ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129d6:	2b40      	cmp	r3, #64	@ 0x40
 80129d8:	d007      	beq.n	80129ea <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80129e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80129f2:	d17e      	bne.n	8012af2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d002      	beq.n	8012a02 <HAL_SPI_TransmitReceive+0xf6>
 80129fc:	8afb      	ldrh	r3, [r7, #22]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d16c      	bne.n	8012adc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a06:	881a      	ldrh	r2, [r3, #0]
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a12:	1c9a      	adds	r2, r3, #2
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012a26:	e059      	b.n	8012adc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	689b      	ldr	r3, [r3, #8]
 8012a2e:	f003 0302 	and.w	r3, r3, #2
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	d11b      	bne.n	8012a6e <HAL_SPI_TransmitReceive+0x162>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d016      	beq.n	8012a6e <HAL_SPI_TransmitReceive+0x162>
 8012a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d113      	bne.n	8012a6e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a4a:	881a      	ldrh	r2, [r3, #0]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a56:	1c9a      	adds	r2, r3, #2
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	3b01      	subs	r3, #1
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	689b      	ldr	r3, [r3, #8]
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d119      	bne.n	8012ab0 <HAL_SPI_TransmitReceive+0x1a4>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d014      	beq.n	8012ab0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	68da      	ldr	r2, [r3, #12]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a90:	b292      	uxth	r2, r2
 8012a92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a98:	1c9a      	adds	r2, r3, #2
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012aac:	2301      	movs	r3, #1
 8012aae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012ab0:	f7fe f958 	bl	8010d64 <HAL_GetTick>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d80d      	bhi.n	8012adc <HAL_SPI_TransmitReceive+0x1d0>
 8012ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac6:	d009      	beq.n	8012adc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2201      	movs	r2, #1
 8012acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8012ad8:	2303      	movs	r3, #3
 8012ada:	e0bc      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d1a0      	bne.n	8012a28 <HAL_SPI_TransmitReceive+0x11c>
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d19b      	bne.n	8012a28 <HAL_SPI_TransmitReceive+0x11c>
 8012af0:	e082      	b.n	8012bf8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d002      	beq.n	8012b00 <HAL_SPI_TransmitReceive+0x1f4>
 8012afa:	8afb      	ldrh	r3, [r7, #22]
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d171      	bne.n	8012be4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	330c      	adds	r3, #12
 8012b0a:	7812      	ldrb	r2, [r2, #0]
 8012b0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b12:	1c5a      	adds	r2, r3, #1
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	3b01      	subs	r3, #1
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b26:	e05d      	b.n	8012be4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	f003 0302 	and.w	r3, r3, #2
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d11c      	bne.n	8012b70 <HAL_SPI_TransmitReceive+0x264>
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d017      	beq.n	8012b70 <HAL_SPI_TransmitReceive+0x264>
 8012b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	d114      	bne.n	8012b70 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	330c      	adds	r3, #12
 8012b50:	7812      	ldrb	r2, [r2, #0]
 8012b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b58:	1c5a      	adds	r2, r3, #1
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	3b01      	subs	r3, #1
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	689b      	ldr	r3, [r3, #8]
 8012b76:	f003 0301 	and.w	r3, r3, #1
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d119      	bne.n	8012bb2 <HAL_SPI_TransmitReceive+0x2a6>
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d014      	beq.n	8012bb2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	68da      	ldr	r2, [r3, #12]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b92:	b2d2      	uxtb	r2, r2
 8012b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012bae:	2301      	movs	r3, #1
 8012bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012bb2:	f7fe f8d7 	bl	8010d64 <HAL_GetTick>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	6a3b      	ldr	r3, [r7, #32]
 8012bba:	1ad3      	subs	r3, r2, r3
 8012bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d803      	bhi.n	8012bca <HAL_SPI_TransmitReceive+0x2be>
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc8:	d102      	bne.n	8012bd0 <HAL_SPI_TransmitReceive+0x2c4>
 8012bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d109      	bne.n	8012be4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8012be0:	2303      	movs	r3, #3
 8012be2:	e038      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d19c      	bne.n	8012b28 <HAL_SPI_TransmitReceive+0x21c>
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d197      	bne.n	8012b28 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012bf8:	6a3a      	ldr	r2, [r7, #32]
 8012bfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012bfc:	68f8      	ldr	r0, [r7, #12]
 8012bfe:	f000 fc75 	bl	80134ec <SPI_EndRxTxTransaction>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d008      	beq.n	8012c1a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2220      	movs	r2, #32
 8012c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2200      	movs	r2, #0
 8012c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8012c16:	2301      	movs	r3, #1
 8012c18:	e01d      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	689b      	ldr	r3, [r3, #8]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d10a      	bne.n	8012c38 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012c22:	2300      	movs	r3, #0
 8012c24:	613b      	str	r3, [r7, #16]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	613b      	str	r3, [r7, #16]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	613b      	str	r3, [r7, #16]
 8012c36:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2201      	movs	r2, #1
 8012c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	2200      	movs	r2, #0
 8012c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d001      	beq.n	8012c54 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8012c50:	2301      	movs	r3, #1
 8012c52:	e000      	b.n	8012c56 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8012c54:	2300      	movs	r3, #0
  }
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3728      	adds	r7, #40	@ 0x28
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	60b9      	str	r1, [r7, #8]
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d001      	beq.n	8012c7e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8012c7a:	2302      	movs	r3, #2
 8012c7c:	e07f      	b.n	8012d7e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d002      	beq.n	8012c8a <HAL_SPI_Receive_IT+0x2a>
 8012c84:	88fb      	ldrh	r3, [r7, #6]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d101      	bne.n	8012c8e <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e077      	b.n	8012d7e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	689b      	ldr	r3, [r3, #8]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d110      	bne.n	8012cb8 <HAL_SPI_Receive_IT+0x58>
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012c9e:	d10b      	bne.n	8012cb8 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2204      	movs	r2, #4
 8012ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8012ca8:	88fb      	ldrh	r3, [r7, #6]
 8012caa:	68ba      	ldr	r2, [r7, #8]
 8012cac:	68b9      	ldr	r1, [r7, #8]
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f000 f86e 	bl	8012d90 <HAL_SPI_TransmitReceive_IT>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	e062      	b.n	8012d7e <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d101      	bne.n	8012cc6 <HAL_SPI_Receive_IT+0x66>
 8012cc2:	2302      	movs	r3, #2
 8012cc4:	e05b      	b.n	8012d7e <HAL_SPI_Receive_IT+0x11e>
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2204      	movs	r2, #4
 8012cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	68ba      	ldr	r2, [r7, #8]
 8012ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	88fa      	ldrh	r2, [r7, #6]
 8012ce6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	88fa      	ldrh	r2, [r7, #6]
 8012cec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2200      	movs	r2, #0
 8012d04:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d003      	beq.n	8012d16 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	4a1d      	ldr	r2, [pc, #116]	@ (8012d88 <HAL_SPI_Receive_IT+0x128>)
 8012d12:	641a      	str	r2, [r3, #64]	@ 0x40
 8012d14:	e002      	b.n	8012d1c <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	4a1c      	ldr	r2, [pc, #112]	@ (8012d8c <HAL_SPI_Receive_IT+0x12c>)
 8012d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d24:	d10f      	bne.n	8012d46 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012d44:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d50:	2b40      	cmp	r3, #64	@ 0x40
 8012d52:	d007      	beq.n	8012d64 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012d62:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	2200      	movs	r2, #0
 8012d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	685a      	ldr	r2, [r3, #4]
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8012d7a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012d7c:	2300      	movs	r3, #0
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	080132c9 	.word	0x080132c9
 8012d8c:	0801327f 	.word	0x0801327f

08012d90 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b087      	sub	sp, #28
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012da4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012dac:	7dfb      	ldrb	r3, [r7, #23]
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d00c      	beq.n	8012dcc <HAL_SPI_TransmitReceive_IT+0x3c>
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012db8:	d106      	bne.n	8012dc8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	689b      	ldr	r3, [r3, #8]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d102      	bne.n	8012dc8 <HAL_SPI_TransmitReceive_IT+0x38>
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	d001      	beq.n	8012dcc <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8012dc8:	2302      	movs	r3, #2
 8012dca:	e061      	b.n	8012e90 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d005      	beq.n	8012dde <HAL_SPI_TransmitReceive_IT+0x4e>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d002      	beq.n	8012dde <HAL_SPI_TransmitReceive_IT+0x4e>
 8012dd8:	887b      	ldrh	r3, [r7, #2]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d101      	bne.n	8012de2 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8012dde:	2301      	movs	r3, #1
 8012de0:	e056      	b.n	8012e90 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d101      	bne.n	8012df0 <HAL_SPI_TransmitReceive_IT+0x60>
 8012dec:	2302      	movs	r3, #2
 8012dee:	e04f      	b.n	8012e90 <HAL_SPI_TransmitReceive_IT+0x100>
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2201      	movs	r2, #1
 8012df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	2b04      	cmp	r3, #4
 8012e02:	d003      	beq.n	8012e0c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2205      	movs	r2, #5
 8012e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	887a      	ldrh	r2, [r7, #2]
 8012e1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	887a      	ldrh	r2, [r7, #2]
 8012e22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	887a      	ldrh	r2, [r7, #2]
 8012e2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	887a      	ldrh	r2, [r7, #2]
 8012e34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d006      	beq.n	8012e4c <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	4a16      	ldr	r2, [pc, #88]	@ (8012e9c <HAL_SPI_TransmitReceive_IT+0x10c>)
 8012e42:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	4a16      	ldr	r2, [pc, #88]	@ (8012ea0 <HAL_SPI_TransmitReceive_IT+0x110>)
 8012e48:	645a      	str	r2, [r3, #68]	@ 0x44
 8012e4a:	e005      	b.n	8012e58 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	4a15      	ldr	r2, [pc, #84]	@ (8012ea4 <HAL_SPI_TransmitReceive_IT+0x114>)
 8012e50:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	4a14      	ldr	r2, [pc, #80]	@ (8012ea8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8012e56:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e62:	2b40      	cmp	r3, #64	@ 0x40
 8012e64:	d007      	beq.n	8012e76 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e74:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	685a      	ldr	r2, [r3, #4]
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8012e8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012e8e:	2300      	movs	r3, #0
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	371c      	adds	r7, #28
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr
 8012e9c:	080131c1 	.word	0x080131c1
 8012ea0:	08013221 	.word	0x08013221
 8012ea4:	080130fd 	.word	0x080130fd
 8012ea8:	08013161 	.word	0x08013161

08012eac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b088      	sub	sp, #32
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	099b      	lsrs	r3, r3, #6
 8012ec8:	f003 0301 	and.w	r3, r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d10f      	bne.n	8012ef0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00a      	beq.n	8012ef0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	099b      	lsrs	r3, r3, #6
 8012ede:	f003 0301 	and.w	r3, r3, #1
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d004      	beq.n	8012ef0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	4798      	blx	r3
    return;
 8012eee:	e0d7      	b.n	80130a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	085b      	lsrs	r3, r3, #1
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d00a      	beq.n	8012f12 <HAL_SPI_IRQHandler+0x66>
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	09db      	lsrs	r3, r3, #7
 8012f00:	f003 0301 	and.w	r3, r3, #1
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d004      	beq.n	8012f12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	4798      	blx	r3
    return;
 8012f10:	e0c6      	b.n	80130a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012f12:	69bb      	ldr	r3, [r7, #24]
 8012f14:	095b      	lsrs	r3, r3, #5
 8012f16:	f003 0301 	and.w	r3, r3, #1
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d10c      	bne.n	8012f38 <HAL_SPI_IRQHandler+0x8c>
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	099b      	lsrs	r3, r3, #6
 8012f22:	f003 0301 	and.w	r3, r3, #1
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d106      	bne.n	8012f38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	0a1b      	lsrs	r3, r3, #8
 8012f2e:	f003 0301 	and.w	r3, r3, #1
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f000 80b4 	beq.w	80130a0 <HAL_SPI_IRQHandler+0x1f4>
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	095b      	lsrs	r3, r3, #5
 8012f3c:	f003 0301 	and.w	r3, r3, #1
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 80ad 	beq.w	80130a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	099b      	lsrs	r3, r3, #6
 8012f4a:	f003 0301 	and.w	r3, r3, #1
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d023      	beq.n	8012f9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	2b03      	cmp	r3, #3
 8012f5c:	d011      	beq.n	8012f82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f62:	f043 0204 	orr.w	r2, r3, #4
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	617b      	str	r3, [r7, #20]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	617b      	str	r3, [r7, #20]
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	e00b      	b.n	8012f9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f82:	2300      	movs	r3, #0
 8012f84:	613b      	str	r3, [r7, #16]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	613b      	str	r3, [r7, #16]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	613b      	str	r3, [r7, #16]
 8012f96:	693b      	ldr	r3, [r7, #16]
        return;
 8012f98:	e082      	b.n	80130a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	095b      	lsrs	r3, r3, #5
 8012f9e:	f003 0301 	and.w	r3, r3, #1
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d014      	beq.n	8012fd0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012faa:	f043 0201 	orr.w	r2, r3, #1
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	60fb      	str	r3, [r7, #12]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012fcc:	601a      	str	r2, [r3, #0]
 8012fce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8012fd0:	69bb      	ldr	r3, [r7, #24]
 8012fd2:	0a1b      	lsrs	r3, r3, #8
 8012fd4:	f003 0301 	and.w	r3, r3, #1
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d00c      	beq.n	8012ff6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fe0:	f043 0208 	orr.w	r2, r3, #8
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012fe8:	2300      	movs	r3, #0
 8012fea:	60bb      	str	r3, [r7, #8]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	60bb      	str	r3, [r7, #8]
 8012ff4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d04f      	beq.n	801309e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801300c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2201      	movs	r2, #1
 8013012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	f003 0302 	and.w	r3, r3, #2
 801301c:	2b00      	cmp	r3, #0
 801301e:	d104      	bne.n	801302a <HAL_SPI_IRQHandler+0x17e>
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	f003 0301 	and.w	r3, r3, #1
 8013026:	2b00      	cmp	r3, #0
 8013028:	d034      	beq.n	8013094 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	685a      	ldr	r2, [r3, #4]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f022 0203 	bic.w	r2, r2, #3
 8013038:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801303e:	2b00      	cmp	r3, #0
 8013040:	d011      	beq.n	8013066 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013046:	4a18      	ldr	r2, [pc, #96]	@ (80130a8 <HAL_SPI_IRQHandler+0x1fc>)
 8013048:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801304e:	4618      	mov	r0, r3
 8013050:	f7fe f83c 	bl	80110cc <HAL_DMA_Abort_IT>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d005      	beq.n	8013066 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801305e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801306a:	2b00      	cmp	r3, #0
 801306c:	d016      	beq.n	801309c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013072:	4a0d      	ldr	r2, [pc, #52]	@ (80130a8 <HAL_SPI_IRQHandler+0x1fc>)
 8013074:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801307a:	4618      	mov	r0, r3
 801307c:	f7fe f826 	bl	80110cc <HAL_DMA_Abort_IT>
 8013080:	4603      	mov	r3, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	d00a      	beq.n	801309c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801308a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8013092:	e003      	b.n	801309c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f000 f813 	bl	80130c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801309a:	e000      	b.n	801309e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801309c:	bf00      	nop
    return;
 801309e:	bf00      	nop
  }
}
 80130a0:	3720      	adds	r7, #32
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	080130d5 	.word	0x080130d5

080130ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b083      	sub	sp, #12
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80130b4:	bf00      	nop
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr

080130c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b083      	sub	sp, #12
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80130c8:	bf00      	nop
 80130ca:	370c      	adds	r7, #12
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr

080130d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2200      	movs	r2, #0
 80130e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2200      	movs	r2, #0
 80130ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	f7ff ffe6 	bl	80130c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80130f4:	bf00      	nop
 80130f6:	3710      	adds	r7, #16
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f103 020c 	add.w	r2, r3, #12
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013110:	7812      	ldrb	r2, [r2, #0]
 8013112:	b2d2      	uxtb	r2, r2
 8013114:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801311a:	1c5a      	adds	r2, r3, #1
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013124:	b29b      	uxth	r3, r3
 8013126:	3b01      	subs	r3, #1
 8013128:	b29a      	uxth	r2, r3
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013132:	b29b      	uxth	r3, r3
 8013134:	2b00      	cmp	r3, #0
 8013136:	d10f      	bne.n	8013158 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	685a      	ldr	r2, [r3, #4]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013146:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801314c:	b29b      	uxth	r3, r3
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f000 fa1e 	bl	8013594 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013158:	bf00      	nop
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	330c      	adds	r3, #12
 8013172:	7812      	ldrb	r2, [r2, #0]
 8013174:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801317a:	1c5a      	adds	r2, r3, #1
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013184:	b29b      	uxth	r3, r3
 8013186:	3b01      	subs	r3, #1
 8013188:	b29a      	uxth	r2, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013192:	b29b      	uxth	r3, r3
 8013194:	2b00      	cmp	r3, #0
 8013196:	d10f      	bne.n	80131b8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80131a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d102      	bne.n	80131b8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 f9ee 	bl	8013594 <SPI_CloseRxTx_ISR>
    }
  }
}
 80131b8:	bf00      	nop
 80131ba:	3708      	adds	r7, #8
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	68da      	ldr	r2, [r3, #12]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131d2:	b292      	uxth	r2, r2
 80131d4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131da:	1c9a      	adds	r2, r3, #2
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	3b01      	subs	r3, #1
 80131e8:	b29a      	uxth	r2, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d10f      	bne.n	8013218 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	685a      	ldr	r2, [r3, #4]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013206:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801320c:	b29b      	uxth	r3, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d102      	bne.n	8013218 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 f9be 	bl	8013594 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013218:	bf00      	nop
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801322c:	881a      	ldrh	r2, [r3, #0]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013238:	1c9a      	adds	r2, r3, #2
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013242:	b29b      	uxth	r3, r3
 8013244:	3b01      	subs	r3, #1
 8013246:	b29a      	uxth	r2, r3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013250:	b29b      	uxth	r3, r3
 8013252:	2b00      	cmp	r3, #0
 8013254:	d10f      	bne.n	8013276 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013264:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801326a:	b29b      	uxth	r3, r3
 801326c:	2b00      	cmp	r3, #0
 801326e:	d102      	bne.n	8013276 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f000 f98f 	bl	8013594 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013276:	bf00      	nop
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b082      	sub	sp, #8
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f103 020c 	add.w	r2, r3, #12
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013292:	7812      	ldrb	r2, [r2, #0]
 8013294:	b2d2      	uxtb	r2, r2
 8013296:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801329c:	1c5a      	adds	r2, r3, #1
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	3b01      	subs	r3, #1
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d102      	bne.n	80132c0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f000 f9de 	bl	801367c <SPI_CloseRx_ISR>
  }
}
 80132c0:	bf00      	nop
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	68da      	ldr	r2, [r3, #12]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132da:	b292      	uxth	r2, r2
 80132dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132e2:	1c9a      	adds	r2, r3, #2
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	3b01      	subs	r3, #1
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d102      	bne.n	8013306 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f000 f9bb 	bl	801367c <SPI_CloseRx_ISR>
  }
}
 8013306:	bf00      	nop
 8013308:	3708      	adds	r7, #8
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
	...

08013310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b088      	sub	sp, #32
 8013314:	af00      	add	r7, sp, #0
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	603b      	str	r3, [r7, #0]
 801331c:	4613      	mov	r3, r2
 801331e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013320:	f7fd fd20 	bl	8010d64 <HAL_GetTick>
 8013324:	4602      	mov	r2, r0
 8013326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013328:	1a9b      	subs	r3, r3, r2
 801332a:	683a      	ldr	r2, [r7, #0]
 801332c:	4413      	add	r3, r2
 801332e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013330:	f7fd fd18 	bl	8010d64 <HAL_GetTick>
 8013334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013336:	4b39      	ldr	r3, [pc, #228]	@ (801341c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	015b      	lsls	r3, r3, #5
 801333c:	0d1b      	lsrs	r3, r3, #20
 801333e:	69fa      	ldr	r2, [r7, #28]
 8013340:	fb02 f303 	mul.w	r3, r2, r3
 8013344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013346:	e055      	b.n	80133f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801334e:	d051      	beq.n	80133f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013350:	f7fd fd08 	bl	8010d64 <HAL_GetTick>
 8013354:	4602      	mov	r2, r0
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	69fa      	ldr	r2, [r7, #28]
 801335c:	429a      	cmp	r2, r3
 801335e:	d902      	bls.n	8013366 <SPI_WaitFlagStateUntilTimeout+0x56>
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d13d      	bne.n	80133e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	685a      	ldr	r2, [r3, #4]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8013374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801337e:	d111      	bne.n	80133a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013388:	d004      	beq.n	8013394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	689b      	ldr	r3, [r3, #8]
 801338e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013392:	d107      	bne.n	80133a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80133a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133ac:	d10f      	bne.n	80133ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80133bc:	601a      	str	r2, [r3, #0]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80133cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2201      	movs	r2, #1
 80133d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2200      	movs	r2, #0
 80133da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80133de:	2303      	movs	r3, #3
 80133e0:	e018      	b.n	8013414 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d102      	bne.n	80133ee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80133e8:	2300      	movs	r3, #0
 80133ea:	61fb      	str	r3, [r7, #28]
 80133ec:	e002      	b.n	80133f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	3b01      	subs	r3, #1
 80133f2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	689a      	ldr	r2, [r3, #8]
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	4013      	ands	r3, r2
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	429a      	cmp	r2, r3
 8013402:	bf0c      	ite	eq
 8013404:	2301      	moveq	r3, #1
 8013406:	2300      	movne	r3, #0
 8013408:	b2db      	uxtb	r3, r3
 801340a:	461a      	mov	r2, r3
 801340c:	79fb      	ldrb	r3, [r7, #7]
 801340e:	429a      	cmp	r2, r3
 8013410:	d19a      	bne.n	8013348 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8013412:	2300      	movs	r3, #0
}
 8013414:	4618      	mov	r0, r3
 8013416:	3720      	adds	r7, #32
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	2000008c 	.word	0x2000008c

08013420 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b086      	sub	sp, #24
 8013424:	af02      	add	r7, sp, #8
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013434:	d111      	bne.n	801345a <SPI_EndRxTransaction+0x3a>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801343e:	d004      	beq.n	801344a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	689b      	ldr	r3, [r3, #8]
 8013444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013448:	d107      	bne.n	801345a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013458:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	685b      	ldr	r3, [r3, #4]
 801345e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013462:	d12a      	bne.n	80134ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801346c:	d012      	beq.n	8013494 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	9300      	str	r3, [sp, #0]
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	2200      	movs	r2, #0
 8013476:	2180      	movs	r1, #128	@ 0x80
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f7ff ff49 	bl	8013310 <SPI_WaitFlagStateUntilTimeout>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d02d      	beq.n	80134e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013488:	f043 0220 	orr.w	r2, r3, #32
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8013490:	2303      	movs	r3, #3
 8013492:	e026      	b.n	80134e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	9300      	str	r3, [sp, #0]
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2200      	movs	r2, #0
 801349c:	2101      	movs	r1, #1
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f7ff ff36 	bl	8013310 <SPI_WaitFlagStateUntilTimeout>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d01a      	beq.n	80134e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134ae:	f043 0220 	orr.w	r2, r3, #32
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80134b6:	2303      	movs	r3, #3
 80134b8:	e013      	b.n	80134e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	9300      	str	r3, [sp, #0]
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	2200      	movs	r2, #0
 80134c2:	2101      	movs	r1, #1
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	f7ff ff23 	bl	8013310 <SPI_WaitFlagStateUntilTimeout>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d007      	beq.n	80134e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134d4:	f043 0220 	orr.w	r2, r3, #32
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80134dc:	2303      	movs	r3, #3
 80134de:	e000      	b.n	80134e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
	...

080134ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b088      	sub	sp, #32
 80134f0:	af02      	add	r7, sp, #8
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2201      	movs	r2, #1
 8013500:	2102      	movs	r1, #2
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f7ff ff04 	bl	8013310 <SPI_WaitFlagStateUntilTimeout>
 8013508:	4603      	mov	r3, r0
 801350a:	2b00      	cmp	r3, #0
 801350c:	d007      	beq.n	801351e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013512:	f043 0220 	orr.w	r2, r3, #32
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801351a:	2303      	movs	r3, #3
 801351c:	e032      	b.n	8013584 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801351e:	4b1b      	ldr	r3, [pc, #108]	@ (801358c <SPI_EndRxTxTransaction+0xa0>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4a1b      	ldr	r2, [pc, #108]	@ (8013590 <SPI_EndRxTxTransaction+0xa4>)
 8013524:	fba2 2303 	umull	r2, r3, r2, r3
 8013528:	0d5b      	lsrs	r3, r3, #21
 801352a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801352e:	fb02 f303 	mul.w	r3, r2, r3
 8013532:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801353c:	d112      	bne.n	8013564 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	9300      	str	r3, [sp, #0]
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	2200      	movs	r2, #0
 8013546:	2180      	movs	r1, #128	@ 0x80
 8013548:	68f8      	ldr	r0, [r7, #12]
 801354a:	f7ff fee1 	bl	8013310 <SPI_WaitFlagStateUntilTimeout>
 801354e:	4603      	mov	r3, r0
 8013550:	2b00      	cmp	r3, #0
 8013552:	d016      	beq.n	8013582 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013558:	f043 0220 	orr.w	r2, r3, #32
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8013560:	2303      	movs	r3, #3
 8013562:	e00f      	b.n	8013584 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d00a      	beq.n	8013580 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	3b01      	subs	r3, #1
 801356e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801357a:	2b80      	cmp	r3, #128	@ 0x80
 801357c:	d0f2      	beq.n	8013564 <SPI_EndRxTxTransaction+0x78>
 801357e:	e000      	b.n	8013582 <SPI_EndRxTxTransaction+0x96>
        break;
 8013580:	bf00      	nop
  }

  return HAL_OK;
 8013582:	2300      	movs	r3, #0
}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	2000008c 	.word	0x2000008c
 8013590:	165e9f81 	.word	0x165e9f81

08013594 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b086      	sub	sp, #24
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801359c:	4b35      	ldr	r3, [pc, #212]	@ (8013674 <SPI_CloseRxTx_ISR+0xe0>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4a35      	ldr	r2, [pc, #212]	@ (8013678 <SPI_CloseRxTx_ISR+0xe4>)
 80135a2:	fba2 2303 	umull	r2, r3, r2, r3
 80135a6:	0a5b      	lsrs	r3, r3, #9
 80135a8:	2264      	movs	r2, #100	@ 0x64
 80135aa:	fb02 f303 	mul.w	r3, r2, r3
 80135ae:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80135b0:	f7fd fbd8 	bl	8010d64 <HAL_GetTick>
 80135b4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f022 0220 	bic.w	r2, r2, #32
 80135c4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d106      	bne.n	80135da <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135d0:	f043 0220 	orr.w	r2, r3, #32
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80135d8:	e009      	b.n	80135ee <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	3b01      	subs	r3, #1
 80135de:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	689b      	ldr	r3, [r3, #8]
 80135e6:	f003 0302 	and.w	r3, r3, #2
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0eb      	beq.n	80135c6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80135ee:	697a      	ldr	r2, [r7, #20]
 80135f0:	2164      	movs	r1, #100	@ 0x64
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f7ff ff7a 	bl	80134ec <SPI_EndRxTxTransaction>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d005      	beq.n	801360a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013602:	f043 0220 	orr.w	r2, r3, #32
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d10a      	bne.n	8013628 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013612:	2300      	movs	r3, #0
 8013614:	60fb      	str	r3, [r7, #12]
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	60fb      	str	r3, [r7, #12]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	689b      	ldr	r3, [r3, #8]
 8013624:	60fb      	str	r3, [r7, #12]
 8013626:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801362c:	2b00      	cmp	r3, #0
 801362e:	d115      	bne.n	801365c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013636:	b2db      	uxtb	r3, r3
 8013638:	2b04      	cmp	r3, #4
 801363a:	d107      	bne.n	801364c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2201      	movs	r2, #1
 8013640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7f7 fb23 	bl	800ac90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801364a:	e00e      	b.n	801366a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2201      	movs	r2, #1
 8013650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f7ff fd29 	bl	80130ac <HAL_SPI_TxRxCpltCallback>
}
 801365a:	e006      	b.n	801366a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2201      	movs	r2, #1
 8013660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f7ff fd2b 	bl	80130c0 <HAL_SPI_ErrorCallback>
}
 801366a:	bf00      	nop
 801366c:	3718      	adds	r7, #24
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	2000008c 	.word	0x2000008c
 8013678:	057619f1 	.word	0x057619f1

0801367c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	685a      	ldr	r2, [r3, #4]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013692:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8013694:	f7fd fb66 	bl	8010d64 <HAL_GetTick>
 8013698:	4603      	mov	r3, r0
 801369a:	461a      	mov	r2, r3
 801369c:	2164      	movs	r1, #100	@ 0x64
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f7ff febe 	bl	8013420 <SPI_EndRxTransaction>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d005      	beq.n	80136b6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136ae:	f043 0220 	orr.w	r2, r3, #32
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	689b      	ldr	r3, [r3, #8]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d10a      	bne.n	80136d4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80136be:	2300      	movs	r3, #0
 80136c0:	60fb      	str	r3, [r7, #12]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	60fb      	str	r3, [r7, #12]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	60fb      	str	r3, [r7, #12]
 80136d2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2201      	movs	r2, #1
 80136d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d103      	bne.n	80136ec <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f7f7 fad3 	bl	800ac90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80136ea:	e002      	b.n	80136f2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ff fce7 	bl	80130c0 <HAL_SPI_ErrorCallback>
}
 80136f2:	bf00      	nop
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}

080136fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b082      	sub	sp, #8
 80136fe:	af00      	add	r7, sp, #0
 8013700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d101      	bne.n	801370c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013708:	2301      	movs	r3, #1
 801370a:	e041      	b.n	8013790 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013712:	b2db      	uxtb	r3, r3
 8013714:	2b00      	cmp	r3, #0
 8013716:	d106      	bne.n	8013726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2200      	movs	r2, #0
 801371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f000 f839 	bl	8013798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2202      	movs	r2, #2
 801372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	3304      	adds	r3, #4
 8013736:	4619      	mov	r1, r3
 8013738:	4610      	mov	r0, r2
 801373a:	f000 f9bf 	bl	8013abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2201      	movs	r2, #1
 8013742:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2201      	movs	r2, #1
 801374a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2201      	movs	r2, #1
 801375a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2201      	movs	r2, #1
 8013762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2201      	movs	r2, #1
 801376a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2201      	movs	r2, #1
 8013772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2201      	movs	r2, #1
 801377a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2201      	movs	r2, #1
 8013782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2201      	movs	r2, #1
 801378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801378e:	2300      	movs	r3, #0
}
 8013790:	4618      	mov	r0, r3
 8013792:	3708      	adds	r7, #8
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80137a0:	bf00      	nop
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b085      	sub	sp, #20
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d001      	beq.n	80137c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80137c0:	2301      	movs	r3, #1
 80137c2:	e04e      	b.n	8013862 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2202      	movs	r2, #2
 80137c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	68da      	ldr	r2, [r3, #12]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f042 0201 	orr.w	r2, r2, #1
 80137da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	4a23      	ldr	r2, [pc, #140]	@ (8013870 <HAL_TIM_Base_Start_IT+0xc4>)
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d022      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80137ee:	d01d      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4a1f      	ldr	r2, [pc, #124]	@ (8013874 <HAL_TIM_Base_Start_IT+0xc8>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d018      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	4a1e      	ldr	r2, [pc, #120]	@ (8013878 <HAL_TIM_Base_Start_IT+0xcc>)
 8013800:	4293      	cmp	r3, r2
 8013802:	d013      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4a1c      	ldr	r2, [pc, #112]	@ (801387c <HAL_TIM_Base_Start_IT+0xd0>)
 801380a:	4293      	cmp	r3, r2
 801380c:	d00e      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	4a1b      	ldr	r2, [pc, #108]	@ (8013880 <HAL_TIM_Base_Start_IT+0xd4>)
 8013814:	4293      	cmp	r3, r2
 8013816:	d009      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	4a19      	ldr	r2, [pc, #100]	@ (8013884 <HAL_TIM_Base_Start_IT+0xd8>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d004      	beq.n	801382c <HAL_TIM_Base_Start_IT+0x80>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	4a18      	ldr	r2, [pc, #96]	@ (8013888 <HAL_TIM_Base_Start_IT+0xdc>)
 8013828:	4293      	cmp	r3, r2
 801382a:	d111      	bne.n	8013850 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	689b      	ldr	r3, [r3, #8]
 8013832:	f003 0307 	and.w	r3, r3, #7
 8013836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	2b06      	cmp	r3, #6
 801383c:	d010      	beq.n	8013860 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	f042 0201 	orr.w	r2, r2, #1
 801384c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801384e:	e007      	b.n	8013860 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f042 0201 	orr.w	r2, r2, #1
 801385e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013860:	2300      	movs	r3, #0
}
 8013862:	4618      	mov	r0, r3
 8013864:	3714      	adds	r7, #20
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr
 801386e:	bf00      	nop
 8013870:	40010000 	.word	0x40010000
 8013874:	40000400 	.word	0x40000400
 8013878:	40000800 	.word	0x40000800
 801387c:	40000c00 	.word	0x40000c00
 8013880:	40010400 	.word	0x40010400
 8013884:	40014000 	.word	0x40014000
 8013888:	40001800 	.word	0x40001800

0801388c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b084      	sub	sp, #16
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	f003 0302 	and.w	r3, r3, #2
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d020      	beq.n	80138f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	f003 0302 	and.w	r3, r3, #2
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d01b      	beq.n	80138f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f06f 0202 	mvn.w	r2, #2
 80138c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2201      	movs	r2, #1
 80138c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	699b      	ldr	r3, [r3, #24]
 80138ce:	f003 0303 	and.w	r3, r3, #3
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d003      	beq.n	80138de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f000 f8d2 	bl	8013a80 <HAL_TIM_IC_CaptureCallback>
 80138dc:	e005      	b.n	80138ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f000 f8c4 	bl	8013a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f000 f8d5 	bl	8013a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2200      	movs	r2, #0
 80138ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	f003 0304 	and.w	r3, r3, #4
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d020      	beq.n	801393c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f003 0304 	and.w	r3, r3, #4
 8013900:	2b00      	cmp	r3, #0
 8013902:	d01b      	beq.n	801393c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f06f 0204 	mvn.w	r2, #4
 801390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2202      	movs	r2, #2
 8013912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	699b      	ldr	r3, [r3, #24]
 801391a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801391e:	2b00      	cmp	r3, #0
 8013920:	d003      	beq.n	801392a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f000 f8ac 	bl	8013a80 <HAL_TIM_IC_CaptureCallback>
 8013928:	e005      	b.n	8013936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 f89e 	bl	8013a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f000 f8af 	bl	8013a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2200      	movs	r2, #0
 801393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	f003 0308 	and.w	r3, r3, #8
 8013942:	2b00      	cmp	r3, #0
 8013944:	d020      	beq.n	8013988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f003 0308 	and.w	r3, r3, #8
 801394c:	2b00      	cmp	r3, #0
 801394e:	d01b      	beq.n	8013988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f06f 0208 	mvn.w	r2, #8
 8013958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2204      	movs	r2, #4
 801395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	69db      	ldr	r3, [r3, #28]
 8013966:	f003 0303 	and.w	r3, r3, #3
 801396a:	2b00      	cmp	r3, #0
 801396c:	d003      	beq.n	8013976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 f886 	bl	8013a80 <HAL_TIM_IC_CaptureCallback>
 8013974:	e005      	b.n	8013982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f000 f878 	bl	8013a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f000 f889 	bl	8013a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2200      	movs	r2, #0
 8013986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	f003 0310 	and.w	r3, r3, #16
 801398e:	2b00      	cmp	r3, #0
 8013990:	d020      	beq.n	80139d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	f003 0310 	and.w	r3, r3, #16
 8013998:	2b00      	cmp	r3, #0
 801399a:	d01b      	beq.n	80139d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f06f 0210 	mvn.w	r2, #16
 80139a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2208      	movs	r2, #8
 80139aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	69db      	ldr	r3, [r3, #28]
 80139b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d003      	beq.n	80139c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f000 f860 	bl	8013a80 <HAL_TIM_IC_CaptureCallback>
 80139c0:	e005      	b.n	80139ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f000 f852 	bl	8013a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 f863 	bl	8013a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2200      	movs	r2, #0
 80139d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	f003 0301 	and.w	r3, r3, #1
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d00c      	beq.n	80139f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f003 0301 	and.w	r3, r3, #1
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d007      	beq.n	80139f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	f06f 0201 	mvn.w	r2, #1
 80139f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f7fc fd24 	bl	8010440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d00c      	beq.n	8013a1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d007      	beq.n	8013a1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8013a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f000 f900 	bl	8013c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00c      	beq.n	8013a40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d007      	beq.n	8013a40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8013a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f000 f834 	bl	8013aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	f003 0320 	and.w	r3, r3, #32
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00c      	beq.n	8013a64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f003 0320 	and.w	r3, r3, #32
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d007      	beq.n	8013a64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f06f 0220 	mvn.w	r2, #32
 8013a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 f8d2 	bl	8013c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013a64:	bf00      	nop
 8013a66:	3710      	adds	r7, #16
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013a74:	bf00      	nop
 8013a76:	370c      	adds	r7, #12
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7e:	4770      	bx	lr

08013a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013a88:	bf00      	nop
 8013a8a:	370c      	adds	r7, #12
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr

08013a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013a9c:	bf00      	nop
 8013a9e:	370c      	adds	r7, #12
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr

08013aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b083      	sub	sp, #12
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013ab0:	bf00      	nop
 8013ab2:	370c      	adds	r7, #12
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr

08013abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b085      	sub	sp, #20
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4a43      	ldr	r2, [pc, #268]	@ (8013bdc <TIM_Base_SetConfig+0x120>)
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	d013      	beq.n	8013afc <TIM_Base_SetConfig+0x40>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ada:	d00f      	beq.n	8013afc <TIM_Base_SetConfig+0x40>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4a40      	ldr	r2, [pc, #256]	@ (8013be0 <TIM_Base_SetConfig+0x124>)
 8013ae0:	4293      	cmp	r3, r2
 8013ae2:	d00b      	beq.n	8013afc <TIM_Base_SetConfig+0x40>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8013be4 <TIM_Base_SetConfig+0x128>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d007      	beq.n	8013afc <TIM_Base_SetConfig+0x40>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	4a3e      	ldr	r2, [pc, #248]	@ (8013be8 <TIM_Base_SetConfig+0x12c>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d003      	beq.n	8013afc <TIM_Base_SetConfig+0x40>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4a3d      	ldr	r2, [pc, #244]	@ (8013bec <TIM_Base_SetConfig+0x130>)
 8013af8:	4293      	cmp	r3, r2
 8013afa:	d108      	bne.n	8013b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	68fa      	ldr	r2, [r7, #12]
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	4a32      	ldr	r2, [pc, #200]	@ (8013bdc <TIM_Base_SetConfig+0x120>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d02b      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b1c:	d027      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4a2f      	ldr	r2, [pc, #188]	@ (8013be0 <TIM_Base_SetConfig+0x124>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d023      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4a2e      	ldr	r2, [pc, #184]	@ (8013be4 <TIM_Base_SetConfig+0x128>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d01f      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4a2d      	ldr	r2, [pc, #180]	@ (8013be8 <TIM_Base_SetConfig+0x12c>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d01b      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	4a2c      	ldr	r2, [pc, #176]	@ (8013bec <TIM_Base_SetConfig+0x130>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d017      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4a2b      	ldr	r2, [pc, #172]	@ (8013bf0 <TIM_Base_SetConfig+0x134>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d013      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	4a2a      	ldr	r2, [pc, #168]	@ (8013bf4 <TIM_Base_SetConfig+0x138>)
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d00f      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	4a29      	ldr	r2, [pc, #164]	@ (8013bf8 <TIM_Base_SetConfig+0x13c>)
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d00b      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	4a28      	ldr	r2, [pc, #160]	@ (8013bfc <TIM_Base_SetConfig+0x140>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d007      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4a27      	ldr	r2, [pc, #156]	@ (8013c00 <TIM_Base_SetConfig+0x144>)
 8013b62:	4293      	cmp	r3, r2
 8013b64:	d003      	beq.n	8013b6e <TIM_Base_SetConfig+0xb2>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	4a26      	ldr	r2, [pc, #152]	@ (8013c04 <TIM_Base_SetConfig+0x148>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d108      	bne.n	8013b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	68fa      	ldr	r2, [r7, #12]
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	695b      	ldr	r3, [r3, #20]
 8013b8a:	4313      	orrs	r3, r2
 8013b8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	689a      	ldr	r2, [r3, #8]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	4a0e      	ldr	r2, [pc, #56]	@ (8013bdc <TIM_Base_SetConfig+0x120>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d003      	beq.n	8013bae <TIM_Base_SetConfig+0xf2>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4a10      	ldr	r2, [pc, #64]	@ (8013bec <TIM_Base_SetConfig+0x130>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d103      	bne.n	8013bb6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	691a      	ldr	r2, [r3, #16]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f043 0204 	orr.w	r2, r3, #4
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	601a      	str	r2, [r3, #0]
}
 8013bce:	bf00      	nop
 8013bd0:	3714      	adds	r7, #20
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr
 8013bda:	bf00      	nop
 8013bdc:	40010000 	.word	0x40010000
 8013be0:	40000400 	.word	0x40000400
 8013be4:	40000800 	.word	0x40000800
 8013be8:	40000c00 	.word	0x40000c00
 8013bec:	40010400 	.word	0x40010400
 8013bf0:	40014000 	.word	0x40014000
 8013bf4:	40014400 	.word	0x40014400
 8013bf8:	40014800 	.word	0x40014800
 8013bfc:	40001800 	.word	0x40001800
 8013c00:	40001c00 	.word	0x40001c00
 8013c04:	40002000 	.word	0x40002000

08013c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b083      	sub	sp, #12
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013c10:	bf00      	nop
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013c24:	bf00      	nop
 8013c26:	370c      	adds	r7, #12
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr

08013c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d101      	bne.n	8013c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e042      	b.n	8013cc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d106      	bne.n	8013c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2200      	movs	r2, #0
 8013c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7fc fd6a 	bl	8010730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2224      	movs	r2, #36	@ 0x24
 8013c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	68da      	ldr	r2, [r3, #12]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f000 fe3b 	bl	80148f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	691a      	ldr	r2, [r3, #16]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	695a      	ldr	r2, [r3, #20]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	68da      	ldr	r2, [r3, #12]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2220      	movs	r2, #32
 8013cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2220      	movs	r2, #32
 8013cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8013cc6:	2300      	movs	r3, #0
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3708      	adds	r7, #8
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d101      	bne.n	8013ce2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	e024      	b.n	8013d2c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2224      	movs	r2, #36	@ 0x24
 8013ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	68da      	ldr	r2, [r3, #12]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013cf8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7fc fdfc 	bl	80108f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2200      	movs	r2, #0
 8013d04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2200      	movs	r2, #0
 8013d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2200      	movs	r2, #0
 8013d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013d2a:	2300      	movs	r3, #0
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b08a      	sub	sp, #40	@ 0x28
 8013d38:	af02      	add	r7, sp, #8
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	603b      	str	r3, [r7, #0]
 8013d40:	4613      	mov	r3, r2
 8013d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013d44:	2300      	movs	r3, #0
 8013d46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	2b20      	cmp	r3, #32
 8013d52:	d175      	bne.n	8013e40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d002      	beq.n	8013d60 <HAL_UART_Transmit+0x2c>
 8013d5a:	88fb      	ldrh	r3, [r7, #6]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d101      	bne.n	8013d64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013d60:	2301      	movs	r3, #1
 8013d62:	e06e      	b.n	8013e42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2200      	movs	r2, #0
 8013d68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2221      	movs	r2, #33	@ 0x21
 8013d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013d72:	f7fc fff7 	bl	8010d64 <HAL_GetTick>
 8013d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	88fa      	ldrh	r2, [r7, #6]
 8013d7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	88fa      	ldrh	r2, [r7, #6]
 8013d82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d8c:	d108      	bne.n	8013da0 <HAL_UART_Transmit+0x6c>
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	691b      	ldr	r3, [r3, #16]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d104      	bne.n	8013da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013d96:	2300      	movs	r3, #0
 8013d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	61bb      	str	r3, [r7, #24]
 8013d9e:	e003      	b.n	8013da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013da4:	2300      	movs	r3, #0
 8013da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013da8:	e02e      	b.n	8013e08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	2200      	movs	r2, #0
 8013db2:	2180      	movs	r1, #128	@ 0x80
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	f000 fb6d 	bl	8014494 <UART_WaitOnFlagUntilTimeout>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d005      	beq.n	8013dcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2220      	movs	r2, #32
 8013dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8013dc8:	2303      	movs	r3, #3
 8013dca:	e03a      	b.n	8013e42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d10b      	bne.n	8013dea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013dd2:	69bb      	ldr	r3, [r7, #24]
 8013dd4:	881b      	ldrh	r3, [r3, #0]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013de2:	69bb      	ldr	r3, [r7, #24]
 8013de4:	3302      	adds	r3, #2
 8013de6:	61bb      	str	r3, [r7, #24]
 8013de8:	e007      	b.n	8013dfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	781a      	ldrb	r2, [r3, #0]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	3301      	adds	r3, #1
 8013df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	3b01      	subs	r3, #1
 8013e02:	b29a      	uxth	r2, r3
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1cb      	bne.n	8013daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	2140      	movs	r1, #64	@ 0x40
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f000 fb39 	bl	8014494 <UART_WaitOnFlagUntilTimeout>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d005      	beq.n	8013e34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2220      	movs	r2, #32
 8013e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8013e30:	2303      	movs	r3, #3
 8013e32:	e006      	b.n	8013e42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2220      	movs	r2, #32
 8013e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	e000      	b.n	8013e42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8013e40:	2302      	movs	r3, #2
  }
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3720      	adds	r7, #32
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013e4a:	b480      	push	{r7}
 8013e4c:	b085      	sub	sp, #20
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	60f8      	str	r0, [r7, #12]
 8013e52:	60b9      	str	r1, [r7, #8]
 8013e54:	4613      	mov	r3, r2
 8013e56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	2b20      	cmp	r3, #32
 8013e62:	d121      	bne.n	8013ea8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d002      	beq.n	8013e70 <HAL_UART_Transmit_IT+0x26>
 8013e6a:	88fb      	ldrh	r3, [r7, #6]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8013e70:	2301      	movs	r3, #1
 8013e72:	e01a      	b.n	8013eaa <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	68ba      	ldr	r2, [r7, #8]
 8013e78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	88fa      	ldrh	r2, [r7, #6]
 8013e7e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	88fa      	ldrh	r2, [r7, #6]
 8013e84:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2221      	movs	r2, #33	@ 0x21
 8013e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	68da      	ldr	r2, [r3, #12]
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8013ea2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	e000      	b.n	8013eaa <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8013ea8:	2302      	movs	r3, #2
  }
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3714      	adds	r7, #20
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb4:	4770      	bx	lr

08013eb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b084      	sub	sp, #16
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	60f8      	str	r0, [r7, #12]
 8013ebe:	60b9      	str	r1, [r7, #8]
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013eca:	b2db      	uxtb	r3, r3
 8013ecc:	2b20      	cmp	r3, #32
 8013ece:	d112      	bne.n	8013ef6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d002      	beq.n	8013edc <HAL_UART_Receive_IT+0x26>
 8013ed6:	88fb      	ldrh	r3, [r7, #6]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d101      	bne.n	8013ee0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013edc:	2301      	movs	r3, #1
 8013ede:	e00b      	b.n	8013ef8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013ee6:	88fb      	ldrh	r3, [r7, #6]
 8013ee8:	461a      	mov	r2, r3
 8013eea:	68b9      	ldr	r1, [r7, #8]
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f000 fb2a 	bl	8014546 <UART_Start_Receive_IT>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	e000      	b.n	8013ef8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8013ef6:	2302      	movs	r3, #2
  }
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b0ba      	sub	sp, #232	@ 0xe8
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	695b      	ldr	r3, [r3, #20]
 8013f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8013f26:	2300      	movs	r3, #0
 8013f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f36:	f003 030f 	and.w	r3, r3, #15
 8013f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8013f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d10f      	bne.n	8013f66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f4a:	f003 0320 	and.w	r3, r3, #32
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d009      	beq.n	8013f66 <HAL_UART_IRQHandler+0x66>
 8013f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013f56:	f003 0320 	and.w	r3, r3, #32
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d003      	beq.n	8013f66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f000 fc07 	bl	8014772 <UART_Receive_IT>
      return;
 8013f64:	e273      	b.n	801444e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8013f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f000 80de 	beq.w	801412c <HAL_UART_IRQHandler+0x22c>
 8013f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013f74:	f003 0301 	and.w	r3, r3, #1
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013f80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f000 80d1 	beq.w	801412c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f8e:	f003 0301 	and.w	r3, r3, #1
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d00b      	beq.n	8013fae <HAL_UART_IRQHandler+0xae>
 8013f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d005      	beq.n	8013fae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fa6:	f043 0201 	orr.w	r2, r3, #1
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fb2:	f003 0304 	and.w	r3, r3, #4
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d00b      	beq.n	8013fd2 <HAL_UART_IRQHandler+0xd2>
 8013fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013fbe:	f003 0301 	and.w	r3, r3, #1
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d005      	beq.n	8013fd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fca:	f043 0202 	orr.w	r2, r3, #2
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fd6:	f003 0302 	and.w	r3, r3, #2
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00b      	beq.n	8013ff6 <HAL_UART_IRQHandler+0xf6>
 8013fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013fe2:	f003 0301 	and.w	r3, r3, #1
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d005      	beq.n	8013ff6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fee:	f043 0204 	orr.w	r2, r3, #4
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8013ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013ffa:	f003 0308 	and.w	r3, r3, #8
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d011      	beq.n	8014026 <HAL_UART_IRQHandler+0x126>
 8014002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014006:	f003 0320 	and.w	r3, r3, #32
 801400a:	2b00      	cmp	r3, #0
 801400c:	d105      	bne.n	801401a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801400e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014012:	f003 0301 	and.w	r3, r3, #1
 8014016:	2b00      	cmp	r3, #0
 8014018:	d005      	beq.n	8014026 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801401e:	f043 0208 	orr.w	r2, r3, #8
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801402a:	2b00      	cmp	r3, #0
 801402c:	f000 820a 	beq.w	8014444 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014034:	f003 0320 	and.w	r3, r3, #32
 8014038:	2b00      	cmp	r3, #0
 801403a:	d008      	beq.n	801404e <HAL_UART_IRQHandler+0x14e>
 801403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014040:	f003 0320 	and.w	r3, r3, #32
 8014044:	2b00      	cmp	r3, #0
 8014046:	d002      	beq.n	801404e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 fb92 	bl	8014772 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	695b      	ldr	r3, [r3, #20]
 8014054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014058:	2b40      	cmp	r3, #64	@ 0x40
 801405a:	bf0c      	ite	eq
 801405c:	2301      	moveq	r3, #1
 801405e:	2300      	movne	r3, #0
 8014060:	b2db      	uxtb	r3, r3
 8014062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801406a:	f003 0308 	and.w	r3, r3, #8
 801406e:	2b00      	cmp	r3, #0
 8014070:	d103      	bne.n	801407a <HAL_UART_IRQHandler+0x17a>
 8014072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014076:	2b00      	cmp	r3, #0
 8014078:	d04f      	beq.n	801411a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f000 fa9d 	bl	80145ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	695b      	ldr	r3, [r3, #20]
 8014086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801408a:	2b40      	cmp	r3, #64	@ 0x40
 801408c:	d141      	bne.n	8014112 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	3314      	adds	r3, #20
 8014094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801409c:	e853 3f00 	ldrex	r3, [r3]
 80140a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80140a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80140a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	3314      	adds	r3, #20
 80140b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80140ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80140be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80140c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80140ca:	e841 2300 	strex	r3, r2, [r1]
 80140ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80140d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1d9      	bne.n	801408e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d013      	beq.n	801410a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140e6:	4a8a      	ldr	r2, [pc, #552]	@ (8014310 <HAL_UART_IRQHandler+0x410>)
 80140e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7fc ffec 	bl	80110cc <HAL_DMA_Abort_IT>
 80140f4:	4603      	mov	r3, r0
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d016      	beq.n	8014128 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8014104:	4610      	mov	r0, r2
 8014106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014108:	e00e      	b.n	8014128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 f9ac 	bl	8014468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014110:	e00a      	b.n	8014128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f000 f9a8 	bl	8014468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014118:	e006      	b.n	8014128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 f9a4 	bl	8014468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2200      	movs	r2, #0
 8014124:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8014126:	e18d      	b.n	8014444 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014128:	bf00      	nop
    return;
 801412a:	e18b      	b.n	8014444 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014130:	2b01      	cmp	r3, #1
 8014132:	f040 8167 	bne.w	8014404 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8014136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801413a:	f003 0310 	and.w	r3, r3, #16
 801413e:	2b00      	cmp	r3, #0
 8014140:	f000 8160 	beq.w	8014404 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8014144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014148:	f003 0310 	and.w	r3, r3, #16
 801414c:	2b00      	cmp	r3, #0
 801414e:	f000 8159 	beq.w	8014404 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014152:	2300      	movs	r3, #0
 8014154:	60bb      	str	r3, [r7, #8]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	60bb      	str	r3, [r7, #8]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	60bb      	str	r3, [r7, #8]
 8014166:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	695b      	ldr	r3, [r3, #20]
 801416e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014172:	2b40      	cmp	r3, #64	@ 0x40
 8014174:	f040 80ce 	bne.w	8014314 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014184:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014188:	2b00      	cmp	r3, #0
 801418a:	f000 80a9 	beq.w	80142e0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014196:	429a      	cmp	r2, r3
 8014198:	f080 80a2 	bcs.w	80142e0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80141a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141a8:	69db      	ldr	r3, [r3, #28]
 80141aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80141ae:	f000 8088 	beq.w	80142c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	330c      	adds	r3, #12
 80141b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80141c0:	e853 3f00 	ldrex	r3, [r3]
 80141c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80141c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80141cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80141d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	330c      	adds	r3, #12
 80141da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80141de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80141e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80141ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80141ee:	e841 2300 	strex	r3, r2, [r1]
 80141f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80141f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1d9      	bne.n	80141b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	3314      	adds	r3, #20
 8014204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014208:	e853 3f00 	ldrex	r3, [r3]
 801420c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801420e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014210:	f023 0301 	bic.w	r3, r3, #1
 8014214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3314      	adds	r3, #20
 801421e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014222:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014226:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801422a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801422e:	e841 2300 	strex	r3, r2, [r1]
 8014232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014236:	2b00      	cmp	r3, #0
 8014238:	d1e1      	bne.n	80141fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	3314      	adds	r3, #20
 8014240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014244:	e853 3f00 	ldrex	r3, [r3]
 8014248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801424a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801424c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	3314      	adds	r3, #20
 801425a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801425e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014266:	e841 2300 	strex	r3, r2, [r1]
 801426a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801426c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1e3      	bne.n	801423a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2220      	movs	r2, #32
 8014276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2200      	movs	r2, #0
 801427e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	330c      	adds	r3, #12
 8014286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801428a:	e853 3f00 	ldrex	r3, [r3]
 801428e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014292:	f023 0310 	bic.w	r3, r3, #16
 8014296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	330c      	adds	r3, #12
 80142a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80142a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80142a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80142aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80142ac:	e841 2300 	strex	r3, r2, [r1]
 80142b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80142b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d1e3      	bne.n	8014280 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fc fe95 	bl	8010fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2202      	movs	r2, #2
 80142c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 f8cf 	bl	801447c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80142de:	e0b3      	b.n	8014448 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80142e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80142e8:	429a      	cmp	r2, r3
 80142ea:	f040 80ad 	bne.w	8014448 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142f2:	69db      	ldr	r3, [r3, #28]
 80142f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142f8:	f040 80a6 	bne.w	8014448 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2202      	movs	r2, #2
 8014300:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014306:	4619      	mov	r1, r3
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f000 f8b7 	bl	801447c <HAL_UARTEx_RxEventCallback>
      return;
 801430e:	e09b      	b.n	8014448 <HAL_UART_IRQHandler+0x548>
 8014310:	08014681 	.word	0x08014681
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801431c:	b29b      	uxth	r3, r3
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014328:	b29b      	uxth	r3, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	f000 808e 	beq.w	801444c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8014330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014334:	2b00      	cmp	r3, #0
 8014336:	f000 8089 	beq.w	801444c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	330c      	adds	r3, #12
 8014340:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014344:	e853 3f00 	ldrex	r3, [r3]
 8014348:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801434c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014350:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	330c      	adds	r3, #12
 801435a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801435e:	647a      	str	r2, [r7, #68]	@ 0x44
 8014360:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014362:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014366:	e841 2300 	strex	r3, r2, [r1]
 801436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801436c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801436e:	2b00      	cmp	r3, #0
 8014370:	d1e3      	bne.n	801433a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	3314      	adds	r3, #20
 8014378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801437c:	e853 3f00 	ldrex	r3, [r3]
 8014380:	623b      	str	r3, [r7, #32]
   return(result);
 8014382:	6a3b      	ldr	r3, [r7, #32]
 8014384:	f023 0301 	bic.w	r3, r3, #1
 8014388:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	3314      	adds	r3, #20
 8014392:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014396:	633a      	str	r2, [r7, #48]	@ 0x30
 8014398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801439a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801439c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801439e:	e841 2300 	strex	r3, r2, [r1]
 80143a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80143a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d1e3      	bne.n	8014372 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2220      	movs	r2, #32
 80143ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	2200      	movs	r2, #0
 80143b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	330c      	adds	r3, #12
 80143be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	e853 3f00 	ldrex	r3, [r3]
 80143c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f023 0310 	bic.w	r3, r3, #16
 80143ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	330c      	adds	r3, #12
 80143d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80143dc:	61fa      	str	r2, [r7, #28]
 80143de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143e0:	69b9      	ldr	r1, [r7, #24]
 80143e2:	69fa      	ldr	r2, [r7, #28]
 80143e4:	e841 2300 	strex	r3, r2, [r1]
 80143e8:	617b      	str	r3, [r7, #20]
   return(result);
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d1e3      	bne.n	80143b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2202      	movs	r2, #2
 80143f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80143f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80143fa:	4619      	mov	r1, r3
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 f83d 	bl	801447c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8014402:	e023      	b.n	801444c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8014404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801440c:	2b00      	cmp	r3, #0
 801440e:	d009      	beq.n	8014424 <HAL_UART_IRQHandler+0x524>
 8014410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014418:	2b00      	cmp	r3, #0
 801441a:	d003      	beq.n	8014424 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f940 	bl	80146a2 <UART_Transmit_IT>
    return;
 8014422:	e014      	b.n	801444e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8014424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801442c:	2b00      	cmp	r3, #0
 801442e:	d00e      	beq.n	801444e <HAL_UART_IRQHandler+0x54e>
 8014430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014438:	2b00      	cmp	r3, #0
 801443a:	d008      	beq.n	801444e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 f980 	bl	8014742 <UART_EndTransmit_IT>
    return;
 8014442:	e004      	b.n	801444e <HAL_UART_IRQHandler+0x54e>
    return;
 8014444:	bf00      	nop
 8014446:	e002      	b.n	801444e <HAL_UART_IRQHandler+0x54e>
      return;
 8014448:	bf00      	nop
 801444a:	e000      	b.n	801444e <HAL_UART_IRQHandler+0x54e>
      return;
 801444c:	bf00      	nop
  }
}
 801444e:	37e8      	adds	r7, #232	@ 0xe8
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}

08014454 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801445c:	bf00      	nop
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014466:	4770      	bx	lr

08014468 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014470:	bf00      	nop
 8014472:	370c      	adds	r7, #12
 8014474:	46bd      	mov	sp, r7
 8014476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447a:	4770      	bx	lr

0801447c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801447c:	b480      	push	{r7}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	460b      	mov	r3, r1
 8014486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014488:	bf00      	nop
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr

08014494 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b086      	sub	sp, #24
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	603b      	str	r3, [r7, #0]
 80144a0:	4613      	mov	r3, r2
 80144a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80144a4:	e03b      	b.n	801451e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80144a6:	6a3b      	ldr	r3, [r7, #32]
 80144a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144ac:	d037      	beq.n	801451e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80144ae:	f7fc fc59 	bl	8010d64 <HAL_GetTick>
 80144b2:	4602      	mov	r2, r0
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	1ad3      	subs	r3, r2, r3
 80144b8:	6a3a      	ldr	r2, [r7, #32]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d302      	bcc.n	80144c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80144be:	6a3b      	ldr	r3, [r7, #32]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d101      	bne.n	80144c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80144c4:	2303      	movs	r3, #3
 80144c6:	e03a      	b.n	801453e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	f003 0304 	and.w	r3, r3, #4
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d023      	beq.n	801451e <UART_WaitOnFlagUntilTimeout+0x8a>
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	2b80      	cmp	r3, #128	@ 0x80
 80144da:	d020      	beq.n	801451e <UART_WaitOnFlagUntilTimeout+0x8a>
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	2b40      	cmp	r3, #64	@ 0x40
 80144e0:	d01d      	beq.n	801451e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	f003 0308 	and.w	r3, r3, #8
 80144ec:	2b08      	cmp	r3, #8
 80144ee:	d116      	bne.n	801451e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80144f0:	2300      	movs	r3, #0
 80144f2:	617b      	str	r3, [r7, #20]
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	617b      	str	r3, [r7, #20]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	617b      	str	r3, [r7, #20]
 8014504:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014506:	68f8      	ldr	r0, [r7, #12]
 8014508:	f000 f857 	bl	80145ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2208      	movs	r2, #8
 8014510:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	2200      	movs	r2, #0
 8014516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801451a:	2301      	movs	r3, #1
 801451c:	e00f      	b.n	801453e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	681a      	ldr	r2, [r3, #0]
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	4013      	ands	r3, r2
 8014528:	68ba      	ldr	r2, [r7, #8]
 801452a:	429a      	cmp	r2, r3
 801452c:	bf0c      	ite	eq
 801452e:	2301      	moveq	r3, #1
 8014530:	2300      	movne	r3, #0
 8014532:	b2db      	uxtb	r3, r3
 8014534:	461a      	mov	r2, r3
 8014536:	79fb      	ldrb	r3, [r7, #7]
 8014538:	429a      	cmp	r2, r3
 801453a:	d0b4      	beq.n	80144a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801453c:	2300      	movs	r3, #0
}
 801453e:	4618      	mov	r0, r3
 8014540:	3718      	adds	r7, #24
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014546:	b480      	push	{r7}
 8014548:	b085      	sub	sp, #20
 801454a:	af00      	add	r7, sp, #0
 801454c:	60f8      	str	r0, [r7, #12]
 801454e:	60b9      	str	r1, [r7, #8]
 8014550:	4613      	mov	r3, r2
 8014552:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	68ba      	ldr	r2, [r7, #8]
 8014558:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	88fa      	ldrh	r2, [r7, #6]
 801455e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	88fa      	ldrh	r2, [r7, #6]
 8014564:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2200      	movs	r2, #0
 801456a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	2222      	movs	r2, #34	@ 0x22
 8014570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	691b      	ldr	r3, [r3, #16]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d007      	beq.n	801458c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	68da      	ldr	r2, [r3, #12]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801458a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	695a      	ldr	r2, [r3, #20]
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f042 0201 	orr.w	r2, r2, #1
 801459a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	68da      	ldr	r2, [r3, #12]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	f042 0220 	orr.w	r2, r2, #32
 80145aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80145ac:	2300      	movs	r3, #0
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3714      	adds	r7, #20
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr

080145ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80145ba:	b480      	push	{r7}
 80145bc:	b095      	sub	sp, #84	@ 0x54
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	330c      	adds	r3, #12
 80145c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145cc:	e853 3f00 	ldrex	r3, [r3]
 80145d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80145d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80145d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	330c      	adds	r3, #12
 80145e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80145e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80145e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80145e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80145ea:	e841 2300 	strex	r3, r2, [r1]
 80145ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80145f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d1e5      	bne.n	80145c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	3314      	adds	r3, #20
 80145fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145fe:	6a3b      	ldr	r3, [r7, #32]
 8014600:	e853 3f00 	ldrex	r3, [r3]
 8014604:	61fb      	str	r3, [r7, #28]
   return(result);
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	f023 0301 	bic.w	r3, r3, #1
 801460c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3314      	adds	r3, #20
 8014614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014618:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801461a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801461c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801461e:	e841 2300 	strex	r3, r2, [r1]
 8014622:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014626:	2b00      	cmp	r3, #0
 8014628:	d1e5      	bne.n	80145f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801462e:	2b01      	cmp	r3, #1
 8014630:	d119      	bne.n	8014666 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	330c      	adds	r3, #12
 8014638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	e853 3f00 	ldrex	r3, [r3]
 8014640:	60bb      	str	r3, [r7, #8]
   return(result);
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	f023 0310 	bic.w	r3, r3, #16
 8014648:	647b      	str	r3, [r7, #68]	@ 0x44
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	330c      	adds	r3, #12
 8014650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014652:	61ba      	str	r2, [r7, #24]
 8014654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014656:	6979      	ldr	r1, [r7, #20]
 8014658:	69ba      	ldr	r2, [r7, #24]
 801465a:	e841 2300 	strex	r3, r2, [r1]
 801465e:	613b      	str	r3, [r7, #16]
   return(result);
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d1e5      	bne.n	8014632 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2220      	movs	r2, #32
 801466a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2200      	movs	r2, #0
 8014672:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8014674:	bf00      	nop
 8014676:	3754      	adds	r7, #84	@ 0x54
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801468c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	2200      	movs	r2, #0
 8014692:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f7ff fee7 	bl	8014468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801469a:	bf00      	nop
 801469c:	3710      	adds	r7, #16
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80146a2:	b480      	push	{r7}
 80146a4:	b085      	sub	sp, #20
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	2b21      	cmp	r3, #33	@ 0x21
 80146b4:	d13e      	bne.n	8014734 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80146be:	d114      	bne.n	80146ea <UART_Transmit_IT+0x48>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	691b      	ldr	r3, [r3, #16]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d110      	bne.n	80146ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6a1b      	ldr	r3, [r3, #32]
 80146cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	461a      	mov	r2, r3
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80146dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6a1b      	ldr	r3, [r3, #32]
 80146e2:	1c9a      	adds	r2, r3, #2
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	621a      	str	r2, [r3, #32]
 80146e8:	e008      	b.n	80146fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6a1b      	ldr	r3, [r3, #32]
 80146ee:	1c59      	adds	r1, r3, #1
 80146f0:	687a      	ldr	r2, [r7, #4]
 80146f2:	6211      	str	r1, [r2, #32]
 80146f4:	781a      	ldrb	r2, [r3, #0]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014700:	b29b      	uxth	r3, r3
 8014702:	3b01      	subs	r3, #1
 8014704:	b29b      	uxth	r3, r3
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	4619      	mov	r1, r3
 801470a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 801470c:	2b00      	cmp	r3, #0
 801470e:	d10f      	bne.n	8014730 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	68da      	ldr	r2, [r3, #12]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801471e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	68da      	ldr	r2, [r3, #12]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801472e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	e000      	b.n	8014736 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8014734:	2302      	movs	r3, #2
  }
}
 8014736:	4618      	mov	r0, r3
 8014738:	3714      	adds	r7, #20
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr

08014742 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014742:	b580      	push	{r7, lr}
 8014744:	b082      	sub	sp, #8
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	68da      	ldr	r2, [r3, #12]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014758:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2220      	movs	r2, #32
 801475e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f7ff fe76 	bl	8014454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014768:	2300      	movs	r3, #0
}
 801476a:	4618      	mov	r0, r3
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b08c      	sub	sp, #48	@ 0x30
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 801477a:	2300      	movs	r3, #0
 801477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 801477e:	2300      	movs	r3, #0
 8014780:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014788:	b2db      	uxtb	r3, r3
 801478a:	2b22      	cmp	r3, #34	@ 0x22
 801478c:	f040 80aa 	bne.w	80148e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014798:	d115      	bne.n	80147c6 <UART_Receive_IT+0x54>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	691b      	ldr	r3, [r3, #16]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d111      	bne.n	80147c6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147be:	1c9a      	adds	r2, r3, #2
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80147c4:	e024      	b.n	8014810 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80147d4:	d007      	beq.n	80147e6 <UART_Receive_IT+0x74>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	689b      	ldr	r3, [r3, #8]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d10a      	bne.n	80147f4 <UART_Receive_IT+0x82>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	691b      	ldr	r3, [r3, #16]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d106      	bne.n	80147f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	b2da      	uxtb	r2, r3
 80147ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147f0:	701a      	strb	r2, [r3, #0]
 80147f2:	e008      	b.n	8014806 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014800:	b2da      	uxtb	r2, r3
 8014802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014804:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801480a:	1c5a      	adds	r2, r3, #1
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014814:	b29b      	uxth	r3, r3
 8014816:	3b01      	subs	r3, #1
 8014818:	b29b      	uxth	r3, r3
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	4619      	mov	r1, r3
 801481e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8014820:	2b00      	cmp	r3, #0
 8014822:	d15d      	bne.n	80148e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	68da      	ldr	r2, [r3, #12]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	f022 0220 	bic.w	r2, r2, #32
 8014832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	68da      	ldr	r2, [r3, #12]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	695a      	ldr	r2, [r3, #20]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	f022 0201 	bic.w	r2, r2, #1
 8014852:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2220      	movs	r2, #32
 8014858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2200      	movs	r2, #0
 8014860:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014866:	2b01      	cmp	r3, #1
 8014868:	d135      	bne.n	80148d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2200      	movs	r2, #0
 801486e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	330c      	adds	r3, #12
 8014876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	e853 3f00 	ldrex	r3, [r3]
 801487e:	613b      	str	r3, [r7, #16]
   return(result);
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	f023 0310 	bic.w	r3, r3, #16
 8014886:	627b      	str	r3, [r7, #36]	@ 0x24
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	330c      	adds	r3, #12
 801488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014890:	623a      	str	r2, [r7, #32]
 8014892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014894:	69f9      	ldr	r1, [r7, #28]
 8014896:	6a3a      	ldr	r2, [r7, #32]
 8014898:	e841 2300 	strex	r3, r2, [r1]
 801489c:	61bb      	str	r3, [r7, #24]
   return(result);
 801489e:	69bb      	ldr	r3, [r7, #24]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d1e5      	bne.n	8014870 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	f003 0310 	and.w	r3, r3, #16
 80148ae:	2b10      	cmp	r3, #16
 80148b0:	d10a      	bne.n	80148c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80148b2:	2300      	movs	r3, #0
 80148b4:	60fb      	str	r3, [r7, #12]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	60fb      	str	r3, [r7, #12]
 80148c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80148cc:	4619      	mov	r1, r3
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f7ff fdd4 	bl	801447c <HAL_UARTEx_RxEventCallback>
 80148d4:	e002      	b.n	80148dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f7f6 fc44 	bl	800b164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80148dc:	2300      	movs	r3, #0
 80148de:	e002      	b.n	80148e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80148e0:	2300      	movs	r3, #0
 80148e2:	e000      	b.n	80148e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80148e4:	2302      	movs	r3, #2
  }
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3730      	adds	r7, #48	@ 0x30
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
	...

080148f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80148f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80148f4:	b0c0      	sub	sp, #256	@ 0x100
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80148fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	691b      	ldr	r3, [r3, #16]
 8014904:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8014908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801490c:	68d9      	ldr	r1, [r3, #12]
 801490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	ea40 0301 	orr.w	r3, r0, r1
 8014918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801491e:	689a      	ldr	r2, [r3, #8]
 8014920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014924:	691b      	ldr	r3, [r3, #16]
 8014926:	431a      	orrs	r2, r3
 8014928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801492c:	695b      	ldr	r3, [r3, #20]
 801492e:	431a      	orrs	r2, r3
 8014930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014934:	69db      	ldr	r3, [r3, #28]
 8014936:	4313      	orrs	r3, r2
 8014938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	68db      	ldr	r3, [r3, #12]
 8014944:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8014948:	f021 010c 	bic.w	r1, r1, #12
 801494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8014956:	430b      	orrs	r3, r1
 8014958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	695b      	ldr	r3, [r3, #20]
 8014962:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8014966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801496a:	6999      	ldr	r1, [r3, #24]
 801496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	ea40 0301 	orr.w	r3, r0, r1
 8014976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	4b8f      	ldr	r3, [pc, #572]	@ (8014bbc <UART_SetConfig+0x2cc>)
 8014980:	429a      	cmp	r2, r3
 8014982:	d005      	beq.n	8014990 <UART_SetConfig+0xa0>
 8014984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	4b8d      	ldr	r3, [pc, #564]	@ (8014bc0 <UART_SetConfig+0x2d0>)
 801498c:	429a      	cmp	r2, r3
 801498e:	d104      	bne.n	801499a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014990:	f7fd f820 	bl	80119d4 <HAL_RCC_GetPCLK2Freq>
 8014994:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8014998:	e003      	b.n	80149a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801499a:	f7fd f807 	bl	80119ac <HAL_RCC_GetPCLK1Freq>
 801499e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149a6:	69db      	ldr	r3, [r3, #28]
 80149a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80149ac:	f040 810c 	bne.w	8014bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80149b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80149b4:	2200      	movs	r2, #0
 80149b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80149ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80149be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80149c2:	4622      	mov	r2, r4
 80149c4:	462b      	mov	r3, r5
 80149c6:	1891      	adds	r1, r2, r2
 80149c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80149ca:	415b      	adcs	r3, r3
 80149cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80149ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80149d2:	4621      	mov	r1, r4
 80149d4:	eb12 0801 	adds.w	r8, r2, r1
 80149d8:	4629      	mov	r1, r5
 80149da:	eb43 0901 	adc.w	r9, r3, r1
 80149de:	f04f 0200 	mov.w	r2, #0
 80149e2:	f04f 0300 	mov.w	r3, #0
 80149e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80149ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80149ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80149f2:	4690      	mov	r8, r2
 80149f4:	4699      	mov	r9, r3
 80149f6:	4623      	mov	r3, r4
 80149f8:	eb18 0303 	adds.w	r3, r8, r3
 80149fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014a00:	462b      	mov	r3, r5
 8014a02:	eb49 0303 	adc.w	r3, r9, r3
 8014a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8014a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	2200      	movs	r2, #0
 8014a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014a16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8014a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014a1e:	460b      	mov	r3, r1
 8014a20:	18db      	adds	r3, r3, r3
 8014a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8014a24:	4613      	mov	r3, r2
 8014a26:	eb42 0303 	adc.w	r3, r2, r3
 8014a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8014a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8014a34:	f7f4 f908 	bl	8008c48 <__aeabi_uldivmod>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	4b61      	ldr	r3, [pc, #388]	@ (8014bc4 <UART_SetConfig+0x2d4>)
 8014a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8014a42:	095b      	lsrs	r3, r3, #5
 8014a44:	011c      	lsls	r4, r3, #4
 8014a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014a50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8014a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8014a58:	4642      	mov	r2, r8
 8014a5a:	464b      	mov	r3, r9
 8014a5c:	1891      	adds	r1, r2, r2
 8014a5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8014a60:	415b      	adcs	r3, r3
 8014a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8014a68:	4641      	mov	r1, r8
 8014a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8014a6e:	4649      	mov	r1, r9
 8014a70:	eb43 0b01 	adc.w	fp, r3, r1
 8014a74:	f04f 0200 	mov.w	r2, #0
 8014a78:	f04f 0300 	mov.w	r3, #0
 8014a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8014a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014a88:	4692      	mov	sl, r2
 8014a8a:	469b      	mov	fp, r3
 8014a8c:	4643      	mov	r3, r8
 8014a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8014a92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014a96:	464b      	mov	r3, r9
 8014a98:	eb4b 0303 	adc.w	r3, fp, r3
 8014a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8014aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014aac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8014ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8014ab4:	460b      	mov	r3, r1
 8014ab6:	18db      	adds	r3, r3, r3
 8014ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8014aba:	4613      	mov	r3, r2
 8014abc:	eb42 0303 	adc.w	r3, r2, r3
 8014ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8014ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8014ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8014aca:	f7f4 f8bd 	bl	8008c48 <__aeabi_uldivmod>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	4611      	mov	r1, r2
 8014ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8014bc4 <UART_SetConfig+0x2d4>)
 8014ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8014ada:	095b      	lsrs	r3, r3, #5
 8014adc:	2264      	movs	r2, #100	@ 0x64
 8014ade:	fb02 f303 	mul.w	r3, r2, r3
 8014ae2:	1acb      	subs	r3, r1, r3
 8014ae4:	00db      	lsls	r3, r3, #3
 8014ae6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8014aea:	4b36      	ldr	r3, [pc, #216]	@ (8014bc4 <UART_SetConfig+0x2d4>)
 8014aec:	fba3 2302 	umull	r2, r3, r3, r2
 8014af0:	095b      	lsrs	r3, r3, #5
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8014af8:	441c      	add	r4, r3
 8014afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014afe:	2200      	movs	r2, #0
 8014b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014b04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8014b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8014b0c:	4642      	mov	r2, r8
 8014b0e:	464b      	mov	r3, r9
 8014b10:	1891      	adds	r1, r2, r2
 8014b12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014b14:	415b      	adcs	r3, r3
 8014b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8014b1c:	4641      	mov	r1, r8
 8014b1e:	1851      	adds	r1, r2, r1
 8014b20:	6339      	str	r1, [r7, #48]	@ 0x30
 8014b22:	4649      	mov	r1, r9
 8014b24:	414b      	adcs	r3, r1
 8014b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b28:	f04f 0200 	mov.w	r2, #0
 8014b2c:	f04f 0300 	mov.w	r3, #0
 8014b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8014b34:	4659      	mov	r1, fp
 8014b36:	00cb      	lsls	r3, r1, #3
 8014b38:	4651      	mov	r1, sl
 8014b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014b3e:	4651      	mov	r1, sl
 8014b40:	00ca      	lsls	r2, r1, #3
 8014b42:	4610      	mov	r0, r2
 8014b44:	4619      	mov	r1, r3
 8014b46:	4603      	mov	r3, r0
 8014b48:	4642      	mov	r2, r8
 8014b4a:	189b      	adds	r3, r3, r2
 8014b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014b50:	464b      	mov	r3, r9
 8014b52:	460a      	mov	r2, r1
 8014b54:	eb42 0303 	adc.w	r3, r2, r3
 8014b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8014b68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8014b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014b70:	460b      	mov	r3, r1
 8014b72:	18db      	adds	r3, r3, r3
 8014b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b76:	4613      	mov	r3, r2
 8014b78:	eb42 0303 	adc.w	r3, r2, r3
 8014b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8014b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8014b86:	f7f4 f85f 	bl	8008c48 <__aeabi_uldivmod>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014bc4 <UART_SetConfig+0x2d4>)
 8014b90:	fba3 1302 	umull	r1, r3, r3, r2
 8014b94:	095b      	lsrs	r3, r3, #5
 8014b96:	2164      	movs	r1, #100	@ 0x64
 8014b98:	fb01 f303 	mul.w	r3, r1, r3
 8014b9c:	1ad3      	subs	r3, r2, r3
 8014b9e:	00db      	lsls	r3, r3, #3
 8014ba0:	3332      	adds	r3, #50	@ 0x32
 8014ba2:	4a08      	ldr	r2, [pc, #32]	@ (8014bc4 <UART_SetConfig+0x2d4>)
 8014ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8014ba8:	095b      	lsrs	r3, r3, #5
 8014baa:	f003 0207 	and.w	r2, r3, #7
 8014bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	4422      	add	r2, r4
 8014bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014bb8:	e106      	b.n	8014dc8 <UART_SetConfig+0x4d8>
 8014bba:	bf00      	nop
 8014bbc:	40011000 	.word	0x40011000
 8014bc0:	40011400 	.word	0x40011400
 8014bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8014bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8014bda:	4642      	mov	r2, r8
 8014bdc:	464b      	mov	r3, r9
 8014bde:	1891      	adds	r1, r2, r2
 8014be0:	6239      	str	r1, [r7, #32]
 8014be2:	415b      	adcs	r3, r3
 8014be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014bea:	4641      	mov	r1, r8
 8014bec:	1854      	adds	r4, r2, r1
 8014bee:	4649      	mov	r1, r9
 8014bf0:	eb43 0501 	adc.w	r5, r3, r1
 8014bf4:	f04f 0200 	mov.w	r2, #0
 8014bf8:	f04f 0300 	mov.w	r3, #0
 8014bfc:	00eb      	lsls	r3, r5, #3
 8014bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014c02:	00e2      	lsls	r2, r4, #3
 8014c04:	4614      	mov	r4, r2
 8014c06:	461d      	mov	r5, r3
 8014c08:	4643      	mov	r3, r8
 8014c0a:	18e3      	adds	r3, r4, r3
 8014c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014c10:	464b      	mov	r3, r9
 8014c12:	eb45 0303 	adc.w	r3, r5, r3
 8014c16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014c26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8014c2a:	f04f 0200 	mov.w	r2, #0
 8014c2e:	f04f 0300 	mov.w	r3, #0
 8014c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8014c36:	4629      	mov	r1, r5
 8014c38:	008b      	lsls	r3, r1, #2
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014c40:	4621      	mov	r1, r4
 8014c42:	008a      	lsls	r2, r1, #2
 8014c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8014c48:	f7f3 fffe 	bl	8008c48 <__aeabi_uldivmod>
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	460b      	mov	r3, r1
 8014c50:	4b60      	ldr	r3, [pc, #384]	@ (8014dd4 <UART_SetConfig+0x4e4>)
 8014c52:	fba3 2302 	umull	r2, r3, r3, r2
 8014c56:	095b      	lsrs	r3, r3, #5
 8014c58:	011c      	lsls	r4, r3, #4
 8014c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014c5e:	2200      	movs	r2, #0
 8014c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014c64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8014c6c:	4642      	mov	r2, r8
 8014c6e:	464b      	mov	r3, r9
 8014c70:	1891      	adds	r1, r2, r2
 8014c72:	61b9      	str	r1, [r7, #24]
 8014c74:	415b      	adcs	r3, r3
 8014c76:	61fb      	str	r3, [r7, #28]
 8014c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014c7c:	4641      	mov	r1, r8
 8014c7e:	1851      	adds	r1, r2, r1
 8014c80:	6139      	str	r1, [r7, #16]
 8014c82:	4649      	mov	r1, r9
 8014c84:	414b      	adcs	r3, r1
 8014c86:	617b      	str	r3, [r7, #20]
 8014c88:	f04f 0200 	mov.w	r2, #0
 8014c8c:	f04f 0300 	mov.w	r3, #0
 8014c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014c94:	4659      	mov	r1, fp
 8014c96:	00cb      	lsls	r3, r1, #3
 8014c98:	4651      	mov	r1, sl
 8014c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014c9e:	4651      	mov	r1, sl
 8014ca0:	00ca      	lsls	r2, r1, #3
 8014ca2:	4610      	mov	r0, r2
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	4642      	mov	r2, r8
 8014caa:	189b      	adds	r3, r3, r2
 8014cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014cb0:	464b      	mov	r3, r9
 8014cb2:	460a      	mov	r2, r1
 8014cb4:	eb42 0303 	adc.w	r3, r2, r3
 8014cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014cc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8014cc8:	f04f 0200 	mov.w	r2, #0
 8014ccc:	f04f 0300 	mov.w	r3, #0
 8014cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8014cd4:	4649      	mov	r1, r9
 8014cd6:	008b      	lsls	r3, r1, #2
 8014cd8:	4641      	mov	r1, r8
 8014cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014cde:	4641      	mov	r1, r8
 8014ce0:	008a      	lsls	r2, r1, #2
 8014ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014ce6:	f7f3 ffaf 	bl	8008c48 <__aeabi_uldivmod>
 8014cea:	4602      	mov	r2, r0
 8014cec:	460b      	mov	r3, r1
 8014cee:	4611      	mov	r1, r2
 8014cf0:	4b38      	ldr	r3, [pc, #224]	@ (8014dd4 <UART_SetConfig+0x4e4>)
 8014cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8014cf6:	095b      	lsrs	r3, r3, #5
 8014cf8:	2264      	movs	r2, #100	@ 0x64
 8014cfa:	fb02 f303 	mul.w	r3, r2, r3
 8014cfe:	1acb      	subs	r3, r1, r3
 8014d00:	011b      	lsls	r3, r3, #4
 8014d02:	3332      	adds	r3, #50	@ 0x32
 8014d04:	4a33      	ldr	r2, [pc, #204]	@ (8014dd4 <UART_SetConfig+0x4e4>)
 8014d06:	fba2 2303 	umull	r2, r3, r2, r3
 8014d0a:	095b      	lsrs	r3, r3, #5
 8014d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014d10:	441c      	add	r4, r3
 8014d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014d16:	2200      	movs	r2, #0
 8014d18:	673b      	str	r3, [r7, #112]	@ 0x70
 8014d1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8014d1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8014d20:	4642      	mov	r2, r8
 8014d22:	464b      	mov	r3, r9
 8014d24:	1891      	adds	r1, r2, r2
 8014d26:	60b9      	str	r1, [r7, #8]
 8014d28:	415b      	adcs	r3, r3
 8014d2a:	60fb      	str	r3, [r7, #12]
 8014d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014d30:	4641      	mov	r1, r8
 8014d32:	1851      	adds	r1, r2, r1
 8014d34:	6039      	str	r1, [r7, #0]
 8014d36:	4649      	mov	r1, r9
 8014d38:	414b      	adcs	r3, r1
 8014d3a:	607b      	str	r3, [r7, #4]
 8014d3c:	f04f 0200 	mov.w	r2, #0
 8014d40:	f04f 0300 	mov.w	r3, #0
 8014d44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014d48:	4659      	mov	r1, fp
 8014d4a:	00cb      	lsls	r3, r1, #3
 8014d4c:	4651      	mov	r1, sl
 8014d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014d52:	4651      	mov	r1, sl
 8014d54:	00ca      	lsls	r2, r1, #3
 8014d56:	4610      	mov	r0, r2
 8014d58:	4619      	mov	r1, r3
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	4642      	mov	r2, r8
 8014d5e:	189b      	adds	r3, r3, r2
 8014d60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d62:	464b      	mov	r3, r9
 8014d64:	460a      	mov	r2, r1
 8014d66:	eb42 0303 	adc.w	r3, r2, r3
 8014d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	663b      	str	r3, [r7, #96]	@ 0x60
 8014d76:	667a      	str	r2, [r7, #100]	@ 0x64
 8014d78:	f04f 0200 	mov.w	r2, #0
 8014d7c:	f04f 0300 	mov.w	r3, #0
 8014d80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8014d84:	4649      	mov	r1, r9
 8014d86:	008b      	lsls	r3, r1, #2
 8014d88:	4641      	mov	r1, r8
 8014d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014d8e:	4641      	mov	r1, r8
 8014d90:	008a      	lsls	r2, r1, #2
 8014d92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8014d96:	f7f3 ff57 	bl	8008c48 <__aeabi_uldivmod>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	460b      	mov	r3, r1
 8014d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014dd4 <UART_SetConfig+0x4e4>)
 8014da0:	fba3 1302 	umull	r1, r3, r3, r2
 8014da4:	095b      	lsrs	r3, r3, #5
 8014da6:	2164      	movs	r1, #100	@ 0x64
 8014da8:	fb01 f303 	mul.w	r3, r1, r3
 8014dac:	1ad3      	subs	r3, r2, r3
 8014dae:	011b      	lsls	r3, r3, #4
 8014db0:	3332      	adds	r3, #50	@ 0x32
 8014db2:	4a08      	ldr	r2, [pc, #32]	@ (8014dd4 <UART_SetConfig+0x4e4>)
 8014db4:	fba2 2303 	umull	r2, r3, r2, r3
 8014db8:	095b      	lsrs	r3, r3, #5
 8014dba:	f003 020f 	and.w	r2, r3, #15
 8014dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4422      	add	r2, r4
 8014dc6:	609a      	str	r2, [r3, #8]
}
 8014dc8:	bf00      	nop
 8014dca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014dd4:	51eb851f 	.word	0x51eb851f

08014dd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f103 0208 	add.w	r2, r3, #8
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f04f 32ff 	mov.w	r2, #4294967295
 8014df0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f103 0208 	add.w	r2, r3, #8
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f103 0208 	add.w	r2, r3, #8
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014e0c:	bf00      	nop
 8014e0e:	370c      	adds	r7, #12
 8014e10:	46bd      	mov	sp, r7
 8014e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e16:	4770      	bx	lr

08014e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014e26:	bf00      	nop
 8014e28:	370c      	adds	r7, #12
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e30:	4770      	bx	lr

08014e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8014e32:	b480      	push	{r7}
 8014e34:	b085      	sub	sp, #20
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	6078      	str	r0, [r7, #4]
 8014e3a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	689a      	ldr	r2, [r3, #8]
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	689b      	ldr	r3, [r3, #8]
 8014e54:	683a      	ldr	r2, [r7, #0]
 8014e56:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	683a      	ldr	r2, [r7, #0]
 8014e5c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	1c5a      	adds	r2, r3, #1
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	601a      	str	r2, [r3, #0]
}
 8014e6e:	bf00      	nop
 8014e70:	3714      	adds	r7, #20
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8014e7a:	b480      	push	{r7}
 8014e7c:	b085      	sub	sp, #20
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e90:	d103      	bne.n	8014e9a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	691b      	ldr	r3, [r3, #16]
 8014e96:	60fb      	str	r3, [r7, #12]
 8014e98:	e00c      	b.n	8014eb4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	3308      	adds	r3, #8
 8014e9e:	60fb      	str	r3, [r7, #12]
 8014ea0:	e002      	b.n	8014ea8 <vListInsert+0x2e>
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	60fb      	str	r3, [r7, #12]
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	68ba      	ldr	r2, [r7, #8]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d2f6      	bcs.n	8014ea2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	685a      	ldr	r2, [r3, #4]
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	683a      	ldr	r2, [r7, #0]
 8014ec2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	683a      	ldr	r2, [r7, #0]
 8014ece:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	1c5a      	adds	r2, r3, #1
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	601a      	str	r2, [r3, #0]
}
 8014ee0:	bf00      	nop
 8014ee2:	3714      	adds	r7, #20
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eea:	4770      	bx	lr

08014eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014eec:	b480      	push	{r7}
 8014eee:	b085      	sub	sp, #20
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	691b      	ldr	r3, [r3, #16]
 8014ef8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	6892      	ldr	r2, [r2, #8]
 8014f02:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	6852      	ldr	r2, [r2, #4]
 8014f0c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d103      	bne.n	8014f20 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	689a      	ldr	r2, [r3, #8]
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2200      	movs	r2, #0
 8014f24:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	1e5a      	subs	r2, r3, #1
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3714      	adds	r7, #20
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d10b      	bne.n	8014f6c <xQueueGenericReset+0x2c>
        __asm volatile
 8014f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f58:	f383 8811 	msr	BASEPRI, r3
 8014f5c:	f3bf 8f6f 	isb	sy
 8014f60:	f3bf 8f4f 	dsb	sy
 8014f64:	60bb      	str	r3, [r7, #8]
    }
 8014f66:	bf00      	nop
 8014f68:	bf00      	nop
 8014f6a:	e7fd      	b.n	8014f68 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8014f6c:	f002 fcee 	bl	801794c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f78:	68f9      	ldr	r1, [r7, #12]
 8014f7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014f7c:	fb01 f303 	mul.w	r3, r1, r3
 8014f80:	441a      	add	r2, r3
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f9c:	3b01      	subs	r3, #1
 8014f9e:	68f9      	ldr	r1, [r7, #12]
 8014fa0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014fa2:	fb01 f303 	mul.w	r3, r1, r3
 8014fa6:	441a      	add	r2, r3
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	22ff      	movs	r2, #255	@ 0xff
 8014fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	22ff      	movs	r2, #255	@ 0xff
 8014fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d114      	bne.n	8014fec <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	691b      	ldr	r3, [r3, #16]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d01a      	beq.n	8015000 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	3310      	adds	r3, #16
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f001 fb20 	bl	8016614 <xTaskRemoveFromEventList>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d012      	beq.n	8015000 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8014fda:	4b0d      	ldr	r3, [pc, #52]	@ (8015010 <xQueueGenericReset+0xd0>)
 8014fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fe0:	601a      	str	r2, [r3, #0]
 8014fe2:	f3bf 8f4f 	dsb	sy
 8014fe6:	f3bf 8f6f 	isb	sy
 8014fea:	e009      	b.n	8015000 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	3310      	adds	r3, #16
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7ff fef1 	bl	8014dd8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	3324      	adds	r3, #36	@ 0x24
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7ff feec 	bl	8014dd8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8015000:	f002 fcd6 	bl	80179b0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8015004:	2301      	movs	r3, #1
}
 8015006:	4618      	mov	r0, r3
 8015008:	3710      	adds	r7, #16
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	e000ed04 	.word	0xe000ed04

08015014 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8015014:	b580      	push	{r7, lr}
 8015016:	b08c      	sub	sp, #48	@ 0x30
 8015018:	af02      	add	r7, sp, #8
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	4613      	mov	r3, r2
 8015020:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d10b      	bne.n	8015040 <xQueueGenericCreate+0x2c>
        __asm volatile
 8015028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801502c:	f383 8811 	msr	BASEPRI, r3
 8015030:	f3bf 8f6f 	isb	sy
 8015034:	f3bf 8f4f 	dsb	sy
 8015038:	61bb      	str	r3, [r7, #24]
    }
 801503a:	bf00      	nop
 801503c:	bf00      	nop
 801503e:	e7fd      	b.n	801503c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	68ba      	ldr	r2, [r7, #8]
 8015044:	fb02 f303 	mul.w	r3, r2, r3
 8015048:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d006      	beq.n	801505e <xQueueGenericCreate+0x4a>
 8015050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	fbb2 f3f3 	udiv	r3, r2, r3
 8015058:	68fa      	ldr	r2, [r7, #12]
 801505a:	429a      	cmp	r2, r3
 801505c:	d101      	bne.n	8015062 <xQueueGenericCreate+0x4e>
 801505e:	2301      	movs	r3, #1
 8015060:	e000      	b.n	8015064 <xQueueGenericCreate+0x50>
 8015062:	2300      	movs	r3, #0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d10b      	bne.n	8015080 <xQueueGenericCreate+0x6c>
        __asm volatile
 8015068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801506c:	f383 8811 	msr	BASEPRI, r3
 8015070:	f3bf 8f6f 	isb	sy
 8015074:	f3bf 8f4f 	dsb	sy
 8015078:	617b      	str	r3, [r7, #20]
    }
 801507a:	bf00      	nop
 801507c:	bf00      	nop
 801507e:	e7fd      	b.n	801507c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8015080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015082:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8015086:	d90b      	bls.n	80150a0 <xQueueGenericCreate+0x8c>
        __asm volatile
 8015088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801508c:	f383 8811 	msr	BASEPRI, r3
 8015090:	f3bf 8f6f 	isb	sy
 8015094:	f3bf 8f4f 	dsb	sy
 8015098:	613b      	str	r3, [r7, #16]
    }
 801509a:	bf00      	nop
 801509c:	bf00      	nop
 801509e:	e7fd      	b.n	801509c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80150a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a2:	3350      	adds	r3, #80	@ 0x50
 80150a4:	4618      	mov	r0, r3
 80150a6:	f002 fd7b 	bl	8017ba0 <pvPortMalloc>
 80150aa:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80150ac:	6a3b      	ldr	r3, [r7, #32]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d00d      	beq.n	80150ce <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80150b2:	6a3b      	ldr	r3, [r7, #32]
 80150b4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150b6:	69fb      	ldr	r3, [r7, #28]
 80150b8:	3350      	adds	r3, #80	@ 0x50
 80150ba:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80150bc:	79fa      	ldrb	r2, [r7, #7]
 80150be:	6a3b      	ldr	r3, [r7, #32]
 80150c0:	9300      	str	r3, [sp, #0]
 80150c2:	4613      	mov	r3, r2
 80150c4:	69fa      	ldr	r2, [r7, #28]
 80150c6:	68b9      	ldr	r1, [r7, #8]
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f000 f805 	bl	80150d8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80150ce:	6a3b      	ldr	r3, [r7, #32]
    }
 80150d0:	4618      	mov	r0, r3
 80150d2:	3728      	adds	r7, #40	@ 0x28
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	607a      	str	r2, [r7, #4]
 80150e4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d103      	bne.n	80150f4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	69ba      	ldr	r2, [r7, #24]
 80150f0:	601a      	str	r2, [r3, #0]
 80150f2:	e002      	b.n	80150fa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	68fa      	ldr	r2, [r7, #12]
 80150fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	68ba      	ldr	r2, [r7, #8]
 8015104:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015106:	2101      	movs	r1, #1
 8015108:	69b8      	ldr	r0, [r7, #24]
 801510a:	f7ff ff19 	bl	8014f40 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 801510e:	69bb      	ldr	r3, [r7, #24]
 8015110:	78fa      	ldrb	r2, [r7, #3]
 8015112:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8015116:	bf00      	nop
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}

0801511e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 801511e:	b580      	push	{r7, lr}
 8015120:	b082      	sub	sp, #8
 8015122:	af00      	add	r7, sp, #0
 8015124:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d00e      	beq.n	801514a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2200      	movs	r2, #0
 8015136:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2200      	movs	r2, #0
 801513c:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801513e:	2300      	movs	r3, #0
 8015140:	2200      	movs	r2, #0
 8015142:	2100      	movs	r1, #0
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f000 f81d 	bl	8015184 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 801514a:	bf00      	nop
 801514c:	3708      	adds	r7, #8
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}

08015152 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8015152:	b580      	push	{r7, lr}
 8015154:	b086      	sub	sp, #24
 8015156:	af00      	add	r7, sp, #0
 8015158:	4603      	mov	r3, r0
 801515a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801515c:	2301      	movs	r3, #1
 801515e:	617b      	str	r3, [r7, #20]
 8015160:	2300      	movs	r3, #0
 8015162:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015164:	79fb      	ldrb	r3, [r7, #7]
 8015166:	461a      	mov	r2, r3
 8015168:	6939      	ldr	r1, [r7, #16]
 801516a:	6978      	ldr	r0, [r7, #20]
 801516c:	f7ff ff52 	bl	8015014 <xQueueGenericCreate>
 8015170:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015172:	68f8      	ldr	r0, [r7, #12]
 8015174:	f7ff ffd3 	bl	801511e <prvInitialiseMutex>

        return xNewQueue;
 8015178:	68fb      	ldr	r3, [r7, #12]
    }
 801517a:	4618      	mov	r0, r3
 801517c:	3718      	adds	r7, #24
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
	...

08015184 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b08e      	sub	sp, #56	@ 0x38
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
 8015190:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015192:	2300      	movs	r3, #0
 8015194:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 801519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801519c:	2b00      	cmp	r3, #0
 801519e:	d10b      	bne.n	80151b8 <xQueueGenericSend+0x34>
        __asm volatile
 80151a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151a4:	f383 8811 	msr	BASEPRI, r3
 80151a8:	f3bf 8f6f 	isb	sy
 80151ac:	f3bf 8f4f 	dsb	sy
 80151b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80151b2:	bf00      	nop
 80151b4:	bf00      	nop
 80151b6:	e7fd      	b.n	80151b4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d103      	bne.n	80151c6 <xQueueGenericSend+0x42>
 80151be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d101      	bne.n	80151ca <xQueueGenericSend+0x46>
 80151c6:	2301      	movs	r3, #1
 80151c8:	e000      	b.n	80151cc <xQueueGenericSend+0x48>
 80151ca:	2300      	movs	r3, #0
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d10b      	bne.n	80151e8 <xQueueGenericSend+0x64>
        __asm volatile
 80151d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151d4:	f383 8811 	msr	BASEPRI, r3
 80151d8:	f3bf 8f6f 	isb	sy
 80151dc:	f3bf 8f4f 	dsb	sy
 80151e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80151e2:	bf00      	nop
 80151e4:	bf00      	nop
 80151e6:	e7fd      	b.n	80151e4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	2b02      	cmp	r3, #2
 80151ec:	d103      	bne.n	80151f6 <xQueueGenericSend+0x72>
 80151ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	d101      	bne.n	80151fa <xQueueGenericSend+0x76>
 80151f6:	2301      	movs	r3, #1
 80151f8:	e000      	b.n	80151fc <xQueueGenericSend+0x78>
 80151fa:	2300      	movs	r3, #0
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d10b      	bne.n	8015218 <xQueueGenericSend+0x94>
        __asm volatile
 8015200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015204:	f383 8811 	msr	BASEPRI, r3
 8015208:	f3bf 8f6f 	isb	sy
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	623b      	str	r3, [r7, #32]
    }
 8015212:	bf00      	nop
 8015214:	bf00      	nop
 8015216:	e7fd      	b.n	8015214 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015218:	f001 fc70 	bl	8016afc <xTaskGetSchedulerState>
 801521c:	4603      	mov	r3, r0
 801521e:	2b00      	cmp	r3, #0
 8015220:	d102      	bne.n	8015228 <xQueueGenericSend+0xa4>
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d101      	bne.n	801522c <xQueueGenericSend+0xa8>
 8015228:	2301      	movs	r3, #1
 801522a:	e000      	b.n	801522e <xQueueGenericSend+0xaa>
 801522c:	2300      	movs	r3, #0
 801522e:	2b00      	cmp	r3, #0
 8015230:	d10b      	bne.n	801524a <xQueueGenericSend+0xc6>
        __asm volatile
 8015232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015236:	f383 8811 	msr	BASEPRI, r3
 801523a:	f3bf 8f6f 	isb	sy
 801523e:	f3bf 8f4f 	dsb	sy
 8015242:	61fb      	str	r3, [r7, #28]
    }
 8015244:	bf00      	nop
 8015246:	bf00      	nop
 8015248:	e7fd      	b.n	8015246 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801524a:	f002 fb7f 	bl	801794c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015256:	429a      	cmp	r2, r3
 8015258:	d302      	bcc.n	8015260 <xQueueGenericSend+0xdc>
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	2b02      	cmp	r3, #2
 801525e:	d129      	bne.n	80152b4 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015260:	683a      	ldr	r2, [r7, #0]
 8015262:	68b9      	ldr	r1, [r7, #8]
 8015264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015266:	f000 fb47 	bl	80158f8 <prvCopyDataToQueue>
 801526a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015270:	2b00      	cmp	r3, #0
 8015272:	d010      	beq.n	8015296 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015276:	3324      	adds	r3, #36	@ 0x24
 8015278:	4618      	mov	r0, r3
 801527a:	f001 f9cb 	bl	8016614 <xTaskRemoveFromEventList>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d013      	beq.n	80152ac <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8015284:	4b3f      	ldr	r3, [pc, #252]	@ (8015384 <xQueueGenericSend+0x200>)
 8015286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801528a:	601a      	str	r2, [r3, #0]
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	f3bf 8f6f 	isb	sy
 8015294:	e00a      	b.n	80152ac <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8015296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015298:	2b00      	cmp	r3, #0
 801529a:	d007      	beq.n	80152ac <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 801529c:	4b39      	ldr	r3, [pc, #228]	@ (8015384 <xQueueGenericSend+0x200>)
 801529e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152a2:	601a      	str	r2, [r3, #0]
 80152a4:	f3bf 8f4f 	dsb	sy
 80152a8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80152ac:	f002 fb80 	bl	80179b0 <vPortExitCritical>
                return pdPASS;
 80152b0:	2301      	movs	r3, #1
 80152b2:	e063      	b.n	801537c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d103      	bne.n	80152c2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80152ba:	f002 fb79 	bl	80179b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80152be:	2300      	movs	r3, #0
 80152c0:	e05c      	b.n	801537c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80152c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d106      	bne.n	80152d6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80152c8:	f107 0314 	add.w	r3, r7, #20
 80152cc:	4618      	mov	r0, r3
 80152ce:	f001 fa05 	bl	80166dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80152d2:	2301      	movs	r3, #1
 80152d4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80152d6:	f002 fb6b 	bl	80179b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80152da:	f000 fec3 	bl	8016064 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80152de:	f002 fb35 	bl	801794c <vPortEnterCritical>
 80152e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80152e8:	b25b      	sxtb	r3, r3
 80152ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152ee:	d103      	bne.n	80152f8 <xQueueGenericSend+0x174>
 80152f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152f2:	2200      	movs	r2, #0
 80152f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80152f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80152fe:	b25b      	sxtb	r3, r3
 8015300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015304:	d103      	bne.n	801530e <xQueueGenericSend+0x18a>
 8015306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015308:	2200      	movs	r2, #0
 801530a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801530e:	f002 fb4f 	bl	80179b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015312:	1d3a      	adds	r2, r7, #4
 8015314:	f107 0314 	add.w	r3, r7, #20
 8015318:	4611      	mov	r1, r2
 801531a:	4618      	mov	r0, r3
 801531c:	f001 f9f4 	bl	8016708 <xTaskCheckForTimeOut>
 8015320:	4603      	mov	r3, r0
 8015322:	2b00      	cmp	r3, #0
 8015324:	d124      	bne.n	8015370 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015326:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015328:	f000 fbde 	bl	8015ae8 <prvIsQueueFull>
 801532c:	4603      	mov	r3, r0
 801532e:	2b00      	cmp	r3, #0
 8015330:	d018      	beq.n	8015364 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015334:	3310      	adds	r3, #16
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	4611      	mov	r1, r2
 801533a:	4618      	mov	r0, r3
 801533c:	f001 f918 	bl	8016570 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8015340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015342:	f000 fb69 	bl	8015a18 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8015346:	f000 fe9b 	bl	8016080 <xTaskResumeAll>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	f47f af7c 	bne.w	801524a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8015352:	4b0c      	ldr	r3, [pc, #48]	@ (8015384 <xQueueGenericSend+0x200>)
 8015354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015358:	601a      	str	r2, [r3, #0]
 801535a:	f3bf 8f4f 	dsb	sy
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	e772      	b.n	801524a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8015364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015366:	f000 fb57 	bl	8015a18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801536a:	f000 fe89 	bl	8016080 <xTaskResumeAll>
 801536e:	e76c      	b.n	801524a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8015370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015372:	f000 fb51 	bl	8015a18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8015376:	f000 fe83 	bl	8016080 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 801537a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 801537c:	4618      	mov	r0, r3
 801537e:	3738      	adds	r7, #56	@ 0x38
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	e000ed04 	.word	0xe000ed04

08015388 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b090      	sub	sp, #64	@ 0x40
 801538c:	af00      	add	r7, sp, #0
 801538e:	60f8      	str	r0, [r7, #12]
 8015390:	60b9      	str	r1, [r7, #8]
 8015392:	607a      	str	r2, [r7, #4]
 8015394:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 801539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801539c:	2b00      	cmp	r3, #0
 801539e:	d10b      	bne.n	80153b8 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80153a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153a4:	f383 8811 	msr	BASEPRI, r3
 80153a8:	f3bf 8f6f 	isb	sy
 80153ac:	f3bf 8f4f 	dsb	sy
 80153b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80153b2:	bf00      	nop
 80153b4:	bf00      	nop
 80153b6:	e7fd      	b.n	80153b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d103      	bne.n	80153c6 <xQueueGenericSendFromISR+0x3e>
 80153be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d101      	bne.n	80153ca <xQueueGenericSendFromISR+0x42>
 80153c6:	2301      	movs	r3, #1
 80153c8:	e000      	b.n	80153cc <xQueueGenericSendFromISR+0x44>
 80153ca:	2300      	movs	r3, #0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d10b      	bne.n	80153e8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80153d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d4:	f383 8811 	msr	BASEPRI, r3
 80153d8:	f3bf 8f6f 	isb	sy
 80153dc:	f3bf 8f4f 	dsb	sy
 80153e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80153e2:	bf00      	nop
 80153e4:	bf00      	nop
 80153e6:	e7fd      	b.n	80153e4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	2b02      	cmp	r3, #2
 80153ec:	d103      	bne.n	80153f6 <xQueueGenericSendFromISR+0x6e>
 80153ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	d101      	bne.n	80153fa <xQueueGenericSendFromISR+0x72>
 80153f6:	2301      	movs	r3, #1
 80153f8:	e000      	b.n	80153fc <xQueueGenericSendFromISR+0x74>
 80153fa:	2300      	movs	r3, #0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d10b      	bne.n	8015418 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8015400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015404:	f383 8811 	msr	BASEPRI, r3
 8015408:	f3bf 8f6f 	isb	sy
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	623b      	str	r3, [r7, #32]
    }
 8015412:	bf00      	nop
 8015414:	bf00      	nop
 8015416:	e7fd      	b.n	8015414 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015418:	f002 fb80 	bl	8017b1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 801541c:	f3ef 8211 	mrs	r2, BASEPRI
 8015420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015424:	f383 8811 	msr	BASEPRI, r3
 8015428:	f3bf 8f6f 	isb	sy
 801542c:	f3bf 8f4f 	dsb	sy
 8015430:	61fa      	str	r2, [r7, #28]
 8015432:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8015434:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015436:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801543a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801543e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015440:	429a      	cmp	r2, r3
 8015442:	d302      	bcc.n	801544a <xQueueGenericSendFromISR+0xc2>
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	2b02      	cmp	r3, #2
 8015448:	d13f      	bne.n	80154ca <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 801544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801544c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015450:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015458:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801545a:	683a      	ldr	r2, [r7, #0]
 801545c:	68b9      	ldr	r1, [r7, #8]
 801545e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015460:	f000 fa4a 	bl	80158f8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8015464:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801546c:	d112      	bne.n	8015494 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801546e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015472:	2b00      	cmp	r3, #0
 8015474:	d026      	beq.n	80154c4 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015478:	3324      	adds	r3, #36	@ 0x24
 801547a:	4618      	mov	r0, r3
 801547c:	f001 f8ca 	bl	8016614 <xTaskRemoveFromEventList>
 8015480:	4603      	mov	r3, r0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d01e      	beq.n	80154c4 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d01b      	beq.n	80154c4 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2201      	movs	r2, #1
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	e017      	b.n	80154c4 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8015494:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015498:	2b7f      	cmp	r3, #127	@ 0x7f
 801549a:	d10b      	bne.n	80154b4 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 801549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154a0:	f383 8811 	msr	BASEPRI, r3
 80154a4:	f3bf 8f6f 	isb	sy
 80154a8:	f3bf 8f4f 	dsb	sy
 80154ac:	617b      	str	r3, [r7, #20]
    }
 80154ae:	bf00      	nop
 80154b0:	bf00      	nop
 80154b2:	e7fd      	b.n	80154b0 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80154b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80154b8:	3301      	adds	r3, #1
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	b25a      	sxtb	r2, r3
 80154be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80154c4:	2301      	movs	r3, #1
 80154c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80154c8:	e001      	b.n	80154ce <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80154ca:	2300      	movs	r3, #0
 80154cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154d0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80154d8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80154da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3740      	adds	r7, #64	@ 0x40
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08c      	sub	sp, #48	@ 0x30
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80154f0:	2300      	movs	r3, #0
 80154f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80154f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d10b      	bne.n	8015516 <xQueueReceive+0x32>
        __asm volatile
 80154fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015502:	f383 8811 	msr	BASEPRI, r3
 8015506:	f3bf 8f6f 	isb	sy
 801550a:	f3bf 8f4f 	dsb	sy
 801550e:	623b      	str	r3, [r7, #32]
    }
 8015510:	bf00      	nop
 8015512:	bf00      	nop
 8015514:	e7fd      	b.n	8015512 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d103      	bne.n	8015524 <xQueueReceive+0x40>
 801551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015520:	2b00      	cmp	r3, #0
 8015522:	d101      	bne.n	8015528 <xQueueReceive+0x44>
 8015524:	2301      	movs	r3, #1
 8015526:	e000      	b.n	801552a <xQueueReceive+0x46>
 8015528:	2300      	movs	r3, #0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d10b      	bne.n	8015546 <xQueueReceive+0x62>
        __asm volatile
 801552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015532:	f383 8811 	msr	BASEPRI, r3
 8015536:	f3bf 8f6f 	isb	sy
 801553a:	f3bf 8f4f 	dsb	sy
 801553e:	61fb      	str	r3, [r7, #28]
    }
 8015540:	bf00      	nop
 8015542:	bf00      	nop
 8015544:	e7fd      	b.n	8015542 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015546:	f001 fad9 	bl	8016afc <xTaskGetSchedulerState>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d102      	bne.n	8015556 <xQueueReceive+0x72>
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d101      	bne.n	801555a <xQueueReceive+0x76>
 8015556:	2301      	movs	r3, #1
 8015558:	e000      	b.n	801555c <xQueueReceive+0x78>
 801555a:	2300      	movs	r3, #0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d10b      	bne.n	8015578 <xQueueReceive+0x94>
        __asm volatile
 8015560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015564:	f383 8811 	msr	BASEPRI, r3
 8015568:	f3bf 8f6f 	isb	sy
 801556c:	f3bf 8f4f 	dsb	sy
 8015570:	61bb      	str	r3, [r7, #24]
    }
 8015572:	bf00      	nop
 8015574:	bf00      	nop
 8015576:	e7fd      	b.n	8015574 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8015578:	f002 f9e8 	bl	801794c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015580:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015584:	2b00      	cmp	r3, #0
 8015586:	d01f      	beq.n	80155c8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015588:	68b9      	ldr	r1, [r7, #8]
 801558a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801558c:	f000 fa1e 	bl	80159cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015592:	1e5a      	subs	r2, r3, #1
 8015594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015596:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801559a:	691b      	ldr	r3, [r3, #16]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00f      	beq.n	80155c0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80155a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155a2:	3310      	adds	r3, #16
 80155a4:	4618      	mov	r0, r3
 80155a6:	f001 f835 	bl	8016614 <xTaskRemoveFromEventList>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d007      	beq.n	80155c0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80155b0:	4b3c      	ldr	r3, [pc, #240]	@ (80156a4 <xQueueReceive+0x1c0>)
 80155b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	f3bf 8f4f 	dsb	sy
 80155bc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80155c0:	f002 f9f6 	bl	80179b0 <vPortExitCritical>
                return pdPASS;
 80155c4:	2301      	movs	r3, #1
 80155c6:	e069      	b.n	801569c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d103      	bne.n	80155d6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80155ce:	f002 f9ef 	bl	80179b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80155d2:	2300      	movs	r3, #0
 80155d4:	e062      	b.n	801569c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80155d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d106      	bne.n	80155ea <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80155dc:	f107 0310 	add.w	r3, r7, #16
 80155e0:	4618      	mov	r0, r3
 80155e2:	f001 f87b 	bl	80166dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80155e6:	2301      	movs	r3, #1
 80155e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80155ea:	f002 f9e1 	bl	80179b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80155ee:	f000 fd39 	bl	8016064 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80155f2:	f002 f9ab 	bl	801794c <vPortEnterCritical>
 80155f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80155fc:	b25b      	sxtb	r3, r3
 80155fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015602:	d103      	bne.n	801560c <xQueueReceive+0x128>
 8015604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015606:	2200      	movs	r2, #0
 8015608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801560e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015612:	b25b      	sxtb	r3, r3
 8015614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015618:	d103      	bne.n	8015622 <xQueueReceive+0x13e>
 801561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801561c:	2200      	movs	r2, #0
 801561e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015622:	f002 f9c5 	bl	80179b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015626:	1d3a      	adds	r2, r7, #4
 8015628:	f107 0310 	add.w	r3, r7, #16
 801562c:	4611      	mov	r1, r2
 801562e:	4618      	mov	r0, r3
 8015630:	f001 f86a 	bl	8016708 <xTaskCheckForTimeOut>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d123      	bne.n	8015682 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801563a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801563c:	f000 fa3e 	bl	8015abc <prvIsQueueEmpty>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d017      	beq.n	8015676 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015648:	3324      	adds	r3, #36	@ 0x24
 801564a:	687a      	ldr	r2, [r7, #4]
 801564c:	4611      	mov	r1, r2
 801564e:	4618      	mov	r0, r3
 8015650:	f000 ff8e 	bl	8016570 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8015654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015656:	f000 f9df 	bl	8015a18 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 801565a:	f000 fd11 	bl	8016080 <xTaskResumeAll>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d189      	bne.n	8015578 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8015664:	4b0f      	ldr	r3, [pc, #60]	@ (80156a4 <xQueueReceive+0x1c0>)
 8015666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801566a:	601a      	str	r2, [r3, #0]
 801566c:	f3bf 8f4f 	dsb	sy
 8015670:	f3bf 8f6f 	isb	sy
 8015674:	e780      	b.n	8015578 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8015676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015678:	f000 f9ce 	bl	8015a18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801567c:	f000 fd00 	bl	8016080 <xTaskResumeAll>
 8015680:	e77a      	b.n	8015578 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8015682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015684:	f000 f9c8 	bl	8015a18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8015688:	f000 fcfa 	bl	8016080 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801568c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801568e:	f000 fa15 	bl	8015abc <prvIsQueueEmpty>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	f43f af6f 	beq.w	8015578 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 801569a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 801569c:	4618      	mov	r0, r3
 801569e:	3730      	adds	r7, #48	@ 0x30
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	e000ed04 	.word	0xe000ed04

080156a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b08e      	sub	sp, #56	@ 0x38
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80156b2:	2300      	movs	r3, #0
 80156b4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80156ba:	2300      	movs	r3, #0
 80156bc:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80156be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d10b      	bne.n	80156dc <xQueueSemaphoreTake+0x34>
        __asm volatile
 80156c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156c8:	f383 8811 	msr	BASEPRI, r3
 80156cc:	f3bf 8f6f 	isb	sy
 80156d0:	f3bf 8f4f 	dsb	sy
 80156d4:	623b      	str	r3, [r7, #32]
    }
 80156d6:	bf00      	nop
 80156d8:	bf00      	nop
 80156da:	e7fd      	b.n	80156d8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80156dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00b      	beq.n	80156fc <xQueueSemaphoreTake+0x54>
        __asm volatile
 80156e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156e8:	f383 8811 	msr	BASEPRI, r3
 80156ec:	f3bf 8f6f 	isb	sy
 80156f0:	f3bf 8f4f 	dsb	sy
 80156f4:	61fb      	str	r3, [r7, #28]
    }
 80156f6:	bf00      	nop
 80156f8:	bf00      	nop
 80156fa:	e7fd      	b.n	80156f8 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80156fc:	f001 f9fe 	bl	8016afc <xTaskGetSchedulerState>
 8015700:	4603      	mov	r3, r0
 8015702:	2b00      	cmp	r3, #0
 8015704:	d102      	bne.n	801570c <xQueueSemaphoreTake+0x64>
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d101      	bne.n	8015710 <xQueueSemaphoreTake+0x68>
 801570c:	2301      	movs	r3, #1
 801570e:	e000      	b.n	8015712 <xQueueSemaphoreTake+0x6a>
 8015710:	2300      	movs	r3, #0
 8015712:	2b00      	cmp	r3, #0
 8015714:	d10b      	bne.n	801572e <xQueueSemaphoreTake+0x86>
        __asm volatile
 8015716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801571a:	f383 8811 	msr	BASEPRI, r3
 801571e:	f3bf 8f6f 	isb	sy
 8015722:	f3bf 8f4f 	dsb	sy
 8015726:	61bb      	str	r3, [r7, #24]
    }
 8015728:	bf00      	nop
 801572a:	bf00      	nop
 801572c:	e7fd      	b.n	801572a <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801572e:	f002 f90d 	bl	801794c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015736:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801573a:	2b00      	cmp	r3, #0
 801573c:	d024      	beq.n	8015788 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015740:	1e5a      	subs	r2, r3, #1
 8015742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015744:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d104      	bne.n	8015758 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801574e:	f001 fc31 	bl	8016fb4 <pvTaskIncrementMutexHeldCount>
 8015752:	4602      	mov	r2, r0
 8015754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015756:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801575a:	691b      	ldr	r3, [r3, #16]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d00f      	beq.n	8015780 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015762:	3310      	adds	r3, #16
 8015764:	4618      	mov	r0, r3
 8015766:	f000 ff55 	bl	8016614 <xTaskRemoveFromEventList>
 801576a:	4603      	mov	r3, r0
 801576c:	2b00      	cmp	r3, #0
 801576e:	d007      	beq.n	8015780 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8015770:	4b54      	ldr	r3, [pc, #336]	@ (80158c4 <xQueueSemaphoreTake+0x21c>)
 8015772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015776:	601a      	str	r2, [r3, #0]
 8015778:	f3bf 8f4f 	dsb	sy
 801577c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8015780:	f002 f916 	bl	80179b0 <vPortExitCritical>
                return pdPASS;
 8015784:	2301      	movs	r3, #1
 8015786:	e098      	b.n	80158ba <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d112      	bne.n	80157b4 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 801578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00b      	beq.n	80157ac <xQueueSemaphoreTake+0x104>
        __asm volatile
 8015794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015798:	f383 8811 	msr	BASEPRI, r3
 801579c:	f3bf 8f6f 	isb	sy
 80157a0:	f3bf 8f4f 	dsb	sy
 80157a4:	617b      	str	r3, [r7, #20]
    }
 80157a6:	bf00      	nop
 80157a8:	bf00      	nop
 80157aa:	e7fd      	b.n	80157a8 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80157ac:	f002 f900 	bl	80179b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80157b0:	2300      	movs	r3, #0
 80157b2:	e082      	b.n	80158ba <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80157b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d106      	bne.n	80157c8 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80157ba:	f107 030c 	add.w	r3, r7, #12
 80157be:	4618      	mov	r0, r3
 80157c0:	f000 ff8c 	bl	80166dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80157c4:	2301      	movs	r3, #1
 80157c6:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80157c8:	f002 f8f2 	bl	80179b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80157cc:	f000 fc4a 	bl	8016064 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80157d0:	f002 f8bc 	bl	801794c <vPortEnterCritical>
 80157d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80157da:	b25b      	sxtb	r3, r3
 80157dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157e0:	d103      	bne.n	80157ea <xQueueSemaphoreTake+0x142>
 80157e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157e4:	2200      	movs	r2, #0
 80157e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80157ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80157f0:	b25b      	sxtb	r3, r3
 80157f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f6:	d103      	bne.n	8015800 <xQueueSemaphoreTake+0x158>
 80157f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157fa:	2200      	movs	r2, #0
 80157fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015800:	f002 f8d6 	bl	80179b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015804:	463a      	mov	r2, r7
 8015806:	f107 030c 	add.w	r3, r7, #12
 801580a:	4611      	mov	r1, r2
 801580c:	4618      	mov	r0, r3
 801580e:	f000 ff7b 	bl	8016708 <xTaskCheckForTimeOut>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d132      	bne.n	801587e <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801581a:	f000 f94f 	bl	8015abc <prvIsQueueEmpty>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d026      	beq.n	8015872 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d109      	bne.n	8015840 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 801582c:	f002 f88e 	bl	801794c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015832:	689b      	ldr	r3, [r3, #8]
 8015834:	4618      	mov	r0, r3
 8015836:	f001 f97f 	bl	8016b38 <xTaskPriorityInherit>
 801583a:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 801583c:	f002 f8b8 	bl	80179b0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015842:	3324      	adds	r3, #36	@ 0x24
 8015844:	683a      	ldr	r2, [r7, #0]
 8015846:	4611      	mov	r1, r2
 8015848:	4618      	mov	r0, r3
 801584a:	f000 fe91 	bl	8016570 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 801584e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015850:	f000 f8e2 	bl	8015a18 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8015854:	f000 fc14 	bl	8016080 <xTaskResumeAll>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	f47f af67 	bne.w	801572e <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8015860:	4b18      	ldr	r3, [pc, #96]	@ (80158c4 <xQueueSemaphoreTake+0x21c>)
 8015862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015866:	601a      	str	r2, [r3, #0]
 8015868:	f3bf 8f4f 	dsb	sy
 801586c:	f3bf 8f6f 	isb	sy
 8015870:	e75d      	b.n	801572e <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8015872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015874:	f000 f8d0 	bl	8015a18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8015878:	f000 fc02 	bl	8016080 <xTaskResumeAll>
 801587c:	e757      	b.n	801572e <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 801587e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015880:	f000 f8ca 	bl	8015a18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8015884:	f000 fbfc 	bl	8016080 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801588a:	f000 f917 	bl	8015abc <prvIsQueueEmpty>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	f43f af4c 	beq.w	801572e <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8015896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00d      	beq.n	80158b8 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 801589c:	f002 f856 	bl	801794c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80158a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158a2:	f000 f811 	bl	80158c8 <prvGetDisinheritPriorityAfterTimeout>
 80158a6:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80158a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158aa:	689b      	ldr	r3, [r3, #8]
 80158ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80158ae:	4618      	mov	r0, r3
 80158b0:	f001 fa34 	bl	8016d1c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80158b4:	f002 f87c 	bl	80179b0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80158b8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3738      	adds	r7, #56	@ 0x38
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	e000ed04 	.word	0xe000ed04

080158c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80158c8:	b480      	push	{r7}
 80158ca:	b085      	sub	sp, #20
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d006      	beq.n	80158e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	f1c3 0305 	rsb	r3, r3, #5
 80158e2:	60fb      	str	r3, [r7, #12]
 80158e4:	e001      	b.n	80158ea <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80158e6:	2300      	movs	r3, #0
 80158e8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80158ea:	68fb      	ldr	r3, [r7, #12]
    }
 80158ec:	4618      	mov	r0, r3
 80158ee:	3714      	adds	r7, #20
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr

080158f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b086      	sub	sp, #24
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8015904:	2300      	movs	r3, #0
 8015906:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801590c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015912:	2b00      	cmp	r3, #0
 8015914:	d10d      	bne.n	8015932 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d14d      	bne.n	80159ba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	689b      	ldr	r3, [r3, #8]
 8015922:	4618      	mov	r0, r3
 8015924:	f001 f97e 	bl	8016c24 <xTaskPriorityDisinherit>
 8015928:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2200      	movs	r2, #0
 801592e:	609a      	str	r2, [r3, #8]
 8015930:	e043      	b.n	80159ba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d119      	bne.n	801596c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	6858      	ldr	r0, [r3, #4]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015940:	461a      	mov	r2, r3
 8015942:	68b9      	ldr	r1, [r7, #8]
 8015944:	f004 f9c7 	bl	8019cd6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	685a      	ldr	r2, [r3, #4]
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015950:	441a      	add	r2, r3
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	685a      	ldr	r2, [r3, #4]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	689b      	ldr	r3, [r3, #8]
 801595e:	429a      	cmp	r2, r3
 8015960:	d32b      	bcc.n	80159ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	681a      	ldr	r2, [r3, #0]
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	605a      	str	r2, [r3, #4]
 801596a:	e026      	b.n	80159ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	68d8      	ldr	r0, [r3, #12]
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015974:	461a      	mov	r2, r3
 8015976:	68b9      	ldr	r1, [r7, #8]
 8015978:	f004 f9ad 	bl	8019cd6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	68da      	ldr	r2, [r3, #12]
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015984:	425b      	negs	r3, r3
 8015986:	441a      	add	r2, r3
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	68da      	ldr	r2, [r3, #12]
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	429a      	cmp	r2, r3
 8015996:	d207      	bcs.n	80159a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	689a      	ldr	r2, [r3, #8]
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159a0:	425b      	negs	r3, r3
 80159a2:	441a      	add	r2, r3
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b02      	cmp	r3, #2
 80159ac:	d105      	bne.n	80159ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d002      	beq.n	80159ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	3b01      	subs	r3, #1
 80159b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	1c5a      	adds	r2, r3, #1
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80159c2:	697b      	ldr	r3, [r7, #20]
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3718      	adds	r7, #24
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d018      	beq.n	8015a10 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	68da      	ldr	r2, [r3, #12]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159e6:	441a      	add	r2, r3
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	68da      	ldr	r2, [r3, #12]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	689b      	ldr	r3, [r3, #8]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d303      	bcc.n	8015a00 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	68d9      	ldr	r1, [r3, #12]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a08:	461a      	mov	r2, r3
 8015a0a:	6838      	ldr	r0, [r7, #0]
 8015a0c:	f004 f963 	bl	8019cd6 <memcpy>
    }
}
 8015a10:	bf00      	nop
 8015a12:	3708      	adds	r7, #8
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8015a20:	f001 ff94 	bl	801794c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015a2a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8015a2c:	e011      	b.n	8015a52 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d012      	beq.n	8015a5c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	3324      	adds	r3, #36	@ 0x24
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f000 fdea 	bl	8016614 <xTaskRemoveFromEventList>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d001      	beq.n	8015a4a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8015a46:	f000 fec7 	bl	80167d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8015a4a:	7bfb      	ldrb	r3, [r7, #15]
 8015a4c:	3b01      	subs	r3, #1
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8015a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	dce9      	bgt.n	8015a2e <prvUnlockQueue+0x16>
 8015a5a:	e000      	b.n	8015a5e <prvUnlockQueue+0x46>
                        break;
 8015a5c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	22ff      	movs	r2, #255	@ 0xff
 8015a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8015a66:	f001 ffa3 	bl	80179b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8015a6a:	f001 ff6f 	bl	801794c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015a74:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8015a76:	e011      	b.n	8015a9c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	691b      	ldr	r3, [r3, #16]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d012      	beq.n	8015aa6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	3310      	adds	r3, #16
 8015a84:	4618      	mov	r0, r3
 8015a86:	f000 fdc5 	bl	8016614 <xTaskRemoveFromEventList>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d001      	beq.n	8015a94 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8015a90:	f000 fea2 	bl	80167d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8015a94:	7bbb      	ldrb	r3, [r7, #14]
 8015a96:	3b01      	subs	r3, #1
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8015a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	dce9      	bgt.n	8015a78 <prvUnlockQueue+0x60>
 8015aa4:	e000      	b.n	8015aa8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8015aa6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	22ff      	movs	r2, #255	@ 0xff
 8015aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8015ab0:	f001 ff7e 	bl	80179b0 <vPortExitCritical>
}
 8015ab4:	bf00      	nop
 8015ab6:	3710      	adds	r7, #16
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8015ac4:	f001 ff42 	bl	801794c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d102      	bne.n	8015ad6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	60fb      	str	r3, [r7, #12]
 8015ad4:	e001      	b.n	8015ada <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8015ada:	f001 ff69 	bl	80179b0 <vPortExitCritical>

    return xReturn;
 8015ade:	68fb      	ldr	r3, [r7, #12]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3710      	adds	r7, #16
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}

08015ae8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b084      	sub	sp, #16
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8015af0:	f001 ff2c 	bl	801794c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d102      	bne.n	8015b06 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8015b00:	2301      	movs	r3, #1
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	e001      	b.n	8015b0a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8015b06:	2300      	movs	r3, #0
 8015b08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8015b0a:	f001 ff51 	bl	80179b0 <vPortExitCritical>

    return xReturn;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3710      	adds	r7, #16
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8015b18:	b480      	push	{r7}
 8015b1a:	b085      	sub	sp, #20
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015b22:	2300      	movs	r3, #0
 8015b24:	60fb      	str	r3, [r7, #12]
 8015b26:	e014      	b.n	8015b52 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015b28:	4a0f      	ldr	r2, [pc, #60]	@ (8015b68 <vQueueAddToRegistry+0x50>)
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d10b      	bne.n	8015b4c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015b34:	490c      	ldr	r1, [pc, #48]	@ (8015b68 <vQueueAddToRegistry+0x50>)
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8015b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8015b68 <vQueueAddToRegistry+0x50>)
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	00db      	lsls	r3, r3, #3
 8015b44:	4413      	add	r3, r2
 8015b46:	687a      	ldr	r2, [r7, #4]
 8015b48:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8015b4a:	e006      	b.n	8015b5a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	3301      	adds	r3, #1
 8015b50:	60fb      	str	r3, [r7, #12]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	2b07      	cmp	r3, #7
 8015b56:	d9e7      	bls.n	8015b28 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8015b58:	bf00      	nop
 8015b5a:	bf00      	nop
 8015b5c:	3714      	adds	r7, #20
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop
 8015b68:	20001554 	.word	0x20001554

08015b6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b086      	sub	sp, #24
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	60f8      	str	r0, [r7, #12]
 8015b74:	60b9      	str	r1, [r7, #8]
 8015b76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8015b7c:	f001 fee6 	bl	801794c <vPortEnterCritical>
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015b86:	b25b      	sxtb	r3, r3
 8015b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b8c:	d103      	bne.n	8015b96 <vQueueWaitForMessageRestricted+0x2a>
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	2200      	movs	r2, #0
 8015b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015b9c:	b25b      	sxtb	r3, r3
 8015b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ba2:	d103      	bne.n	8015bac <vQueueWaitForMessageRestricted+0x40>
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015bac:	f001 ff00 	bl	80179b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d106      	bne.n	8015bc6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	3324      	adds	r3, #36	@ 0x24
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	68b9      	ldr	r1, [r7, #8]
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f000 fcfb 	bl	80165bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8015bc6:	6978      	ldr	r0, [r7, #20]
 8015bc8:	f7ff ff26 	bl	8015a18 <prvUnlockQueue>
    }
 8015bcc:	bf00      	nop
 8015bce:	3718      	adds	r7, #24
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b08c      	sub	sp, #48	@ 0x30
 8015bd8:	af04      	add	r7, sp, #16
 8015bda:	60f8      	str	r0, [r7, #12]
 8015bdc:	60b9      	str	r1, [r7, #8]
 8015bde:	603b      	str	r3, [r7, #0]
 8015be0:	4613      	mov	r3, r2
 8015be2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015be4:	88fb      	ldrh	r3, [r7, #6]
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	4618      	mov	r0, r3
 8015bea:	f001 ffd9 	bl	8017ba0 <pvPortMalloc>
 8015bee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d00e      	beq.n	8015c14 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015bf6:	2058      	movs	r0, #88	@ 0x58
 8015bf8:	f001 ffd2 	bl	8017ba0 <pvPortMalloc>
 8015bfc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d003      	beq.n	8015c0c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	697a      	ldr	r2, [r7, #20]
 8015c08:	631a      	str	r2, [r3, #48]	@ 0x30
 8015c0a:	e005      	b.n	8015c18 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8015c0c:	6978      	ldr	r0, [r7, #20]
 8015c0e:	f002 f8a9 	bl	8017d64 <vPortFree>
 8015c12:	e001      	b.n	8015c18 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8015c14:	2300      	movs	r3, #0
 8015c16:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8015c18:	69fb      	ldr	r3, [r7, #28]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d013      	beq.n	8015c46 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015c1e:	88fa      	ldrh	r2, [r7, #6]
 8015c20:	2300      	movs	r3, #0
 8015c22:	9303      	str	r3, [sp, #12]
 8015c24:	69fb      	ldr	r3, [r7, #28]
 8015c26:	9302      	str	r3, [sp, #8]
 8015c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c2a:	9301      	str	r3, [sp, #4]
 8015c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	68b9      	ldr	r1, [r7, #8]
 8015c34:	68f8      	ldr	r0, [r7, #12]
 8015c36:	f000 f80e 	bl	8015c56 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8015c3a:	69f8      	ldr	r0, [r7, #28]
 8015c3c:	f000 f8a2 	bl	8015d84 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8015c40:	2301      	movs	r3, #1
 8015c42:	61bb      	str	r3, [r7, #24]
 8015c44:	e002      	b.n	8015c4c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015c46:	f04f 33ff 	mov.w	r3, #4294967295
 8015c4a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8015c4c:	69bb      	ldr	r3, [r7, #24]
    }
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3720      	adds	r7, #32
 8015c52:	46bd      	mov	sp, r7
 8015c54:	bd80      	pop	{r7, pc}

08015c56 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8015c56:	b580      	push	{r7, lr}
 8015c58:	b088      	sub	sp, #32
 8015c5a:	af00      	add	r7, sp, #0
 8015c5c:	60f8      	str	r0, [r7, #12]
 8015c5e:	60b9      	str	r1, [r7, #8]
 8015c60:	607a      	str	r2, [r7, #4]
 8015c62:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	009b      	lsls	r3, r3, #2
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	21a5      	movs	r1, #165	@ 0xa5
 8015c70:	f003 ff5e 	bl	8019b30 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8015c7e:	3b01      	subs	r3, #1
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	4413      	add	r3, r2
 8015c84:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	f023 0307 	bic.w	r3, r3, #7
 8015c8c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015c8e:	69bb      	ldr	r3, [r7, #24]
 8015c90:	f003 0307 	and.w	r3, r3, #7
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d00b      	beq.n	8015cb0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8015c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c9c:	f383 8811 	msr	BASEPRI, r3
 8015ca0:	f3bf 8f6f 	isb	sy
 8015ca4:	f3bf 8f4f 	dsb	sy
 8015ca8:	617b      	str	r3, [r7, #20]
    }
 8015caa:	bf00      	nop
 8015cac:	bf00      	nop
 8015cae:	e7fd      	b.n	8015cac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d01f      	beq.n	8015cf6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	61fb      	str	r3, [r7, #28]
 8015cba:	e012      	b.n	8015ce2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015cbc:	68ba      	ldr	r2, [r7, #8]
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	7819      	ldrb	r1, [r3, #0]
 8015cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015cc6:	69fb      	ldr	r3, [r7, #28]
 8015cc8:	4413      	add	r3, r2
 8015cca:	3334      	adds	r3, #52	@ 0x34
 8015ccc:	460a      	mov	r2, r1
 8015cce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8015cd0:	68ba      	ldr	r2, [r7, #8]
 8015cd2:	69fb      	ldr	r3, [r7, #28]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d006      	beq.n	8015cea <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	3301      	adds	r3, #1
 8015ce0:	61fb      	str	r3, [r7, #28]
 8015ce2:	69fb      	ldr	r3, [r7, #28]
 8015ce4:	2b09      	cmp	r3, #9
 8015ce6:	d9e9      	bls.n	8015cbc <prvInitialiseNewTask+0x66>
 8015ce8:	e000      	b.n	8015cec <prvInitialiseNewTask+0x96>
            {
                break;
 8015cea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cee:	2200      	movs	r2, #0
 8015cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8015cf4:	e003      	b.n	8015cfe <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d00:	2b04      	cmp	r3, #4
 8015d02:	d901      	bls.n	8015d08 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015d04:	2304      	movs	r3, #4
 8015d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8015d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d12:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8015d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d16:	2200      	movs	r2, #0
 8015d18:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7ff f87a 	bl	8014e18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d26:	3318      	adds	r3, #24
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7ff f875 	bl	8014e18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d32:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d36:	f1c3 0205 	rsb	r2, r3, #5
 8015d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d3c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d42:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8015d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d46:	3350      	adds	r3, #80	@ 0x50
 8015d48:	2204      	movs	r2, #4
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f003 feef 	bl	8019b30 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8015d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d54:	3354      	adds	r3, #84	@ 0x54
 8015d56:	2201      	movs	r2, #1
 8015d58:	2100      	movs	r1, #0
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f003 fee8 	bl	8019b30 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015d60:	683a      	ldr	r2, [r7, #0]
 8015d62:	68f9      	ldr	r1, [r7, #12]
 8015d64:	69b8      	ldr	r0, [r7, #24]
 8015d66:	f001 fcbd 	bl	80176e4 <pxPortInitialiseStack>
 8015d6a:	4602      	mov	r2, r0
 8015d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d6e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8015d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d002      	beq.n	8015d7c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d7a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8015d7c:	bf00      	nop
 8015d7e:	3720      	adds	r7, #32
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8015d8c:	f001 fdde 	bl	801794c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8015d90:	4b2c      	ldr	r3, [pc, #176]	@ (8015e44 <prvAddNewTaskToReadyList+0xc0>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	3301      	adds	r3, #1
 8015d96:	4a2b      	ldr	r2, [pc, #172]	@ (8015e44 <prvAddNewTaskToReadyList+0xc0>)
 8015d98:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8015d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d109      	bne.n	8015db6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8015da2:	4a29      	ldr	r2, [pc, #164]	@ (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015da8:	4b26      	ldr	r3, [pc, #152]	@ (8015e44 <prvAddNewTaskToReadyList+0xc0>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d110      	bne.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8015db0:	f000 fd36 	bl	8016820 <prvInitialiseTaskLists>
 8015db4:	e00d      	b.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8015db6:	4b25      	ldr	r3, [pc, #148]	@ (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d109      	bne.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015dbe:	4b22      	ldr	r3, [pc, #136]	@ (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d802      	bhi.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8015dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8015dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8015e50 <prvAddNewTaskToReadyList+0xcc>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8015e50 <prvAddNewTaskToReadyList+0xcc>)
 8015dda:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8015e50 <prvAddNewTaskToReadyList+0xcc>)
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015de8:	2201      	movs	r2, #1
 8015dea:	409a      	lsls	r2, r3
 8015dec:	4b19      	ldr	r3, [pc, #100]	@ (8015e54 <prvAddNewTaskToReadyList+0xd0>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4313      	orrs	r3, r2
 8015df2:	4a18      	ldr	r2, [pc, #96]	@ (8015e54 <prvAddNewTaskToReadyList+0xd0>)
 8015df4:	6013      	str	r3, [r2, #0]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dfa:	4613      	mov	r3, r2
 8015dfc:	009b      	lsls	r3, r3, #2
 8015dfe:	4413      	add	r3, r2
 8015e00:	009b      	lsls	r3, r3, #2
 8015e02:	4a15      	ldr	r2, [pc, #84]	@ (8015e58 <prvAddNewTaskToReadyList+0xd4>)
 8015e04:	441a      	add	r2, r3
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	3304      	adds	r3, #4
 8015e0a:	4619      	mov	r1, r3
 8015e0c:	4610      	mov	r0, r2
 8015e0e:	f7ff f810 	bl	8014e32 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8015e12:	f001 fdcd 	bl	80179b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8015e16:	4b0d      	ldr	r3, [pc, #52]	@ (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d00e      	beq.n	8015e3c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d207      	bcs.n	8015e3c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8015e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e5c <prvAddNewTaskToReadyList+0xd8>)
 8015e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e32:	601a      	str	r2, [r3, #0]
 8015e34:	f3bf 8f4f 	dsb	sy
 8015e38:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8015e3c:	bf00      	nop
 8015e3e:	3708      	adds	r7, #8
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	2000166c 	.word	0x2000166c
 8015e48:	20001594 	.word	0x20001594
 8015e4c:	20001678 	.word	0x20001678
 8015e50:	20001688 	.word	0x20001688
 8015e54:	20001674 	.word	0x20001674
 8015e58:	20001598 	.word	0x20001598
 8015e5c:	e000ed04 	.word	0xe000ed04

08015e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b084      	sub	sp, #16
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d018      	beq.n	8015ea4 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8015e72:	4b14      	ldr	r3, [pc, #80]	@ (8015ec4 <vTaskDelay+0x64>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00b      	beq.n	8015e92 <vTaskDelay+0x32>
        __asm volatile
 8015e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e7e:	f383 8811 	msr	BASEPRI, r3
 8015e82:	f3bf 8f6f 	isb	sy
 8015e86:	f3bf 8f4f 	dsb	sy
 8015e8a:	60bb      	str	r3, [r7, #8]
    }
 8015e8c:	bf00      	nop
 8015e8e:	bf00      	nop
 8015e90:	e7fd      	b.n	8015e8e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8015e92:	f000 f8e7 	bl	8016064 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015e96:	2100      	movs	r1, #0
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f001 f89f 	bl	8016fdc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8015e9e:	f000 f8ef 	bl	8016080 <xTaskResumeAll>
 8015ea2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d107      	bne.n	8015eba <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8015eaa:	4b07      	ldr	r3, [pc, #28]	@ (8015ec8 <vTaskDelay+0x68>)
 8015eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015eb0:	601a      	str	r2, [r3, #0]
 8015eb2:	f3bf 8f4f 	dsb	sy
 8015eb6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8015eba:	bf00      	nop
 8015ebc:	3710      	adds	r7, #16
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	20001694 	.word	0x20001694
 8015ec8:	e000ed04 	.word	0xe000ed04

08015ecc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b08a      	sub	sp, #40	@ 0x28
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8015ed8:	69fb      	ldr	r3, [r7, #28]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d10b      	bne.n	8015ef6 <eTaskGetState+0x2a>
        __asm volatile
 8015ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ee2:	f383 8811 	msr	BASEPRI, r3
 8015ee6:	f3bf 8f6f 	isb	sy
 8015eea:	f3bf 8f4f 	dsb	sy
 8015eee:	60fb      	str	r3, [r7, #12]
    }
 8015ef0:	bf00      	nop
 8015ef2:	bf00      	nop
 8015ef4:	e7fd      	b.n	8015ef2 <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 8015ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8015fac <eTaskGetState+0xe0>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	69fa      	ldr	r2, [r7, #28]
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d103      	bne.n	8015f08 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 8015f00:	2300      	movs	r3, #0
 8015f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f06:	e04b      	b.n	8015fa0 <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
 8015f08:	f001 fd20 	bl	801794c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	695b      	ldr	r3, [r3, #20]
 8015f10:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8015f12:	4b27      	ldr	r3, [pc, #156]	@ (8015fb0 <eTaskGetState+0xe4>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8015f18:	4b26      	ldr	r3, [pc, #152]	@ (8015fb4 <eTaskGetState+0xe8>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8015f1e:	f001 fd47 	bl	80179b0 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8015f22:	69ba      	ldr	r2, [r7, #24]
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d003      	beq.n	8015f32 <eTaskGetState+0x66>
 8015f2a:	69ba      	ldr	r2, [r7, #24]
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d103      	bne.n	8015f3a <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8015f32:	2302      	movs	r3, #2
 8015f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f38:	e032      	b.n	8015fa0 <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8015f3a:	69bb      	ldr	r3, [r7, #24]
 8015f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8015fb8 <eTaskGetState+0xec>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d120      	bne.n	8015f84 <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d118      	bne.n	8015f7c <eTaskGetState+0xb0>
                                /* The task does not appear on the event list item of
                                 * and of the RTOS objects, but could still be in the
                                 * blocked state if it is waiting on its notification
                                 * rather than waiting on an object.  If not, is
                                 * suspended. */
                                eReturn = eSuspended;
 8015f4a:	2303      	movs	r3, #3
 8015f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8015f50:	2300      	movs	r3, #0
 8015f52:	623b      	str	r3, [r7, #32]
 8015f54:	e00e      	b.n	8015f74 <eTaskGetState+0xa8>
                                {
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8015f56:	69fa      	ldr	r2, [r7, #28]
 8015f58:	6a3b      	ldr	r3, [r7, #32]
 8015f5a:	4413      	add	r3, r2
 8015f5c:	3354      	adds	r3, #84	@ 0x54
 8015f5e:	781b      	ldrb	r3, [r3, #0]
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d103      	bne.n	8015f6e <eTaskGetState+0xa2>
                                    {
                                        eReturn = eBlocked;
 8015f66:	2302      	movs	r3, #2
 8015f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                        break;
 8015f6c:	e018      	b.n	8015fa0 <eTaskGetState+0xd4>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8015f6e:	6a3b      	ldr	r3, [r7, #32]
 8015f70:	3301      	adds	r3, #1
 8015f72:	623b      	str	r3, [r7, #32]
 8015f74:	6a3b      	ldr	r3, [r7, #32]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	dded      	ble.n	8015f56 <eTaskGetState+0x8a>
 8015f7a:	e011      	b.n	8015fa0 <eTaskGetState+0xd4>
                            }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8015f7c:	2302      	movs	r3, #2
 8015f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f82:	e00d      	b.n	8015fa0 <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	4a0d      	ldr	r2, [pc, #52]	@ (8015fbc <eTaskGetState+0xf0>)
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	d002      	beq.n	8015f92 <eTaskGetState+0xc6>
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d103      	bne.n	8015f9a <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8015f92:	2304      	movs	r3, #4
 8015f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f98:	e002      	b.n	8015fa0 <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
 8015fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3728      	adds	r7, #40	@ 0x28
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}
 8015fac:	20001594 	.word	0x20001594
 8015fb0:	20001624 	.word	0x20001624
 8015fb4:	20001628 	.word	0x20001628
 8015fb8:	20001658 	.word	0x20001658
 8015fbc:	20001640 	.word	0x20001640

08015fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b086      	sub	sp, #24
 8015fc4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8015fc6:	4b20      	ldr	r3, [pc, #128]	@ (8016048 <vTaskStartScheduler+0x88>)
 8015fc8:	9301      	str	r3, [sp, #4]
 8015fca:	2300      	movs	r3, #0
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	2300      	movs	r3, #0
 8015fd0:	2282      	movs	r2, #130	@ 0x82
 8015fd2:	491e      	ldr	r1, [pc, #120]	@ (801604c <vTaskStartScheduler+0x8c>)
 8015fd4:	481e      	ldr	r0, [pc, #120]	@ (8016050 <vTaskStartScheduler+0x90>)
 8015fd6:	f7ff fdfd 	bl	8015bd4 <xTaskCreate>
 8015fda:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2b01      	cmp	r3, #1
 8015fe0:	d102      	bne.n	8015fe8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8015fe2:	f001 f861 	bl	80170a8 <xTimerCreateTimerTask>
 8015fe6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2b01      	cmp	r3, #1
 8015fec:	d116      	bne.n	801601c <vTaskStartScheduler+0x5c>
        __asm volatile
 8015fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ff2:	f383 8811 	msr	BASEPRI, r3
 8015ff6:	f3bf 8f6f 	isb	sy
 8015ffa:	f3bf 8f4f 	dsb	sy
 8015ffe:	60bb      	str	r3, [r7, #8]
    }
 8016000:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8016002:	4b14      	ldr	r3, [pc, #80]	@ (8016054 <vTaskStartScheduler+0x94>)
 8016004:	f04f 32ff 	mov.w	r2, #4294967295
 8016008:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 801600a:	4b13      	ldr	r3, [pc, #76]	@ (8016058 <vTaskStartScheduler+0x98>)
 801600c:	2201      	movs	r2, #1
 801600e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016010:	4b12      	ldr	r3, [pc, #72]	@ (801605c <vTaskStartScheduler+0x9c>)
 8016012:	2200      	movs	r2, #0
 8016014:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8016016:	f001 fbf5 	bl	8017804 <xPortStartScheduler>
 801601a:	e00f      	b.n	801603c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016022:	d10b      	bne.n	801603c <vTaskStartScheduler+0x7c>
        __asm volatile
 8016024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016028:	f383 8811 	msr	BASEPRI, r3
 801602c:	f3bf 8f6f 	isb	sy
 8016030:	f3bf 8f4f 	dsb	sy
 8016034:	607b      	str	r3, [r7, #4]
    }
 8016036:	bf00      	nop
 8016038:	bf00      	nop
 801603a:	e7fd      	b.n	8016038 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 801603c:	4b08      	ldr	r3, [pc, #32]	@ (8016060 <vTaskStartScheduler+0xa0>)
 801603e:	681b      	ldr	r3, [r3, #0]
}
 8016040:	bf00      	nop
 8016042:	3710      	adds	r7, #16
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	20001690 	.word	0x20001690
 801604c:	0801d5f8 	.word	0x0801d5f8
 8016050:	080167f1 	.word	0x080167f1
 8016054:	2000168c 	.word	0x2000168c
 8016058:	20001678 	.word	0x20001678
 801605c:	20001670 	.word	0x20001670
 8016060:	0801f24c 	.word	0x0801f24c

08016064 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016064:	b480      	push	{r7}
 8016066:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8016068:	4b04      	ldr	r3, [pc, #16]	@ (801607c <vTaskSuspendAll+0x18>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	3301      	adds	r3, #1
 801606e:	4a03      	ldr	r2, [pc, #12]	@ (801607c <vTaskSuspendAll+0x18>)
 8016070:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8016072:	bf00      	nop
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr
 801607c:	20001694 	.word	0x20001694

08016080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8016086:	2300      	movs	r3, #0
 8016088:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 801608a:	2300      	movs	r3, #0
 801608c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 801608e:	4b42      	ldr	r3, [pc, #264]	@ (8016198 <xTaskResumeAll+0x118>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d10b      	bne.n	80160ae <xTaskResumeAll+0x2e>
        __asm volatile
 8016096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801609a:	f383 8811 	msr	BASEPRI, r3
 801609e:	f3bf 8f6f 	isb	sy
 80160a2:	f3bf 8f4f 	dsb	sy
 80160a6:	603b      	str	r3, [r7, #0]
    }
 80160a8:	bf00      	nop
 80160aa:	bf00      	nop
 80160ac:	e7fd      	b.n	80160aa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80160ae:	f001 fc4d 	bl	801794c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80160b2:	4b39      	ldr	r3, [pc, #228]	@ (8016198 <xTaskResumeAll+0x118>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	3b01      	subs	r3, #1
 80160b8:	4a37      	ldr	r2, [pc, #220]	@ (8016198 <xTaskResumeAll+0x118>)
 80160ba:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160bc:	4b36      	ldr	r3, [pc, #216]	@ (8016198 <xTaskResumeAll+0x118>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d161      	bne.n	8016188 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80160c4:	4b35      	ldr	r3, [pc, #212]	@ (801619c <xTaskResumeAll+0x11c>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d05d      	beq.n	8016188 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80160cc:	e02e      	b.n	801612c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160ce:	4b34      	ldr	r3, [pc, #208]	@ (80161a0 <xTaskResumeAll+0x120>)
 80160d0:	68db      	ldr	r3, [r3, #12]
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	3318      	adds	r3, #24
 80160da:	4618      	mov	r0, r3
 80160dc:	f7fe ff06 	bl	8014eec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	3304      	adds	r3, #4
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7fe ff01 	bl	8014eec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ee:	2201      	movs	r2, #1
 80160f0:	409a      	lsls	r2, r3
 80160f2:	4b2c      	ldr	r3, [pc, #176]	@ (80161a4 <xTaskResumeAll+0x124>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	4313      	orrs	r3, r2
 80160f8:	4a2a      	ldr	r2, [pc, #168]	@ (80161a4 <xTaskResumeAll+0x124>)
 80160fa:	6013      	str	r3, [r2, #0]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016100:	4613      	mov	r3, r2
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4413      	add	r3, r2
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	4a27      	ldr	r2, [pc, #156]	@ (80161a8 <xTaskResumeAll+0x128>)
 801610a:	441a      	add	r2, r3
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	3304      	adds	r3, #4
 8016110:	4619      	mov	r1, r3
 8016112:	4610      	mov	r0, r2
 8016114:	f7fe fe8d 	bl	8014e32 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801611c:	4b23      	ldr	r3, [pc, #140]	@ (80161ac <xTaskResumeAll+0x12c>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016122:	429a      	cmp	r2, r3
 8016124:	d302      	bcc.n	801612c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8016126:	4b22      	ldr	r3, [pc, #136]	@ (80161b0 <xTaskResumeAll+0x130>)
 8016128:	2201      	movs	r2, #1
 801612a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801612c:	4b1c      	ldr	r3, [pc, #112]	@ (80161a0 <xTaskResumeAll+0x120>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d1cc      	bne.n	80160ce <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d001      	beq.n	801613e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 801613a:	f000 fcc3 	bl	8016ac4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801613e:	4b1d      	ldr	r3, [pc, #116]	@ (80161b4 <xTaskResumeAll+0x134>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d010      	beq.n	801616c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 801614a:	f000 f8d5 	bl	80162f8 <xTaskIncrementTick>
 801614e:	4603      	mov	r3, r0
 8016150:	2b00      	cmp	r3, #0
 8016152:	d002      	beq.n	801615a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8016154:	4b16      	ldr	r3, [pc, #88]	@ (80161b0 <xTaskResumeAll+0x130>)
 8016156:	2201      	movs	r2, #1
 8016158:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	3b01      	subs	r3, #1
 801615e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d1f1      	bne.n	801614a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8016166:	4b13      	ldr	r3, [pc, #76]	@ (80161b4 <xTaskResumeAll+0x134>)
 8016168:	2200      	movs	r2, #0
 801616a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 801616c:	4b10      	ldr	r3, [pc, #64]	@ (80161b0 <xTaskResumeAll+0x130>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d009      	beq.n	8016188 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8016174:	2301      	movs	r3, #1
 8016176:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8016178:	4b0f      	ldr	r3, [pc, #60]	@ (80161b8 <xTaskResumeAll+0x138>)
 801617a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801617e:	601a      	str	r2, [r3, #0]
 8016180:	f3bf 8f4f 	dsb	sy
 8016184:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8016188:	f001 fc12 	bl	80179b0 <vPortExitCritical>

    return xAlreadyYielded;
 801618c:	68bb      	ldr	r3, [r7, #8]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3710      	adds	r7, #16
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}
 8016196:	bf00      	nop
 8016198:	20001694 	.word	0x20001694
 801619c:	2000166c 	.word	0x2000166c
 80161a0:	2000162c 	.word	0x2000162c
 80161a4:	20001674 	.word	0x20001674
 80161a8:	20001598 	.word	0x20001598
 80161ac:	20001594 	.word	0x20001594
 80161b0:	20001680 	.word	0x20001680
 80161b4:	2000167c 	.word	0x2000167c
 80161b8:	e000ed04 	.word	0xe000ed04

080161bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80161bc:	b480      	push	{r7}
 80161be:	b083      	sub	sp, #12
 80161c0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80161c2:	4b05      	ldr	r3, [pc, #20]	@ (80161d8 <xTaskGetTickCount+0x1c>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80161c8:	687b      	ldr	r3, [r7, #4]
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	370c      	adds	r7, #12
 80161ce:	46bd      	mov	sp, r7
 80161d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d4:	4770      	bx	lr
 80161d6:	bf00      	nop
 80161d8:	20001670 	.word	0x20001670

080161dc <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      uint32_t * const pulTotalRunTime )
    {
 80161dc:	b580      	push	{r7, lr}
 80161de:	b086      	sub	sp, #24
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80161e8:	2300      	movs	r3, #0
 80161ea:	617b      	str	r3, [r7, #20]
 80161ec:	2305      	movs	r3, #5
 80161ee:	613b      	str	r3, [r7, #16]

        vTaskSuspendAll();
 80161f0:	f7ff ff38 	bl	8016064 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80161f4:	4b3a      	ldr	r3, [pc, #232]	@ (80162e0 <uxTaskGetSystemState+0x104>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	68ba      	ldr	r2, [r7, #8]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d368      	bcc.n	80162d0 <uxTaskGetSystemState+0xf4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	3b01      	subs	r3, #1
 8016202:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8016204:	697a      	ldr	r2, [r7, #20]
 8016206:	4613      	mov	r3, r2
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	4413      	add	r3, r2
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	461a      	mov	r2, r3
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	1898      	adds	r0, r3, r2
 8016214:	693a      	ldr	r2, [r7, #16]
 8016216:	4613      	mov	r3, r2
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	4413      	add	r3, r2
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	4a31      	ldr	r2, [pc, #196]	@ (80162e4 <uxTaskGetSystemState+0x108>)
 8016220:	4413      	add	r3, r2
 8016222:	2201      	movs	r2, #1
 8016224:	4619      	mov	r1, r3
 8016226:	f000 fbcf 	bl	80169c8 <prvListTasksWithinSingleList>
 801622a:	4602      	mov	r2, r0
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	4413      	add	r3, r2
 8016230:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d1e2      	bne.n	80161fe <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8016238:	697a      	ldr	r2, [r7, #20]
 801623a:	4613      	mov	r3, r2
 801623c:	00db      	lsls	r3, r3, #3
 801623e:	4413      	add	r3, r2
 8016240:	009b      	lsls	r3, r3, #2
 8016242:	461a      	mov	r2, r3
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	4413      	add	r3, r2
 8016248:	4a27      	ldr	r2, [pc, #156]	@ (80162e8 <uxTaskGetSystemState+0x10c>)
 801624a:	6811      	ldr	r1, [r2, #0]
 801624c:	2202      	movs	r2, #2
 801624e:	4618      	mov	r0, r3
 8016250:	f000 fbba 	bl	80169c8 <prvListTasksWithinSingleList>
 8016254:	4602      	mov	r2, r0
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	4413      	add	r3, r2
 801625a:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 801625c:	697a      	ldr	r2, [r7, #20]
 801625e:	4613      	mov	r3, r2
 8016260:	00db      	lsls	r3, r3, #3
 8016262:	4413      	add	r3, r2
 8016264:	009b      	lsls	r3, r3, #2
 8016266:	461a      	mov	r2, r3
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	4413      	add	r3, r2
 801626c:	4a1f      	ldr	r2, [pc, #124]	@ (80162ec <uxTaskGetSystemState+0x110>)
 801626e:	6811      	ldr	r1, [r2, #0]
 8016270:	2202      	movs	r2, #2
 8016272:	4618      	mov	r0, r3
 8016274:	f000 fba8 	bl	80169c8 <prvListTasksWithinSingleList>
 8016278:	4602      	mov	r2, r0
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	4413      	add	r3, r2
 801627e:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task that has been deleted but not yet cleaned up. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8016280:	697a      	ldr	r2, [r7, #20]
 8016282:	4613      	mov	r3, r2
 8016284:	00db      	lsls	r3, r3, #3
 8016286:	4413      	add	r3, r2
 8016288:	009b      	lsls	r3, r3, #2
 801628a:	461a      	mov	r2, r3
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	4413      	add	r3, r2
 8016290:	2204      	movs	r2, #4
 8016292:	4917      	ldr	r1, [pc, #92]	@ (80162f0 <uxTaskGetSystemState+0x114>)
 8016294:	4618      	mov	r0, r3
 8016296:	f000 fb97 	bl	80169c8 <prvListTasksWithinSingleList>
 801629a:	4602      	mov	r2, r0
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	4413      	add	r3, r2
 80162a0:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task in the Suspended state. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80162a2:	697a      	ldr	r2, [r7, #20]
 80162a4:	4613      	mov	r3, r2
 80162a6:	00db      	lsls	r3, r3, #3
 80162a8:	4413      	add	r3, r2
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	461a      	mov	r2, r3
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	4413      	add	r3, r2
 80162b2:	2203      	movs	r2, #3
 80162b4:	490f      	ldr	r1, [pc, #60]	@ (80162f4 <uxTaskGetSystemState+0x118>)
 80162b6:	4618      	mov	r0, r3
 80162b8:	f000 fb86 	bl	80169c8 <prvListTasksWithinSingleList>
 80162bc:	4602      	mov	r2, r0
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	4413      	add	r3, r2
 80162c2:	617b      	str	r3, [r7, #20]
                            #endif
                        }
                    }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                    {
                        if( pulTotalRunTime != NULL )
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d002      	beq.n	80162d0 <uxTaskGetSystemState+0xf4>
                        {
                            *pulTotalRunTime = 0;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	2200      	movs	r2, #0
 80162ce:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 80162d0:	f7ff fed6 	bl	8016080 <xTaskResumeAll>

        return uxTask;
 80162d4:	697b      	ldr	r3, [r7, #20]
    }
 80162d6:	4618      	mov	r0, r3
 80162d8:	3718      	adds	r7, #24
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
 80162de:	bf00      	nop
 80162e0:	2000166c 	.word	0x2000166c
 80162e4:	20001598 	.word	0x20001598
 80162e8:	20001624 	.word	0x20001624
 80162ec:	20001628 	.word	0x20001628
 80162f0:	20001640 	.word	0x20001640
 80162f4:	20001658 	.word	0x20001658

080162f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b086      	sub	sp, #24
 80162fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80162fe:	2300      	movs	r3, #0
 8016300:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016302:	4b4f      	ldr	r3, [pc, #316]	@ (8016440 <xTaskIncrementTick+0x148>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	f040 808f 	bne.w	801642a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801630c:	4b4d      	ldr	r3, [pc, #308]	@ (8016444 <xTaskIncrementTick+0x14c>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	3301      	adds	r3, #1
 8016312:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8016314:	4a4b      	ldr	r2, [pc, #300]	@ (8016444 <xTaskIncrementTick+0x14c>)
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801631a:	693b      	ldr	r3, [r7, #16]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d121      	bne.n	8016364 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8016320:	4b49      	ldr	r3, [pc, #292]	@ (8016448 <xTaskIncrementTick+0x150>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d00b      	beq.n	8016342 <xTaskIncrementTick+0x4a>
        __asm volatile
 801632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801632e:	f383 8811 	msr	BASEPRI, r3
 8016332:	f3bf 8f6f 	isb	sy
 8016336:	f3bf 8f4f 	dsb	sy
 801633a:	603b      	str	r3, [r7, #0]
    }
 801633c:	bf00      	nop
 801633e:	bf00      	nop
 8016340:	e7fd      	b.n	801633e <xTaskIncrementTick+0x46>
 8016342:	4b41      	ldr	r3, [pc, #260]	@ (8016448 <xTaskIncrementTick+0x150>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	60fb      	str	r3, [r7, #12]
 8016348:	4b40      	ldr	r3, [pc, #256]	@ (801644c <xTaskIncrementTick+0x154>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	4a3e      	ldr	r2, [pc, #248]	@ (8016448 <xTaskIncrementTick+0x150>)
 801634e:	6013      	str	r3, [r2, #0]
 8016350:	4a3e      	ldr	r2, [pc, #248]	@ (801644c <xTaskIncrementTick+0x154>)
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	6013      	str	r3, [r2, #0]
 8016356:	4b3e      	ldr	r3, [pc, #248]	@ (8016450 <xTaskIncrementTick+0x158>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	3301      	adds	r3, #1
 801635c:	4a3c      	ldr	r2, [pc, #240]	@ (8016450 <xTaskIncrementTick+0x158>)
 801635e:	6013      	str	r3, [r2, #0]
 8016360:	f000 fbb0 	bl	8016ac4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8016364:	4b3b      	ldr	r3, [pc, #236]	@ (8016454 <xTaskIncrementTick+0x15c>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	693a      	ldr	r2, [r7, #16]
 801636a:	429a      	cmp	r2, r3
 801636c:	d348      	bcc.n	8016400 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801636e:	4b36      	ldr	r3, [pc, #216]	@ (8016448 <xTaskIncrementTick+0x150>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d104      	bne.n	8016382 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016378:	4b36      	ldr	r3, [pc, #216]	@ (8016454 <xTaskIncrementTick+0x15c>)
 801637a:	f04f 32ff 	mov.w	r2, #4294967295
 801637e:	601a      	str	r2, [r3, #0]
                    break;
 8016380:	e03e      	b.n	8016400 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016382:	4b31      	ldr	r3, [pc, #196]	@ (8016448 <xTaskIncrementTick+0x150>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	68db      	ldr	r3, [r3, #12]
 801638a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	685b      	ldr	r3, [r3, #4]
 8016390:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8016392:	693a      	ldr	r2, [r7, #16]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	429a      	cmp	r2, r3
 8016398:	d203      	bcs.n	80163a2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801639a:	4a2e      	ldr	r2, [pc, #184]	@ (8016454 <xTaskIncrementTick+0x15c>)
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80163a0:	e02e      	b.n	8016400 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	3304      	adds	r3, #4
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fe fda0 	bl	8014eec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d004      	beq.n	80163be <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	3318      	adds	r3, #24
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7fe fd97 	bl	8014eec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163c2:	2201      	movs	r2, #1
 80163c4:	409a      	lsls	r2, r3
 80163c6:	4b24      	ldr	r3, [pc, #144]	@ (8016458 <xTaskIncrementTick+0x160>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4313      	orrs	r3, r2
 80163cc:	4a22      	ldr	r2, [pc, #136]	@ (8016458 <xTaskIncrementTick+0x160>)
 80163ce:	6013      	str	r3, [r2, #0]
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163d4:	4613      	mov	r3, r2
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	4413      	add	r3, r2
 80163da:	009b      	lsls	r3, r3, #2
 80163dc:	4a1f      	ldr	r2, [pc, #124]	@ (801645c <xTaskIncrementTick+0x164>)
 80163de:	441a      	add	r2, r3
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	3304      	adds	r3, #4
 80163e4:	4619      	mov	r1, r3
 80163e6:	4610      	mov	r0, r2
 80163e8:	f7fe fd23 	bl	8014e32 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163f0:	4b1b      	ldr	r3, [pc, #108]	@ (8016460 <xTaskIncrementTick+0x168>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d3b9      	bcc.n	801636e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80163fa:	2301      	movs	r3, #1
 80163fc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80163fe:	e7b6      	b.n	801636e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016400:	4b17      	ldr	r3, [pc, #92]	@ (8016460 <xTaskIncrementTick+0x168>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016406:	4915      	ldr	r1, [pc, #84]	@ (801645c <xTaskIncrementTick+0x164>)
 8016408:	4613      	mov	r3, r2
 801640a:	009b      	lsls	r3, r3, #2
 801640c:	4413      	add	r3, r2
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	440b      	add	r3, r1
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b01      	cmp	r3, #1
 8016416:	d901      	bls.n	801641c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8016418:	2301      	movs	r3, #1
 801641a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 801641c:	4b11      	ldr	r3, [pc, #68]	@ (8016464 <xTaskIncrementTick+0x16c>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d007      	beq.n	8016434 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8016424:	2301      	movs	r3, #1
 8016426:	617b      	str	r3, [r7, #20]
 8016428:	e004      	b.n	8016434 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 801642a:	4b0f      	ldr	r3, [pc, #60]	@ (8016468 <xTaskIncrementTick+0x170>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	3301      	adds	r3, #1
 8016430:	4a0d      	ldr	r2, [pc, #52]	@ (8016468 <xTaskIncrementTick+0x170>)
 8016432:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8016434:	697b      	ldr	r3, [r7, #20]
}
 8016436:	4618      	mov	r0, r3
 8016438:	3718      	adds	r7, #24
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	20001694 	.word	0x20001694
 8016444:	20001670 	.word	0x20001670
 8016448:	20001624 	.word	0x20001624
 801644c:	20001628 	.word	0x20001628
 8016450:	20001684 	.word	0x20001684
 8016454:	2000168c 	.word	0x2000168c
 8016458:	20001674 	.word	0x20001674
 801645c:	20001598 	.word	0x20001598
 8016460:	20001594 	.word	0x20001594
 8016464:	20001680 	.word	0x20001680
 8016468:	2000167c 	.word	0x2000167c

0801646c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b088      	sub	sp, #32
 8016470:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016472:	4b3a      	ldr	r3, [pc, #232]	@ (801655c <vTaskSwitchContext+0xf0>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d003      	beq.n	8016482 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 801647a:	4b39      	ldr	r3, [pc, #228]	@ (8016560 <vTaskSwitchContext+0xf4>)
 801647c:	2201      	movs	r2, #1
 801647e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8016480:	e067      	b.n	8016552 <vTaskSwitchContext+0xe6>
        xYieldPending = pdFALSE;
 8016482:	4b37      	ldr	r3, [pc, #220]	@ (8016560 <vTaskSwitchContext+0xf4>)
 8016484:	2200      	movs	r2, #0
 8016486:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8016488:	4b36      	ldr	r3, [pc, #216]	@ (8016564 <vTaskSwitchContext+0xf8>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801648e:	61fb      	str	r3, [r7, #28]
 8016490:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8016494:	61bb      	str	r3, [r7, #24]
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	69ba      	ldr	r2, [r7, #24]
 801649c:	429a      	cmp	r2, r3
 801649e:	d111      	bne.n	80164c4 <vTaskSwitchContext+0x58>
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	3304      	adds	r3, #4
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	69ba      	ldr	r2, [r7, #24]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d10b      	bne.n	80164c4 <vTaskSwitchContext+0x58>
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	3308      	adds	r3, #8
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	69ba      	ldr	r2, [r7, #24]
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d105      	bne.n	80164c4 <vTaskSwitchContext+0x58>
 80164b8:	69fb      	ldr	r3, [r7, #28]
 80164ba:	330c      	adds	r3, #12
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	69ba      	ldr	r2, [r7, #24]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d008      	beq.n	80164d6 <vTaskSwitchContext+0x6a>
 80164c4:	4b27      	ldr	r3, [pc, #156]	@ (8016564 <vTaskSwitchContext+0xf8>)
 80164c6:	681a      	ldr	r2, [r3, #0]
 80164c8:	4b26      	ldr	r3, [pc, #152]	@ (8016564 <vTaskSwitchContext+0xf8>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	3334      	adds	r3, #52	@ 0x34
 80164ce:	4619      	mov	r1, r3
 80164d0:	4610      	mov	r0, r2
 80164d2:	f7f4 ffaf 	bl	800b434 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164d6:	4b24      	ldr	r3, [pc, #144]	@ (8016568 <vTaskSwitchContext+0xfc>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	fab3 f383 	clz	r3, r3
 80164e2:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80164e4:	7afb      	ldrb	r3, [r7, #11]
 80164e6:	f1c3 031f 	rsb	r3, r3, #31
 80164ea:	617b      	str	r3, [r7, #20]
 80164ec:	491f      	ldr	r1, [pc, #124]	@ (801656c <vTaskSwitchContext+0x100>)
 80164ee:	697a      	ldr	r2, [r7, #20]
 80164f0:	4613      	mov	r3, r2
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	4413      	add	r3, r2
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	440b      	add	r3, r1
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d10b      	bne.n	8016518 <vTaskSwitchContext+0xac>
        __asm volatile
 8016500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016504:	f383 8811 	msr	BASEPRI, r3
 8016508:	f3bf 8f6f 	isb	sy
 801650c:	f3bf 8f4f 	dsb	sy
 8016510:	607b      	str	r3, [r7, #4]
    }
 8016512:	bf00      	nop
 8016514:	bf00      	nop
 8016516:	e7fd      	b.n	8016514 <vTaskSwitchContext+0xa8>
 8016518:	697a      	ldr	r2, [r7, #20]
 801651a:	4613      	mov	r3, r2
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	4413      	add	r3, r2
 8016520:	009b      	lsls	r3, r3, #2
 8016522:	4a12      	ldr	r2, [pc, #72]	@ (801656c <vTaskSwitchContext+0x100>)
 8016524:	4413      	add	r3, r2
 8016526:	613b      	str	r3, [r7, #16]
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	685a      	ldr	r2, [r3, #4]
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	605a      	str	r2, [r3, #4]
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	685a      	ldr	r2, [r3, #4]
 8016536:	693b      	ldr	r3, [r7, #16]
 8016538:	3308      	adds	r3, #8
 801653a:	429a      	cmp	r2, r3
 801653c:	d104      	bne.n	8016548 <vTaskSwitchContext+0xdc>
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	685a      	ldr	r2, [r3, #4]
 8016544:	693b      	ldr	r3, [r7, #16]
 8016546:	605a      	str	r2, [r3, #4]
 8016548:	693b      	ldr	r3, [r7, #16]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	68db      	ldr	r3, [r3, #12]
 801654e:	4a05      	ldr	r2, [pc, #20]	@ (8016564 <vTaskSwitchContext+0xf8>)
 8016550:	6013      	str	r3, [r2, #0]
}
 8016552:	bf00      	nop
 8016554:	3720      	adds	r7, #32
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	20001694 	.word	0x20001694
 8016560:	20001680 	.word	0x20001680
 8016564:	20001594 	.word	0x20001594
 8016568:	20001674 	.word	0x20001674
 801656c:	20001598 	.word	0x20001598

08016570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d10b      	bne.n	8016598 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8016580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016584:	f383 8811 	msr	BASEPRI, r3
 8016588:	f3bf 8f6f 	isb	sy
 801658c:	f3bf 8f4f 	dsb	sy
 8016590:	60fb      	str	r3, [r7, #12]
    }
 8016592:	bf00      	nop
 8016594:	bf00      	nop
 8016596:	e7fd      	b.n	8016594 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016598:	4b07      	ldr	r3, [pc, #28]	@ (80165b8 <vTaskPlaceOnEventList+0x48>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	3318      	adds	r3, #24
 801659e:	4619      	mov	r1, r3
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f7fe fc6a 	bl	8014e7a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80165a6:	2101      	movs	r1, #1
 80165a8:	6838      	ldr	r0, [r7, #0]
 80165aa:	f000 fd17 	bl	8016fdc <prvAddCurrentTaskToDelayedList>
}
 80165ae:	bf00      	nop
 80165b0:	3710      	adds	r7, #16
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	bf00      	nop
 80165b8:	20001594 	.word	0x20001594

080165bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80165bc:	b580      	push	{r7, lr}
 80165be:	b086      	sub	sp, #24
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	60f8      	str	r0, [r7, #12]
 80165c4:	60b9      	str	r1, [r7, #8]
 80165c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d10b      	bne.n	80165e6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80165ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165d2:	f383 8811 	msr	BASEPRI, r3
 80165d6:	f3bf 8f6f 	isb	sy
 80165da:	f3bf 8f4f 	dsb	sy
 80165de:	617b      	str	r3, [r7, #20]
    }
 80165e0:	bf00      	nop
 80165e2:	bf00      	nop
 80165e4:	e7fd      	b.n	80165e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80165e6:	4b0a      	ldr	r3, [pc, #40]	@ (8016610 <vTaskPlaceOnEventListRestricted+0x54>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	3318      	adds	r3, #24
 80165ec:	4619      	mov	r1, r3
 80165ee:	68f8      	ldr	r0, [r7, #12]
 80165f0:	f7fe fc1f 	bl	8014e32 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d002      	beq.n	8016600 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80165fa:	f04f 33ff 	mov.w	r3, #4294967295
 80165fe:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016600:	6879      	ldr	r1, [r7, #4]
 8016602:	68b8      	ldr	r0, [r7, #8]
 8016604:	f000 fcea 	bl	8016fdc <prvAddCurrentTaskToDelayedList>
    }
 8016608:	bf00      	nop
 801660a:	3718      	adds	r7, #24
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}
 8016610:	20001594 	.word	0x20001594

08016614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b086      	sub	sp, #24
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	68db      	ldr	r3, [r3, #12]
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d10b      	bne.n	8016642 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 801662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801662e:	f383 8811 	msr	BASEPRI, r3
 8016632:	f3bf 8f6f 	isb	sy
 8016636:	f3bf 8f4f 	dsb	sy
 801663a:	60fb      	str	r3, [r7, #12]
    }
 801663c:	bf00      	nop
 801663e:	bf00      	nop
 8016640:	e7fd      	b.n	801663e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	3318      	adds	r3, #24
 8016646:	4618      	mov	r0, r3
 8016648:	f7fe fc50 	bl	8014eec <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801664c:	4b1d      	ldr	r3, [pc, #116]	@ (80166c4 <xTaskRemoveFromEventList+0xb0>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d11c      	bne.n	801668e <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	3304      	adds	r3, #4
 8016658:	4618      	mov	r0, r3
 801665a:	f7fe fc47 	bl	8014eec <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016662:	2201      	movs	r2, #1
 8016664:	409a      	lsls	r2, r3
 8016666:	4b18      	ldr	r3, [pc, #96]	@ (80166c8 <xTaskRemoveFromEventList+0xb4>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4313      	orrs	r3, r2
 801666c:	4a16      	ldr	r2, [pc, #88]	@ (80166c8 <xTaskRemoveFromEventList+0xb4>)
 801666e:	6013      	str	r3, [r2, #0]
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016674:	4613      	mov	r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	4413      	add	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	4a13      	ldr	r2, [pc, #76]	@ (80166cc <xTaskRemoveFromEventList+0xb8>)
 801667e:	441a      	add	r2, r3
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	3304      	adds	r3, #4
 8016684:	4619      	mov	r1, r3
 8016686:	4610      	mov	r0, r2
 8016688:	f7fe fbd3 	bl	8014e32 <vListInsertEnd>
 801668c:	e005      	b.n	801669a <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	3318      	adds	r3, #24
 8016692:	4619      	mov	r1, r3
 8016694:	480e      	ldr	r0, [pc, #56]	@ (80166d0 <xTaskRemoveFromEventList+0xbc>)
 8016696:	f7fe fbcc 	bl	8014e32 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801669e:	4b0d      	ldr	r3, [pc, #52]	@ (80166d4 <xTaskRemoveFromEventList+0xc0>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d905      	bls.n	80166b4 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80166a8:	2301      	movs	r3, #1
 80166aa:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80166ac:	4b0a      	ldr	r3, [pc, #40]	@ (80166d8 <xTaskRemoveFromEventList+0xc4>)
 80166ae:	2201      	movs	r2, #1
 80166b0:	601a      	str	r2, [r3, #0]
 80166b2:	e001      	b.n	80166b8 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80166b4:	2300      	movs	r3, #0
 80166b6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80166b8:	697b      	ldr	r3, [r7, #20]
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3718      	adds	r7, #24
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	20001694 	.word	0x20001694
 80166c8:	20001674 	.word	0x20001674
 80166cc:	20001598 	.word	0x20001598
 80166d0:	2000162c 	.word	0x2000162c
 80166d4:	20001594 	.word	0x20001594
 80166d8:	20001680 	.word	0x20001680

080166dc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80166dc:	b480      	push	{r7}
 80166de:	b083      	sub	sp, #12
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80166e4:	4b06      	ldr	r3, [pc, #24]	@ (8016700 <vTaskInternalSetTimeOutState+0x24>)
 80166e6:	681a      	ldr	r2, [r3, #0]
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80166ec:	4b05      	ldr	r3, [pc, #20]	@ (8016704 <vTaskInternalSetTimeOutState+0x28>)
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	605a      	str	r2, [r3, #4]
}
 80166f4:	bf00      	nop
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr
 8016700:	20001684 	.word	0x20001684
 8016704:	20001670 	.word	0x20001670

08016708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b088      	sub	sp, #32
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d10b      	bne.n	8016730 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8016718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801671c:	f383 8811 	msr	BASEPRI, r3
 8016720:	f3bf 8f6f 	isb	sy
 8016724:	f3bf 8f4f 	dsb	sy
 8016728:	613b      	str	r3, [r7, #16]
    }
 801672a:	bf00      	nop
 801672c:	bf00      	nop
 801672e:	e7fd      	b.n	801672c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d10b      	bne.n	801674e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8016736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801673a:	f383 8811 	msr	BASEPRI, r3
 801673e:	f3bf 8f6f 	isb	sy
 8016742:	f3bf 8f4f 	dsb	sy
 8016746:	60fb      	str	r3, [r7, #12]
    }
 8016748:	bf00      	nop
 801674a:	bf00      	nop
 801674c:	e7fd      	b.n	801674a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 801674e:	f001 f8fd 	bl	801794c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8016752:	4b1f      	ldr	r3, [pc, #124]	@ (80167d0 <xTaskCheckForTimeOut+0xc8>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	69ba      	ldr	r2, [r7, #24]
 801675e:	1ad3      	subs	r3, r2, r3
 8016760:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801676a:	d102      	bne.n	8016772 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 801676c:	2300      	movs	r3, #0
 801676e:	61fb      	str	r3, [r7, #28]
 8016770:	e026      	b.n	80167c0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	4b17      	ldr	r3, [pc, #92]	@ (80167d4 <xTaskCheckForTimeOut+0xcc>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	429a      	cmp	r2, r3
 801677c:	d00a      	beq.n	8016794 <xTaskCheckForTimeOut+0x8c>
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	69ba      	ldr	r2, [r7, #24]
 8016784:	429a      	cmp	r2, r3
 8016786:	d305      	bcc.n	8016794 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8016788:	2301      	movs	r3, #1
 801678a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	2200      	movs	r2, #0
 8016790:	601a      	str	r2, [r3, #0]
 8016792:	e015      	b.n	80167c0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	697a      	ldr	r2, [r7, #20]
 801679a:	429a      	cmp	r2, r3
 801679c:	d20b      	bcs.n	80167b6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	1ad2      	subs	r2, r2, r3
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f7ff ff96 	bl	80166dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80167b0:	2300      	movs	r3, #0
 80167b2:	61fb      	str	r3, [r7, #28]
 80167b4:	e004      	b.n	80167c0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	2200      	movs	r2, #0
 80167ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80167bc:	2301      	movs	r3, #1
 80167be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80167c0:	f001 f8f6 	bl	80179b0 <vPortExitCritical>

    return xReturn;
 80167c4:	69fb      	ldr	r3, [r7, #28]
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	3720      	adds	r7, #32
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	20001670 	.word	0x20001670
 80167d4:	20001684 	.word	0x20001684

080167d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80167d8:	b480      	push	{r7}
 80167da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80167dc:	4b03      	ldr	r3, [pc, #12]	@ (80167ec <vTaskMissedYield+0x14>)
 80167de:	2201      	movs	r2, #1
 80167e0:	601a      	str	r2, [r3, #0]
}
 80167e2:	bf00      	nop
 80167e4:	46bd      	mov	sp, r7
 80167e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ea:	4770      	bx	lr
 80167ec:	20001680 	.word	0x20001680

080167f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b082      	sub	sp, #8
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80167f8:	f000 f852 	bl	80168a0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80167fc:	4b06      	ldr	r3, [pc, #24]	@ (8016818 <prvIdleTask+0x28>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b01      	cmp	r3, #1
 8016802:	d9f9      	bls.n	80167f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8016804:	4b05      	ldr	r3, [pc, #20]	@ (801681c <prvIdleTask+0x2c>)
 8016806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801680a:	601a      	str	r2, [r3, #0]
 801680c:	f3bf 8f4f 	dsb	sy
 8016810:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8016814:	e7f0      	b.n	80167f8 <prvIdleTask+0x8>
 8016816:	bf00      	nop
 8016818:	20001598 	.word	0x20001598
 801681c:	e000ed04 	.word	0xe000ed04

08016820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016826:	2300      	movs	r3, #0
 8016828:	607b      	str	r3, [r7, #4]
 801682a:	e00c      	b.n	8016846 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801682c:	687a      	ldr	r2, [r7, #4]
 801682e:	4613      	mov	r3, r2
 8016830:	009b      	lsls	r3, r3, #2
 8016832:	4413      	add	r3, r2
 8016834:	009b      	lsls	r3, r3, #2
 8016836:	4a12      	ldr	r2, [pc, #72]	@ (8016880 <prvInitialiseTaskLists+0x60>)
 8016838:	4413      	add	r3, r2
 801683a:	4618      	mov	r0, r3
 801683c:	f7fe facc 	bl	8014dd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	3301      	adds	r3, #1
 8016844:	607b      	str	r3, [r7, #4]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2b04      	cmp	r3, #4
 801684a:	d9ef      	bls.n	801682c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 801684c:	480d      	ldr	r0, [pc, #52]	@ (8016884 <prvInitialiseTaskLists+0x64>)
 801684e:	f7fe fac3 	bl	8014dd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8016852:	480d      	ldr	r0, [pc, #52]	@ (8016888 <prvInitialiseTaskLists+0x68>)
 8016854:	f7fe fac0 	bl	8014dd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8016858:	480c      	ldr	r0, [pc, #48]	@ (801688c <prvInitialiseTaskLists+0x6c>)
 801685a:	f7fe fabd 	bl	8014dd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 801685e:	480c      	ldr	r0, [pc, #48]	@ (8016890 <prvInitialiseTaskLists+0x70>)
 8016860:	f7fe faba 	bl	8014dd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8016864:	480b      	ldr	r0, [pc, #44]	@ (8016894 <prvInitialiseTaskLists+0x74>)
 8016866:	f7fe fab7 	bl	8014dd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 801686a:	4b0b      	ldr	r3, [pc, #44]	@ (8016898 <prvInitialiseTaskLists+0x78>)
 801686c:	4a05      	ldr	r2, [pc, #20]	@ (8016884 <prvInitialiseTaskLists+0x64>)
 801686e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016870:	4b0a      	ldr	r3, [pc, #40]	@ (801689c <prvInitialiseTaskLists+0x7c>)
 8016872:	4a05      	ldr	r2, [pc, #20]	@ (8016888 <prvInitialiseTaskLists+0x68>)
 8016874:	601a      	str	r2, [r3, #0]
}
 8016876:	bf00      	nop
 8016878:	3708      	adds	r7, #8
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	20001598 	.word	0x20001598
 8016884:	200015fc 	.word	0x200015fc
 8016888:	20001610 	.word	0x20001610
 801688c:	2000162c 	.word	0x2000162c
 8016890:	20001640 	.word	0x20001640
 8016894:	20001658 	.word	0x20001658
 8016898:	20001624 	.word	0x20001624
 801689c:	20001628 	.word	0x20001628

080168a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80168a6:	e019      	b.n	80168dc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80168a8:	f001 f850 	bl	801794c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168ac:	4b10      	ldr	r3, [pc, #64]	@ (80168f0 <prvCheckTasksWaitingTermination+0x50>)
 80168ae:	68db      	ldr	r3, [r3, #12]
 80168b0:	68db      	ldr	r3, [r3, #12]
 80168b2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	3304      	adds	r3, #4
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7fe fb17 	bl	8014eec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80168be:	4b0d      	ldr	r3, [pc, #52]	@ (80168f4 <prvCheckTasksWaitingTermination+0x54>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	3b01      	subs	r3, #1
 80168c4:	4a0b      	ldr	r2, [pc, #44]	@ (80168f4 <prvCheckTasksWaitingTermination+0x54>)
 80168c6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80168c8:	4b0b      	ldr	r3, [pc, #44]	@ (80168f8 <prvCheckTasksWaitingTermination+0x58>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	3b01      	subs	r3, #1
 80168ce:	4a0a      	ldr	r2, [pc, #40]	@ (80168f8 <prvCheckTasksWaitingTermination+0x58>)
 80168d0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80168d2:	f001 f86d 	bl	80179b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 f8e4 	bl	8016aa4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80168dc:	4b06      	ldr	r3, [pc, #24]	@ (80168f8 <prvCheckTasksWaitingTermination+0x58>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d1e1      	bne.n	80168a8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80168e4:	bf00      	nop
 80168e6:	bf00      	nop
 80168e8:	3708      	adds	r7, #8
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	20001640 	.word	0x20001640
 80168f4:	2000166c 	.word	0x2000166c
 80168f8:	20001654 	.word	0x20001654

080168fc <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b086      	sub	sp, #24
 8016900:	af00      	add	r7, sp, #0
 8016902:	60f8      	str	r0, [r7, #12]
 8016904:	60b9      	str	r1, [r7, #8]
 8016906:	607a      	str	r2, [r7, #4]
 8016908:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d102      	bne.n	8016916 <vTaskGetInfo+0x1a>
 8016910:	4b2c      	ldr	r3, [pc, #176]	@ (80169c4 <vTaskGetInfo+0xc8>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	e000      	b.n	8016918 <vTaskGetInfo+0x1c>
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	697a      	ldr	r2, [r7, #20]
 801691e:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801693a:	697b      	ldr	r3, [r7, #20]
 801693c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801693e:	68bb      	ldr	r3, [r7, #8]
 8016940:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8016942:	697b      	ldr	r3, [r7, #20]
 8016944:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016946:	68bb      	ldr	r3, [r7, #8]
 8016948:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = 0;
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	2200      	movs	r2, #0
 801694e:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8016950:	78fb      	ldrb	r3, [r7, #3]
 8016952:	2b05      	cmp	r3, #5
 8016954:	d01a      	beq.n	801698c <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 8016956:	4b1b      	ldr	r3, [pc, #108]	@ (80169c4 <vTaskGetInfo+0xc8>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	697a      	ldr	r2, [r7, #20]
 801695c:	429a      	cmp	r2, r3
 801695e:	d103      	bne.n	8016968 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	2200      	movs	r2, #0
 8016964:	731a      	strb	r2, [r3, #12]
 8016966:	e018      	b.n	801699a <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	78fa      	ldrb	r2, [r7, #3]
 801696c:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 801696e:	78fb      	ldrb	r3, [r7, #3]
 8016970:	2b03      	cmp	r3, #3
 8016972:	d112      	bne.n	801699a <vTaskGetInfo+0x9e>
                        {
                            vTaskSuspendAll();
 8016974:	f7ff fb76 	bl	8016064 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801697c:	2b00      	cmp	r3, #0
 801697e:	d002      	beq.n	8016986 <vTaskGetInfo+0x8a>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	2202      	movs	r2, #2
 8016984:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 8016986:	f7ff fb7b 	bl	8016080 <xTaskResumeAll>
 801698a:	e006      	b.n	801699a <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 801698c:	6978      	ldr	r0, [r7, #20]
 801698e:	f7ff fa9d 	bl	8015ecc <eTaskGetState>
 8016992:	4603      	mov	r3, r0
 8016994:	461a      	mov	r2, r3
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d009      	beq.n	80169b4 <vTaskGetInfo+0xb8>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169a4:	4618      	mov	r0, r3
 80169a6:	f000 f861 	bl	8016a6c <prvTaskCheckFreeStackSpace>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 80169b2:	e002      	b.n	80169ba <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	2200      	movs	r2, #0
 80169b8:	841a      	strh	r2, [r3, #32]
    }
 80169ba:	bf00      	nop
 80169bc:	3718      	adds	r7, #24
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	20001594 	.word	0x20001594

080169c8 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b08a      	sub	sp, #40	@ 0x28
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	60f8      	str	r0, [r7, #12]
 80169d0:	60b9      	str	r1, [r7, #8]
 80169d2:	4613      	mov	r3, r2
 80169d4:	71fb      	strb	r3, [r7, #7]
        configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
        UBaseType_t uxTask = 0;
 80169d6:	2300      	movs	r3, #0
 80169d8:	627b      	str	r3, [r7, #36]	@ 0x24

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80169da:	68bb      	ldr	r3, [r7, #8]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d03f      	beq.n	8016a62 <prvListTasksWithinSingleList+0x9a>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169e2:	68bb      	ldr	r3, [r7, #8]
 80169e4:	623b      	str	r3, [r7, #32]
 80169e6:	6a3b      	ldr	r3, [r7, #32]
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	685a      	ldr	r2, [r3, #4]
 80169ec:	6a3b      	ldr	r3, [r7, #32]
 80169ee:	605a      	str	r2, [r3, #4]
 80169f0:	6a3b      	ldr	r3, [r7, #32]
 80169f2:	685a      	ldr	r2, [r3, #4]
 80169f4:	6a3b      	ldr	r3, [r7, #32]
 80169f6:	3308      	adds	r3, #8
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d104      	bne.n	8016a06 <prvListTasksWithinSingleList+0x3e>
 80169fc:	6a3b      	ldr	r3, [r7, #32]
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	685a      	ldr	r2, [r3, #4]
 8016a02:	6a3b      	ldr	r3, [r7, #32]
 8016a04:	605a      	str	r2, [r3, #4]
 8016a06:	6a3b      	ldr	r3, [r7, #32]
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	68db      	ldr	r3, [r3, #12]
 8016a0c:	61fb      	str	r3, [r7, #28]
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	61bb      	str	r3, [r7, #24]
 8016a12:	69bb      	ldr	r3, [r7, #24]
 8016a14:	685b      	ldr	r3, [r3, #4]
 8016a16:	685a      	ldr	r2, [r3, #4]
 8016a18:	69bb      	ldr	r3, [r7, #24]
 8016a1a:	605a      	str	r2, [r3, #4]
 8016a1c:	69bb      	ldr	r3, [r7, #24]
 8016a1e:	685a      	ldr	r2, [r3, #4]
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	3308      	adds	r3, #8
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d104      	bne.n	8016a32 <prvListTasksWithinSingleList+0x6a>
 8016a28:	69bb      	ldr	r3, [r7, #24]
 8016a2a:	685b      	ldr	r3, [r3, #4]
 8016a2c:	685a      	ldr	r2, [r3, #4]
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	605a      	str	r2, [r3, #4]
 8016a32:	69bb      	ldr	r3, [r7, #24]
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	68db      	ldr	r3, [r3, #12]
 8016a38:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8016a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	4413      	add	r3, r2
 8016a42:	009b      	lsls	r3, r3, #2
 8016a44:	461a      	mov	r2, r3
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	1899      	adds	r1, r3, r2
 8016a4a:	79fb      	ldrb	r3, [r7, #7]
 8016a4c:	2201      	movs	r2, #1
 8016a4e:	6978      	ldr	r0, [r7, #20]
 8016a50:	f7ff ff54 	bl	80168fc <vTaskGetInfo>
                uxTask++;
 8016a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a56:	3301      	adds	r3, #1
 8016a58:	627b      	str	r3, [r7, #36]	@ 0x24
            } while( pxNextTCB != pxFirstTCB );
 8016a5a:	697a      	ldr	r2, [r7, #20]
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d1d5      	bne.n	8016a0e <prvListTasksWithinSingleList+0x46>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8016a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8016a64:	4618      	mov	r0, r3
 8016a66:	3728      	adds	r7, #40	@ 0x28
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8016a6c:	b480      	push	{r7}
 8016a6e:	b085      	sub	sp, #20
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8016a74:	2300      	movs	r3, #0
 8016a76:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8016a78:	e005      	b.n	8016a86 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	607b      	str	r3, [r7, #4]
            ulCount++;
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	3301      	adds	r3, #1
 8016a84:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	2ba5      	cmp	r3, #165	@ 0xa5
 8016a8c:	d0f5      	beq.n	8016a7a <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	089b      	lsrs	r3, r3, #2
 8016a92:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	b29b      	uxth	r3, r3
    }
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3714      	adds	r7, #20
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f001 f957 	bl	8017d64 <vPortFree>
                vPortFree( pxTCB );
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f001 f954 	bl	8017d64 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8016abc:	bf00      	nop
 8016abe:	3708      	adds	r7, #8
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}

08016ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8016af4 <prvResetNextTaskUnblockTime+0x30>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d104      	bne.n	8016adc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8016ad2:	4b09      	ldr	r3, [pc, #36]	@ (8016af8 <prvResetNextTaskUnblockTime+0x34>)
 8016ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ad8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8016ada:	e005      	b.n	8016ae8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016adc:	4b05      	ldr	r3, [pc, #20]	@ (8016af4 <prvResetNextTaskUnblockTime+0x30>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	68db      	ldr	r3, [r3, #12]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	4a04      	ldr	r2, [pc, #16]	@ (8016af8 <prvResetNextTaskUnblockTime+0x34>)
 8016ae6:	6013      	str	r3, [r2, #0]
}
 8016ae8:	bf00      	nop
 8016aea:	46bd      	mov	sp, r7
 8016aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af0:	4770      	bx	lr
 8016af2:	bf00      	nop
 8016af4:	20001624 	.word	0x20001624
 8016af8:	2000168c 	.word	0x2000168c

08016afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8016afc:	b480      	push	{r7}
 8016afe:	b083      	sub	sp, #12
 8016b00:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8016b02:	4b0b      	ldr	r3, [pc, #44]	@ (8016b30 <xTaskGetSchedulerState+0x34>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d102      	bne.n	8016b10 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	607b      	str	r3, [r7, #4]
 8016b0e:	e008      	b.n	8016b22 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b10:	4b08      	ldr	r3, [pc, #32]	@ (8016b34 <xTaskGetSchedulerState+0x38>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d102      	bne.n	8016b1e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8016b18:	2302      	movs	r3, #2
 8016b1a:	607b      	str	r3, [r7, #4]
 8016b1c:	e001      	b.n	8016b22 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8016b22:	687b      	ldr	r3, [r7, #4]
    }
 8016b24:	4618      	mov	r0, r3
 8016b26:	370c      	adds	r7, #12
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2e:	4770      	bx	lr
 8016b30:	20001678 	.word	0x20001678
 8016b34:	20001694 	.word	0x20001694

08016b38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8016b44:	2300      	movs	r3, #0
 8016b46:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d05e      	beq.n	8016c0c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b52:	4b31      	ldr	r3, [pc, #196]	@ (8016c18 <xTaskPriorityInherit+0xe0>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d24e      	bcs.n	8016bfa <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	699b      	ldr	r3, [r3, #24]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	db06      	blt.n	8016b72 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b64:	4b2c      	ldr	r3, [pc, #176]	@ (8016c18 <xTaskPriorityInherit+0xe0>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b6a:	f1c3 0205 	rsb	r2, r3, #5
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	6959      	ldr	r1, [r3, #20]
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	009b      	lsls	r3, r3, #2
 8016b7e:	4413      	add	r3, r2
 8016b80:	009b      	lsls	r3, r3, #2
 8016b82:	4a26      	ldr	r2, [pc, #152]	@ (8016c1c <xTaskPriorityInherit+0xe4>)
 8016b84:	4413      	add	r3, r2
 8016b86:	4299      	cmp	r1, r3
 8016b88:	d12f      	bne.n	8016bea <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	3304      	adds	r3, #4
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7fe f9ac 	bl	8014eec <uxListRemove>
 8016b94:	4603      	mov	r3, r0
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d10a      	bne.n	8016bb0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b9e:	2201      	movs	r2, #1
 8016ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ba4:	43da      	mvns	r2, r3
 8016ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8016c20 <xTaskPriorityInherit+0xe8>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4013      	ands	r3, r2
 8016bac:	4a1c      	ldr	r2, [pc, #112]	@ (8016c20 <xTaskPriorityInherit+0xe8>)
 8016bae:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016bb0:	4b19      	ldr	r3, [pc, #100]	@ (8016c18 <xTaskPriorityInherit+0xe0>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bbe:	2201      	movs	r2, #1
 8016bc0:	409a      	lsls	r2, r3
 8016bc2:	4b17      	ldr	r3, [pc, #92]	@ (8016c20 <xTaskPriorityInherit+0xe8>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	4313      	orrs	r3, r2
 8016bc8:	4a15      	ldr	r2, [pc, #84]	@ (8016c20 <xTaskPriorityInherit+0xe8>)
 8016bca:	6013      	str	r3, [r2, #0]
 8016bcc:	68bb      	ldr	r3, [r7, #8]
 8016bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016bd0:	4613      	mov	r3, r2
 8016bd2:	009b      	lsls	r3, r3, #2
 8016bd4:	4413      	add	r3, r2
 8016bd6:	009b      	lsls	r3, r3, #2
 8016bd8:	4a10      	ldr	r2, [pc, #64]	@ (8016c1c <xTaskPriorityInherit+0xe4>)
 8016bda:	441a      	add	r2, r3
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	3304      	adds	r3, #4
 8016be0:	4619      	mov	r1, r3
 8016be2:	4610      	mov	r0, r2
 8016be4:	f7fe f925 	bl	8014e32 <vListInsertEnd>
 8016be8:	e004      	b.n	8016bf4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016bea:	4b0b      	ldr	r3, [pc, #44]	@ (8016c18 <xTaskPriorityInherit+0xe0>)
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	60fb      	str	r3, [r7, #12]
 8016bf8:	e008      	b.n	8016c0c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016bfe:	4b06      	ldr	r3, [pc, #24]	@ (8016c18 <xTaskPriorityInherit+0xe0>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c04:	429a      	cmp	r2, r3
 8016c06:	d201      	bcs.n	8016c0c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8016c08:	2301      	movs	r3, #1
 8016c0a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
    }
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3710      	adds	r7, #16
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	20001594 	.word	0x20001594
 8016c1c:	20001598 	.word	0x20001598
 8016c20:	20001674 	.word	0x20001674

08016c24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b086      	sub	sp, #24
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8016c30:	2300      	movs	r3, #0
 8016c32:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d065      	beq.n	8016d06 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8016c3a:	4b35      	ldr	r3, [pc, #212]	@ (8016d10 <xTaskPriorityDisinherit+0xec>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	693a      	ldr	r2, [r7, #16]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d00b      	beq.n	8016c5c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8016c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c48:	f383 8811 	msr	BASEPRI, r3
 8016c4c:	f3bf 8f6f 	isb	sy
 8016c50:	f3bf 8f4f 	dsb	sy
 8016c54:	60fb      	str	r3, [r7, #12]
    }
 8016c56:	bf00      	nop
 8016c58:	bf00      	nop
 8016c5a:	e7fd      	b.n	8016c58 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d10b      	bne.n	8016c7c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8016c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c68:	f383 8811 	msr	BASEPRI, r3
 8016c6c:	f3bf 8f6f 	isb	sy
 8016c70:	f3bf 8f4f 	dsb	sy
 8016c74:	60bb      	str	r3, [r7, #8]
    }
 8016c76:	bf00      	nop
 8016c78:	bf00      	nop
 8016c7a:	e7fd      	b.n	8016c78 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8016c7c:	693b      	ldr	r3, [r7, #16]
 8016c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c80:	1e5a      	subs	r2, r3, #1
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d039      	beq.n	8016d06 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d135      	bne.n	8016d06 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	3304      	adds	r3, #4
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7fe f924 	bl	8014eec <uxListRemove>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d10a      	bne.n	8016cc0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016caa:	693b      	ldr	r3, [r7, #16]
 8016cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cae:	2201      	movs	r2, #1
 8016cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8016cb4:	43da      	mvns	r2, r3
 8016cb6:	4b17      	ldr	r3, [pc, #92]	@ (8016d14 <xTaskPriorityDisinherit+0xf0>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	4013      	ands	r3, r2
 8016cbc:	4a15      	ldr	r2, [pc, #84]	@ (8016d14 <xTaskPriorityDisinherit+0xf0>)
 8016cbe:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ccc:	f1c3 0205 	rsb	r2, r3, #5
 8016cd0:	693b      	ldr	r3, [r7, #16]
 8016cd2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cd8:	2201      	movs	r2, #1
 8016cda:	409a      	lsls	r2, r3
 8016cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8016d14 <xTaskPriorityDisinherit+0xf0>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	4313      	orrs	r3, r2
 8016ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8016d14 <xTaskPriorityDisinherit+0xf0>)
 8016ce4:	6013      	str	r3, [r2, #0]
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cea:	4613      	mov	r3, r2
 8016cec:	009b      	lsls	r3, r3, #2
 8016cee:	4413      	add	r3, r2
 8016cf0:	009b      	lsls	r3, r3, #2
 8016cf2:	4a09      	ldr	r2, [pc, #36]	@ (8016d18 <xTaskPriorityDisinherit+0xf4>)
 8016cf4:	441a      	add	r2, r3
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	3304      	adds	r3, #4
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	4610      	mov	r0, r2
 8016cfe:	f7fe f898 	bl	8014e32 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8016d02:	2301      	movs	r3, #1
 8016d04:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8016d06:	697b      	ldr	r3, [r7, #20]
    }
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3718      	adds	r7, #24
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	20001594 	.word	0x20001594
 8016d14:	20001674 	.word	0x20001674
 8016d18:	20001598 	.word	0x20001598

08016d1c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b088      	sub	sp, #32
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
 8016d24:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d079      	beq.n	8016e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d10b      	bne.n	8016d54 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8016d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d40:	f383 8811 	msr	BASEPRI, r3
 8016d44:	f3bf 8f6f 	isb	sy
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	60fb      	str	r3, [r7, #12]
    }
 8016d4e:	bf00      	nop
 8016d50:	bf00      	nop
 8016d52:	e7fd      	b.n	8016d50 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016d54:	69bb      	ldr	r3, [r7, #24]
 8016d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d58:	683a      	ldr	r2, [r7, #0]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d902      	bls.n	8016d64 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	61fb      	str	r3, [r7, #28]
 8016d62:	e002      	b.n	8016d6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8016d64:	69bb      	ldr	r3, [r7, #24]
 8016d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d68:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8016d6a:	69bb      	ldr	r3, [r7, #24]
 8016d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d6e:	69fa      	ldr	r2, [r7, #28]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d059      	beq.n	8016e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016d74:	69bb      	ldr	r3, [r7, #24]
 8016d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d78:	697a      	ldr	r2, [r7, #20]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d154      	bne.n	8016e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8016d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8016e30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	69ba      	ldr	r2, [r7, #24]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d10b      	bne.n	8016da0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8016d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d8c:	f383 8811 	msr	BASEPRI, r3
 8016d90:	f3bf 8f6f 	isb	sy
 8016d94:	f3bf 8f4f 	dsb	sy
 8016d98:	60bb      	str	r3, [r7, #8]
    }
 8016d9a:	bf00      	nop
 8016d9c:	bf00      	nop
 8016d9e:	e7fd      	b.n	8016d9c <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016da0:	69bb      	ldr	r3, [r7, #24]
 8016da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016da4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	69fa      	ldr	r2, [r7, #28]
 8016daa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016dac:	69bb      	ldr	r3, [r7, #24]
 8016dae:	699b      	ldr	r3, [r3, #24]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	db04      	blt.n	8016dbe <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	f1c3 0205 	rsb	r2, r3, #5
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016dbe:	69bb      	ldr	r3, [r7, #24]
 8016dc0:	6959      	ldr	r1, [r3, #20]
 8016dc2:	693a      	ldr	r2, [r7, #16]
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	4413      	add	r3, r2
 8016dca:	009b      	lsls	r3, r3, #2
 8016dcc:	4a19      	ldr	r2, [pc, #100]	@ (8016e34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016dce:	4413      	add	r3, r2
 8016dd0:	4299      	cmp	r1, r3
 8016dd2:	d129      	bne.n	8016e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016dd4:	69bb      	ldr	r3, [r7, #24]
 8016dd6:	3304      	adds	r3, #4
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7fe f887 	bl	8014eec <uxListRemove>
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d10a      	bne.n	8016dfa <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016de4:	69bb      	ldr	r3, [r7, #24]
 8016de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016de8:	2201      	movs	r2, #1
 8016dea:	fa02 f303 	lsl.w	r3, r2, r3
 8016dee:	43da      	mvns	r2, r3
 8016df0:	4b11      	ldr	r3, [pc, #68]	@ (8016e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	4013      	ands	r3, r2
 8016df6:	4a10      	ldr	r2, [pc, #64]	@ (8016e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016df8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016dfe:	2201      	movs	r2, #1
 8016e00:	409a      	lsls	r2, r3
 8016e02:	4b0d      	ldr	r3, [pc, #52]	@ (8016e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	4313      	orrs	r3, r2
 8016e08:	4a0b      	ldr	r2, [pc, #44]	@ (8016e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016e0a:	6013      	str	r3, [r2, #0]
 8016e0c:	69bb      	ldr	r3, [r7, #24]
 8016e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016e10:	4613      	mov	r3, r2
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	4413      	add	r3, r2
 8016e16:	009b      	lsls	r3, r3, #2
 8016e18:	4a06      	ldr	r2, [pc, #24]	@ (8016e34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016e1a:	441a      	add	r2, r3
 8016e1c:	69bb      	ldr	r3, [r7, #24]
 8016e1e:	3304      	adds	r3, #4
 8016e20:	4619      	mov	r1, r3
 8016e22:	4610      	mov	r0, r2
 8016e24:	f7fe f805 	bl	8014e32 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8016e28:	bf00      	nop
 8016e2a:	3720      	adds	r7, #32
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}
 8016e30:	20001594 	.word	0x20001594
 8016e34:	20001598 	.word	0x20001598
 8016e38:	20001674 	.word	0x20001674

08016e3c <prvWriteNameToBuffer>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

    static char * prvWriteNameToBuffer( char * pcBuffer,
                                        const char * pcTaskName )
    {
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b084      	sub	sp, #16
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	6039      	str	r1, [r7, #0]
        size_t x;

        /* Start by copying the entire string. */
        strcpy( pcBuffer, pcTaskName );
 8016e46:	6839      	ldr	r1, [r7, #0]
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f002 ff3c 	bl	8019cc6 <strcpy>

        /* Pad the end of the string with spaces to ensure columns line up when
         * printed out. */
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f7f1 fa3e 	bl	80082d0 <strlen>
 8016e54:	60f8      	str	r0, [r7, #12]
 8016e56:	e007      	b.n	8016e68 <prvWriteNameToBuffer+0x2c>
        {
            pcBuffer[ x ] = ' ';
 8016e58:	687a      	ldr	r2, [r7, #4]
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	4413      	add	r3, r2
 8016e5e:	2220      	movs	r2, #32
 8016e60:	701a      	strb	r2, [r3, #0]
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	3301      	adds	r3, #1
 8016e66:	60fb      	str	r3, [r7, #12]
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	2b08      	cmp	r3, #8
 8016e6c:	d9f4      	bls.n	8016e58 <prvWriteNameToBuffer+0x1c>
        }

        /* Terminate. */
        pcBuffer[ x ] = ( char ) 0x00;
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	4413      	add	r3, r2
 8016e74:	2200      	movs	r2, #0
 8016e76:	701a      	strb	r2, [r3, #0]

        /* Return the new end of string. */
        return &( pcBuffer[ x ] );
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	4413      	add	r3, r2
    }
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
	...

08016e88 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    void vTaskList( char * pcWriteBuffer )
    {
 8016e88:	b590      	push	{r4, r7, lr}
 8016e8a:	b089      	sub	sp, #36	@ 0x24
 8016e8c:	af02      	add	r7, sp, #8
 8016e8e:	6078      	str	r0, [r7, #4]
         * through a call to vTaskList().
         */


        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2200      	movs	r2, #0
 8016e94:	701a      	strb	r2, [r3, #0]

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks;
 8016e96:	4b45      	ldr	r3, [pc, #276]	@ (8016fac <vTaskList+0x124>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	60fb      	str	r3, [r7, #12]

        /* Allocate an array index for each task.  NOTE!  if
         * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
         * equate to NULL. */
        pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8016e9c:	4b43      	ldr	r3, [pc, #268]	@ (8016fac <vTaskList+0x124>)
 8016e9e:	681a      	ldr	r2, [r3, #0]
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	00db      	lsls	r3, r3, #3
 8016ea4:	4413      	add	r3, r2
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f000 fe79 	bl	8017ba0 <pvPortMalloc>
 8016eae:	60b8      	str	r0, [r7, #8]

        if( pxTaskStatusArray != NULL )
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d076      	beq.n	8016fa4 <vTaskList+0x11c>
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	68f9      	ldr	r1, [r7, #12]
 8016eba:	68b8      	ldr	r0, [r7, #8]
 8016ebc:	f7ff f98e 	bl	80161dc <uxTaskGetSystemState>
 8016ec0:	60f8      	str	r0, [r7, #12]

            /* Create a human readable table from the binary data. */
            for( x = 0; x < uxArraySize; x++ )
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	617b      	str	r3, [r7, #20]
 8016ec6:	e066      	b.n	8016f96 <vTaskList+0x10e>
            {
                switch( pxTaskStatusArray[ x ].eCurrentState )
 8016ec8:	697a      	ldr	r2, [r7, #20]
 8016eca:	4613      	mov	r3, r2
 8016ecc:	00db      	lsls	r3, r3, #3
 8016ece:	4413      	add	r3, r2
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	4413      	add	r3, r2
 8016ed8:	7b1b      	ldrb	r3, [r3, #12]
 8016eda:	2b04      	cmp	r3, #4
 8016edc:	d81b      	bhi.n	8016f16 <vTaskList+0x8e>
 8016ede:	a201      	add	r2, pc, #4	@ (adr r2, 8016ee4 <vTaskList+0x5c>)
 8016ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ee4:	08016ef9 	.word	0x08016ef9
 8016ee8:	08016eff 	.word	0x08016eff
 8016eec:	08016f05 	.word	0x08016f05
 8016ef0:	08016f0b 	.word	0x08016f0b
 8016ef4:	08016f11 	.word	0x08016f11
                {
                    case eRunning:
                        cStatus = tskRUNNING_CHAR;
 8016ef8:	2358      	movs	r3, #88	@ 0x58
 8016efa:	74fb      	strb	r3, [r7, #19]
                        break;
 8016efc:	e00e      	b.n	8016f1c <vTaskList+0x94>

                    case eReady:
                        cStatus = tskREADY_CHAR;
 8016efe:	2352      	movs	r3, #82	@ 0x52
 8016f00:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f02:	e00b      	b.n	8016f1c <vTaskList+0x94>

                    case eBlocked:
                        cStatus = tskBLOCKED_CHAR;
 8016f04:	2342      	movs	r3, #66	@ 0x42
 8016f06:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f08:	e008      	b.n	8016f1c <vTaskList+0x94>

                    case eSuspended:
                        cStatus = tskSUSPENDED_CHAR;
 8016f0a:	2353      	movs	r3, #83	@ 0x53
 8016f0c:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f0e:	e005      	b.n	8016f1c <vTaskList+0x94>

                    case eDeleted:
                        cStatus = tskDELETED_CHAR;
 8016f10:	2344      	movs	r3, #68	@ 0x44
 8016f12:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f14:	e002      	b.n	8016f1c <vTaskList+0x94>

                    case eInvalid: /* Fall through. */
                    default:       /* Should not get here, but it is included
                                    * to prevent static checking errors. */
                        cStatus = ( char ) 0x00;
 8016f16:	2300      	movs	r3, #0
 8016f18:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f1a:	bf00      	nop
                }

                /* Write the task name to the string, padding with spaces so it
                 * can be printed in tabular form more easily. */
                pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8016f1c:	697a      	ldr	r2, [r7, #20]
 8016f1e:	4613      	mov	r3, r2
 8016f20:	00db      	lsls	r3, r3, #3
 8016f22:	4413      	add	r3, r2
 8016f24:	009b      	lsls	r3, r3, #2
 8016f26:	461a      	mov	r2, r3
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	4413      	add	r3, r2
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	4619      	mov	r1, r3
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f7ff ff83 	bl	8016e3c <prvWriteNameToBuffer>
 8016f36:	6078      	str	r0, [r7, #4]

                /* Write the rest of the string. */
                sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8016f38:	7cf9      	ldrb	r1, [r7, #19]
 8016f3a:	697a      	ldr	r2, [r7, #20]
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	00db      	lsls	r3, r3, #3
 8016f40:	4413      	add	r3, r2
 8016f42:	009b      	lsls	r3, r3, #2
 8016f44:	461a      	mov	r2, r3
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	4413      	add	r3, r2
 8016f4a:	6918      	ldr	r0, [r3, #16]
 8016f4c:	697a      	ldr	r2, [r7, #20]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	00db      	lsls	r3, r3, #3
 8016f52:	4413      	add	r3, r2
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	461a      	mov	r2, r3
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	4413      	add	r3, r2
 8016f5c:	8c1b      	ldrh	r3, [r3, #32]
 8016f5e:	461c      	mov	r4, r3
 8016f60:	697a      	ldr	r2, [r7, #20]
 8016f62:	4613      	mov	r3, r2
 8016f64:	00db      	lsls	r3, r3, #3
 8016f66:	4413      	add	r3, r2
 8016f68:	009b      	lsls	r3, r3, #2
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	68bb      	ldr	r3, [r7, #8]
 8016f6e:	4413      	add	r3, r2
 8016f70:	689b      	ldr	r3, [r3, #8]
 8016f72:	9301      	str	r3, [sp, #4]
 8016f74:	9400      	str	r4, [sp, #0]
 8016f76:	4603      	mov	r3, r0
 8016f78:	460a      	mov	r2, r1
 8016f7a:	490d      	ldr	r1, [pc, #52]	@ (8016fb0 <vTaskList+0x128>)
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f002 fc73 	bl	8019868 <siprintf>
                pcWriteBuffer += strlen( pcWriteBuffer );                                                                                                                                                                                                /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f7f1 f9a4 	bl	80082d0 <strlen>
 8016f88:	4602      	mov	r2, r0
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	4413      	add	r3, r2
 8016f8e:	607b      	str	r3, [r7, #4]
            for( x = 0; x < uxArraySize; x++ )
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	3301      	adds	r3, #1
 8016f94:	617b      	str	r3, [r7, #20]
 8016f96:	697a      	ldr	r2, [r7, #20]
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	d394      	bcc.n	8016ec8 <vTaskList+0x40>
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
             * is 0 then vPortFree() will be #defined to nothing. */
            vPortFree( pxTaskStatusArray );
 8016f9e:	68b8      	ldr	r0, [r7, #8]
 8016fa0:	f000 fee0 	bl	8017d64 <vPortFree>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8016fa4:	bf00      	nop
 8016fa6:	371c      	adds	r7, #28
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd90      	pop	{r4, r7, pc}
 8016fac:	2000166c 	.word	0x2000166c
 8016fb0:	0801d600 	.word	0x0801d600

08016fb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8016fb4:	b480      	push	{r7}
 8016fb6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8016fb8:	4b07      	ldr	r3, [pc, #28]	@ (8016fd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d004      	beq.n	8016fca <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8016fc0:	4b05      	ldr	r3, [pc, #20]	@ (8016fd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016fc6:	3201      	adds	r2, #1
 8016fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8016fca:	4b03      	ldr	r3, [pc, #12]	@ (8016fd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
    }
 8016fce:	4618      	mov	r0, r3
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr
 8016fd8:	20001594 	.word	0x20001594

08016fdc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8016fe6:	4b29      	ldr	r3, [pc, #164]	@ (801708c <prvAddCurrentTaskToDelayedList+0xb0>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fec:	4b28      	ldr	r3, [pc, #160]	@ (8017090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	3304      	adds	r3, #4
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7fd ff7a 	bl	8014eec <uxListRemove>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d10b      	bne.n	8017016 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016ffe:	4b24      	ldr	r3, [pc, #144]	@ (8017090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017004:	2201      	movs	r2, #1
 8017006:	fa02 f303 	lsl.w	r3, r2, r3
 801700a:	43da      	mvns	r2, r3
 801700c:	4b21      	ldr	r3, [pc, #132]	@ (8017094 <prvAddCurrentTaskToDelayedList+0xb8>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	4013      	ands	r3, r2
 8017012:	4a20      	ldr	r2, [pc, #128]	@ (8017094 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017014:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801701c:	d10a      	bne.n	8017034 <prvAddCurrentTaskToDelayedList+0x58>
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d007      	beq.n	8017034 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017024:	4b1a      	ldr	r3, [pc, #104]	@ (8017090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	3304      	adds	r3, #4
 801702a:	4619      	mov	r1, r3
 801702c:	481a      	ldr	r0, [pc, #104]	@ (8017098 <prvAddCurrentTaskToDelayedList+0xbc>)
 801702e:	f7fd ff00 	bl	8014e32 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8017032:	e026      	b.n	8017082 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8017034:	68fa      	ldr	r2, [r7, #12]
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	4413      	add	r3, r2
 801703a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801703c:	4b14      	ldr	r3, [pc, #80]	@ (8017090 <prvAddCurrentTaskToDelayedList+0xb4>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	68ba      	ldr	r2, [r7, #8]
 8017042:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8017044:	68ba      	ldr	r2, [r7, #8]
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	429a      	cmp	r2, r3
 801704a:	d209      	bcs.n	8017060 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801704c:	4b13      	ldr	r3, [pc, #76]	@ (801709c <prvAddCurrentTaskToDelayedList+0xc0>)
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	4b0f      	ldr	r3, [pc, #60]	@ (8017090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	3304      	adds	r3, #4
 8017056:	4619      	mov	r1, r3
 8017058:	4610      	mov	r0, r2
 801705a:	f7fd ff0e 	bl	8014e7a <vListInsert>
}
 801705e:	e010      	b.n	8017082 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017060:	4b0f      	ldr	r3, [pc, #60]	@ (80170a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017062:	681a      	ldr	r2, [r3, #0]
 8017064:	4b0a      	ldr	r3, [pc, #40]	@ (8017090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	3304      	adds	r3, #4
 801706a:	4619      	mov	r1, r3
 801706c:	4610      	mov	r0, r2
 801706e:	f7fd ff04 	bl	8014e7a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8017072:	4b0c      	ldr	r3, [pc, #48]	@ (80170a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	68ba      	ldr	r2, [r7, #8]
 8017078:	429a      	cmp	r2, r3
 801707a:	d202      	bcs.n	8017082 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 801707c:	4a09      	ldr	r2, [pc, #36]	@ (80170a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	6013      	str	r3, [r2, #0]
}
 8017082:	bf00      	nop
 8017084:	3710      	adds	r7, #16
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	20001670 	.word	0x20001670
 8017090:	20001594 	.word	0x20001594
 8017094:	20001674 	.word	0x20001674
 8017098:	20001658 	.word	0x20001658
 801709c:	20001628 	.word	0x20001628
 80170a0:	20001624 	.word	0x20001624
 80170a4:	2000168c 	.word	0x2000168c

080170a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80170ae:	2300      	movs	r3, #0
 80170b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80170b2:	f000 fae1 	bl	8017678 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80170b6:	4b12      	ldr	r3, [pc, #72]	@ (8017100 <xTimerCreateTimerTask+0x58>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d00b      	beq.n	80170d6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80170be:	4b11      	ldr	r3, [pc, #68]	@ (8017104 <xTimerCreateTimerTask+0x5c>)
 80170c0:	9301      	str	r3, [sp, #4]
 80170c2:	2302      	movs	r3, #2
 80170c4:	9300      	str	r3, [sp, #0]
 80170c6:	2300      	movs	r3, #0
 80170c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80170cc:	490e      	ldr	r1, [pc, #56]	@ (8017108 <xTimerCreateTimerTask+0x60>)
 80170ce:	480f      	ldr	r0, [pc, #60]	@ (801710c <xTimerCreateTimerTask+0x64>)
 80170d0:	f7fe fd80 	bl	8015bd4 <xTaskCreate>
 80170d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d10b      	bne.n	80170f4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80170dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170e0:	f383 8811 	msr	BASEPRI, r3
 80170e4:	f3bf 8f6f 	isb	sy
 80170e8:	f3bf 8f4f 	dsb	sy
 80170ec:	603b      	str	r3, [r7, #0]
    }
 80170ee:	bf00      	nop
 80170f0:	bf00      	nop
 80170f2:	e7fd      	b.n	80170f0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80170f4:	687b      	ldr	r3, [r7, #4]
    }
 80170f6:	4618      	mov	r0, r3
 80170f8:	3708      	adds	r7, #8
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	bf00      	nop
 8017100:	200016c8 	.word	0x200016c8
 8017104:	200016cc 	.word	0x200016cc
 8017108:	0801d610 	.word	0x0801d610
 801710c:	08017249 	.word	0x08017249

08017110 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8017110:	b580      	push	{r7, lr}
 8017112:	b08a      	sub	sp, #40	@ 0x28
 8017114:	af00      	add	r7, sp, #0
 8017116:	60f8      	str	r0, [r7, #12]
 8017118:	60b9      	str	r1, [r7, #8]
 801711a:	607a      	str	r2, [r7, #4]
 801711c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 801711e:	2300      	movs	r3, #0
 8017120:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d10b      	bne.n	8017140 <xTimerGenericCommand+0x30>
        __asm volatile
 8017128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801712c:	f383 8811 	msr	BASEPRI, r3
 8017130:	f3bf 8f6f 	isb	sy
 8017134:	f3bf 8f4f 	dsb	sy
 8017138:	623b      	str	r3, [r7, #32]
    }
 801713a:	bf00      	nop
 801713c:	bf00      	nop
 801713e:	e7fd      	b.n	801713c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8017140:	4b19      	ldr	r3, [pc, #100]	@ (80171a8 <xTimerGenericCommand+0x98>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d02a      	beq.n	801719e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017154:	68bb      	ldr	r3, [r7, #8]
 8017156:	2b05      	cmp	r3, #5
 8017158:	dc18      	bgt.n	801718c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801715a:	f7ff fccf 	bl	8016afc <xTaskGetSchedulerState>
 801715e:	4603      	mov	r3, r0
 8017160:	2b02      	cmp	r3, #2
 8017162:	d109      	bne.n	8017178 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017164:	4b10      	ldr	r3, [pc, #64]	@ (80171a8 <xTimerGenericCommand+0x98>)
 8017166:	6818      	ldr	r0, [r3, #0]
 8017168:	f107 0114 	add.w	r1, r7, #20
 801716c:	2300      	movs	r3, #0
 801716e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017170:	f7fe f808 	bl	8015184 <xQueueGenericSend>
 8017174:	6278      	str	r0, [r7, #36]	@ 0x24
 8017176:	e012      	b.n	801719e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017178:	4b0b      	ldr	r3, [pc, #44]	@ (80171a8 <xTimerGenericCommand+0x98>)
 801717a:	6818      	ldr	r0, [r3, #0]
 801717c:	f107 0114 	add.w	r1, r7, #20
 8017180:	2300      	movs	r3, #0
 8017182:	2200      	movs	r2, #0
 8017184:	f7fd fffe 	bl	8015184 <xQueueGenericSend>
 8017188:	6278      	str	r0, [r7, #36]	@ 0x24
 801718a:	e008      	b.n	801719e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801718c:	4b06      	ldr	r3, [pc, #24]	@ (80171a8 <xTimerGenericCommand+0x98>)
 801718e:	6818      	ldr	r0, [r3, #0]
 8017190:	f107 0114 	add.w	r1, r7, #20
 8017194:	2300      	movs	r3, #0
 8017196:	683a      	ldr	r2, [r7, #0]
 8017198:	f7fe f8f6 	bl	8015388 <xQueueGenericSendFromISR>
 801719c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 801719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80171a0:	4618      	mov	r0, r3
 80171a2:	3728      	adds	r7, #40	@ 0x28
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}
 80171a8:	200016c8 	.word	0x200016c8

080171ac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b088      	sub	sp, #32
 80171b0:	af02      	add	r7, sp, #8
 80171b2:	6078      	str	r0, [r7, #4]
 80171b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171b6:	4b23      	ldr	r3, [pc, #140]	@ (8017244 <prvProcessExpiredTimer+0x98>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	68db      	ldr	r3, [r3, #12]
 80171bc:	68db      	ldr	r3, [r3, #12]
 80171be:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80171c0:	697b      	ldr	r3, [r7, #20]
 80171c2:	3304      	adds	r3, #4
 80171c4:	4618      	mov	r0, r3
 80171c6:	f7fd fe91 	bl	8014eec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80171d0:	f003 0304 	and.w	r3, r3, #4
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d023      	beq.n	8017220 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80171d8:	697b      	ldr	r3, [r7, #20]
 80171da:	699a      	ldr	r2, [r3, #24]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	18d1      	adds	r1, r2, r3
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	683a      	ldr	r2, [r7, #0]
 80171e4:	6978      	ldr	r0, [r7, #20]
 80171e6:	f000 f8d5 	bl	8017394 <prvInsertTimerInActiveList>
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d020      	beq.n	8017232 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80171f0:	2300      	movs	r3, #0
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	2300      	movs	r3, #0
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	2100      	movs	r1, #0
 80171fa:	6978      	ldr	r0, [r7, #20]
 80171fc:	f7ff ff88 	bl	8017110 <xTimerGenericCommand>
 8017200:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8017202:	693b      	ldr	r3, [r7, #16]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d114      	bne.n	8017232 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8017208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801720c:	f383 8811 	msr	BASEPRI, r3
 8017210:	f3bf 8f6f 	isb	sy
 8017214:	f3bf 8f4f 	dsb	sy
 8017218:	60fb      	str	r3, [r7, #12]
    }
 801721a:	bf00      	nop
 801721c:	bf00      	nop
 801721e:	e7fd      	b.n	801721c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017226:	f023 0301 	bic.w	r3, r3, #1
 801722a:	b2da      	uxtb	r2, r3
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	6a1b      	ldr	r3, [r3, #32]
 8017236:	6978      	ldr	r0, [r7, #20]
 8017238:	4798      	blx	r3
    }
 801723a:	bf00      	nop
 801723c:	3718      	adds	r7, #24
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}
 8017242:	bf00      	nop
 8017244:	200016c0 	.word	0x200016c0

08017248 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8017248:	b580      	push	{r7, lr}
 801724a:	b084      	sub	sp, #16
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017250:	f107 0308 	add.w	r3, r7, #8
 8017254:	4618      	mov	r0, r3
 8017256:	f000 f859 	bl	801730c <prvGetNextExpireTime>
 801725a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	4619      	mov	r1, r3
 8017260:	68f8      	ldr	r0, [r7, #12]
 8017262:	f000 f805 	bl	8017270 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8017266:	f000 f8d7 	bl	8017418 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801726a:	bf00      	nop
 801726c:	e7f0      	b.n	8017250 <prvTimerTask+0x8>
	...

08017270 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8017270:	b580      	push	{r7, lr}
 8017272:	b084      	sub	sp, #16
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 801727a:	f7fe fef3 	bl	8016064 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801727e:	f107 0308 	add.w	r3, r7, #8
 8017282:	4618      	mov	r0, r3
 8017284:	f000 f866 	bl	8017354 <prvSampleTimeNow>
 8017288:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d130      	bne.n	80172f2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d10a      	bne.n	80172ac <prvProcessTimerOrBlockTask+0x3c>
 8017296:	687a      	ldr	r2, [r7, #4]
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	429a      	cmp	r2, r3
 801729c:	d806      	bhi.n	80172ac <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 801729e:	f7fe feef 	bl	8016080 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80172a2:	68f9      	ldr	r1, [r7, #12]
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f7ff ff81 	bl	80171ac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80172aa:	e024      	b.n	80172f6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d008      	beq.n	80172c4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80172b2:	4b13      	ldr	r3, [pc, #76]	@ (8017300 <prvProcessTimerOrBlockTask+0x90>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d101      	bne.n	80172c0 <prvProcessTimerOrBlockTask+0x50>
 80172bc:	2301      	movs	r3, #1
 80172be:	e000      	b.n	80172c2 <prvProcessTimerOrBlockTask+0x52>
 80172c0:	2300      	movs	r3, #0
 80172c2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80172c4:	4b0f      	ldr	r3, [pc, #60]	@ (8017304 <prvProcessTimerOrBlockTask+0x94>)
 80172c6:	6818      	ldr	r0, [r3, #0]
 80172c8:	687a      	ldr	r2, [r7, #4]
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	1ad3      	subs	r3, r2, r3
 80172ce:	683a      	ldr	r2, [r7, #0]
 80172d0:	4619      	mov	r1, r3
 80172d2:	f7fe fc4b 	bl	8015b6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80172d6:	f7fe fed3 	bl	8016080 <xTaskResumeAll>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d10a      	bne.n	80172f6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80172e0:	4b09      	ldr	r3, [pc, #36]	@ (8017308 <prvProcessTimerOrBlockTask+0x98>)
 80172e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80172e6:	601a      	str	r2, [r3, #0]
 80172e8:	f3bf 8f4f 	dsb	sy
 80172ec:	f3bf 8f6f 	isb	sy
    }
 80172f0:	e001      	b.n	80172f6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80172f2:	f7fe fec5 	bl	8016080 <xTaskResumeAll>
    }
 80172f6:	bf00      	nop
 80172f8:	3710      	adds	r7, #16
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	200016c4 	.word	0x200016c4
 8017304:	200016c8 	.word	0x200016c8
 8017308:	e000ed04 	.word	0xe000ed04

0801730c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 801730c:	b480      	push	{r7}
 801730e:	b085      	sub	sp, #20
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017314:	4b0e      	ldr	r3, [pc, #56]	@ (8017350 <prvGetNextExpireTime+0x44>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d101      	bne.n	8017322 <prvGetNextExpireTime+0x16>
 801731e:	2201      	movs	r2, #1
 8017320:	e000      	b.n	8017324 <prvGetNextExpireTime+0x18>
 8017322:	2200      	movs	r2, #0
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d105      	bne.n	801733c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017330:	4b07      	ldr	r3, [pc, #28]	@ (8017350 <prvGetNextExpireTime+0x44>)
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	68db      	ldr	r3, [r3, #12]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	60fb      	str	r3, [r7, #12]
 801733a:	e001      	b.n	8017340 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 801733c:	2300      	movs	r3, #0
 801733e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8017340:	68fb      	ldr	r3, [r7, #12]
    }
 8017342:	4618      	mov	r0, r3
 8017344:	3714      	adds	r7, #20
 8017346:	46bd      	mov	sp, r7
 8017348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734c:	4770      	bx	lr
 801734e:	bf00      	nop
 8017350:	200016c0 	.word	0x200016c0

08017354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 801735c:	f7fe ff2e 	bl	80161bc <xTaskGetTickCount>
 8017360:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8017362:	4b0b      	ldr	r3, [pc, #44]	@ (8017390 <prvSampleTimeNow+0x3c>)
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	68fa      	ldr	r2, [r7, #12]
 8017368:	429a      	cmp	r2, r3
 801736a:	d205      	bcs.n	8017378 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 801736c:	f000 f91e 	bl	80175ac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2201      	movs	r2, #1
 8017374:	601a      	str	r2, [r3, #0]
 8017376:	e002      	b.n	801737e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2200      	movs	r2, #0
 801737c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 801737e:	4a04      	ldr	r2, [pc, #16]	@ (8017390 <prvSampleTimeNow+0x3c>)
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8017384:	68fb      	ldr	r3, [r7, #12]
    }
 8017386:	4618      	mov	r0, r3
 8017388:	3710      	adds	r7, #16
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}
 801738e:	bf00      	nop
 8017390:	200016d0 	.word	0x200016d0

08017394 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8017394:	b580      	push	{r7, lr}
 8017396:	b086      	sub	sp, #24
 8017398:	af00      	add	r7, sp, #0
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	607a      	str	r2, [r7, #4]
 80173a0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80173a2:	2300      	movs	r3, #0
 80173a4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	68ba      	ldr	r2, [r7, #8]
 80173aa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	68fa      	ldr	r2, [r7, #12]
 80173b0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80173b2:	68ba      	ldr	r2, [r7, #8]
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d812      	bhi.n	80173e0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80173ba:	687a      	ldr	r2, [r7, #4]
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	1ad2      	subs	r2, r2, r3
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	699b      	ldr	r3, [r3, #24]
 80173c4:	429a      	cmp	r2, r3
 80173c6:	d302      	bcc.n	80173ce <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80173c8:	2301      	movs	r3, #1
 80173ca:	617b      	str	r3, [r7, #20]
 80173cc:	e01b      	b.n	8017406 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80173ce:	4b10      	ldr	r3, [pc, #64]	@ (8017410 <prvInsertTimerInActiveList+0x7c>)
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	3304      	adds	r3, #4
 80173d6:	4619      	mov	r1, r3
 80173d8:	4610      	mov	r0, r2
 80173da:	f7fd fd4e 	bl	8014e7a <vListInsert>
 80173de:	e012      	b.n	8017406 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d206      	bcs.n	80173f6 <prvInsertTimerInActiveList+0x62>
 80173e8:	68ba      	ldr	r2, [r7, #8]
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	429a      	cmp	r2, r3
 80173ee:	d302      	bcc.n	80173f6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80173f0:	2301      	movs	r3, #1
 80173f2:	617b      	str	r3, [r7, #20]
 80173f4:	e007      	b.n	8017406 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173f6:	4b07      	ldr	r3, [pc, #28]	@ (8017414 <prvInsertTimerInActiveList+0x80>)
 80173f8:	681a      	ldr	r2, [r3, #0]
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	3304      	adds	r3, #4
 80173fe:	4619      	mov	r1, r3
 8017400:	4610      	mov	r0, r2
 8017402:	f7fd fd3a 	bl	8014e7a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8017406:	697b      	ldr	r3, [r7, #20]
    }
 8017408:	4618      	mov	r0, r3
 801740a:	3718      	adds	r7, #24
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}
 8017410:	200016c4 	.word	0x200016c4
 8017414:	200016c0 	.word	0x200016c0

08017418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8017418:	b580      	push	{r7, lr}
 801741a:	b08c      	sub	sp, #48	@ 0x30
 801741c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801741e:	e0b2      	b.n	8017586 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	2b00      	cmp	r3, #0
 8017424:	f2c0 80af 	blt.w	8017586 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742e:	695b      	ldr	r3, [r3, #20]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d004      	beq.n	801743e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017436:	3304      	adds	r3, #4
 8017438:	4618      	mov	r0, r3
 801743a:	f7fd fd57 	bl	8014eec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801743e:	1d3b      	adds	r3, r7, #4
 8017440:	4618      	mov	r0, r3
 8017442:	f7ff ff87 	bl	8017354 <prvSampleTimeNow>
 8017446:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	2b09      	cmp	r3, #9
 801744c:	f200 8098 	bhi.w	8017580 <prvProcessReceivedCommands+0x168>
 8017450:	a201      	add	r2, pc, #4	@ (adr r2, 8017458 <prvProcessReceivedCommands+0x40>)
 8017452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017456:	bf00      	nop
 8017458:	08017481 	.word	0x08017481
 801745c:	08017481 	.word	0x08017481
 8017460:	08017481 	.word	0x08017481
 8017464:	080174f7 	.word	0x080174f7
 8017468:	0801750b 	.word	0x0801750b
 801746c:	08017557 	.word	0x08017557
 8017470:	08017481 	.word	0x08017481
 8017474:	08017481 	.word	0x08017481
 8017478:	080174f7 	.word	0x080174f7
 801747c:	0801750b 	.word	0x0801750b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017486:	f043 0301 	orr.w	r3, r3, #1
 801748a:	b2da      	uxtb	r2, r3
 801748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801748e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017492:	68fa      	ldr	r2, [r7, #12]
 8017494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017496:	699b      	ldr	r3, [r3, #24]
 8017498:	18d1      	adds	r1, r2, r3
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	6a3a      	ldr	r2, [r7, #32]
 801749e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174a0:	f7ff ff78 	bl	8017394 <prvInsertTimerInActiveList>
 80174a4:	4603      	mov	r3, r0
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d06c      	beq.n	8017584 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80174aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ac:	6a1b      	ldr	r3, [r3, #32]
 80174ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174b0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80174b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174b8:	f003 0304 	and.w	r3, r3, #4
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d061      	beq.n	8017584 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80174c0:	68fa      	ldr	r2, [r7, #12]
 80174c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c4:	699b      	ldr	r3, [r3, #24]
 80174c6:	441a      	add	r2, r3
 80174c8:	2300      	movs	r3, #0
 80174ca:	9300      	str	r3, [sp, #0]
 80174cc:	2300      	movs	r3, #0
 80174ce:	2100      	movs	r1, #0
 80174d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174d2:	f7ff fe1d 	bl	8017110 <xTimerGenericCommand>
 80174d6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80174d8:	69fb      	ldr	r3, [r7, #28]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d152      	bne.n	8017584 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80174de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174e2:	f383 8811 	msr	BASEPRI, r3
 80174e6:	f3bf 8f6f 	isb	sy
 80174ea:	f3bf 8f4f 	dsb	sy
 80174ee:	61bb      	str	r3, [r7, #24]
    }
 80174f0:	bf00      	nop
 80174f2:	bf00      	nop
 80174f4:	e7fd      	b.n	80174f2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80174f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174fc:	f023 0301 	bic.w	r3, r3, #1
 8017500:	b2da      	uxtb	r2, r3
 8017502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017504:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8017508:	e03d      	b.n	8017586 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801750c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017510:	f043 0301 	orr.w	r3, r3, #1
 8017514:	b2da      	uxtb	r2, r3
 8017516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017518:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801751c:	68fa      	ldr	r2, [r7, #12]
 801751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017520:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017524:	699b      	ldr	r3, [r3, #24]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d10b      	bne.n	8017542 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 801752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801752e:	f383 8811 	msr	BASEPRI, r3
 8017532:	f3bf 8f6f 	isb	sy
 8017536:	f3bf 8f4f 	dsb	sy
 801753a:	617b      	str	r3, [r7, #20]
    }
 801753c:	bf00      	nop
 801753e:	bf00      	nop
 8017540:	e7fd      	b.n	801753e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017544:	699a      	ldr	r2, [r3, #24]
 8017546:	6a3b      	ldr	r3, [r7, #32]
 8017548:	18d1      	adds	r1, r2, r3
 801754a:	6a3b      	ldr	r3, [r7, #32]
 801754c:	6a3a      	ldr	r2, [r7, #32]
 801754e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017550:	f7ff ff20 	bl	8017394 <prvInsertTimerInActiveList>
                        break;
 8017554:	e017      	b.n	8017586 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801755c:	f003 0302 	and.w	r3, r3, #2
 8017560:	2b00      	cmp	r3, #0
 8017562:	d103      	bne.n	801756c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8017564:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017566:	f000 fbfd 	bl	8017d64 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 801756a:	e00c      	b.n	8017586 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017572:	f023 0301 	bic.w	r3, r3, #1
 8017576:	b2da      	uxtb	r2, r3
 8017578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801757a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 801757e:	e002      	b.n	8017586 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8017580:	bf00      	nop
 8017582:	e000      	b.n	8017586 <prvProcessReceivedCommands+0x16e>
                        break;
 8017584:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017586:	4b08      	ldr	r3, [pc, #32]	@ (80175a8 <prvProcessReceivedCommands+0x190>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	f107 0108 	add.w	r1, r7, #8
 801758e:	2200      	movs	r2, #0
 8017590:	4618      	mov	r0, r3
 8017592:	f7fd ffa7 	bl	80154e4 <xQueueReceive>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	f47f af41 	bne.w	8017420 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 801759e:	bf00      	nop
 80175a0:	bf00      	nop
 80175a2:	3728      	adds	r7, #40	@ 0x28
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}
 80175a8:	200016c8 	.word	0x200016c8

080175ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b088      	sub	sp, #32
 80175b0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80175b2:	e049      	b.n	8017648 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80175b4:	4b2e      	ldr	r3, [pc, #184]	@ (8017670 <prvSwitchTimerLists+0xc4>)
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	68db      	ldr	r3, [r3, #12]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175be:	4b2c      	ldr	r3, [pc, #176]	@ (8017670 <prvSwitchTimerLists+0xc4>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	68db      	ldr	r3, [r3, #12]
 80175c4:	68db      	ldr	r3, [r3, #12]
 80175c6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	3304      	adds	r3, #4
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7fd fc8d 	bl	8014eec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6a1b      	ldr	r3, [r3, #32]
 80175d6:	68f8      	ldr	r0, [r7, #12]
 80175d8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80175e0:	f003 0304 	and.w	r3, r3, #4
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d02f      	beq.n	8017648 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	699b      	ldr	r3, [r3, #24]
 80175ec:	693a      	ldr	r2, [r7, #16]
 80175ee:	4413      	add	r3, r2
 80175f0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80175f2:	68ba      	ldr	r2, [r7, #8]
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d90e      	bls.n	8017618 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	68ba      	ldr	r2, [r7, #8]
 80175fe:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	68fa      	ldr	r2, [r7, #12]
 8017604:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017606:	4b1a      	ldr	r3, [pc, #104]	@ (8017670 <prvSwitchTimerLists+0xc4>)
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	3304      	adds	r3, #4
 801760e:	4619      	mov	r1, r3
 8017610:	4610      	mov	r0, r2
 8017612:	f7fd fc32 	bl	8014e7a <vListInsert>
 8017616:	e017      	b.n	8017648 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017618:	2300      	movs	r3, #0
 801761a:	9300      	str	r3, [sp, #0]
 801761c:	2300      	movs	r3, #0
 801761e:	693a      	ldr	r2, [r7, #16]
 8017620:	2100      	movs	r1, #0
 8017622:	68f8      	ldr	r0, [r7, #12]
 8017624:	f7ff fd74 	bl	8017110 <xTimerGenericCommand>
 8017628:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d10b      	bne.n	8017648 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8017630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017634:	f383 8811 	msr	BASEPRI, r3
 8017638:	f3bf 8f6f 	isb	sy
 801763c:	f3bf 8f4f 	dsb	sy
 8017640:	603b      	str	r3, [r7, #0]
    }
 8017642:	bf00      	nop
 8017644:	bf00      	nop
 8017646:	e7fd      	b.n	8017644 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017648:	4b09      	ldr	r3, [pc, #36]	@ (8017670 <prvSwitchTimerLists+0xc4>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1b0      	bne.n	80175b4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8017652:	4b07      	ldr	r3, [pc, #28]	@ (8017670 <prvSwitchTimerLists+0xc4>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8017658:	4b06      	ldr	r3, [pc, #24]	@ (8017674 <prvSwitchTimerLists+0xc8>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	4a04      	ldr	r2, [pc, #16]	@ (8017670 <prvSwitchTimerLists+0xc4>)
 801765e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8017660:	4a04      	ldr	r2, [pc, #16]	@ (8017674 <prvSwitchTimerLists+0xc8>)
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	6013      	str	r3, [r2, #0]
    }
 8017666:	bf00      	nop
 8017668:	3718      	adds	r7, #24
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
 801766e:	bf00      	nop
 8017670:	200016c0 	.word	0x200016c0
 8017674:	200016c4 	.word	0x200016c4

08017678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8017678:	b580      	push	{r7, lr}
 801767a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 801767c:	f000 f966 	bl	801794c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8017680:	4b12      	ldr	r3, [pc, #72]	@ (80176cc <prvCheckForValidListAndQueue+0x54>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d11d      	bne.n	80176c4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8017688:	4811      	ldr	r0, [pc, #68]	@ (80176d0 <prvCheckForValidListAndQueue+0x58>)
 801768a:	f7fd fba5 	bl	8014dd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 801768e:	4811      	ldr	r0, [pc, #68]	@ (80176d4 <prvCheckForValidListAndQueue+0x5c>)
 8017690:	f7fd fba2 	bl	8014dd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8017694:	4b10      	ldr	r3, [pc, #64]	@ (80176d8 <prvCheckForValidListAndQueue+0x60>)
 8017696:	4a0e      	ldr	r2, [pc, #56]	@ (80176d0 <prvCheckForValidListAndQueue+0x58>)
 8017698:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 801769a:	4b10      	ldr	r3, [pc, #64]	@ (80176dc <prvCheckForValidListAndQueue+0x64>)
 801769c:	4a0d      	ldr	r2, [pc, #52]	@ (80176d4 <prvCheckForValidListAndQueue+0x5c>)
 801769e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80176a0:	2200      	movs	r2, #0
 80176a2:	210c      	movs	r1, #12
 80176a4:	200a      	movs	r0, #10
 80176a6:	f7fd fcb5 	bl	8015014 <xQueueGenericCreate>
 80176aa:	4603      	mov	r3, r0
 80176ac:	4a07      	ldr	r2, [pc, #28]	@ (80176cc <prvCheckForValidListAndQueue+0x54>)
 80176ae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80176b0:	4b06      	ldr	r3, [pc, #24]	@ (80176cc <prvCheckForValidListAndQueue+0x54>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d005      	beq.n	80176c4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80176b8:	4b04      	ldr	r3, [pc, #16]	@ (80176cc <prvCheckForValidListAndQueue+0x54>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	4908      	ldr	r1, [pc, #32]	@ (80176e0 <prvCheckForValidListAndQueue+0x68>)
 80176be:	4618      	mov	r0, r3
 80176c0:	f7fe fa2a 	bl	8015b18 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80176c4:	f000 f974 	bl	80179b0 <vPortExitCritical>
    }
 80176c8:	bf00      	nop
 80176ca:	bd80      	pop	{r7, pc}
 80176cc:	200016c8 	.word	0x200016c8
 80176d0:	20001698 	.word	0x20001698
 80176d4:	200016ac 	.word	0x200016ac
 80176d8:	200016c0 	.word	0x200016c0
 80176dc:	200016c4 	.word	0x200016c4
 80176e0:	0801d618 	.word	0x0801d618

080176e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80176e4:	b480      	push	{r7}
 80176e6:	b085      	sub	sp, #20
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	60b9      	str	r1, [r7, #8]
 80176ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	3b04      	subs	r3, #4
 80176f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80176fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	3b04      	subs	r3, #4
 8017702:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8017704:	68bb      	ldr	r3, [r7, #8]
 8017706:	f023 0201 	bic.w	r2, r3, #1
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	3b04      	subs	r3, #4
 8017712:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8017714:	4a0c      	ldr	r2, [pc, #48]	@ (8017748 <pxPortInitialiseStack+0x64>)
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	3b14      	subs	r3, #20
 801771e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3b04      	subs	r3, #4
 801772a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	f06f 0202 	mvn.w	r2, #2
 8017732:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	3b20      	subs	r3, #32
 8017738:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 801773a:	68fb      	ldr	r3, [r7, #12]
}
 801773c:	4618      	mov	r0, r3
 801773e:	3714      	adds	r7, #20
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr
 8017748:	0801774d 	.word	0x0801774d

0801774c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801774c:	b480      	push	{r7}
 801774e:	b085      	sub	sp, #20
 8017750:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8017752:	2300      	movs	r3, #0
 8017754:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8017756:	4b13      	ldr	r3, [pc, #76]	@ (80177a4 <prvTaskExitError+0x58>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801775e:	d00b      	beq.n	8017778 <prvTaskExitError+0x2c>
        __asm volatile
 8017760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017764:	f383 8811 	msr	BASEPRI, r3
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	f3bf 8f4f 	dsb	sy
 8017770:	60fb      	str	r3, [r7, #12]
    }
 8017772:	bf00      	nop
 8017774:	bf00      	nop
 8017776:	e7fd      	b.n	8017774 <prvTaskExitError+0x28>
        __asm volatile
 8017778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801777c:	f383 8811 	msr	BASEPRI, r3
 8017780:	f3bf 8f6f 	isb	sy
 8017784:	f3bf 8f4f 	dsb	sy
 8017788:	60bb      	str	r3, [r7, #8]
    }
 801778a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 801778c:	bf00      	nop
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d0fc      	beq.n	801778e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8017794:	bf00      	nop
 8017796:	bf00      	nop
 8017798:	3714      	adds	r7, #20
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr
 80177a2:	bf00      	nop
 80177a4:	20000098 	.word	0x20000098
	...

080177b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80177b0:	4b07      	ldr	r3, [pc, #28]	@ (80177d0 <pxCurrentTCBConst2>)
 80177b2:	6819      	ldr	r1, [r3, #0]
 80177b4:	6808      	ldr	r0, [r1, #0]
 80177b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ba:	f380 8809 	msr	PSP, r0
 80177be:	f3bf 8f6f 	isb	sy
 80177c2:	f04f 0000 	mov.w	r0, #0
 80177c6:	f380 8811 	msr	BASEPRI, r0
 80177ca:	4770      	bx	lr
 80177cc:	f3af 8000 	nop.w

080177d0 <pxCurrentTCBConst2>:
 80177d0:	20001594 	.word	0x20001594
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80177d4:	bf00      	nop
 80177d6:	bf00      	nop

080177d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80177d8:	4808      	ldr	r0, [pc, #32]	@ (80177fc <prvPortStartFirstTask+0x24>)
 80177da:	6800      	ldr	r0, [r0, #0]
 80177dc:	6800      	ldr	r0, [r0, #0]
 80177de:	f380 8808 	msr	MSP, r0
 80177e2:	f04f 0000 	mov.w	r0, #0
 80177e6:	f380 8814 	msr	CONTROL, r0
 80177ea:	b662      	cpsie	i
 80177ec:	b661      	cpsie	f
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	f3bf 8f6f 	isb	sy
 80177f6:	df00      	svc	0
 80177f8:	bf00      	nop
 80177fa:	0000      	.short	0x0000
 80177fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8017800:	bf00      	nop
 8017802:	bf00      	nop

08017804 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b086      	sub	sp, #24
 8017808:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801780a:	4b47      	ldr	r3, [pc, #284]	@ (8017928 <xPortStartScheduler+0x124>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	4a47      	ldr	r2, [pc, #284]	@ (801792c <xPortStartScheduler+0x128>)
 8017810:	4293      	cmp	r3, r2
 8017812:	d10b      	bne.n	801782c <xPortStartScheduler+0x28>
        __asm volatile
 8017814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017818:	f383 8811 	msr	BASEPRI, r3
 801781c:	f3bf 8f6f 	isb	sy
 8017820:	f3bf 8f4f 	dsb	sy
 8017824:	60fb      	str	r3, [r7, #12]
    }
 8017826:	bf00      	nop
 8017828:	bf00      	nop
 801782a:	e7fd      	b.n	8017828 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801782c:	4b3e      	ldr	r3, [pc, #248]	@ (8017928 <xPortStartScheduler+0x124>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	4a3f      	ldr	r2, [pc, #252]	@ (8017930 <xPortStartScheduler+0x12c>)
 8017832:	4293      	cmp	r3, r2
 8017834:	d10b      	bne.n	801784e <xPortStartScheduler+0x4a>
        __asm volatile
 8017836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801783a:	f383 8811 	msr	BASEPRI, r3
 801783e:	f3bf 8f6f 	isb	sy
 8017842:	f3bf 8f4f 	dsb	sy
 8017846:	613b      	str	r3, [r7, #16]
    }
 8017848:	bf00      	nop
 801784a:	bf00      	nop
 801784c:	e7fd      	b.n	801784a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801784e:	4b39      	ldr	r3, [pc, #228]	@ (8017934 <xPortStartScheduler+0x130>)
 8017850:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	781b      	ldrb	r3, [r3, #0]
 8017856:	b2db      	uxtb	r3, r3
 8017858:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	22ff      	movs	r2, #255	@ 0xff
 801785e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	b2db      	uxtb	r3, r3
 8017866:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017868:	78fb      	ldrb	r3, [r7, #3]
 801786a:	b2db      	uxtb	r3, r3
 801786c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8017870:	b2da      	uxtb	r2, r3
 8017872:	4b31      	ldr	r3, [pc, #196]	@ (8017938 <xPortStartScheduler+0x134>)
 8017874:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017876:	4b31      	ldr	r3, [pc, #196]	@ (801793c <xPortStartScheduler+0x138>)
 8017878:	2207      	movs	r2, #7
 801787a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801787c:	e009      	b.n	8017892 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 801787e:	4b2f      	ldr	r3, [pc, #188]	@ (801793c <xPortStartScheduler+0x138>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	3b01      	subs	r3, #1
 8017884:	4a2d      	ldr	r2, [pc, #180]	@ (801793c <xPortStartScheduler+0x138>)
 8017886:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017888:	78fb      	ldrb	r3, [r7, #3]
 801788a:	b2db      	uxtb	r3, r3
 801788c:	005b      	lsls	r3, r3, #1
 801788e:	b2db      	uxtb	r3, r3
 8017890:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017892:	78fb      	ldrb	r3, [r7, #3]
 8017894:	b2db      	uxtb	r3, r3
 8017896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801789a:	2b80      	cmp	r3, #128	@ 0x80
 801789c:	d0ef      	beq.n	801787e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801789e:	4b27      	ldr	r3, [pc, #156]	@ (801793c <xPortStartScheduler+0x138>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	f1c3 0307 	rsb	r3, r3, #7
 80178a6:	2b04      	cmp	r3, #4
 80178a8:	d00b      	beq.n	80178c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80178aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178ae:	f383 8811 	msr	BASEPRI, r3
 80178b2:	f3bf 8f6f 	isb	sy
 80178b6:	f3bf 8f4f 	dsb	sy
 80178ba:	60bb      	str	r3, [r7, #8]
    }
 80178bc:	bf00      	nop
 80178be:	bf00      	nop
 80178c0:	e7fd      	b.n	80178be <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80178c2:	4b1e      	ldr	r3, [pc, #120]	@ (801793c <xPortStartScheduler+0x138>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	021b      	lsls	r3, r3, #8
 80178c8:	4a1c      	ldr	r2, [pc, #112]	@ (801793c <xPortStartScheduler+0x138>)
 80178ca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80178cc:	4b1b      	ldr	r3, [pc, #108]	@ (801793c <xPortStartScheduler+0x138>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80178d4:	4a19      	ldr	r2, [pc, #100]	@ (801793c <xPortStartScheduler+0x138>)
 80178d6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	b2da      	uxtb	r2, r3
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80178e0:	4b17      	ldr	r3, [pc, #92]	@ (8017940 <xPortStartScheduler+0x13c>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4a16      	ldr	r2, [pc, #88]	@ (8017940 <xPortStartScheduler+0x13c>)
 80178e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80178ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80178ec:	4b14      	ldr	r3, [pc, #80]	@ (8017940 <xPortStartScheduler+0x13c>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	4a13      	ldr	r2, [pc, #76]	@ (8017940 <xPortStartScheduler+0x13c>)
 80178f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80178f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80178f8:	f000 f8e0 	bl	8017abc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80178fc:	4b11      	ldr	r3, [pc, #68]	@ (8017944 <xPortStartScheduler+0x140>)
 80178fe:	2200      	movs	r2, #0
 8017900:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8017902:	f000 f8ff 	bl	8017b04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017906:	4b10      	ldr	r3, [pc, #64]	@ (8017948 <xPortStartScheduler+0x144>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	4a0f      	ldr	r2, [pc, #60]	@ (8017948 <xPortStartScheduler+0x144>)
 801790c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8017910:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8017912:	f7ff ff61 	bl	80177d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8017916:	f7fe fda9 	bl	801646c <vTaskSwitchContext>
    prvTaskExitError();
 801791a:	f7ff ff17 	bl	801774c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801791e:	2300      	movs	r3, #0
}
 8017920:	4618      	mov	r0, r3
 8017922:	3718      	adds	r7, #24
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	e000ed00 	.word	0xe000ed00
 801792c:	410fc271 	.word	0x410fc271
 8017930:	410fc270 	.word	0x410fc270
 8017934:	e000e400 	.word	0xe000e400
 8017938:	200016d4 	.word	0x200016d4
 801793c:	200016d8 	.word	0x200016d8
 8017940:	e000ed20 	.word	0xe000ed20
 8017944:	20000098 	.word	0x20000098
 8017948:	e000ef34 	.word	0xe000ef34

0801794c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801794c:	b480      	push	{r7}
 801794e:	b083      	sub	sp, #12
 8017950:	af00      	add	r7, sp, #0
        __asm volatile
 8017952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017956:	f383 8811 	msr	BASEPRI, r3
 801795a:	f3bf 8f6f 	isb	sy
 801795e:	f3bf 8f4f 	dsb	sy
 8017962:	607b      	str	r3, [r7, #4]
    }
 8017964:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8017966:	4b10      	ldr	r3, [pc, #64]	@ (80179a8 <vPortEnterCritical+0x5c>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	3301      	adds	r3, #1
 801796c:	4a0e      	ldr	r2, [pc, #56]	@ (80179a8 <vPortEnterCritical+0x5c>)
 801796e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8017970:	4b0d      	ldr	r3, [pc, #52]	@ (80179a8 <vPortEnterCritical+0x5c>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	2b01      	cmp	r3, #1
 8017976:	d110      	bne.n	801799a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017978:	4b0c      	ldr	r3, [pc, #48]	@ (80179ac <vPortEnterCritical+0x60>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	b2db      	uxtb	r3, r3
 801797e:	2b00      	cmp	r3, #0
 8017980:	d00b      	beq.n	801799a <vPortEnterCritical+0x4e>
        __asm volatile
 8017982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	603b      	str	r3, [r7, #0]
    }
 8017994:	bf00      	nop
 8017996:	bf00      	nop
 8017998:	e7fd      	b.n	8017996 <vPortEnterCritical+0x4a>
    }
}
 801799a:	bf00      	nop
 801799c:	370c      	adds	r7, #12
 801799e:	46bd      	mov	sp, r7
 80179a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop
 80179a8:	20000098 	.word	0x20000098
 80179ac:	e000ed04 	.word	0xe000ed04

080179b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80179b0:	b480      	push	{r7}
 80179b2:	b083      	sub	sp, #12
 80179b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80179b6:	4b12      	ldr	r3, [pc, #72]	@ (8017a00 <vPortExitCritical+0x50>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d10b      	bne.n	80179d6 <vPortExitCritical+0x26>
        __asm volatile
 80179be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179c2:	f383 8811 	msr	BASEPRI, r3
 80179c6:	f3bf 8f6f 	isb	sy
 80179ca:	f3bf 8f4f 	dsb	sy
 80179ce:	607b      	str	r3, [r7, #4]
    }
 80179d0:	bf00      	nop
 80179d2:	bf00      	nop
 80179d4:	e7fd      	b.n	80179d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80179d6:	4b0a      	ldr	r3, [pc, #40]	@ (8017a00 <vPortExitCritical+0x50>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	3b01      	subs	r3, #1
 80179dc:	4a08      	ldr	r2, [pc, #32]	@ (8017a00 <vPortExitCritical+0x50>)
 80179de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80179e0:	4b07      	ldr	r3, [pc, #28]	@ (8017a00 <vPortExitCritical+0x50>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d105      	bne.n	80179f4 <vPortExitCritical+0x44>
 80179e8:	2300      	movs	r3, #0
 80179ea:	603b      	str	r3, [r7, #0]
        __asm volatile
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	f383 8811 	msr	BASEPRI, r3
    }
 80179f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80179f4:	bf00      	nop
 80179f6:	370c      	adds	r7, #12
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr
 8017a00:	20000098 	.word	0x20000098
	...

08017a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8017a10:	f3ef 8009 	mrs	r0, PSP
 8017a14:	f3bf 8f6f 	isb	sy
 8017a18:	4b15      	ldr	r3, [pc, #84]	@ (8017a70 <pxCurrentTCBConst>)
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	f01e 0f10 	tst.w	lr, #16
 8017a20:	bf08      	it	eq
 8017a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a2a:	6010      	str	r0, [r2, #0]
 8017a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017a34:	f380 8811 	msr	BASEPRI, r0
 8017a38:	f3bf 8f4f 	dsb	sy
 8017a3c:	f3bf 8f6f 	isb	sy
 8017a40:	f7fe fd14 	bl	801646c <vTaskSwitchContext>
 8017a44:	f04f 0000 	mov.w	r0, #0
 8017a48:	f380 8811 	msr	BASEPRI, r0
 8017a4c:	bc09      	pop	{r0, r3}
 8017a4e:	6819      	ldr	r1, [r3, #0]
 8017a50:	6808      	ldr	r0, [r1, #0]
 8017a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a56:	f01e 0f10 	tst.w	lr, #16
 8017a5a:	bf08      	it	eq
 8017a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017a60:	f380 8809 	msr	PSP, r0
 8017a64:	f3bf 8f6f 	isb	sy
 8017a68:	4770      	bx	lr
 8017a6a:	bf00      	nop
 8017a6c:	f3af 8000 	nop.w

08017a70 <pxCurrentTCBConst>:
 8017a70:	20001594 	.word	0x20001594
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8017a74:	bf00      	nop
 8017a76:	bf00      	nop

08017a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8017a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a82:	f383 8811 	msr	BASEPRI, r3
 8017a86:	f3bf 8f6f 	isb	sy
 8017a8a:	f3bf 8f4f 	dsb	sy
 8017a8e:	607b      	str	r3, [r7, #4]
    }
 8017a90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8017a92:	f7fe fc31 	bl	80162f8 <xTaskIncrementTick>
 8017a96:	4603      	mov	r3, r0
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d003      	beq.n	8017aa4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017a9c:	4b06      	ldr	r3, [pc, #24]	@ (8017ab8 <SysTick_Handler+0x40>)
 8017a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017aa2:	601a      	str	r2, [r3, #0]
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	f383 8811 	msr	BASEPRI, r3
    }
 8017aae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8017ab0:	bf00      	nop
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	e000ed04 	.word	0xe000ed04

08017abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8017abc:	b480      	push	{r7}
 8017abe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8017af0 <vPortSetupTimerInterrupt+0x34>)
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8017af4 <vPortSetupTimerInterrupt+0x38>)
 8017ac8:	2200      	movs	r2, #0
 8017aca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017acc:	4b0a      	ldr	r3, [pc, #40]	@ (8017af8 <vPortSetupTimerInterrupt+0x3c>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8017afc <vPortSetupTimerInterrupt+0x40>)
 8017ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8017ad6:	099b      	lsrs	r3, r3, #6
 8017ad8:	4a09      	ldr	r2, [pc, #36]	@ (8017b00 <vPortSetupTimerInterrupt+0x44>)
 8017ada:	3b01      	subs	r3, #1
 8017adc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017ade:	4b04      	ldr	r3, [pc, #16]	@ (8017af0 <vPortSetupTimerInterrupt+0x34>)
 8017ae0:	2207      	movs	r2, #7
 8017ae2:	601a      	str	r2, [r3, #0]
}
 8017ae4:	bf00      	nop
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aec:	4770      	bx	lr
 8017aee:	bf00      	nop
 8017af0:	e000e010 	.word	0xe000e010
 8017af4:	e000e018 	.word	0xe000e018
 8017af8:	2000008c 	.word	0x2000008c
 8017afc:	10624dd3 	.word	0x10624dd3
 8017b00:	e000e014 	.word	0xe000e014

08017b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8017b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017b14 <vPortEnableVFP+0x10>
 8017b08:	6801      	ldr	r1, [r0, #0]
 8017b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8017b0e:	6001      	str	r1, [r0, #0]
 8017b10:	4770      	bx	lr
 8017b12:	0000      	.short	0x0000
 8017b14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8017b18:	bf00      	nop
 8017b1a:	bf00      	nop

08017b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8017b1c:	b480      	push	{r7}
 8017b1e:	b085      	sub	sp, #20
 8017b20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8017b22:	f3ef 8305 	mrs	r3, IPSR
 8017b26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	2b0f      	cmp	r3, #15
 8017b2c:	d915      	bls.n	8017b5a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017b2e:	4a18      	ldr	r2, [pc, #96]	@ (8017b90 <vPortValidateInterruptPriority+0x74>)
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	4413      	add	r3, r2
 8017b34:	781b      	ldrb	r3, [r3, #0]
 8017b36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017b38:	4b16      	ldr	r3, [pc, #88]	@ (8017b94 <vPortValidateInterruptPriority+0x78>)
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	7afa      	ldrb	r2, [r7, #11]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d20b      	bcs.n	8017b5a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8017b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b46:	f383 8811 	msr	BASEPRI, r3
 8017b4a:	f3bf 8f6f 	isb	sy
 8017b4e:	f3bf 8f4f 	dsb	sy
 8017b52:	607b      	str	r3, [r7, #4]
    }
 8017b54:	bf00      	nop
 8017b56:	bf00      	nop
 8017b58:	e7fd      	b.n	8017b56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8017b98 <vPortValidateInterruptPriority+0x7c>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017b62:	4b0e      	ldr	r3, [pc, #56]	@ (8017b9c <vPortValidateInterruptPriority+0x80>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	429a      	cmp	r2, r3
 8017b68:	d90b      	bls.n	8017b82 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8017b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b6e:	f383 8811 	msr	BASEPRI, r3
 8017b72:	f3bf 8f6f 	isb	sy
 8017b76:	f3bf 8f4f 	dsb	sy
 8017b7a:	603b      	str	r3, [r7, #0]
    }
 8017b7c:	bf00      	nop
 8017b7e:	bf00      	nop
 8017b80:	e7fd      	b.n	8017b7e <vPortValidateInterruptPriority+0x62>
    }
 8017b82:	bf00      	nop
 8017b84:	3714      	adds	r7, #20
 8017b86:	46bd      	mov	sp, r7
 8017b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8c:	4770      	bx	lr
 8017b8e:	bf00      	nop
 8017b90:	e000e3f0 	.word	0xe000e3f0
 8017b94:	200016d4 	.word	0x200016d4
 8017b98:	e000ed0c 	.word	0xe000ed0c
 8017b9c:	200016d8 	.word	0x200016d8

08017ba0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b08a      	sub	sp, #40	@ 0x28
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8017bac:	f7fe fa5a 	bl	8016064 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8017bb0:	4b66      	ldr	r3, [pc, #408]	@ (8017d4c <pvPortMalloc+0x1ac>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d101      	bne.n	8017bbc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8017bb8:	f000 f938 	bl	8017e2c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017bbc:	4b64      	ldr	r3, [pc, #400]	@ (8017d50 <pvPortMalloc+0x1b0>)
 8017bbe:	681a      	ldr	r2, [r3, #0]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	4013      	ands	r3, r2
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	f040 80a9 	bne.w	8017d1c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d02e      	beq.n	8017c2e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8017bd0:	2208      	movs	r2, #8
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d228      	bcs.n	8017c2e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8017bdc:	2208      	movs	r2, #8
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	4413      	add	r3, r2
 8017be2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f003 0307 	and.w	r3, r3, #7
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d022      	beq.n	8017c34 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f023 0307 	bic.w	r3, r3, #7
 8017bf4:	3308      	adds	r3, #8
 8017bf6:	687a      	ldr	r2, [r7, #4]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d215      	bcs.n	8017c28 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	f023 0307 	bic.w	r3, r3, #7
 8017c02:	3308      	adds	r3, #8
 8017c04:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f003 0307 	and.w	r3, r3, #7
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d011      	beq.n	8017c34 <pvPortMalloc+0x94>
        __asm volatile
 8017c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c14:	f383 8811 	msr	BASEPRI, r3
 8017c18:	f3bf 8f6f 	isb	sy
 8017c1c:	f3bf 8f4f 	dsb	sy
 8017c20:	617b      	str	r3, [r7, #20]
    }
 8017c22:	bf00      	nop
 8017c24:	bf00      	nop
 8017c26:	e7fd      	b.n	8017c24 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c2c:	e002      	b.n	8017c34 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	607b      	str	r3, [r7, #4]
 8017c32:	e000      	b.n	8017c36 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c34:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d06f      	beq.n	8017d1c <pvPortMalloc+0x17c>
 8017c3c:	4b45      	ldr	r3, [pc, #276]	@ (8017d54 <pvPortMalloc+0x1b4>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	687a      	ldr	r2, [r7, #4]
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d86a      	bhi.n	8017d1c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8017c46:	4b44      	ldr	r3, [pc, #272]	@ (8017d58 <pvPortMalloc+0x1b8>)
 8017c48:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8017c4a:	4b43      	ldr	r3, [pc, #268]	@ (8017d58 <pvPortMalloc+0x1b8>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c50:	e004      	b.n	8017c5c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8017c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c54:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8017c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	429a      	cmp	r2, r3
 8017c64:	d903      	bls.n	8017c6e <pvPortMalloc+0xce>
 8017c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d1f1      	bne.n	8017c52 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8017c6e:	4b37      	ldr	r3, [pc, #220]	@ (8017d4c <pvPortMalloc+0x1ac>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d051      	beq.n	8017d1c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017c78:	6a3b      	ldr	r3, [r7, #32]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	2208      	movs	r2, #8
 8017c7e:	4413      	add	r3, r2
 8017c80:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	6a3b      	ldr	r3, [r7, #32]
 8017c88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c8c:	685a      	ldr	r2, [r3, #4]
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	1ad2      	subs	r2, r2, r3
 8017c92:	2308      	movs	r3, #8
 8017c94:	005b      	lsls	r3, r3, #1
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d920      	bls.n	8017cdc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	4413      	add	r3, r2
 8017ca0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ca2:	69bb      	ldr	r3, [r7, #24]
 8017ca4:	f003 0307 	and.w	r3, r3, #7
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00b      	beq.n	8017cc4 <pvPortMalloc+0x124>
        __asm volatile
 8017cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cb0:	f383 8811 	msr	BASEPRI, r3
 8017cb4:	f3bf 8f6f 	isb	sy
 8017cb8:	f3bf 8f4f 	dsb	sy
 8017cbc:	613b      	str	r3, [r7, #16]
    }
 8017cbe:	bf00      	nop
 8017cc0:	bf00      	nop
 8017cc2:	e7fd      	b.n	8017cc0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cc6:	685a      	ldr	r2, [r3, #4]
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	1ad2      	subs	r2, r2, r3
 8017ccc:	69bb      	ldr	r3, [r7, #24]
 8017cce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8017cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cd2:	687a      	ldr	r2, [r7, #4]
 8017cd4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017cd6:	69b8      	ldr	r0, [r7, #24]
 8017cd8:	f000 f90a 	bl	8017ef0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8017d54 <pvPortMalloc+0x1b4>)
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ce2:	685b      	ldr	r3, [r3, #4]
 8017ce4:	1ad3      	subs	r3, r2, r3
 8017ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8017d54 <pvPortMalloc+0x1b4>)
 8017ce8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017cea:	4b1a      	ldr	r3, [pc, #104]	@ (8017d54 <pvPortMalloc+0x1b4>)
 8017cec:	681a      	ldr	r2, [r3, #0]
 8017cee:	4b1b      	ldr	r3, [pc, #108]	@ (8017d5c <pvPortMalloc+0x1bc>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d203      	bcs.n	8017cfe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017cf6:	4b17      	ldr	r3, [pc, #92]	@ (8017d54 <pvPortMalloc+0x1b4>)
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	4a18      	ldr	r2, [pc, #96]	@ (8017d5c <pvPortMalloc+0x1bc>)
 8017cfc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d00:	685a      	ldr	r2, [r3, #4]
 8017d02:	4b13      	ldr	r3, [pc, #76]	@ (8017d50 <pvPortMalloc+0x1b0>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	431a      	orrs	r2, r3
 8017d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d0a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d0e:	2200      	movs	r2, #0
 8017d10:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8017d12:	4b13      	ldr	r3, [pc, #76]	@ (8017d60 <pvPortMalloc+0x1c0>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	3301      	adds	r3, #1
 8017d18:	4a11      	ldr	r2, [pc, #68]	@ (8017d60 <pvPortMalloc+0x1c0>)
 8017d1a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8017d1c:	f7fe f9b0 	bl	8016080 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d20:	69fb      	ldr	r3, [r7, #28]
 8017d22:	f003 0307 	and.w	r3, r3, #7
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d00b      	beq.n	8017d42 <pvPortMalloc+0x1a2>
        __asm volatile
 8017d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d2e:	f383 8811 	msr	BASEPRI, r3
 8017d32:	f3bf 8f6f 	isb	sy
 8017d36:	f3bf 8f4f 	dsb	sy
 8017d3a:	60fb      	str	r3, [r7, #12]
    }
 8017d3c:	bf00      	nop
 8017d3e:	bf00      	nop
 8017d40:	e7fd      	b.n	8017d3e <pvPortMalloc+0x19e>
    return pvReturn;
 8017d42:	69fb      	ldr	r3, [r7, #28]
}
 8017d44:	4618      	mov	r0, r3
 8017d46:	3728      	adds	r7, #40	@ 0x28
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}
 8017d4c:	200142e4 	.word	0x200142e4
 8017d50:	200142f8 	.word	0x200142f8
 8017d54:	200142e8 	.word	0x200142e8
 8017d58:	200142dc 	.word	0x200142dc
 8017d5c:	200142ec 	.word	0x200142ec
 8017d60:	200142f0 	.word	0x200142f0

08017d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b086      	sub	sp, #24
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d04f      	beq.n	8017e16 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8017d76:	2308      	movs	r3, #8
 8017d78:	425b      	negs	r3, r3
 8017d7a:	697a      	ldr	r2, [r7, #20]
 8017d7c:	4413      	add	r3, r2
 8017d7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8017d80:	697b      	ldr	r3, [r7, #20]
 8017d82:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	685a      	ldr	r2, [r3, #4]
 8017d88:	4b25      	ldr	r3, [pc, #148]	@ (8017e20 <vPortFree+0xbc>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	4013      	ands	r3, r2
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d10b      	bne.n	8017daa <vPortFree+0x46>
        __asm volatile
 8017d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d96:	f383 8811 	msr	BASEPRI, r3
 8017d9a:	f3bf 8f6f 	isb	sy
 8017d9e:	f3bf 8f4f 	dsb	sy
 8017da2:	60fb      	str	r3, [r7, #12]
    }
 8017da4:	bf00      	nop
 8017da6:	bf00      	nop
 8017da8:	e7fd      	b.n	8017da6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017daa:	693b      	ldr	r3, [r7, #16]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d00b      	beq.n	8017dca <vPortFree+0x66>
        __asm volatile
 8017db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017db6:	f383 8811 	msr	BASEPRI, r3
 8017dba:	f3bf 8f6f 	isb	sy
 8017dbe:	f3bf 8f4f 	dsb	sy
 8017dc2:	60bb      	str	r3, [r7, #8]
    }
 8017dc4:	bf00      	nop
 8017dc6:	bf00      	nop
 8017dc8:	e7fd      	b.n	8017dc6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	685a      	ldr	r2, [r3, #4]
 8017dce:	4b14      	ldr	r3, [pc, #80]	@ (8017e20 <vPortFree+0xbc>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	4013      	ands	r3, r2
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d01e      	beq.n	8017e16 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8017dd8:	693b      	ldr	r3, [r7, #16]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d11a      	bne.n	8017e16 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	685a      	ldr	r2, [r3, #4]
 8017de4:	4b0e      	ldr	r3, [pc, #56]	@ (8017e20 <vPortFree+0xbc>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	43db      	mvns	r3, r3
 8017dea:	401a      	ands	r2, r3
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8017df0:	f7fe f938 	bl	8016064 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	685a      	ldr	r2, [r3, #4]
 8017df8:	4b0a      	ldr	r3, [pc, #40]	@ (8017e24 <vPortFree+0xc0>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	4413      	add	r3, r2
 8017dfe:	4a09      	ldr	r2, [pc, #36]	@ (8017e24 <vPortFree+0xc0>)
 8017e00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017e02:	6938      	ldr	r0, [r7, #16]
 8017e04:	f000 f874 	bl	8017ef0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8017e08:	4b07      	ldr	r3, [pc, #28]	@ (8017e28 <vPortFree+0xc4>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	4a06      	ldr	r2, [pc, #24]	@ (8017e28 <vPortFree+0xc4>)
 8017e10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8017e12:	f7fe f935 	bl	8016080 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8017e16:	bf00      	nop
 8017e18:	3718      	adds	r7, #24
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	200142f8 	.word	0x200142f8
 8017e24:	200142e8 	.word	0x200142e8
 8017e28:	200142f4 	.word	0x200142f4

08017e2c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b085      	sub	sp, #20
 8017e30:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017e32:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8017e36:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8017e38:	4b27      	ldr	r3, [pc, #156]	@ (8017ed8 <prvHeapInit+0xac>)
 8017e3a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	f003 0307 	and.w	r3, r3, #7
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d00c      	beq.n	8017e60 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	3307      	adds	r3, #7
 8017e4a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	f023 0307 	bic.w	r3, r3, #7
 8017e52:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017e54:	68ba      	ldr	r2, [r7, #8]
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	1ad3      	subs	r3, r2, r3
 8017e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8017ed8 <prvHeapInit+0xac>)
 8017e5c:	4413      	add	r3, r2
 8017e5e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017e64:	4a1d      	ldr	r2, [pc, #116]	@ (8017edc <prvHeapInit+0xb0>)
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8017e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8017edc <prvHeapInit+0xb0>)
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	68ba      	ldr	r2, [r7, #8]
 8017e74:	4413      	add	r3, r2
 8017e76:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8017e78:	2208      	movs	r2, #8
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	1a9b      	subs	r3, r3, r2
 8017e7e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	f023 0307 	bic.w	r3, r3, #7
 8017e86:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	4a15      	ldr	r2, [pc, #84]	@ (8017ee0 <prvHeapInit+0xb4>)
 8017e8c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8017e8e:	4b14      	ldr	r3, [pc, #80]	@ (8017ee0 <prvHeapInit+0xb4>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	2200      	movs	r2, #0
 8017e94:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8017e96:	4b12      	ldr	r3, [pc, #72]	@ (8017ee0 <prvHeapInit+0xb4>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017ea2:	683b      	ldr	r3, [r7, #0]
 8017ea4:	68fa      	ldr	r2, [r7, #12]
 8017ea6:	1ad2      	subs	r2, r2, r3
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017eac:	4b0c      	ldr	r3, [pc, #48]	@ (8017ee0 <prvHeapInit+0xb4>)
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	685b      	ldr	r3, [r3, #4]
 8017eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8017ee4 <prvHeapInit+0xb8>)
 8017eba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	4a09      	ldr	r2, [pc, #36]	@ (8017ee8 <prvHeapInit+0xbc>)
 8017ec2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017ec4:	4b09      	ldr	r3, [pc, #36]	@ (8017eec <prvHeapInit+0xc0>)
 8017ec6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017eca:	601a      	str	r2, [r3, #0]
}
 8017ecc:	bf00      	nop
 8017ece:	3714      	adds	r7, #20
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed6:	4770      	bx	lr
 8017ed8:	200016dc 	.word	0x200016dc
 8017edc:	200142dc 	.word	0x200142dc
 8017ee0:	200142e4 	.word	0x200142e4
 8017ee4:	200142ec 	.word	0x200142ec
 8017ee8:	200142e8 	.word	0x200142e8
 8017eec:	200142f8 	.word	0x200142f8

08017ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b085      	sub	sp, #20
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017ef8:	4b28      	ldr	r3, [pc, #160]	@ (8017f9c <prvInsertBlockIntoFreeList+0xac>)
 8017efa:	60fb      	str	r3, [r7, #12]
 8017efc:	e002      	b.n	8017f04 <prvInsertBlockIntoFreeList+0x14>
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	60fb      	str	r3, [r7, #12]
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	d8f7      	bhi.n	8017efe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	685b      	ldr	r3, [r3, #4]
 8017f16:	68ba      	ldr	r2, [r7, #8]
 8017f18:	4413      	add	r3, r2
 8017f1a:	687a      	ldr	r2, [r7, #4]
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	d108      	bne.n	8017f32 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	685a      	ldr	r2, [r3, #4]
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	685b      	ldr	r3, [r3, #4]
 8017f28:	441a      	add	r2, r3
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	68ba      	ldr	r2, [r7, #8]
 8017f3c:	441a      	add	r2, r3
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d118      	bne.n	8017f78 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	681a      	ldr	r2, [r3, #0]
 8017f4a:	4b15      	ldr	r3, [pc, #84]	@ (8017fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d00d      	beq.n	8017f6e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	685a      	ldr	r2, [r3, #4]
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	441a      	add	r2, r3
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	601a      	str	r2, [r3, #0]
 8017f6c:	e008      	b.n	8017f80 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8017fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	601a      	str	r2, [r3, #0]
 8017f76:	e003      	b.n	8017f80 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8017f80:	68fa      	ldr	r2, [r7, #12]
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d002      	beq.n	8017f8e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	687a      	ldr	r2, [r7, #4]
 8017f8c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8017f8e:	bf00      	nop
 8017f90:	3714      	adds	r7, #20
 8017f92:	46bd      	mov	sp, r7
 8017f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f98:	4770      	bx	lr
 8017f9a:	bf00      	nop
 8017f9c:	200142dc 	.word	0x200142dc
 8017fa0:	200142e4 	.word	0x200142e4

08017fa4 <malloc>:
 8017fa4:	4b02      	ldr	r3, [pc, #8]	@ (8017fb0 <malloc+0xc>)
 8017fa6:	4601      	mov	r1, r0
 8017fa8:	6818      	ldr	r0, [r3, #0]
 8017faa:	f000 b82d 	b.w	8018008 <_malloc_r>
 8017fae:	bf00      	nop
 8017fb0:	20000214 	.word	0x20000214

08017fb4 <free>:
 8017fb4:	4b02      	ldr	r3, [pc, #8]	@ (8017fc0 <free+0xc>)
 8017fb6:	4601      	mov	r1, r0
 8017fb8:	6818      	ldr	r0, [r3, #0]
 8017fba:	f002 bcfd 	b.w	801a9b8 <_free_r>
 8017fbe:	bf00      	nop
 8017fc0:	20000214 	.word	0x20000214

08017fc4 <sbrk_aligned>:
 8017fc4:	b570      	push	{r4, r5, r6, lr}
 8017fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8018004 <sbrk_aligned+0x40>)
 8017fc8:	460c      	mov	r4, r1
 8017fca:	6831      	ldr	r1, [r6, #0]
 8017fcc:	4605      	mov	r5, r0
 8017fce:	b911      	cbnz	r1, 8017fd6 <sbrk_aligned+0x12>
 8017fd0:	f001 fe2a 	bl	8019c28 <_sbrk_r>
 8017fd4:	6030      	str	r0, [r6, #0]
 8017fd6:	4621      	mov	r1, r4
 8017fd8:	4628      	mov	r0, r5
 8017fda:	f001 fe25 	bl	8019c28 <_sbrk_r>
 8017fde:	1c43      	adds	r3, r0, #1
 8017fe0:	d103      	bne.n	8017fea <sbrk_aligned+0x26>
 8017fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	bd70      	pop	{r4, r5, r6, pc}
 8017fea:	1cc4      	adds	r4, r0, #3
 8017fec:	f024 0403 	bic.w	r4, r4, #3
 8017ff0:	42a0      	cmp	r0, r4
 8017ff2:	d0f8      	beq.n	8017fe6 <sbrk_aligned+0x22>
 8017ff4:	1a21      	subs	r1, r4, r0
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	f001 fe16 	bl	8019c28 <_sbrk_r>
 8017ffc:	3001      	adds	r0, #1
 8017ffe:	d1f2      	bne.n	8017fe6 <sbrk_aligned+0x22>
 8018000:	e7ef      	b.n	8017fe2 <sbrk_aligned+0x1e>
 8018002:	bf00      	nop
 8018004:	200142fc 	.word	0x200142fc

08018008 <_malloc_r>:
 8018008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801800c:	1ccd      	adds	r5, r1, #3
 801800e:	f025 0503 	bic.w	r5, r5, #3
 8018012:	3508      	adds	r5, #8
 8018014:	2d0c      	cmp	r5, #12
 8018016:	bf38      	it	cc
 8018018:	250c      	movcc	r5, #12
 801801a:	2d00      	cmp	r5, #0
 801801c:	4606      	mov	r6, r0
 801801e:	db01      	blt.n	8018024 <_malloc_r+0x1c>
 8018020:	42a9      	cmp	r1, r5
 8018022:	d904      	bls.n	801802e <_malloc_r+0x26>
 8018024:	230c      	movs	r3, #12
 8018026:	6033      	str	r3, [r6, #0]
 8018028:	2000      	movs	r0, #0
 801802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801802e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018104 <_malloc_r+0xfc>
 8018032:	f000 f869 	bl	8018108 <__malloc_lock>
 8018036:	f8d8 3000 	ldr.w	r3, [r8]
 801803a:	461c      	mov	r4, r3
 801803c:	bb44      	cbnz	r4, 8018090 <_malloc_r+0x88>
 801803e:	4629      	mov	r1, r5
 8018040:	4630      	mov	r0, r6
 8018042:	f7ff ffbf 	bl	8017fc4 <sbrk_aligned>
 8018046:	1c43      	adds	r3, r0, #1
 8018048:	4604      	mov	r4, r0
 801804a:	d158      	bne.n	80180fe <_malloc_r+0xf6>
 801804c:	f8d8 4000 	ldr.w	r4, [r8]
 8018050:	4627      	mov	r7, r4
 8018052:	2f00      	cmp	r7, #0
 8018054:	d143      	bne.n	80180de <_malloc_r+0xd6>
 8018056:	2c00      	cmp	r4, #0
 8018058:	d04b      	beq.n	80180f2 <_malloc_r+0xea>
 801805a:	6823      	ldr	r3, [r4, #0]
 801805c:	4639      	mov	r1, r7
 801805e:	4630      	mov	r0, r6
 8018060:	eb04 0903 	add.w	r9, r4, r3
 8018064:	f001 fde0 	bl	8019c28 <_sbrk_r>
 8018068:	4581      	cmp	r9, r0
 801806a:	d142      	bne.n	80180f2 <_malloc_r+0xea>
 801806c:	6821      	ldr	r1, [r4, #0]
 801806e:	1a6d      	subs	r5, r5, r1
 8018070:	4629      	mov	r1, r5
 8018072:	4630      	mov	r0, r6
 8018074:	f7ff ffa6 	bl	8017fc4 <sbrk_aligned>
 8018078:	3001      	adds	r0, #1
 801807a:	d03a      	beq.n	80180f2 <_malloc_r+0xea>
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	442b      	add	r3, r5
 8018080:	6023      	str	r3, [r4, #0]
 8018082:	f8d8 3000 	ldr.w	r3, [r8]
 8018086:	685a      	ldr	r2, [r3, #4]
 8018088:	bb62      	cbnz	r2, 80180e4 <_malloc_r+0xdc>
 801808a:	f8c8 7000 	str.w	r7, [r8]
 801808e:	e00f      	b.n	80180b0 <_malloc_r+0xa8>
 8018090:	6822      	ldr	r2, [r4, #0]
 8018092:	1b52      	subs	r2, r2, r5
 8018094:	d420      	bmi.n	80180d8 <_malloc_r+0xd0>
 8018096:	2a0b      	cmp	r2, #11
 8018098:	d917      	bls.n	80180ca <_malloc_r+0xc2>
 801809a:	1961      	adds	r1, r4, r5
 801809c:	42a3      	cmp	r3, r4
 801809e:	6025      	str	r5, [r4, #0]
 80180a0:	bf18      	it	ne
 80180a2:	6059      	strne	r1, [r3, #4]
 80180a4:	6863      	ldr	r3, [r4, #4]
 80180a6:	bf08      	it	eq
 80180a8:	f8c8 1000 	streq.w	r1, [r8]
 80180ac:	5162      	str	r2, [r4, r5]
 80180ae:	604b      	str	r3, [r1, #4]
 80180b0:	4630      	mov	r0, r6
 80180b2:	f000 f82f 	bl	8018114 <__malloc_unlock>
 80180b6:	f104 000b 	add.w	r0, r4, #11
 80180ba:	1d23      	adds	r3, r4, #4
 80180bc:	f020 0007 	bic.w	r0, r0, #7
 80180c0:	1ac2      	subs	r2, r0, r3
 80180c2:	bf1c      	itt	ne
 80180c4:	1a1b      	subne	r3, r3, r0
 80180c6:	50a3      	strne	r3, [r4, r2]
 80180c8:	e7af      	b.n	801802a <_malloc_r+0x22>
 80180ca:	6862      	ldr	r2, [r4, #4]
 80180cc:	42a3      	cmp	r3, r4
 80180ce:	bf0c      	ite	eq
 80180d0:	f8c8 2000 	streq.w	r2, [r8]
 80180d4:	605a      	strne	r2, [r3, #4]
 80180d6:	e7eb      	b.n	80180b0 <_malloc_r+0xa8>
 80180d8:	4623      	mov	r3, r4
 80180da:	6864      	ldr	r4, [r4, #4]
 80180dc:	e7ae      	b.n	801803c <_malloc_r+0x34>
 80180de:	463c      	mov	r4, r7
 80180e0:	687f      	ldr	r7, [r7, #4]
 80180e2:	e7b6      	b.n	8018052 <_malloc_r+0x4a>
 80180e4:	461a      	mov	r2, r3
 80180e6:	685b      	ldr	r3, [r3, #4]
 80180e8:	42a3      	cmp	r3, r4
 80180ea:	d1fb      	bne.n	80180e4 <_malloc_r+0xdc>
 80180ec:	2300      	movs	r3, #0
 80180ee:	6053      	str	r3, [r2, #4]
 80180f0:	e7de      	b.n	80180b0 <_malloc_r+0xa8>
 80180f2:	230c      	movs	r3, #12
 80180f4:	6033      	str	r3, [r6, #0]
 80180f6:	4630      	mov	r0, r6
 80180f8:	f000 f80c 	bl	8018114 <__malloc_unlock>
 80180fc:	e794      	b.n	8018028 <_malloc_r+0x20>
 80180fe:	6005      	str	r5, [r0, #0]
 8018100:	e7d6      	b.n	80180b0 <_malloc_r+0xa8>
 8018102:	bf00      	nop
 8018104:	20014300 	.word	0x20014300

08018108 <__malloc_lock>:
 8018108:	4801      	ldr	r0, [pc, #4]	@ (8018110 <__malloc_lock+0x8>)
 801810a:	f001 bdda 	b.w	8019cc2 <__retarget_lock_acquire_recursive>
 801810e:	bf00      	nop
 8018110:	20014444 	.word	0x20014444

08018114 <__malloc_unlock>:
 8018114:	4801      	ldr	r0, [pc, #4]	@ (801811c <__malloc_unlock+0x8>)
 8018116:	f001 bdd5 	b.w	8019cc4 <__retarget_lock_release_recursive>
 801811a:	bf00      	nop
 801811c:	20014444 	.word	0x20014444

08018120 <realloc>:
 8018120:	4b02      	ldr	r3, [pc, #8]	@ (801812c <realloc+0xc>)
 8018122:	460a      	mov	r2, r1
 8018124:	4601      	mov	r1, r0
 8018126:	6818      	ldr	r0, [r3, #0]
 8018128:	f000 b802 	b.w	8018130 <_realloc_r>
 801812c:	20000214 	.word	0x20000214

08018130 <_realloc_r>:
 8018130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018134:	4607      	mov	r7, r0
 8018136:	4614      	mov	r4, r2
 8018138:	460d      	mov	r5, r1
 801813a:	b921      	cbnz	r1, 8018146 <_realloc_r+0x16>
 801813c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018140:	4611      	mov	r1, r2
 8018142:	f7ff bf61 	b.w	8018008 <_malloc_r>
 8018146:	b92a      	cbnz	r2, 8018154 <_realloc_r+0x24>
 8018148:	f002 fc36 	bl	801a9b8 <_free_r>
 801814c:	4625      	mov	r5, r4
 801814e:	4628      	mov	r0, r5
 8018150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018154:	f003 fc70 	bl	801ba38 <_malloc_usable_size_r>
 8018158:	4284      	cmp	r4, r0
 801815a:	4606      	mov	r6, r0
 801815c:	d802      	bhi.n	8018164 <_realloc_r+0x34>
 801815e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018162:	d8f4      	bhi.n	801814e <_realloc_r+0x1e>
 8018164:	4621      	mov	r1, r4
 8018166:	4638      	mov	r0, r7
 8018168:	f7ff ff4e 	bl	8018008 <_malloc_r>
 801816c:	4680      	mov	r8, r0
 801816e:	b908      	cbnz	r0, 8018174 <_realloc_r+0x44>
 8018170:	4645      	mov	r5, r8
 8018172:	e7ec      	b.n	801814e <_realloc_r+0x1e>
 8018174:	42b4      	cmp	r4, r6
 8018176:	4622      	mov	r2, r4
 8018178:	4629      	mov	r1, r5
 801817a:	bf28      	it	cs
 801817c:	4632      	movcs	r2, r6
 801817e:	f001 fdaa 	bl	8019cd6 <memcpy>
 8018182:	4629      	mov	r1, r5
 8018184:	4638      	mov	r0, r7
 8018186:	f002 fc17 	bl	801a9b8 <_free_r>
 801818a:	e7f1      	b.n	8018170 <_realloc_r+0x40>

0801818c <sulp>:
 801818c:	b570      	push	{r4, r5, r6, lr}
 801818e:	4604      	mov	r4, r0
 8018190:	460d      	mov	r5, r1
 8018192:	ec45 4b10 	vmov	d0, r4, r5
 8018196:	4616      	mov	r6, r2
 8018198:	f003 fb10 	bl	801b7bc <__ulp>
 801819c:	ec51 0b10 	vmov	r0, r1, d0
 80181a0:	b17e      	cbz	r6, 80181c2 <sulp+0x36>
 80181a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80181a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	dd09      	ble.n	80181c2 <sulp+0x36>
 80181ae:	051b      	lsls	r3, r3, #20
 80181b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80181b4:	2400      	movs	r4, #0
 80181b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80181ba:	4622      	mov	r2, r4
 80181bc:	462b      	mov	r3, r5
 80181be:	f7f0 fa4b 	bl	8008658 <__aeabi_dmul>
 80181c2:	ec41 0b10 	vmov	d0, r0, r1
 80181c6:	bd70      	pop	{r4, r5, r6, pc}

080181c8 <_strtod_l>:
 80181c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181cc:	b09f      	sub	sp, #124	@ 0x7c
 80181ce:	460c      	mov	r4, r1
 80181d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80181d2:	2200      	movs	r2, #0
 80181d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80181d6:	9005      	str	r0, [sp, #20]
 80181d8:	f04f 0a00 	mov.w	sl, #0
 80181dc:	f04f 0b00 	mov.w	fp, #0
 80181e0:	460a      	mov	r2, r1
 80181e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80181e4:	7811      	ldrb	r1, [r2, #0]
 80181e6:	292b      	cmp	r1, #43	@ 0x2b
 80181e8:	d04a      	beq.n	8018280 <_strtod_l+0xb8>
 80181ea:	d838      	bhi.n	801825e <_strtod_l+0x96>
 80181ec:	290d      	cmp	r1, #13
 80181ee:	d832      	bhi.n	8018256 <_strtod_l+0x8e>
 80181f0:	2908      	cmp	r1, #8
 80181f2:	d832      	bhi.n	801825a <_strtod_l+0x92>
 80181f4:	2900      	cmp	r1, #0
 80181f6:	d03b      	beq.n	8018270 <_strtod_l+0xa8>
 80181f8:	2200      	movs	r2, #0
 80181fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80181fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80181fe:	782a      	ldrb	r2, [r5, #0]
 8018200:	2a30      	cmp	r2, #48	@ 0x30
 8018202:	f040 80b2 	bne.w	801836a <_strtod_l+0x1a2>
 8018206:	786a      	ldrb	r2, [r5, #1]
 8018208:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801820c:	2a58      	cmp	r2, #88	@ 0x58
 801820e:	d16e      	bne.n	80182ee <_strtod_l+0x126>
 8018210:	9302      	str	r3, [sp, #8]
 8018212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018214:	9301      	str	r3, [sp, #4]
 8018216:	ab1a      	add	r3, sp, #104	@ 0x68
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	4a8f      	ldr	r2, [pc, #572]	@ (8018458 <_strtod_l+0x290>)
 801821c:	9805      	ldr	r0, [sp, #20]
 801821e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8018220:	a919      	add	r1, sp, #100	@ 0x64
 8018222:	f002 fc7b 	bl	801ab1c <__gethex>
 8018226:	f010 060f 	ands.w	r6, r0, #15
 801822a:	4604      	mov	r4, r0
 801822c:	d005      	beq.n	801823a <_strtod_l+0x72>
 801822e:	2e06      	cmp	r6, #6
 8018230:	d128      	bne.n	8018284 <_strtod_l+0xbc>
 8018232:	3501      	adds	r5, #1
 8018234:	2300      	movs	r3, #0
 8018236:	9519      	str	r5, [sp, #100]	@ 0x64
 8018238:	930e      	str	r3, [sp, #56]	@ 0x38
 801823a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801823c:	2b00      	cmp	r3, #0
 801823e:	f040 858e 	bne.w	8018d5e <_strtod_l+0xb96>
 8018242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018244:	b1cb      	cbz	r3, 801827a <_strtod_l+0xb2>
 8018246:	4652      	mov	r2, sl
 8018248:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801824c:	ec43 2b10 	vmov	d0, r2, r3
 8018250:	b01f      	add	sp, #124	@ 0x7c
 8018252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018256:	2920      	cmp	r1, #32
 8018258:	d1ce      	bne.n	80181f8 <_strtod_l+0x30>
 801825a:	3201      	adds	r2, #1
 801825c:	e7c1      	b.n	80181e2 <_strtod_l+0x1a>
 801825e:	292d      	cmp	r1, #45	@ 0x2d
 8018260:	d1ca      	bne.n	80181f8 <_strtod_l+0x30>
 8018262:	2101      	movs	r1, #1
 8018264:	910e      	str	r1, [sp, #56]	@ 0x38
 8018266:	1c51      	adds	r1, r2, #1
 8018268:	9119      	str	r1, [sp, #100]	@ 0x64
 801826a:	7852      	ldrb	r2, [r2, #1]
 801826c:	2a00      	cmp	r2, #0
 801826e:	d1c5      	bne.n	80181fc <_strtod_l+0x34>
 8018270:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018272:	9419      	str	r4, [sp, #100]	@ 0x64
 8018274:	2b00      	cmp	r3, #0
 8018276:	f040 8570 	bne.w	8018d5a <_strtod_l+0xb92>
 801827a:	4652      	mov	r2, sl
 801827c:	465b      	mov	r3, fp
 801827e:	e7e5      	b.n	801824c <_strtod_l+0x84>
 8018280:	2100      	movs	r1, #0
 8018282:	e7ef      	b.n	8018264 <_strtod_l+0x9c>
 8018284:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018286:	b13a      	cbz	r2, 8018298 <_strtod_l+0xd0>
 8018288:	2135      	movs	r1, #53	@ 0x35
 801828a:	a81c      	add	r0, sp, #112	@ 0x70
 801828c:	f003 fb90 	bl	801b9b0 <__copybits>
 8018290:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018292:	9805      	ldr	r0, [sp, #20]
 8018294:	f002 ff66 	bl	801b164 <_Bfree>
 8018298:	3e01      	subs	r6, #1
 801829a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801829c:	2e04      	cmp	r6, #4
 801829e:	d806      	bhi.n	80182ae <_strtod_l+0xe6>
 80182a0:	e8df f006 	tbb	[pc, r6]
 80182a4:	201d0314 	.word	0x201d0314
 80182a8:	14          	.byte	0x14
 80182a9:	00          	.byte	0x00
 80182aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80182ae:	05e1      	lsls	r1, r4, #23
 80182b0:	bf48      	it	mi
 80182b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80182b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80182ba:	0d1b      	lsrs	r3, r3, #20
 80182bc:	051b      	lsls	r3, r3, #20
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d1bb      	bne.n	801823a <_strtod_l+0x72>
 80182c2:	f001 fcd3 	bl	8019c6c <__errno>
 80182c6:	2322      	movs	r3, #34	@ 0x22
 80182c8:	6003      	str	r3, [r0, #0]
 80182ca:	e7b6      	b.n	801823a <_strtod_l+0x72>
 80182cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80182d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80182d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80182d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80182dc:	e7e7      	b.n	80182ae <_strtod_l+0xe6>
 80182de:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8018460 <_strtod_l+0x298>
 80182e2:	e7e4      	b.n	80182ae <_strtod_l+0xe6>
 80182e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80182e8:	f04f 3aff 	mov.w	sl, #4294967295
 80182ec:	e7df      	b.n	80182ae <_strtod_l+0xe6>
 80182ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80182f0:	1c5a      	adds	r2, r3, #1
 80182f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80182f4:	785b      	ldrb	r3, [r3, #1]
 80182f6:	2b30      	cmp	r3, #48	@ 0x30
 80182f8:	d0f9      	beq.n	80182ee <_strtod_l+0x126>
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d09d      	beq.n	801823a <_strtod_l+0x72>
 80182fe:	2301      	movs	r3, #1
 8018300:	2700      	movs	r7, #0
 8018302:	9308      	str	r3, [sp, #32]
 8018304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018306:	930c      	str	r3, [sp, #48]	@ 0x30
 8018308:	970b      	str	r7, [sp, #44]	@ 0x2c
 801830a:	46b9      	mov	r9, r7
 801830c:	220a      	movs	r2, #10
 801830e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8018310:	7805      	ldrb	r5, [r0, #0]
 8018312:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8018316:	b2d9      	uxtb	r1, r3
 8018318:	2909      	cmp	r1, #9
 801831a:	d928      	bls.n	801836e <_strtod_l+0x1a6>
 801831c:	494f      	ldr	r1, [pc, #316]	@ (801845c <_strtod_l+0x294>)
 801831e:	2201      	movs	r2, #1
 8018320:	f001 fc0e 	bl	8019b40 <strncmp>
 8018324:	2800      	cmp	r0, #0
 8018326:	d032      	beq.n	801838e <_strtod_l+0x1c6>
 8018328:	2000      	movs	r0, #0
 801832a:	462a      	mov	r2, r5
 801832c:	900a      	str	r0, [sp, #40]	@ 0x28
 801832e:	464d      	mov	r5, r9
 8018330:	4603      	mov	r3, r0
 8018332:	2a65      	cmp	r2, #101	@ 0x65
 8018334:	d001      	beq.n	801833a <_strtod_l+0x172>
 8018336:	2a45      	cmp	r2, #69	@ 0x45
 8018338:	d114      	bne.n	8018364 <_strtod_l+0x19c>
 801833a:	b91d      	cbnz	r5, 8018344 <_strtod_l+0x17c>
 801833c:	9a08      	ldr	r2, [sp, #32]
 801833e:	4302      	orrs	r2, r0
 8018340:	d096      	beq.n	8018270 <_strtod_l+0xa8>
 8018342:	2500      	movs	r5, #0
 8018344:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8018346:	1c62      	adds	r2, r4, #1
 8018348:	9219      	str	r2, [sp, #100]	@ 0x64
 801834a:	7862      	ldrb	r2, [r4, #1]
 801834c:	2a2b      	cmp	r2, #43	@ 0x2b
 801834e:	d07a      	beq.n	8018446 <_strtod_l+0x27e>
 8018350:	2a2d      	cmp	r2, #45	@ 0x2d
 8018352:	d07e      	beq.n	8018452 <_strtod_l+0x28a>
 8018354:	f04f 0c00 	mov.w	ip, #0
 8018358:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801835c:	2909      	cmp	r1, #9
 801835e:	f240 8085 	bls.w	801846c <_strtod_l+0x2a4>
 8018362:	9419      	str	r4, [sp, #100]	@ 0x64
 8018364:	f04f 0800 	mov.w	r8, #0
 8018368:	e0a5      	b.n	80184b6 <_strtod_l+0x2ee>
 801836a:	2300      	movs	r3, #0
 801836c:	e7c8      	b.n	8018300 <_strtod_l+0x138>
 801836e:	f1b9 0f08 	cmp.w	r9, #8
 8018372:	bfd8      	it	le
 8018374:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8018376:	f100 0001 	add.w	r0, r0, #1
 801837a:	bfda      	itte	le
 801837c:	fb02 3301 	mlale	r3, r2, r1, r3
 8018380:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8018382:	fb02 3707 	mlagt	r7, r2, r7, r3
 8018386:	f109 0901 	add.w	r9, r9, #1
 801838a:	9019      	str	r0, [sp, #100]	@ 0x64
 801838c:	e7bf      	b.n	801830e <_strtod_l+0x146>
 801838e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018390:	1c5a      	adds	r2, r3, #1
 8018392:	9219      	str	r2, [sp, #100]	@ 0x64
 8018394:	785a      	ldrb	r2, [r3, #1]
 8018396:	f1b9 0f00 	cmp.w	r9, #0
 801839a:	d03b      	beq.n	8018414 <_strtod_l+0x24c>
 801839c:	900a      	str	r0, [sp, #40]	@ 0x28
 801839e:	464d      	mov	r5, r9
 80183a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80183a4:	2b09      	cmp	r3, #9
 80183a6:	d912      	bls.n	80183ce <_strtod_l+0x206>
 80183a8:	2301      	movs	r3, #1
 80183aa:	e7c2      	b.n	8018332 <_strtod_l+0x16a>
 80183ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183ae:	1c5a      	adds	r2, r3, #1
 80183b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80183b2:	785a      	ldrb	r2, [r3, #1]
 80183b4:	3001      	adds	r0, #1
 80183b6:	2a30      	cmp	r2, #48	@ 0x30
 80183b8:	d0f8      	beq.n	80183ac <_strtod_l+0x1e4>
 80183ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80183be:	2b08      	cmp	r3, #8
 80183c0:	f200 84d2 	bhi.w	8018d68 <_strtod_l+0xba0>
 80183c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80183c8:	2000      	movs	r0, #0
 80183ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80183cc:	4605      	mov	r5, r0
 80183ce:	3a30      	subs	r2, #48	@ 0x30
 80183d0:	f100 0301 	add.w	r3, r0, #1
 80183d4:	d018      	beq.n	8018408 <_strtod_l+0x240>
 80183d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80183d8:	4419      	add	r1, r3
 80183da:	910a      	str	r1, [sp, #40]	@ 0x28
 80183dc:	462e      	mov	r6, r5
 80183de:	f04f 0e0a 	mov.w	lr, #10
 80183e2:	1c71      	adds	r1, r6, #1
 80183e4:	eba1 0c05 	sub.w	ip, r1, r5
 80183e8:	4563      	cmp	r3, ip
 80183ea:	dc15      	bgt.n	8018418 <_strtod_l+0x250>
 80183ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80183f0:	182b      	adds	r3, r5, r0
 80183f2:	2b08      	cmp	r3, #8
 80183f4:	f105 0501 	add.w	r5, r5, #1
 80183f8:	4405      	add	r5, r0
 80183fa:	dc1a      	bgt.n	8018432 <_strtod_l+0x26a>
 80183fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80183fe:	230a      	movs	r3, #10
 8018400:	fb03 2301 	mla	r3, r3, r1, r2
 8018404:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018406:	2300      	movs	r3, #0
 8018408:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801840a:	1c51      	adds	r1, r2, #1
 801840c:	9119      	str	r1, [sp, #100]	@ 0x64
 801840e:	7852      	ldrb	r2, [r2, #1]
 8018410:	4618      	mov	r0, r3
 8018412:	e7c5      	b.n	80183a0 <_strtod_l+0x1d8>
 8018414:	4648      	mov	r0, r9
 8018416:	e7ce      	b.n	80183b6 <_strtod_l+0x1ee>
 8018418:	2e08      	cmp	r6, #8
 801841a:	dc05      	bgt.n	8018428 <_strtod_l+0x260>
 801841c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801841e:	fb0e f606 	mul.w	r6, lr, r6
 8018422:	960b      	str	r6, [sp, #44]	@ 0x2c
 8018424:	460e      	mov	r6, r1
 8018426:	e7dc      	b.n	80183e2 <_strtod_l+0x21a>
 8018428:	2910      	cmp	r1, #16
 801842a:	bfd8      	it	le
 801842c:	fb0e f707 	mulle.w	r7, lr, r7
 8018430:	e7f8      	b.n	8018424 <_strtod_l+0x25c>
 8018432:	2b0f      	cmp	r3, #15
 8018434:	bfdc      	itt	le
 8018436:	230a      	movle	r3, #10
 8018438:	fb03 2707 	mlale	r7, r3, r7, r2
 801843c:	e7e3      	b.n	8018406 <_strtod_l+0x23e>
 801843e:	2300      	movs	r3, #0
 8018440:	930a      	str	r3, [sp, #40]	@ 0x28
 8018442:	2301      	movs	r3, #1
 8018444:	e77a      	b.n	801833c <_strtod_l+0x174>
 8018446:	f04f 0c00 	mov.w	ip, #0
 801844a:	1ca2      	adds	r2, r4, #2
 801844c:	9219      	str	r2, [sp, #100]	@ 0x64
 801844e:	78a2      	ldrb	r2, [r4, #2]
 8018450:	e782      	b.n	8018358 <_strtod_l+0x190>
 8018452:	f04f 0c01 	mov.w	ip, #1
 8018456:	e7f8      	b.n	801844a <_strtod_l+0x282>
 8018458:	0801f450 	.word	0x0801f450
 801845c:	0801f250 	.word	0x0801f250
 8018460:	7ff00000 	.word	0x7ff00000
 8018464:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018466:	1c51      	adds	r1, r2, #1
 8018468:	9119      	str	r1, [sp, #100]	@ 0x64
 801846a:	7852      	ldrb	r2, [r2, #1]
 801846c:	2a30      	cmp	r2, #48	@ 0x30
 801846e:	d0f9      	beq.n	8018464 <_strtod_l+0x29c>
 8018470:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8018474:	2908      	cmp	r1, #8
 8018476:	f63f af75 	bhi.w	8018364 <_strtod_l+0x19c>
 801847a:	3a30      	subs	r2, #48	@ 0x30
 801847c:	9209      	str	r2, [sp, #36]	@ 0x24
 801847e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018480:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018482:	f04f 080a 	mov.w	r8, #10
 8018486:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018488:	1c56      	adds	r6, r2, #1
 801848a:	9619      	str	r6, [sp, #100]	@ 0x64
 801848c:	7852      	ldrb	r2, [r2, #1]
 801848e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018492:	f1be 0f09 	cmp.w	lr, #9
 8018496:	d939      	bls.n	801850c <_strtod_l+0x344>
 8018498:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801849a:	1a76      	subs	r6, r6, r1
 801849c:	2e08      	cmp	r6, #8
 801849e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80184a2:	dc03      	bgt.n	80184ac <_strtod_l+0x2e4>
 80184a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80184a6:	4588      	cmp	r8, r1
 80184a8:	bfa8      	it	ge
 80184aa:	4688      	movge	r8, r1
 80184ac:	f1bc 0f00 	cmp.w	ip, #0
 80184b0:	d001      	beq.n	80184b6 <_strtod_l+0x2ee>
 80184b2:	f1c8 0800 	rsb	r8, r8, #0
 80184b6:	2d00      	cmp	r5, #0
 80184b8:	d14e      	bne.n	8018558 <_strtod_l+0x390>
 80184ba:	9908      	ldr	r1, [sp, #32]
 80184bc:	4308      	orrs	r0, r1
 80184be:	f47f aebc 	bne.w	801823a <_strtod_l+0x72>
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	f47f aed4 	bne.w	8018270 <_strtod_l+0xa8>
 80184c8:	2a69      	cmp	r2, #105	@ 0x69
 80184ca:	d028      	beq.n	801851e <_strtod_l+0x356>
 80184cc:	dc25      	bgt.n	801851a <_strtod_l+0x352>
 80184ce:	2a49      	cmp	r2, #73	@ 0x49
 80184d0:	d025      	beq.n	801851e <_strtod_l+0x356>
 80184d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80184d4:	f47f aecc 	bne.w	8018270 <_strtod_l+0xa8>
 80184d8:	499a      	ldr	r1, [pc, #616]	@ (8018744 <_strtod_l+0x57c>)
 80184da:	a819      	add	r0, sp, #100	@ 0x64
 80184dc:	f002 fd40 	bl	801af60 <__match>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	f43f aec5 	beq.w	8018270 <_strtod_l+0xa8>
 80184e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	2b28      	cmp	r3, #40	@ 0x28
 80184ec:	d12e      	bne.n	801854c <_strtod_l+0x384>
 80184ee:	4996      	ldr	r1, [pc, #600]	@ (8018748 <_strtod_l+0x580>)
 80184f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80184f2:	a819      	add	r0, sp, #100	@ 0x64
 80184f4:	f002 fd48 	bl	801af88 <__hexnan>
 80184f8:	2805      	cmp	r0, #5
 80184fa:	d127      	bne.n	801854c <_strtod_l+0x384>
 80184fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80184fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8018502:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018506:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801850a:	e696      	b.n	801823a <_strtod_l+0x72>
 801850c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801850e:	fb08 2101 	mla	r1, r8, r1, r2
 8018512:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8018516:	9209      	str	r2, [sp, #36]	@ 0x24
 8018518:	e7b5      	b.n	8018486 <_strtod_l+0x2be>
 801851a:	2a6e      	cmp	r2, #110	@ 0x6e
 801851c:	e7da      	b.n	80184d4 <_strtod_l+0x30c>
 801851e:	498b      	ldr	r1, [pc, #556]	@ (801874c <_strtod_l+0x584>)
 8018520:	a819      	add	r0, sp, #100	@ 0x64
 8018522:	f002 fd1d 	bl	801af60 <__match>
 8018526:	2800      	cmp	r0, #0
 8018528:	f43f aea2 	beq.w	8018270 <_strtod_l+0xa8>
 801852c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801852e:	4988      	ldr	r1, [pc, #544]	@ (8018750 <_strtod_l+0x588>)
 8018530:	3b01      	subs	r3, #1
 8018532:	a819      	add	r0, sp, #100	@ 0x64
 8018534:	9319      	str	r3, [sp, #100]	@ 0x64
 8018536:	f002 fd13 	bl	801af60 <__match>
 801853a:	b910      	cbnz	r0, 8018542 <_strtod_l+0x37a>
 801853c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801853e:	3301      	adds	r3, #1
 8018540:	9319      	str	r3, [sp, #100]	@ 0x64
 8018542:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8018760 <_strtod_l+0x598>
 8018546:	f04f 0a00 	mov.w	sl, #0
 801854a:	e676      	b.n	801823a <_strtod_l+0x72>
 801854c:	4881      	ldr	r0, [pc, #516]	@ (8018754 <_strtod_l+0x58c>)
 801854e:	f001 fbd3 	bl	8019cf8 <nan>
 8018552:	ec5b ab10 	vmov	sl, fp, d0
 8018556:	e670      	b.n	801823a <_strtod_l+0x72>
 8018558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801855a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801855c:	eba8 0303 	sub.w	r3, r8, r3
 8018560:	f1b9 0f00 	cmp.w	r9, #0
 8018564:	bf08      	it	eq
 8018566:	46a9      	moveq	r9, r5
 8018568:	2d10      	cmp	r5, #16
 801856a:	9309      	str	r3, [sp, #36]	@ 0x24
 801856c:	462c      	mov	r4, r5
 801856e:	bfa8      	it	ge
 8018570:	2410      	movge	r4, #16
 8018572:	f7ef fff7 	bl	8008564 <__aeabi_ui2d>
 8018576:	2d09      	cmp	r5, #9
 8018578:	4682      	mov	sl, r0
 801857a:	468b      	mov	fp, r1
 801857c:	dc13      	bgt.n	80185a6 <_strtod_l+0x3de>
 801857e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018580:	2b00      	cmp	r3, #0
 8018582:	f43f ae5a 	beq.w	801823a <_strtod_l+0x72>
 8018586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018588:	dd78      	ble.n	801867c <_strtod_l+0x4b4>
 801858a:	2b16      	cmp	r3, #22
 801858c:	dc5f      	bgt.n	801864e <_strtod_l+0x486>
 801858e:	4972      	ldr	r1, [pc, #456]	@ (8018758 <_strtod_l+0x590>)
 8018590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018598:	4652      	mov	r2, sl
 801859a:	465b      	mov	r3, fp
 801859c:	f7f0 f85c 	bl	8008658 <__aeabi_dmul>
 80185a0:	4682      	mov	sl, r0
 80185a2:	468b      	mov	fp, r1
 80185a4:	e649      	b.n	801823a <_strtod_l+0x72>
 80185a6:	4b6c      	ldr	r3, [pc, #432]	@ (8018758 <_strtod_l+0x590>)
 80185a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80185ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80185b0:	f7f0 f852 	bl	8008658 <__aeabi_dmul>
 80185b4:	4682      	mov	sl, r0
 80185b6:	4638      	mov	r0, r7
 80185b8:	468b      	mov	fp, r1
 80185ba:	f7ef ffd3 	bl	8008564 <__aeabi_ui2d>
 80185be:	4602      	mov	r2, r0
 80185c0:	460b      	mov	r3, r1
 80185c2:	4650      	mov	r0, sl
 80185c4:	4659      	mov	r1, fp
 80185c6:	f7ef fe91 	bl	80082ec <__adddf3>
 80185ca:	2d0f      	cmp	r5, #15
 80185cc:	4682      	mov	sl, r0
 80185ce:	468b      	mov	fp, r1
 80185d0:	ddd5      	ble.n	801857e <_strtod_l+0x3b6>
 80185d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185d4:	1b2c      	subs	r4, r5, r4
 80185d6:	441c      	add	r4, r3
 80185d8:	2c00      	cmp	r4, #0
 80185da:	f340 8093 	ble.w	8018704 <_strtod_l+0x53c>
 80185de:	f014 030f 	ands.w	r3, r4, #15
 80185e2:	d00a      	beq.n	80185fa <_strtod_l+0x432>
 80185e4:	495c      	ldr	r1, [pc, #368]	@ (8018758 <_strtod_l+0x590>)
 80185e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80185ea:	4652      	mov	r2, sl
 80185ec:	465b      	mov	r3, fp
 80185ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185f2:	f7f0 f831 	bl	8008658 <__aeabi_dmul>
 80185f6:	4682      	mov	sl, r0
 80185f8:	468b      	mov	fp, r1
 80185fa:	f034 040f 	bics.w	r4, r4, #15
 80185fe:	d073      	beq.n	80186e8 <_strtod_l+0x520>
 8018600:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8018604:	dd49      	ble.n	801869a <_strtod_l+0x4d2>
 8018606:	2400      	movs	r4, #0
 8018608:	46a0      	mov	r8, r4
 801860a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801860c:	46a1      	mov	r9, r4
 801860e:	9a05      	ldr	r2, [sp, #20]
 8018610:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8018760 <_strtod_l+0x598>
 8018614:	2322      	movs	r3, #34	@ 0x22
 8018616:	6013      	str	r3, [r2, #0]
 8018618:	f04f 0a00 	mov.w	sl, #0
 801861c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801861e:	2b00      	cmp	r3, #0
 8018620:	f43f ae0b 	beq.w	801823a <_strtod_l+0x72>
 8018624:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018626:	9805      	ldr	r0, [sp, #20]
 8018628:	f002 fd9c 	bl	801b164 <_Bfree>
 801862c:	9805      	ldr	r0, [sp, #20]
 801862e:	4649      	mov	r1, r9
 8018630:	f002 fd98 	bl	801b164 <_Bfree>
 8018634:	9805      	ldr	r0, [sp, #20]
 8018636:	4641      	mov	r1, r8
 8018638:	f002 fd94 	bl	801b164 <_Bfree>
 801863c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801863e:	9805      	ldr	r0, [sp, #20]
 8018640:	f002 fd90 	bl	801b164 <_Bfree>
 8018644:	9805      	ldr	r0, [sp, #20]
 8018646:	4621      	mov	r1, r4
 8018648:	f002 fd8c 	bl	801b164 <_Bfree>
 801864c:	e5f5      	b.n	801823a <_strtod_l+0x72>
 801864e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018650:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8018654:	4293      	cmp	r3, r2
 8018656:	dbbc      	blt.n	80185d2 <_strtod_l+0x40a>
 8018658:	4c3f      	ldr	r4, [pc, #252]	@ (8018758 <_strtod_l+0x590>)
 801865a:	f1c5 050f 	rsb	r5, r5, #15
 801865e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8018662:	4652      	mov	r2, sl
 8018664:	465b      	mov	r3, fp
 8018666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801866a:	f7ef fff5 	bl	8008658 <__aeabi_dmul>
 801866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018670:	1b5d      	subs	r5, r3, r5
 8018672:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8018676:	e9d4 2300 	ldrd	r2, r3, [r4]
 801867a:	e78f      	b.n	801859c <_strtod_l+0x3d4>
 801867c:	3316      	adds	r3, #22
 801867e:	dba8      	blt.n	80185d2 <_strtod_l+0x40a>
 8018680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018682:	eba3 0808 	sub.w	r8, r3, r8
 8018686:	4b34      	ldr	r3, [pc, #208]	@ (8018758 <_strtod_l+0x590>)
 8018688:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801868c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8018690:	4650      	mov	r0, sl
 8018692:	4659      	mov	r1, fp
 8018694:	f7f0 f90a 	bl	80088ac <__aeabi_ddiv>
 8018698:	e782      	b.n	80185a0 <_strtod_l+0x3d8>
 801869a:	2300      	movs	r3, #0
 801869c:	4f2f      	ldr	r7, [pc, #188]	@ (801875c <_strtod_l+0x594>)
 801869e:	1124      	asrs	r4, r4, #4
 80186a0:	4650      	mov	r0, sl
 80186a2:	4659      	mov	r1, fp
 80186a4:	461e      	mov	r6, r3
 80186a6:	2c01      	cmp	r4, #1
 80186a8:	dc21      	bgt.n	80186ee <_strtod_l+0x526>
 80186aa:	b10b      	cbz	r3, 80186b0 <_strtod_l+0x4e8>
 80186ac:	4682      	mov	sl, r0
 80186ae:	468b      	mov	fp, r1
 80186b0:	492a      	ldr	r1, [pc, #168]	@ (801875c <_strtod_l+0x594>)
 80186b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80186b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80186ba:	4652      	mov	r2, sl
 80186bc:	465b      	mov	r3, fp
 80186be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186c2:	f7ef ffc9 	bl	8008658 <__aeabi_dmul>
 80186c6:	4b26      	ldr	r3, [pc, #152]	@ (8018760 <_strtod_l+0x598>)
 80186c8:	460a      	mov	r2, r1
 80186ca:	400b      	ands	r3, r1
 80186cc:	4925      	ldr	r1, [pc, #148]	@ (8018764 <_strtod_l+0x59c>)
 80186ce:	428b      	cmp	r3, r1
 80186d0:	4682      	mov	sl, r0
 80186d2:	d898      	bhi.n	8018606 <_strtod_l+0x43e>
 80186d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80186d8:	428b      	cmp	r3, r1
 80186da:	bf86      	itte	hi
 80186dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8018768 <_strtod_l+0x5a0>
 80186e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80186e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80186e8:	2300      	movs	r3, #0
 80186ea:	9308      	str	r3, [sp, #32]
 80186ec:	e076      	b.n	80187dc <_strtod_l+0x614>
 80186ee:	07e2      	lsls	r2, r4, #31
 80186f0:	d504      	bpl.n	80186fc <_strtod_l+0x534>
 80186f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80186f6:	f7ef ffaf 	bl	8008658 <__aeabi_dmul>
 80186fa:	2301      	movs	r3, #1
 80186fc:	3601      	adds	r6, #1
 80186fe:	1064      	asrs	r4, r4, #1
 8018700:	3708      	adds	r7, #8
 8018702:	e7d0      	b.n	80186a6 <_strtod_l+0x4de>
 8018704:	d0f0      	beq.n	80186e8 <_strtod_l+0x520>
 8018706:	4264      	negs	r4, r4
 8018708:	f014 020f 	ands.w	r2, r4, #15
 801870c:	d00a      	beq.n	8018724 <_strtod_l+0x55c>
 801870e:	4b12      	ldr	r3, [pc, #72]	@ (8018758 <_strtod_l+0x590>)
 8018710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018714:	4650      	mov	r0, sl
 8018716:	4659      	mov	r1, fp
 8018718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871c:	f7f0 f8c6 	bl	80088ac <__aeabi_ddiv>
 8018720:	4682      	mov	sl, r0
 8018722:	468b      	mov	fp, r1
 8018724:	1124      	asrs	r4, r4, #4
 8018726:	d0df      	beq.n	80186e8 <_strtod_l+0x520>
 8018728:	2c1f      	cmp	r4, #31
 801872a:	dd1f      	ble.n	801876c <_strtod_l+0x5a4>
 801872c:	2400      	movs	r4, #0
 801872e:	46a0      	mov	r8, r4
 8018730:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018732:	46a1      	mov	r9, r4
 8018734:	9a05      	ldr	r2, [sp, #20]
 8018736:	2322      	movs	r3, #34	@ 0x22
 8018738:	f04f 0a00 	mov.w	sl, #0
 801873c:	f04f 0b00 	mov.w	fp, #0
 8018740:	6013      	str	r3, [r2, #0]
 8018742:	e76b      	b.n	801861c <_strtod_l+0x454>
 8018744:	0801f25f 	.word	0x0801f25f
 8018748:	0801f43c 	.word	0x0801f43c
 801874c:	0801f257 	.word	0x0801f257
 8018750:	0801f28f 	.word	0x0801f28f
 8018754:	0801f439 	.word	0x0801f439
 8018758:	0801f5c8 	.word	0x0801f5c8
 801875c:	0801f5a0 	.word	0x0801f5a0
 8018760:	7ff00000 	.word	0x7ff00000
 8018764:	7ca00000 	.word	0x7ca00000
 8018768:	7fefffff 	.word	0x7fefffff
 801876c:	f014 0310 	ands.w	r3, r4, #16
 8018770:	bf18      	it	ne
 8018772:	236a      	movne	r3, #106	@ 0x6a
 8018774:	4ea9      	ldr	r6, [pc, #676]	@ (8018a1c <_strtod_l+0x854>)
 8018776:	9308      	str	r3, [sp, #32]
 8018778:	4650      	mov	r0, sl
 801877a:	4659      	mov	r1, fp
 801877c:	2300      	movs	r3, #0
 801877e:	07e7      	lsls	r7, r4, #31
 8018780:	d504      	bpl.n	801878c <_strtod_l+0x5c4>
 8018782:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018786:	f7ef ff67 	bl	8008658 <__aeabi_dmul>
 801878a:	2301      	movs	r3, #1
 801878c:	1064      	asrs	r4, r4, #1
 801878e:	f106 0608 	add.w	r6, r6, #8
 8018792:	d1f4      	bne.n	801877e <_strtod_l+0x5b6>
 8018794:	b10b      	cbz	r3, 801879a <_strtod_l+0x5d2>
 8018796:	4682      	mov	sl, r0
 8018798:	468b      	mov	fp, r1
 801879a:	9b08      	ldr	r3, [sp, #32]
 801879c:	b1b3      	cbz	r3, 80187cc <_strtod_l+0x604>
 801879e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80187a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	4659      	mov	r1, fp
 80187aa:	dd0f      	ble.n	80187cc <_strtod_l+0x604>
 80187ac:	2b1f      	cmp	r3, #31
 80187ae:	dd56      	ble.n	801885e <_strtod_l+0x696>
 80187b0:	2b34      	cmp	r3, #52	@ 0x34
 80187b2:	bfde      	ittt	le
 80187b4:	f04f 33ff 	movle.w	r3, #4294967295
 80187b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80187bc:	4093      	lslle	r3, r2
 80187be:	f04f 0a00 	mov.w	sl, #0
 80187c2:	bfcc      	ite	gt
 80187c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80187c8:	ea03 0b01 	andle.w	fp, r3, r1
 80187cc:	2200      	movs	r2, #0
 80187ce:	2300      	movs	r3, #0
 80187d0:	4650      	mov	r0, sl
 80187d2:	4659      	mov	r1, fp
 80187d4:	f7f0 f9a8 	bl	8008b28 <__aeabi_dcmpeq>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d1a7      	bne.n	801872c <_strtod_l+0x564>
 80187dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187de:	9300      	str	r3, [sp, #0]
 80187e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80187e2:	9805      	ldr	r0, [sp, #20]
 80187e4:	462b      	mov	r3, r5
 80187e6:	464a      	mov	r2, r9
 80187e8:	f002 fd24 	bl	801b234 <__s2b>
 80187ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80187ee:	2800      	cmp	r0, #0
 80187f0:	f43f af09 	beq.w	8018606 <_strtod_l+0x43e>
 80187f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80187f8:	2a00      	cmp	r2, #0
 80187fa:	eba3 0308 	sub.w	r3, r3, r8
 80187fe:	bfa8      	it	ge
 8018800:	2300      	movge	r3, #0
 8018802:	9312      	str	r3, [sp, #72]	@ 0x48
 8018804:	2400      	movs	r4, #0
 8018806:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801880a:	9316      	str	r3, [sp, #88]	@ 0x58
 801880c:	46a0      	mov	r8, r4
 801880e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018810:	9805      	ldr	r0, [sp, #20]
 8018812:	6859      	ldr	r1, [r3, #4]
 8018814:	f002 fc66 	bl	801b0e4 <_Balloc>
 8018818:	4681      	mov	r9, r0
 801881a:	2800      	cmp	r0, #0
 801881c:	f43f aef7 	beq.w	801860e <_strtod_l+0x446>
 8018820:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018822:	691a      	ldr	r2, [r3, #16]
 8018824:	3202      	adds	r2, #2
 8018826:	f103 010c 	add.w	r1, r3, #12
 801882a:	0092      	lsls	r2, r2, #2
 801882c:	300c      	adds	r0, #12
 801882e:	f001 fa52 	bl	8019cd6 <memcpy>
 8018832:	ec4b ab10 	vmov	d0, sl, fp
 8018836:	9805      	ldr	r0, [sp, #20]
 8018838:	aa1c      	add	r2, sp, #112	@ 0x70
 801883a:	a91b      	add	r1, sp, #108	@ 0x6c
 801883c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8018840:	f003 f82c 	bl	801b89c <__d2b>
 8018844:	901a      	str	r0, [sp, #104]	@ 0x68
 8018846:	2800      	cmp	r0, #0
 8018848:	f43f aee1 	beq.w	801860e <_strtod_l+0x446>
 801884c:	9805      	ldr	r0, [sp, #20]
 801884e:	2101      	movs	r1, #1
 8018850:	f002 fd86 	bl	801b360 <__i2b>
 8018854:	4680      	mov	r8, r0
 8018856:	b948      	cbnz	r0, 801886c <_strtod_l+0x6a4>
 8018858:	f04f 0800 	mov.w	r8, #0
 801885c:	e6d7      	b.n	801860e <_strtod_l+0x446>
 801885e:	f04f 32ff 	mov.w	r2, #4294967295
 8018862:	fa02 f303 	lsl.w	r3, r2, r3
 8018866:	ea03 0a0a 	and.w	sl, r3, sl
 801886a:	e7af      	b.n	80187cc <_strtod_l+0x604>
 801886c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801886e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018870:	2d00      	cmp	r5, #0
 8018872:	bfab      	itete	ge
 8018874:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8018876:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8018878:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801887a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801887c:	bfac      	ite	ge
 801887e:	18ef      	addge	r7, r5, r3
 8018880:	1b5e      	sublt	r6, r3, r5
 8018882:	9b08      	ldr	r3, [sp, #32]
 8018884:	1aed      	subs	r5, r5, r3
 8018886:	4415      	add	r5, r2
 8018888:	4b65      	ldr	r3, [pc, #404]	@ (8018a20 <_strtod_l+0x858>)
 801888a:	3d01      	subs	r5, #1
 801888c:	429d      	cmp	r5, r3
 801888e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8018892:	da50      	bge.n	8018936 <_strtod_l+0x76e>
 8018894:	1b5b      	subs	r3, r3, r5
 8018896:	2b1f      	cmp	r3, #31
 8018898:	eba2 0203 	sub.w	r2, r2, r3
 801889c:	f04f 0101 	mov.w	r1, #1
 80188a0:	dc3d      	bgt.n	801891e <_strtod_l+0x756>
 80188a2:	fa01 f303 	lsl.w	r3, r1, r3
 80188a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80188a8:	2300      	movs	r3, #0
 80188aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80188ac:	18bd      	adds	r5, r7, r2
 80188ae:	9b08      	ldr	r3, [sp, #32]
 80188b0:	42af      	cmp	r7, r5
 80188b2:	4416      	add	r6, r2
 80188b4:	441e      	add	r6, r3
 80188b6:	463b      	mov	r3, r7
 80188b8:	bfa8      	it	ge
 80188ba:	462b      	movge	r3, r5
 80188bc:	42b3      	cmp	r3, r6
 80188be:	bfa8      	it	ge
 80188c0:	4633      	movge	r3, r6
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	bfc2      	ittt	gt
 80188c6:	1aed      	subgt	r5, r5, r3
 80188c8:	1af6      	subgt	r6, r6, r3
 80188ca:	1aff      	subgt	r7, r7, r3
 80188cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	dd16      	ble.n	8018900 <_strtod_l+0x738>
 80188d2:	4641      	mov	r1, r8
 80188d4:	9805      	ldr	r0, [sp, #20]
 80188d6:	461a      	mov	r2, r3
 80188d8:	f002 fdfa 	bl	801b4d0 <__pow5mult>
 80188dc:	4680      	mov	r8, r0
 80188de:	2800      	cmp	r0, #0
 80188e0:	d0ba      	beq.n	8018858 <_strtod_l+0x690>
 80188e2:	4601      	mov	r1, r0
 80188e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80188e6:	9805      	ldr	r0, [sp, #20]
 80188e8:	f002 fd50 	bl	801b38c <__multiply>
 80188ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80188ee:	2800      	cmp	r0, #0
 80188f0:	f43f ae8d 	beq.w	801860e <_strtod_l+0x446>
 80188f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80188f6:	9805      	ldr	r0, [sp, #20]
 80188f8:	f002 fc34 	bl	801b164 <_Bfree>
 80188fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8018900:	2d00      	cmp	r5, #0
 8018902:	dc1d      	bgt.n	8018940 <_strtod_l+0x778>
 8018904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018906:	2b00      	cmp	r3, #0
 8018908:	dd23      	ble.n	8018952 <_strtod_l+0x78a>
 801890a:	4649      	mov	r1, r9
 801890c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801890e:	9805      	ldr	r0, [sp, #20]
 8018910:	f002 fdde 	bl	801b4d0 <__pow5mult>
 8018914:	4681      	mov	r9, r0
 8018916:	b9e0      	cbnz	r0, 8018952 <_strtod_l+0x78a>
 8018918:	f04f 0900 	mov.w	r9, #0
 801891c:	e677      	b.n	801860e <_strtod_l+0x446>
 801891e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8018922:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8018926:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801892a:	35e2      	adds	r5, #226	@ 0xe2
 801892c:	fa01 f305 	lsl.w	r3, r1, r5
 8018930:	9310      	str	r3, [sp, #64]	@ 0x40
 8018932:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018934:	e7ba      	b.n	80188ac <_strtod_l+0x6e4>
 8018936:	2300      	movs	r3, #0
 8018938:	9310      	str	r3, [sp, #64]	@ 0x40
 801893a:	2301      	movs	r3, #1
 801893c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801893e:	e7b5      	b.n	80188ac <_strtod_l+0x6e4>
 8018940:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018942:	9805      	ldr	r0, [sp, #20]
 8018944:	462a      	mov	r2, r5
 8018946:	f002 fe1d 	bl	801b584 <__lshift>
 801894a:	901a      	str	r0, [sp, #104]	@ 0x68
 801894c:	2800      	cmp	r0, #0
 801894e:	d1d9      	bne.n	8018904 <_strtod_l+0x73c>
 8018950:	e65d      	b.n	801860e <_strtod_l+0x446>
 8018952:	2e00      	cmp	r6, #0
 8018954:	dd07      	ble.n	8018966 <_strtod_l+0x79e>
 8018956:	4649      	mov	r1, r9
 8018958:	9805      	ldr	r0, [sp, #20]
 801895a:	4632      	mov	r2, r6
 801895c:	f002 fe12 	bl	801b584 <__lshift>
 8018960:	4681      	mov	r9, r0
 8018962:	2800      	cmp	r0, #0
 8018964:	d0d8      	beq.n	8018918 <_strtod_l+0x750>
 8018966:	2f00      	cmp	r7, #0
 8018968:	dd08      	ble.n	801897c <_strtod_l+0x7b4>
 801896a:	4641      	mov	r1, r8
 801896c:	9805      	ldr	r0, [sp, #20]
 801896e:	463a      	mov	r2, r7
 8018970:	f002 fe08 	bl	801b584 <__lshift>
 8018974:	4680      	mov	r8, r0
 8018976:	2800      	cmp	r0, #0
 8018978:	f43f ae49 	beq.w	801860e <_strtod_l+0x446>
 801897c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801897e:	9805      	ldr	r0, [sp, #20]
 8018980:	464a      	mov	r2, r9
 8018982:	f002 fe87 	bl	801b694 <__mdiff>
 8018986:	4604      	mov	r4, r0
 8018988:	2800      	cmp	r0, #0
 801898a:	f43f ae40 	beq.w	801860e <_strtod_l+0x446>
 801898e:	68c3      	ldr	r3, [r0, #12]
 8018990:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018992:	2300      	movs	r3, #0
 8018994:	60c3      	str	r3, [r0, #12]
 8018996:	4641      	mov	r1, r8
 8018998:	f002 fe60 	bl	801b65c <__mcmp>
 801899c:	2800      	cmp	r0, #0
 801899e:	da45      	bge.n	8018a2c <_strtod_l+0x864>
 80189a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80189a2:	ea53 030a 	orrs.w	r3, r3, sl
 80189a6:	d16b      	bne.n	8018a80 <_strtod_l+0x8b8>
 80189a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d167      	bne.n	8018a80 <_strtod_l+0x8b8>
 80189b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80189b4:	0d1b      	lsrs	r3, r3, #20
 80189b6:	051b      	lsls	r3, r3, #20
 80189b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80189bc:	d960      	bls.n	8018a80 <_strtod_l+0x8b8>
 80189be:	6963      	ldr	r3, [r4, #20]
 80189c0:	b913      	cbnz	r3, 80189c8 <_strtod_l+0x800>
 80189c2:	6923      	ldr	r3, [r4, #16]
 80189c4:	2b01      	cmp	r3, #1
 80189c6:	dd5b      	ble.n	8018a80 <_strtod_l+0x8b8>
 80189c8:	4621      	mov	r1, r4
 80189ca:	2201      	movs	r2, #1
 80189cc:	9805      	ldr	r0, [sp, #20]
 80189ce:	f002 fdd9 	bl	801b584 <__lshift>
 80189d2:	4641      	mov	r1, r8
 80189d4:	4604      	mov	r4, r0
 80189d6:	f002 fe41 	bl	801b65c <__mcmp>
 80189da:	2800      	cmp	r0, #0
 80189dc:	dd50      	ble.n	8018a80 <_strtod_l+0x8b8>
 80189de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80189e2:	9a08      	ldr	r2, [sp, #32]
 80189e4:	0d1b      	lsrs	r3, r3, #20
 80189e6:	051b      	lsls	r3, r3, #20
 80189e8:	2a00      	cmp	r2, #0
 80189ea:	d06a      	beq.n	8018ac2 <_strtod_l+0x8fa>
 80189ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80189f0:	d867      	bhi.n	8018ac2 <_strtod_l+0x8fa>
 80189f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80189f6:	f67f ae9d 	bls.w	8018734 <_strtod_l+0x56c>
 80189fa:	4b0a      	ldr	r3, [pc, #40]	@ (8018a24 <_strtod_l+0x85c>)
 80189fc:	4650      	mov	r0, sl
 80189fe:	4659      	mov	r1, fp
 8018a00:	2200      	movs	r2, #0
 8018a02:	f7ef fe29 	bl	8008658 <__aeabi_dmul>
 8018a06:	4b08      	ldr	r3, [pc, #32]	@ (8018a28 <_strtod_l+0x860>)
 8018a08:	400b      	ands	r3, r1
 8018a0a:	4682      	mov	sl, r0
 8018a0c:	468b      	mov	fp, r1
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	f47f ae08 	bne.w	8018624 <_strtod_l+0x45c>
 8018a14:	9a05      	ldr	r2, [sp, #20]
 8018a16:	2322      	movs	r3, #34	@ 0x22
 8018a18:	6013      	str	r3, [r2, #0]
 8018a1a:	e603      	b.n	8018624 <_strtod_l+0x45c>
 8018a1c:	0801f468 	.word	0x0801f468
 8018a20:	fffffc02 	.word	0xfffffc02
 8018a24:	39500000 	.word	0x39500000
 8018a28:	7ff00000 	.word	0x7ff00000
 8018a2c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8018a30:	d165      	bne.n	8018afe <_strtod_l+0x936>
 8018a32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a38:	b35a      	cbz	r2, 8018a92 <_strtod_l+0x8ca>
 8018a3a:	4a9f      	ldr	r2, [pc, #636]	@ (8018cb8 <_strtod_l+0xaf0>)
 8018a3c:	4293      	cmp	r3, r2
 8018a3e:	d12b      	bne.n	8018a98 <_strtod_l+0x8d0>
 8018a40:	9b08      	ldr	r3, [sp, #32]
 8018a42:	4651      	mov	r1, sl
 8018a44:	b303      	cbz	r3, 8018a88 <_strtod_l+0x8c0>
 8018a46:	4b9d      	ldr	r3, [pc, #628]	@ (8018cbc <_strtod_l+0xaf4>)
 8018a48:	465a      	mov	r2, fp
 8018a4a:	4013      	ands	r3, r2
 8018a4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018a50:	f04f 32ff 	mov.w	r2, #4294967295
 8018a54:	d81b      	bhi.n	8018a8e <_strtod_l+0x8c6>
 8018a56:	0d1b      	lsrs	r3, r3, #20
 8018a58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8018a60:	4299      	cmp	r1, r3
 8018a62:	d119      	bne.n	8018a98 <_strtod_l+0x8d0>
 8018a64:	4b96      	ldr	r3, [pc, #600]	@ (8018cc0 <_strtod_l+0xaf8>)
 8018a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a68:	429a      	cmp	r2, r3
 8018a6a:	d102      	bne.n	8018a72 <_strtod_l+0x8aa>
 8018a6c:	3101      	adds	r1, #1
 8018a6e:	f43f adce 	beq.w	801860e <_strtod_l+0x446>
 8018a72:	4b92      	ldr	r3, [pc, #584]	@ (8018cbc <_strtod_l+0xaf4>)
 8018a74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a76:	401a      	ands	r2, r3
 8018a78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8018a7c:	f04f 0a00 	mov.w	sl, #0
 8018a80:	9b08      	ldr	r3, [sp, #32]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d1b9      	bne.n	80189fa <_strtod_l+0x832>
 8018a86:	e5cd      	b.n	8018624 <_strtod_l+0x45c>
 8018a88:	f04f 33ff 	mov.w	r3, #4294967295
 8018a8c:	e7e8      	b.n	8018a60 <_strtod_l+0x898>
 8018a8e:	4613      	mov	r3, r2
 8018a90:	e7e6      	b.n	8018a60 <_strtod_l+0x898>
 8018a92:	ea53 030a 	orrs.w	r3, r3, sl
 8018a96:	d0a2      	beq.n	80189de <_strtod_l+0x816>
 8018a98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a9a:	b1db      	cbz	r3, 8018ad4 <_strtod_l+0x90c>
 8018a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a9e:	4213      	tst	r3, r2
 8018aa0:	d0ee      	beq.n	8018a80 <_strtod_l+0x8b8>
 8018aa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018aa4:	9a08      	ldr	r2, [sp, #32]
 8018aa6:	4650      	mov	r0, sl
 8018aa8:	4659      	mov	r1, fp
 8018aaa:	b1bb      	cbz	r3, 8018adc <_strtod_l+0x914>
 8018aac:	f7ff fb6e 	bl	801818c <sulp>
 8018ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018ab4:	ec53 2b10 	vmov	r2, r3, d0
 8018ab8:	f7ef fc18 	bl	80082ec <__adddf3>
 8018abc:	4682      	mov	sl, r0
 8018abe:	468b      	mov	fp, r1
 8018ac0:	e7de      	b.n	8018a80 <_strtod_l+0x8b8>
 8018ac2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018ac6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018aca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018ace:	f04f 3aff 	mov.w	sl, #4294967295
 8018ad2:	e7d5      	b.n	8018a80 <_strtod_l+0x8b8>
 8018ad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018ad6:	ea13 0f0a 	tst.w	r3, sl
 8018ada:	e7e1      	b.n	8018aa0 <_strtod_l+0x8d8>
 8018adc:	f7ff fb56 	bl	801818c <sulp>
 8018ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018ae4:	ec53 2b10 	vmov	r2, r3, d0
 8018ae8:	f7ef fbfe 	bl	80082e8 <__aeabi_dsub>
 8018aec:	2200      	movs	r2, #0
 8018aee:	2300      	movs	r3, #0
 8018af0:	4682      	mov	sl, r0
 8018af2:	468b      	mov	fp, r1
 8018af4:	f7f0 f818 	bl	8008b28 <__aeabi_dcmpeq>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	d0c1      	beq.n	8018a80 <_strtod_l+0x8b8>
 8018afc:	e61a      	b.n	8018734 <_strtod_l+0x56c>
 8018afe:	4641      	mov	r1, r8
 8018b00:	4620      	mov	r0, r4
 8018b02:	f002 ff23 	bl	801b94c <__ratio>
 8018b06:	ec57 6b10 	vmov	r6, r7, d0
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018b10:	4630      	mov	r0, r6
 8018b12:	4639      	mov	r1, r7
 8018b14:	f7f0 f81c 	bl	8008b50 <__aeabi_dcmple>
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	d06f      	beq.n	8018bfc <_strtod_l+0xa34>
 8018b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d17a      	bne.n	8018c18 <_strtod_l+0xa50>
 8018b22:	f1ba 0f00 	cmp.w	sl, #0
 8018b26:	d158      	bne.n	8018bda <_strtod_l+0xa12>
 8018b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d15a      	bne.n	8018be8 <_strtod_l+0xa20>
 8018b32:	4b64      	ldr	r3, [pc, #400]	@ (8018cc4 <_strtod_l+0xafc>)
 8018b34:	2200      	movs	r2, #0
 8018b36:	4630      	mov	r0, r6
 8018b38:	4639      	mov	r1, r7
 8018b3a:	f7ef ffff 	bl	8008b3c <__aeabi_dcmplt>
 8018b3e:	2800      	cmp	r0, #0
 8018b40:	d159      	bne.n	8018bf6 <_strtod_l+0xa2e>
 8018b42:	4630      	mov	r0, r6
 8018b44:	4639      	mov	r1, r7
 8018b46:	4b60      	ldr	r3, [pc, #384]	@ (8018cc8 <_strtod_l+0xb00>)
 8018b48:	2200      	movs	r2, #0
 8018b4a:	f7ef fd85 	bl	8008658 <__aeabi_dmul>
 8018b4e:	4606      	mov	r6, r0
 8018b50:	460f      	mov	r7, r1
 8018b52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8018b56:	9606      	str	r6, [sp, #24]
 8018b58:	9307      	str	r3, [sp, #28]
 8018b5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b5e:	4d57      	ldr	r5, [pc, #348]	@ (8018cbc <_strtod_l+0xaf4>)
 8018b60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b66:	401d      	ands	r5, r3
 8018b68:	4b58      	ldr	r3, [pc, #352]	@ (8018ccc <_strtod_l+0xb04>)
 8018b6a:	429d      	cmp	r5, r3
 8018b6c:	f040 80b2 	bne.w	8018cd4 <_strtod_l+0xb0c>
 8018b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8018b76:	ec4b ab10 	vmov	d0, sl, fp
 8018b7a:	f002 fe1f 	bl	801b7bc <__ulp>
 8018b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b82:	ec51 0b10 	vmov	r0, r1, d0
 8018b86:	f7ef fd67 	bl	8008658 <__aeabi_dmul>
 8018b8a:	4652      	mov	r2, sl
 8018b8c:	465b      	mov	r3, fp
 8018b8e:	f7ef fbad 	bl	80082ec <__adddf3>
 8018b92:	460b      	mov	r3, r1
 8018b94:	4949      	ldr	r1, [pc, #292]	@ (8018cbc <_strtod_l+0xaf4>)
 8018b96:	4a4e      	ldr	r2, [pc, #312]	@ (8018cd0 <_strtod_l+0xb08>)
 8018b98:	4019      	ands	r1, r3
 8018b9a:	4291      	cmp	r1, r2
 8018b9c:	4682      	mov	sl, r0
 8018b9e:	d942      	bls.n	8018c26 <_strtod_l+0xa5e>
 8018ba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018ba2:	4b47      	ldr	r3, [pc, #284]	@ (8018cc0 <_strtod_l+0xaf8>)
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d103      	bne.n	8018bb0 <_strtod_l+0x9e8>
 8018ba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018baa:	3301      	adds	r3, #1
 8018bac:	f43f ad2f 	beq.w	801860e <_strtod_l+0x446>
 8018bb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8018cc0 <_strtod_l+0xaf8>
 8018bb4:	f04f 3aff 	mov.w	sl, #4294967295
 8018bb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018bba:	9805      	ldr	r0, [sp, #20]
 8018bbc:	f002 fad2 	bl	801b164 <_Bfree>
 8018bc0:	9805      	ldr	r0, [sp, #20]
 8018bc2:	4649      	mov	r1, r9
 8018bc4:	f002 face 	bl	801b164 <_Bfree>
 8018bc8:	9805      	ldr	r0, [sp, #20]
 8018bca:	4641      	mov	r1, r8
 8018bcc:	f002 faca 	bl	801b164 <_Bfree>
 8018bd0:	9805      	ldr	r0, [sp, #20]
 8018bd2:	4621      	mov	r1, r4
 8018bd4:	f002 fac6 	bl	801b164 <_Bfree>
 8018bd8:	e619      	b.n	801880e <_strtod_l+0x646>
 8018bda:	f1ba 0f01 	cmp.w	sl, #1
 8018bde:	d103      	bne.n	8018be8 <_strtod_l+0xa20>
 8018be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	f43f ada6 	beq.w	8018734 <_strtod_l+0x56c>
 8018be8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8018c98 <_strtod_l+0xad0>
 8018bec:	4f35      	ldr	r7, [pc, #212]	@ (8018cc4 <_strtod_l+0xafc>)
 8018bee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018bf2:	2600      	movs	r6, #0
 8018bf4:	e7b1      	b.n	8018b5a <_strtod_l+0x992>
 8018bf6:	4f34      	ldr	r7, [pc, #208]	@ (8018cc8 <_strtod_l+0xb00>)
 8018bf8:	2600      	movs	r6, #0
 8018bfa:	e7aa      	b.n	8018b52 <_strtod_l+0x98a>
 8018bfc:	4b32      	ldr	r3, [pc, #200]	@ (8018cc8 <_strtod_l+0xb00>)
 8018bfe:	4630      	mov	r0, r6
 8018c00:	4639      	mov	r1, r7
 8018c02:	2200      	movs	r2, #0
 8018c04:	f7ef fd28 	bl	8008658 <__aeabi_dmul>
 8018c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c0a:	4606      	mov	r6, r0
 8018c0c:	460f      	mov	r7, r1
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d09f      	beq.n	8018b52 <_strtod_l+0x98a>
 8018c12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018c16:	e7a0      	b.n	8018b5a <_strtod_l+0x992>
 8018c18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8018ca0 <_strtod_l+0xad8>
 8018c1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018c20:	ec57 6b17 	vmov	r6, r7, d7
 8018c24:	e799      	b.n	8018b5a <_strtod_l+0x992>
 8018c26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018c2a:	9b08      	ldr	r3, [sp, #32]
 8018c2c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d1c1      	bne.n	8018bb8 <_strtod_l+0x9f0>
 8018c34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018c38:	0d1b      	lsrs	r3, r3, #20
 8018c3a:	051b      	lsls	r3, r3, #20
 8018c3c:	429d      	cmp	r5, r3
 8018c3e:	d1bb      	bne.n	8018bb8 <_strtod_l+0x9f0>
 8018c40:	4630      	mov	r0, r6
 8018c42:	4639      	mov	r1, r7
 8018c44:	f7f0 f818 	bl	8008c78 <__aeabi_d2lz>
 8018c48:	f7ef fcd8 	bl	80085fc <__aeabi_l2d>
 8018c4c:	4602      	mov	r2, r0
 8018c4e:	460b      	mov	r3, r1
 8018c50:	4630      	mov	r0, r6
 8018c52:	4639      	mov	r1, r7
 8018c54:	f7ef fb48 	bl	80082e8 <__aeabi_dsub>
 8018c58:	460b      	mov	r3, r1
 8018c5a:	4602      	mov	r2, r0
 8018c5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8018c60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8018c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c66:	ea46 060a 	orr.w	r6, r6, sl
 8018c6a:	431e      	orrs	r6, r3
 8018c6c:	d06f      	beq.n	8018d4e <_strtod_l+0xb86>
 8018c6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018ca8 <_strtod_l+0xae0>)
 8018c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c74:	f7ef ff62 	bl	8008b3c <__aeabi_dcmplt>
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	f47f acd3 	bne.w	8018624 <_strtod_l+0x45c>
 8018c7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8018cb0 <_strtod_l+0xae8>)
 8018c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018c88:	f7ef ff76 	bl	8008b78 <__aeabi_dcmpgt>
 8018c8c:	2800      	cmp	r0, #0
 8018c8e:	d093      	beq.n	8018bb8 <_strtod_l+0x9f0>
 8018c90:	e4c8      	b.n	8018624 <_strtod_l+0x45c>
 8018c92:	bf00      	nop
 8018c94:	f3af 8000 	nop.w
 8018c98:	00000000 	.word	0x00000000
 8018c9c:	bff00000 	.word	0xbff00000
 8018ca0:	00000000 	.word	0x00000000
 8018ca4:	3ff00000 	.word	0x3ff00000
 8018ca8:	94a03595 	.word	0x94a03595
 8018cac:	3fdfffff 	.word	0x3fdfffff
 8018cb0:	35afe535 	.word	0x35afe535
 8018cb4:	3fe00000 	.word	0x3fe00000
 8018cb8:	000fffff 	.word	0x000fffff
 8018cbc:	7ff00000 	.word	0x7ff00000
 8018cc0:	7fefffff 	.word	0x7fefffff
 8018cc4:	3ff00000 	.word	0x3ff00000
 8018cc8:	3fe00000 	.word	0x3fe00000
 8018ccc:	7fe00000 	.word	0x7fe00000
 8018cd0:	7c9fffff 	.word	0x7c9fffff
 8018cd4:	9b08      	ldr	r3, [sp, #32]
 8018cd6:	b323      	cbz	r3, 8018d22 <_strtod_l+0xb5a>
 8018cd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8018cdc:	d821      	bhi.n	8018d22 <_strtod_l+0xb5a>
 8018cde:	a328      	add	r3, pc, #160	@ (adr r3, 8018d80 <_strtod_l+0xbb8>)
 8018ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ce4:	4630      	mov	r0, r6
 8018ce6:	4639      	mov	r1, r7
 8018ce8:	f7ef ff32 	bl	8008b50 <__aeabi_dcmple>
 8018cec:	b1a0      	cbz	r0, 8018d18 <_strtod_l+0xb50>
 8018cee:	4639      	mov	r1, r7
 8018cf0:	4630      	mov	r0, r6
 8018cf2:	f7ef ff89 	bl	8008c08 <__aeabi_d2uiz>
 8018cf6:	2801      	cmp	r0, #1
 8018cf8:	bf38      	it	cc
 8018cfa:	2001      	movcc	r0, #1
 8018cfc:	f7ef fc32 	bl	8008564 <__aeabi_ui2d>
 8018d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d02:	4606      	mov	r6, r0
 8018d04:	460f      	mov	r7, r1
 8018d06:	b9fb      	cbnz	r3, 8018d48 <_strtod_l+0xb80>
 8018d08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018d0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8018d0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8018d10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8018d14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018d18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8018d1e:	1b5b      	subs	r3, r3, r5
 8018d20:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018d26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8018d2a:	f002 fd47 	bl	801b7bc <__ulp>
 8018d2e:	4650      	mov	r0, sl
 8018d30:	ec53 2b10 	vmov	r2, r3, d0
 8018d34:	4659      	mov	r1, fp
 8018d36:	f7ef fc8f 	bl	8008658 <__aeabi_dmul>
 8018d3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018d3e:	f7ef fad5 	bl	80082ec <__adddf3>
 8018d42:	4682      	mov	sl, r0
 8018d44:	468b      	mov	fp, r1
 8018d46:	e770      	b.n	8018c2a <_strtod_l+0xa62>
 8018d48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8018d4c:	e7e0      	b.n	8018d10 <_strtod_l+0xb48>
 8018d4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018d88 <_strtod_l+0xbc0>)
 8018d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d54:	f7ef fef2 	bl	8008b3c <__aeabi_dcmplt>
 8018d58:	e798      	b.n	8018c8c <_strtod_l+0xac4>
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8018d5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018d60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018d62:	6013      	str	r3, [r2, #0]
 8018d64:	f7ff ba6d 	b.w	8018242 <_strtod_l+0x7a>
 8018d68:	2a65      	cmp	r2, #101	@ 0x65
 8018d6a:	f43f ab68 	beq.w	801843e <_strtod_l+0x276>
 8018d6e:	2a45      	cmp	r2, #69	@ 0x45
 8018d70:	f43f ab65 	beq.w	801843e <_strtod_l+0x276>
 8018d74:	2301      	movs	r3, #1
 8018d76:	f7ff bba0 	b.w	80184ba <_strtod_l+0x2f2>
 8018d7a:	bf00      	nop
 8018d7c:	f3af 8000 	nop.w
 8018d80:	ffc00000 	.word	0xffc00000
 8018d84:	41dfffff 	.word	0x41dfffff
 8018d88:	94a03595 	.word	0x94a03595
 8018d8c:	3fcfffff 	.word	0x3fcfffff

08018d90 <strtod>:
 8018d90:	460a      	mov	r2, r1
 8018d92:	4601      	mov	r1, r0
 8018d94:	4802      	ldr	r0, [pc, #8]	@ (8018da0 <strtod+0x10>)
 8018d96:	4b03      	ldr	r3, [pc, #12]	@ (8018da4 <strtod+0x14>)
 8018d98:	6800      	ldr	r0, [r0, #0]
 8018d9a:	f7ff ba15 	b.w	80181c8 <_strtod_l>
 8018d9e:	bf00      	nop
 8018da0:	20000214 	.word	0x20000214
 8018da4:	200000a8 	.word	0x200000a8

08018da8 <__cvt>:
 8018da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018dac:	ec57 6b10 	vmov	r6, r7, d0
 8018db0:	2f00      	cmp	r7, #0
 8018db2:	460c      	mov	r4, r1
 8018db4:	4619      	mov	r1, r3
 8018db6:	463b      	mov	r3, r7
 8018db8:	bfbb      	ittet	lt
 8018dba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8018dbe:	461f      	movlt	r7, r3
 8018dc0:	2300      	movge	r3, #0
 8018dc2:	232d      	movlt	r3, #45	@ 0x2d
 8018dc4:	700b      	strb	r3, [r1, #0]
 8018dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018dc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8018dcc:	4691      	mov	r9, r2
 8018dce:	f023 0820 	bic.w	r8, r3, #32
 8018dd2:	bfbc      	itt	lt
 8018dd4:	4632      	movlt	r2, r6
 8018dd6:	4616      	movlt	r6, r2
 8018dd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018ddc:	d005      	beq.n	8018dea <__cvt+0x42>
 8018dde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8018de2:	d100      	bne.n	8018de6 <__cvt+0x3e>
 8018de4:	3401      	adds	r4, #1
 8018de6:	2102      	movs	r1, #2
 8018de8:	e000      	b.n	8018dec <__cvt+0x44>
 8018dea:	2103      	movs	r1, #3
 8018dec:	ab03      	add	r3, sp, #12
 8018dee:	9301      	str	r3, [sp, #4]
 8018df0:	ab02      	add	r3, sp, #8
 8018df2:	9300      	str	r3, [sp, #0]
 8018df4:	ec47 6b10 	vmov	d0, r6, r7
 8018df8:	4653      	mov	r3, sl
 8018dfa:	4622      	mov	r2, r4
 8018dfc:	f001 f80c 	bl	8019e18 <_dtoa_r>
 8018e00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8018e04:	4605      	mov	r5, r0
 8018e06:	d119      	bne.n	8018e3c <__cvt+0x94>
 8018e08:	f019 0f01 	tst.w	r9, #1
 8018e0c:	d00e      	beq.n	8018e2c <__cvt+0x84>
 8018e0e:	eb00 0904 	add.w	r9, r0, r4
 8018e12:	2200      	movs	r2, #0
 8018e14:	2300      	movs	r3, #0
 8018e16:	4630      	mov	r0, r6
 8018e18:	4639      	mov	r1, r7
 8018e1a:	f7ef fe85 	bl	8008b28 <__aeabi_dcmpeq>
 8018e1e:	b108      	cbz	r0, 8018e24 <__cvt+0x7c>
 8018e20:	f8cd 900c 	str.w	r9, [sp, #12]
 8018e24:	2230      	movs	r2, #48	@ 0x30
 8018e26:	9b03      	ldr	r3, [sp, #12]
 8018e28:	454b      	cmp	r3, r9
 8018e2a:	d31e      	bcc.n	8018e6a <__cvt+0xc2>
 8018e2c:	9b03      	ldr	r3, [sp, #12]
 8018e2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e30:	1b5b      	subs	r3, r3, r5
 8018e32:	4628      	mov	r0, r5
 8018e34:	6013      	str	r3, [r2, #0]
 8018e36:	b004      	add	sp, #16
 8018e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018e40:	eb00 0904 	add.w	r9, r0, r4
 8018e44:	d1e5      	bne.n	8018e12 <__cvt+0x6a>
 8018e46:	7803      	ldrb	r3, [r0, #0]
 8018e48:	2b30      	cmp	r3, #48	@ 0x30
 8018e4a:	d10a      	bne.n	8018e62 <__cvt+0xba>
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	2300      	movs	r3, #0
 8018e50:	4630      	mov	r0, r6
 8018e52:	4639      	mov	r1, r7
 8018e54:	f7ef fe68 	bl	8008b28 <__aeabi_dcmpeq>
 8018e58:	b918      	cbnz	r0, 8018e62 <__cvt+0xba>
 8018e5a:	f1c4 0401 	rsb	r4, r4, #1
 8018e5e:	f8ca 4000 	str.w	r4, [sl]
 8018e62:	f8da 3000 	ldr.w	r3, [sl]
 8018e66:	4499      	add	r9, r3
 8018e68:	e7d3      	b.n	8018e12 <__cvt+0x6a>
 8018e6a:	1c59      	adds	r1, r3, #1
 8018e6c:	9103      	str	r1, [sp, #12]
 8018e6e:	701a      	strb	r2, [r3, #0]
 8018e70:	e7d9      	b.n	8018e26 <__cvt+0x7e>

08018e72 <__exponent>:
 8018e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e74:	2900      	cmp	r1, #0
 8018e76:	bfba      	itte	lt
 8018e78:	4249      	neglt	r1, r1
 8018e7a:	232d      	movlt	r3, #45	@ 0x2d
 8018e7c:	232b      	movge	r3, #43	@ 0x2b
 8018e7e:	2909      	cmp	r1, #9
 8018e80:	7002      	strb	r2, [r0, #0]
 8018e82:	7043      	strb	r3, [r0, #1]
 8018e84:	dd29      	ble.n	8018eda <__exponent+0x68>
 8018e86:	f10d 0307 	add.w	r3, sp, #7
 8018e8a:	461d      	mov	r5, r3
 8018e8c:	270a      	movs	r7, #10
 8018e8e:	461a      	mov	r2, r3
 8018e90:	fbb1 f6f7 	udiv	r6, r1, r7
 8018e94:	fb07 1416 	mls	r4, r7, r6, r1
 8018e98:	3430      	adds	r4, #48	@ 0x30
 8018e9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018e9e:	460c      	mov	r4, r1
 8018ea0:	2c63      	cmp	r4, #99	@ 0x63
 8018ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8018ea6:	4631      	mov	r1, r6
 8018ea8:	dcf1      	bgt.n	8018e8e <__exponent+0x1c>
 8018eaa:	3130      	adds	r1, #48	@ 0x30
 8018eac:	1e94      	subs	r4, r2, #2
 8018eae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018eb2:	1c41      	adds	r1, r0, #1
 8018eb4:	4623      	mov	r3, r4
 8018eb6:	42ab      	cmp	r3, r5
 8018eb8:	d30a      	bcc.n	8018ed0 <__exponent+0x5e>
 8018eba:	f10d 0309 	add.w	r3, sp, #9
 8018ebe:	1a9b      	subs	r3, r3, r2
 8018ec0:	42ac      	cmp	r4, r5
 8018ec2:	bf88      	it	hi
 8018ec4:	2300      	movhi	r3, #0
 8018ec6:	3302      	adds	r3, #2
 8018ec8:	4403      	add	r3, r0
 8018eca:	1a18      	subs	r0, r3, r0
 8018ecc:	b003      	add	sp, #12
 8018ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ed0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018ed4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018ed8:	e7ed      	b.n	8018eb6 <__exponent+0x44>
 8018eda:	2330      	movs	r3, #48	@ 0x30
 8018edc:	3130      	adds	r1, #48	@ 0x30
 8018ede:	7083      	strb	r3, [r0, #2]
 8018ee0:	70c1      	strb	r1, [r0, #3]
 8018ee2:	1d03      	adds	r3, r0, #4
 8018ee4:	e7f1      	b.n	8018eca <__exponent+0x58>
	...

08018ee8 <_printf_float>:
 8018ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eec:	b08d      	sub	sp, #52	@ 0x34
 8018eee:	460c      	mov	r4, r1
 8018ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018ef4:	4616      	mov	r6, r2
 8018ef6:	461f      	mov	r7, r3
 8018ef8:	4605      	mov	r5, r0
 8018efa:	f000 fe5d 	bl	8019bb8 <_localeconv_r>
 8018efe:	6803      	ldr	r3, [r0, #0]
 8018f00:	9304      	str	r3, [sp, #16]
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7ef f9e4 	bl	80082d0 <strlen>
 8018f08:	2300      	movs	r3, #0
 8018f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8018f10:	9005      	str	r0, [sp, #20]
 8018f12:	3307      	adds	r3, #7
 8018f14:	f023 0307 	bic.w	r3, r3, #7
 8018f18:	f103 0208 	add.w	r2, r3, #8
 8018f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018f20:	f8d4 b000 	ldr.w	fp, [r4]
 8018f24:	f8c8 2000 	str.w	r2, [r8]
 8018f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018f30:	9307      	str	r3, [sp, #28]
 8018f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8018f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8018f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80191b0 <_printf_float+0x2c8>)
 8018f40:	f04f 32ff 	mov.w	r2, #4294967295
 8018f44:	f7ef fe22 	bl	8008b8c <__aeabi_dcmpun>
 8018f48:	bb70      	cbnz	r0, 8018fa8 <_printf_float+0xc0>
 8018f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f4e:	4b98      	ldr	r3, [pc, #608]	@ (80191b0 <_printf_float+0x2c8>)
 8018f50:	f04f 32ff 	mov.w	r2, #4294967295
 8018f54:	f7ef fdfc 	bl	8008b50 <__aeabi_dcmple>
 8018f58:	bb30      	cbnz	r0, 8018fa8 <_printf_float+0xc0>
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	4640      	mov	r0, r8
 8018f60:	4649      	mov	r1, r9
 8018f62:	f7ef fdeb 	bl	8008b3c <__aeabi_dcmplt>
 8018f66:	b110      	cbz	r0, 8018f6e <_printf_float+0x86>
 8018f68:	232d      	movs	r3, #45	@ 0x2d
 8018f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f6e:	4a91      	ldr	r2, [pc, #580]	@ (80191b4 <_printf_float+0x2cc>)
 8018f70:	4b91      	ldr	r3, [pc, #580]	@ (80191b8 <_printf_float+0x2d0>)
 8018f72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018f76:	bf8c      	ite	hi
 8018f78:	4690      	movhi	r8, r2
 8018f7a:	4698      	movls	r8, r3
 8018f7c:	2303      	movs	r3, #3
 8018f7e:	6123      	str	r3, [r4, #16]
 8018f80:	f02b 0304 	bic.w	r3, fp, #4
 8018f84:	6023      	str	r3, [r4, #0]
 8018f86:	f04f 0900 	mov.w	r9, #0
 8018f8a:	9700      	str	r7, [sp, #0]
 8018f8c:	4633      	mov	r3, r6
 8018f8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018f90:	4621      	mov	r1, r4
 8018f92:	4628      	mov	r0, r5
 8018f94:	f000 f9d2 	bl	801933c <_printf_common>
 8018f98:	3001      	adds	r0, #1
 8018f9a:	f040 808d 	bne.w	80190b8 <_printf_float+0x1d0>
 8018f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8018fa2:	b00d      	add	sp, #52	@ 0x34
 8018fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fa8:	4642      	mov	r2, r8
 8018faa:	464b      	mov	r3, r9
 8018fac:	4640      	mov	r0, r8
 8018fae:	4649      	mov	r1, r9
 8018fb0:	f7ef fdec 	bl	8008b8c <__aeabi_dcmpun>
 8018fb4:	b140      	cbz	r0, 8018fc8 <_printf_float+0xe0>
 8018fb6:	464b      	mov	r3, r9
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	bfbc      	itt	lt
 8018fbc:	232d      	movlt	r3, #45	@ 0x2d
 8018fbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80191bc <_printf_float+0x2d4>)
 8018fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80191c0 <_printf_float+0x2d8>)
 8018fc6:	e7d4      	b.n	8018f72 <_printf_float+0x8a>
 8018fc8:	6863      	ldr	r3, [r4, #4]
 8018fca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8018fce:	9206      	str	r2, [sp, #24]
 8018fd0:	1c5a      	adds	r2, r3, #1
 8018fd2:	d13b      	bne.n	801904c <_printf_float+0x164>
 8018fd4:	2306      	movs	r3, #6
 8018fd6:	6063      	str	r3, [r4, #4]
 8018fd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8018fdc:	2300      	movs	r3, #0
 8018fde:	6022      	str	r2, [r4, #0]
 8018fe0:	9303      	str	r3, [sp, #12]
 8018fe2:	ab0a      	add	r3, sp, #40	@ 0x28
 8018fe4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8018fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8018fea:	9300      	str	r3, [sp, #0]
 8018fec:	6861      	ldr	r1, [r4, #4]
 8018fee:	ec49 8b10 	vmov	d0, r8, r9
 8018ff2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018ff6:	4628      	mov	r0, r5
 8018ff8:	f7ff fed6 	bl	8018da8 <__cvt>
 8018ffc:	9b06      	ldr	r3, [sp, #24]
 8018ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019000:	2b47      	cmp	r3, #71	@ 0x47
 8019002:	4680      	mov	r8, r0
 8019004:	d129      	bne.n	801905a <_printf_float+0x172>
 8019006:	1cc8      	adds	r0, r1, #3
 8019008:	db02      	blt.n	8019010 <_printf_float+0x128>
 801900a:	6863      	ldr	r3, [r4, #4]
 801900c:	4299      	cmp	r1, r3
 801900e:	dd41      	ble.n	8019094 <_printf_float+0x1ac>
 8019010:	f1aa 0a02 	sub.w	sl, sl, #2
 8019014:	fa5f fa8a 	uxtb.w	sl, sl
 8019018:	3901      	subs	r1, #1
 801901a:	4652      	mov	r2, sl
 801901c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019020:	9109      	str	r1, [sp, #36]	@ 0x24
 8019022:	f7ff ff26 	bl	8018e72 <__exponent>
 8019026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019028:	1813      	adds	r3, r2, r0
 801902a:	2a01      	cmp	r2, #1
 801902c:	4681      	mov	r9, r0
 801902e:	6123      	str	r3, [r4, #16]
 8019030:	dc02      	bgt.n	8019038 <_printf_float+0x150>
 8019032:	6822      	ldr	r2, [r4, #0]
 8019034:	07d2      	lsls	r2, r2, #31
 8019036:	d501      	bpl.n	801903c <_printf_float+0x154>
 8019038:	3301      	adds	r3, #1
 801903a:	6123      	str	r3, [r4, #16]
 801903c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019040:	2b00      	cmp	r3, #0
 8019042:	d0a2      	beq.n	8018f8a <_printf_float+0xa2>
 8019044:	232d      	movs	r3, #45	@ 0x2d
 8019046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801904a:	e79e      	b.n	8018f8a <_printf_float+0xa2>
 801904c:	9a06      	ldr	r2, [sp, #24]
 801904e:	2a47      	cmp	r2, #71	@ 0x47
 8019050:	d1c2      	bne.n	8018fd8 <_printf_float+0xf0>
 8019052:	2b00      	cmp	r3, #0
 8019054:	d1c0      	bne.n	8018fd8 <_printf_float+0xf0>
 8019056:	2301      	movs	r3, #1
 8019058:	e7bd      	b.n	8018fd6 <_printf_float+0xee>
 801905a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801905e:	d9db      	bls.n	8019018 <_printf_float+0x130>
 8019060:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019064:	d118      	bne.n	8019098 <_printf_float+0x1b0>
 8019066:	2900      	cmp	r1, #0
 8019068:	6863      	ldr	r3, [r4, #4]
 801906a:	dd0b      	ble.n	8019084 <_printf_float+0x19c>
 801906c:	6121      	str	r1, [r4, #16]
 801906e:	b913      	cbnz	r3, 8019076 <_printf_float+0x18e>
 8019070:	6822      	ldr	r2, [r4, #0]
 8019072:	07d0      	lsls	r0, r2, #31
 8019074:	d502      	bpl.n	801907c <_printf_float+0x194>
 8019076:	3301      	adds	r3, #1
 8019078:	440b      	add	r3, r1
 801907a:	6123      	str	r3, [r4, #16]
 801907c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801907e:	f04f 0900 	mov.w	r9, #0
 8019082:	e7db      	b.n	801903c <_printf_float+0x154>
 8019084:	b913      	cbnz	r3, 801908c <_printf_float+0x1a4>
 8019086:	6822      	ldr	r2, [r4, #0]
 8019088:	07d2      	lsls	r2, r2, #31
 801908a:	d501      	bpl.n	8019090 <_printf_float+0x1a8>
 801908c:	3302      	adds	r3, #2
 801908e:	e7f4      	b.n	801907a <_printf_float+0x192>
 8019090:	2301      	movs	r3, #1
 8019092:	e7f2      	b.n	801907a <_printf_float+0x192>
 8019094:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8019098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801909a:	4299      	cmp	r1, r3
 801909c:	db05      	blt.n	80190aa <_printf_float+0x1c2>
 801909e:	6823      	ldr	r3, [r4, #0]
 80190a0:	6121      	str	r1, [r4, #16]
 80190a2:	07d8      	lsls	r0, r3, #31
 80190a4:	d5ea      	bpl.n	801907c <_printf_float+0x194>
 80190a6:	1c4b      	adds	r3, r1, #1
 80190a8:	e7e7      	b.n	801907a <_printf_float+0x192>
 80190aa:	2900      	cmp	r1, #0
 80190ac:	bfd4      	ite	le
 80190ae:	f1c1 0202 	rsble	r2, r1, #2
 80190b2:	2201      	movgt	r2, #1
 80190b4:	4413      	add	r3, r2
 80190b6:	e7e0      	b.n	801907a <_printf_float+0x192>
 80190b8:	6823      	ldr	r3, [r4, #0]
 80190ba:	055a      	lsls	r2, r3, #21
 80190bc:	d407      	bmi.n	80190ce <_printf_float+0x1e6>
 80190be:	6923      	ldr	r3, [r4, #16]
 80190c0:	4642      	mov	r2, r8
 80190c2:	4631      	mov	r1, r6
 80190c4:	4628      	mov	r0, r5
 80190c6:	47b8      	blx	r7
 80190c8:	3001      	adds	r0, #1
 80190ca:	d12b      	bne.n	8019124 <_printf_float+0x23c>
 80190cc:	e767      	b.n	8018f9e <_printf_float+0xb6>
 80190ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80190d2:	f240 80dd 	bls.w	8019290 <_printf_float+0x3a8>
 80190d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80190da:	2200      	movs	r2, #0
 80190dc:	2300      	movs	r3, #0
 80190de:	f7ef fd23 	bl	8008b28 <__aeabi_dcmpeq>
 80190e2:	2800      	cmp	r0, #0
 80190e4:	d033      	beq.n	801914e <_printf_float+0x266>
 80190e6:	4a37      	ldr	r2, [pc, #220]	@ (80191c4 <_printf_float+0x2dc>)
 80190e8:	2301      	movs	r3, #1
 80190ea:	4631      	mov	r1, r6
 80190ec:	4628      	mov	r0, r5
 80190ee:	47b8      	blx	r7
 80190f0:	3001      	adds	r0, #1
 80190f2:	f43f af54 	beq.w	8018f9e <_printf_float+0xb6>
 80190f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80190fa:	4543      	cmp	r3, r8
 80190fc:	db02      	blt.n	8019104 <_printf_float+0x21c>
 80190fe:	6823      	ldr	r3, [r4, #0]
 8019100:	07d8      	lsls	r0, r3, #31
 8019102:	d50f      	bpl.n	8019124 <_printf_float+0x23c>
 8019104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019108:	4631      	mov	r1, r6
 801910a:	4628      	mov	r0, r5
 801910c:	47b8      	blx	r7
 801910e:	3001      	adds	r0, #1
 8019110:	f43f af45 	beq.w	8018f9e <_printf_float+0xb6>
 8019114:	f04f 0900 	mov.w	r9, #0
 8019118:	f108 38ff 	add.w	r8, r8, #4294967295
 801911c:	f104 0a1a 	add.w	sl, r4, #26
 8019120:	45c8      	cmp	r8, r9
 8019122:	dc09      	bgt.n	8019138 <_printf_float+0x250>
 8019124:	6823      	ldr	r3, [r4, #0]
 8019126:	079b      	lsls	r3, r3, #30
 8019128:	f100 8103 	bmi.w	8019332 <_printf_float+0x44a>
 801912c:	68e0      	ldr	r0, [r4, #12]
 801912e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019130:	4298      	cmp	r0, r3
 8019132:	bfb8      	it	lt
 8019134:	4618      	movlt	r0, r3
 8019136:	e734      	b.n	8018fa2 <_printf_float+0xba>
 8019138:	2301      	movs	r3, #1
 801913a:	4652      	mov	r2, sl
 801913c:	4631      	mov	r1, r6
 801913e:	4628      	mov	r0, r5
 8019140:	47b8      	blx	r7
 8019142:	3001      	adds	r0, #1
 8019144:	f43f af2b 	beq.w	8018f9e <_printf_float+0xb6>
 8019148:	f109 0901 	add.w	r9, r9, #1
 801914c:	e7e8      	b.n	8019120 <_printf_float+0x238>
 801914e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019150:	2b00      	cmp	r3, #0
 8019152:	dc39      	bgt.n	80191c8 <_printf_float+0x2e0>
 8019154:	4a1b      	ldr	r2, [pc, #108]	@ (80191c4 <_printf_float+0x2dc>)
 8019156:	2301      	movs	r3, #1
 8019158:	4631      	mov	r1, r6
 801915a:	4628      	mov	r0, r5
 801915c:	47b8      	blx	r7
 801915e:	3001      	adds	r0, #1
 8019160:	f43f af1d 	beq.w	8018f9e <_printf_float+0xb6>
 8019164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019168:	ea59 0303 	orrs.w	r3, r9, r3
 801916c:	d102      	bne.n	8019174 <_printf_float+0x28c>
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	07d9      	lsls	r1, r3, #31
 8019172:	d5d7      	bpl.n	8019124 <_printf_float+0x23c>
 8019174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019178:	4631      	mov	r1, r6
 801917a:	4628      	mov	r0, r5
 801917c:	47b8      	blx	r7
 801917e:	3001      	adds	r0, #1
 8019180:	f43f af0d 	beq.w	8018f9e <_printf_float+0xb6>
 8019184:	f04f 0a00 	mov.w	sl, #0
 8019188:	f104 0b1a 	add.w	fp, r4, #26
 801918c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801918e:	425b      	negs	r3, r3
 8019190:	4553      	cmp	r3, sl
 8019192:	dc01      	bgt.n	8019198 <_printf_float+0x2b0>
 8019194:	464b      	mov	r3, r9
 8019196:	e793      	b.n	80190c0 <_printf_float+0x1d8>
 8019198:	2301      	movs	r3, #1
 801919a:	465a      	mov	r2, fp
 801919c:	4631      	mov	r1, r6
 801919e:	4628      	mov	r0, r5
 80191a0:	47b8      	blx	r7
 80191a2:	3001      	adds	r0, #1
 80191a4:	f43f aefb 	beq.w	8018f9e <_printf_float+0xb6>
 80191a8:	f10a 0a01 	add.w	sl, sl, #1
 80191ac:	e7ee      	b.n	801918c <_printf_float+0x2a4>
 80191ae:	bf00      	nop
 80191b0:	7fefffff 	.word	0x7fefffff
 80191b4:	0801f256 	.word	0x0801f256
 80191b8:	0801f252 	.word	0x0801f252
 80191bc:	0801f25e 	.word	0x0801f25e
 80191c0:	0801f25a 	.word	0x0801f25a
 80191c4:	0801f3f9 	.word	0x0801f3f9
 80191c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80191ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80191ce:	4553      	cmp	r3, sl
 80191d0:	bfa8      	it	ge
 80191d2:	4653      	movge	r3, sl
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	4699      	mov	r9, r3
 80191d8:	dc36      	bgt.n	8019248 <_printf_float+0x360>
 80191da:	f04f 0b00 	mov.w	fp, #0
 80191de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80191e2:	f104 021a 	add.w	r2, r4, #26
 80191e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80191e8:	9306      	str	r3, [sp, #24]
 80191ea:	eba3 0309 	sub.w	r3, r3, r9
 80191ee:	455b      	cmp	r3, fp
 80191f0:	dc31      	bgt.n	8019256 <_printf_float+0x36e>
 80191f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191f4:	459a      	cmp	sl, r3
 80191f6:	dc3a      	bgt.n	801926e <_printf_float+0x386>
 80191f8:	6823      	ldr	r3, [r4, #0]
 80191fa:	07da      	lsls	r2, r3, #31
 80191fc:	d437      	bmi.n	801926e <_printf_float+0x386>
 80191fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019200:	ebaa 0903 	sub.w	r9, sl, r3
 8019204:	9b06      	ldr	r3, [sp, #24]
 8019206:	ebaa 0303 	sub.w	r3, sl, r3
 801920a:	4599      	cmp	r9, r3
 801920c:	bfa8      	it	ge
 801920e:	4699      	movge	r9, r3
 8019210:	f1b9 0f00 	cmp.w	r9, #0
 8019214:	dc33      	bgt.n	801927e <_printf_float+0x396>
 8019216:	f04f 0800 	mov.w	r8, #0
 801921a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801921e:	f104 0b1a 	add.w	fp, r4, #26
 8019222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019224:	ebaa 0303 	sub.w	r3, sl, r3
 8019228:	eba3 0309 	sub.w	r3, r3, r9
 801922c:	4543      	cmp	r3, r8
 801922e:	f77f af79 	ble.w	8019124 <_printf_float+0x23c>
 8019232:	2301      	movs	r3, #1
 8019234:	465a      	mov	r2, fp
 8019236:	4631      	mov	r1, r6
 8019238:	4628      	mov	r0, r5
 801923a:	47b8      	blx	r7
 801923c:	3001      	adds	r0, #1
 801923e:	f43f aeae 	beq.w	8018f9e <_printf_float+0xb6>
 8019242:	f108 0801 	add.w	r8, r8, #1
 8019246:	e7ec      	b.n	8019222 <_printf_float+0x33a>
 8019248:	4642      	mov	r2, r8
 801924a:	4631      	mov	r1, r6
 801924c:	4628      	mov	r0, r5
 801924e:	47b8      	blx	r7
 8019250:	3001      	adds	r0, #1
 8019252:	d1c2      	bne.n	80191da <_printf_float+0x2f2>
 8019254:	e6a3      	b.n	8018f9e <_printf_float+0xb6>
 8019256:	2301      	movs	r3, #1
 8019258:	4631      	mov	r1, r6
 801925a:	4628      	mov	r0, r5
 801925c:	9206      	str	r2, [sp, #24]
 801925e:	47b8      	blx	r7
 8019260:	3001      	adds	r0, #1
 8019262:	f43f ae9c 	beq.w	8018f9e <_printf_float+0xb6>
 8019266:	9a06      	ldr	r2, [sp, #24]
 8019268:	f10b 0b01 	add.w	fp, fp, #1
 801926c:	e7bb      	b.n	80191e6 <_printf_float+0x2fe>
 801926e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019272:	4631      	mov	r1, r6
 8019274:	4628      	mov	r0, r5
 8019276:	47b8      	blx	r7
 8019278:	3001      	adds	r0, #1
 801927a:	d1c0      	bne.n	80191fe <_printf_float+0x316>
 801927c:	e68f      	b.n	8018f9e <_printf_float+0xb6>
 801927e:	9a06      	ldr	r2, [sp, #24]
 8019280:	464b      	mov	r3, r9
 8019282:	4442      	add	r2, r8
 8019284:	4631      	mov	r1, r6
 8019286:	4628      	mov	r0, r5
 8019288:	47b8      	blx	r7
 801928a:	3001      	adds	r0, #1
 801928c:	d1c3      	bne.n	8019216 <_printf_float+0x32e>
 801928e:	e686      	b.n	8018f9e <_printf_float+0xb6>
 8019290:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019294:	f1ba 0f01 	cmp.w	sl, #1
 8019298:	dc01      	bgt.n	801929e <_printf_float+0x3b6>
 801929a:	07db      	lsls	r3, r3, #31
 801929c:	d536      	bpl.n	801930c <_printf_float+0x424>
 801929e:	2301      	movs	r3, #1
 80192a0:	4642      	mov	r2, r8
 80192a2:	4631      	mov	r1, r6
 80192a4:	4628      	mov	r0, r5
 80192a6:	47b8      	blx	r7
 80192a8:	3001      	adds	r0, #1
 80192aa:	f43f ae78 	beq.w	8018f9e <_printf_float+0xb6>
 80192ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80192b2:	4631      	mov	r1, r6
 80192b4:	4628      	mov	r0, r5
 80192b6:	47b8      	blx	r7
 80192b8:	3001      	adds	r0, #1
 80192ba:	f43f ae70 	beq.w	8018f9e <_printf_float+0xb6>
 80192be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80192c2:	2200      	movs	r2, #0
 80192c4:	2300      	movs	r3, #0
 80192c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80192ca:	f7ef fc2d 	bl	8008b28 <__aeabi_dcmpeq>
 80192ce:	b9c0      	cbnz	r0, 8019302 <_printf_float+0x41a>
 80192d0:	4653      	mov	r3, sl
 80192d2:	f108 0201 	add.w	r2, r8, #1
 80192d6:	4631      	mov	r1, r6
 80192d8:	4628      	mov	r0, r5
 80192da:	47b8      	blx	r7
 80192dc:	3001      	adds	r0, #1
 80192de:	d10c      	bne.n	80192fa <_printf_float+0x412>
 80192e0:	e65d      	b.n	8018f9e <_printf_float+0xb6>
 80192e2:	2301      	movs	r3, #1
 80192e4:	465a      	mov	r2, fp
 80192e6:	4631      	mov	r1, r6
 80192e8:	4628      	mov	r0, r5
 80192ea:	47b8      	blx	r7
 80192ec:	3001      	adds	r0, #1
 80192ee:	f43f ae56 	beq.w	8018f9e <_printf_float+0xb6>
 80192f2:	f108 0801 	add.w	r8, r8, #1
 80192f6:	45d0      	cmp	r8, sl
 80192f8:	dbf3      	blt.n	80192e2 <_printf_float+0x3fa>
 80192fa:	464b      	mov	r3, r9
 80192fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019300:	e6df      	b.n	80190c2 <_printf_float+0x1da>
 8019302:	f04f 0800 	mov.w	r8, #0
 8019306:	f104 0b1a 	add.w	fp, r4, #26
 801930a:	e7f4      	b.n	80192f6 <_printf_float+0x40e>
 801930c:	2301      	movs	r3, #1
 801930e:	4642      	mov	r2, r8
 8019310:	e7e1      	b.n	80192d6 <_printf_float+0x3ee>
 8019312:	2301      	movs	r3, #1
 8019314:	464a      	mov	r2, r9
 8019316:	4631      	mov	r1, r6
 8019318:	4628      	mov	r0, r5
 801931a:	47b8      	blx	r7
 801931c:	3001      	adds	r0, #1
 801931e:	f43f ae3e 	beq.w	8018f9e <_printf_float+0xb6>
 8019322:	f108 0801 	add.w	r8, r8, #1
 8019326:	68e3      	ldr	r3, [r4, #12]
 8019328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801932a:	1a5b      	subs	r3, r3, r1
 801932c:	4543      	cmp	r3, r8
 801932e:	dcf0      	bgt.n	8019312 <_printf_float+0x42a>
 8019330:	e6fc      	b.n	801912c <_printf_float+0x244>
 8019332:	f04f 0800 	mov.w	r8, #0
 8019336:	f104 0919 	add.w	r9, r4, #25
 801933a:	e7f4      	b.n	8019326 <_printf_float+0x43e>

0801933c <_printf_common>:
 801933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019340:	4616      	mov	r6, r2
 8019342:	4698      	mov	r8, r3
 8019344:	688a      	ldr	r2, [r1, #8]
 8019346:	690b      	ldr	r3, [r1, #16]
 8019348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801934c:	4293      	cmp	r3, r2
 801934e:	bfb8      	it	lt
 8019350:	4613      	movlt	r3, r2
 8019352:	6033      	str	r3, [r6, #0]
 8019354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019358:	4607      	mov	r7, r0
 801935a:	460c      	mov	r4, r1
 801935c:	b10a      	cbz	r2, 8019362 <_printf_common+0x26>
 801935e:	3301      	adds	r3, #1
 8019360:	6033      	str	r3, [r6, #0]
 8019362:	6823      	ldr	r3, [r4, #0]
 8019364:	0699      	lsls	r1, r3, #26
 8019366:	bf42      	ittt	mi
 8019368:	6833      	ldrmi	r3, [r6, #0]
 801936a:	3302      	addmi	r3, #2
 801936c:	6033      	strmi	r3, [r6, #0]
 801936e:	6825      	ldr	r5, [r4, #0]
 8019370:	f015 0506 	ands.w	r5, r5, #6
 8019374:	d106      	bne.n	8019384 <_printf_common+0x48>
 8019376:	f104 0a19 	add.w	sl, r4, #25
 801937a:	68e3      	ldr	r3, [r4, #12]
 801937c:	6832      	ldr	r2, [r6, #0]
 801937e:	1a9b      	subs	r3, r3, r2
 8019380:	42ab      	cmp	r3, r5
 8019382:	dc26      	bgt.n	80193d2 <_printf_common+0x96>
 8019384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019388:	6822      	ldr	r2, [r4, #0]
 801938a:	3b00      	subs	r3, #0
 801938c:	bf18      	it	ne
 801938e:	2301      	movne	r3, #1
 8019390:	0692      	lsls	r2, r2, #26
 8019392:	d42b      	bmi.n	80193ec <_printf_common+0xb0>
 8019394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019398:	4641      	mov	r1, r8
 801939a:	4638      	mov	r0, r7
 801939c:	47c8      	blx	r9
 801939e:	3001      	adds	r0, #1
 80193a0:	d01e      	beq.n	80193e0 <_printf_common+0xa4>
 80193a2:	6823      	ldr	r3, [r4, #0]
 80193a4:	6922      	ldr	r2, [r4, #16]
 80193a6:	f003 0306 	and.w	r3, r3, #6
 80193aa:	2b04      	cmp	r3, #4
 80193ac:	bf02      	ittt	eq
 80193ae:	68e5      	ldreq	r5, [r4, #12]
 80193b0:	6833      	ldreq	r3, [r6, #0]
 80193b2:	1aed      	subeq	r5, r5, r3
 80193b4:	68a3      	ldr	r3, [r4, #8]
 80193b6:	bf0c      	ite	eq
 80193b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80193bc:	2500      	movne	r5, #0
 80193be:	4293      	cmp	r3, r2
 80193c0:	bfc4      	itt	gt
 80193c2:	1a9b      	subgt	r3, r3, r2
 80193c4:	18ed      	addgt	r5, r5, r3
 80193c6:	2600      	movs	r6, #0
 80193c8:	341a      	adds	r4, #26
 80193ca:	42b5      	cmp	r5, r6
 80193cc:	d11a      	bne.n	8019404 <_printf_common+0xc8>
 80193ce:	2000      	movs	r0, #0
 80193d0:	e008      	b.n	80193e4 <_printf_common+0xa8>
 80193d2:	2301      	movs	r3, #1
 80193d4:	4652      	mov	r2, sl
 80193d6:	4641      	mov	r1, r8
 80193d8:	4638      	mov	r0, r7
 80193da:	47c8      	blx	r9
 80193dc:	3001      	adds	r0, #1
 80193de:	d103      	bne.n	80193e8 <_printf_common+0xac>
 80193e0:	f04f 30ff 	mov.w	r0, #4294967295
 80193e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193e8:	3501      	adds	r5, #1
 80193ea:	e7c6      	b.n	801937a <_printf_common+0x3e>
 80193ec:	18e1      	adds	r1, r4, r3
 80193ee:	1c5a      	adds	r2, r3, #1
 80193f0:	2030      	movs	r0, #48	@ 0x30
 80193f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80193f6:	4422      	add	r2, r4
 80193f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80193fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019400:	3302      	adds	r3, #2
 8019402:	e7c7      	b.n	8019394 <_printf_common+0x58>
 8019404:	2301      	movs	r3, #1
 8019406:	4622      	mov	r2, r4
 8019408:	4641      	mov	r1, r8
 801940a:	4638      	mov	r0, r7
 801940c:	47c8      	blx	r9
 801940e:	3001      	adds	r0, #1
 8019410:	d0e6      	beq.n	80193e0 <_printf_common+0xa4>
 8019412:	3601      	adds	r6, #1
 8019414:	e7d9      	b.n	80193ca <_printf_common+0x8e>
	...

08019418 <_printf_i>:
 8019418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801941c:	7e0f      	ldrb	r7, [r1, #24]
 801941e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019420:	2f78      	cmp	r7, #120	@ 0x78
 8019422:	4691      	mov	r9, r2
 8019424:	4680      	mov	r8, r0
 8019426:	460c      	mov	r4, r1
 8019428:	469a      	mov	sl, r3
 801942a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801942e:	d807      	bhi.n	8019440 <_printf_i+0x28>
 8019430:	2f62      	cmp	r7, #98	@ 0x62
 8019432:	d80a      	bhi.n	801944a <_printf_i+0x32>
 8019434:	2f00      	cmp	r7, #0
 8019436:	f000 80d1 	beq.w	80195dc <_printf_i+0x1c4>
 801943a:	2f58      	cmp	r7, #88	@ 0x58
 801943c:	f000 80b8 	beq.w	80195b0 <_printf_i+0x198>
 8019440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019448:	e03a      	b.n	80194c0 <_printf_i+0xa8>
 801944a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801944e:	2b15      	cmp	r3, #21
 8019450:	d8f6      	bhi.n	8019440 <_printf_i+0x28>
 8019452:	a101      	add	r1, pc, #4	@ (adr r1, 8019458 <_printf_i+0x40>)
 8019454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019458:	080194b1 	.word	0x080194b1
 801945c:	080194c5 	.word	0x080194c5
 8019460:	08019441 	.word	0x08019441
 8019464:	08019441 	.word	0x08019441
 8019468:	08019441 	.word	0x08019441
 801946c:	08019441 	.word	0x08019441
 8019470:	080194c5 	.word	0x080194c5
 8019474:	08019441 	.word	0x08019441
 8019478:	08019441 	.word	0x08019441
 801947c:	08019441 	.word	0x08019441
 8019480:	08019441 	.word	0x08019441
 8019484:	080195c3 	.word	0x080195c3
 8019488:	080194ef 	.word	0x080194ef
 801948c:	0801957d 	.word	0x0801957d
 8019490:	08019441 	.word	0x08019441
 8019494:	08019441 	.word	0x08019441
 8019498:	080195e5 	.word	0x080195e5
 801949c:	08019441 	.word	0x08019441
 80194a0:	080194ef 	.word	0x080194ef
 80194a4:	08019441 	.word	0x08019441
 80194a8:	08019441 	.word	0x08019441
 80194ac:	08019585 	.word	0x08019585
 80194b0:	6833      	ldr	r3, [r6, #0]
 80194b2:	1d1a      	adds	r2, r3, #4
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	6032      	str	r2, [r6, #0]
 80194b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80194bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80194c0:	2301      	movs	r3, #1
 80194c2:	e09c      	b.n	80195fe <_printf_i+0x1e6>
 80194c4:	6833      	ldr	r3, [r6, #0]
 80194c6:	6820      	ldr	r0, [r4, #0]
 80194c8:	1d19      	adds	r1, r3, #4
 80194ca:	6031      	str	r1, [r6, #0]
 80194cc:	0606      	lsls	r6, r0, #24
 80194ce:	d501      	bpl.n	80194d4 <_printf_i+0xbc>
 80194d0:	681d      	ldr	r5, [r3, #0]
 80194d2:	e003      	b.n	80194dc <_printf_i+0xc4>
 80194d4:	0645      	lsls	r5, r0, #25
 80194d6:	d5fb      	bpl.n	80194d0 <_printf_i+0xb8>
 80194d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80194dc:	2d00      	cmp	r5, #0
 80194de:	da03      	bge.n	80194e8 <_printf_i+0xd0>
 80194e0:	232d      	movs	r3, #45	@ 0x2d
 80194e2:	426d      	negs	r5, r5
 80194e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80194e8:	4858      	ldr	r0, [pc, #352]	@ (801964c <_printf_i+0x234>)
 80194ea:	230a      	movs	r3, #10
 80194ec:	e011      	b.n	8019512 <_printf_i+0xfa>
 80194ee:	6821      	ldr	r1, [r4, #0]
 80194f0:	6833      	ldr	r3, [r6, #0]
 80194f2:	0608      	lsls	r0, r1, #24
 80194f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80194f8:	d402      	bmi.n	8019500 <_printf_i+0xe8>
 80194fa:	0649      	lsls	r1, r1, #25
 80194fc:	bf48      	it	mi
 80194fe:	b2ad      	uxthmi	r5, r5
 8019500:	2f6f      	cmp	r7, #111	@ 0x6f
 8019502:	4852      	ldr	r0, [pc, #328]	@ (801964c <_printf_i+0x234>)
 8019504:	6033      	str	r3, [r6, #0]
 8019506:	bf14      	ite	ne
 8019508:	230a      	movne	r3, #10
 801950a:	2308      	moveq	r3, #8
 801950c:	2100      	movs	r1, #0
 801950e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019512:	6866      	ldr	r6, [r4, #4]
 8019514:	60a6      	str	r6, [r4, #8]
 8019516:	2e00      	cmp	r6, #0
 8019518:	db05      	blt.n	8019526 <_printf_i+0x10e>
 801951a:	6821      	ldr	r1, [r4, #0]
 801951c:	432e      	orrs	r6, r5
 801951e:	f021 0104 	bic.w	r1, r1, #4
 8019522:	6021      	str	r1, [r4, #0]
 8019524:	d04b      	beq.n	80195be <_printf_i+0x1a6>
 8019526:	4616      	mov	r6, r2
 8019528:	fbb5 f1f3 	udiv	r1, r5, r3
 801952c:	fb03 5711 	mls	r7, r3, r1, r5
 8019530:	5dc7      	ldrb	r7, [r0, r7]
 8019532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019536:	462f      	mov	r7, r5
 8019538:	42bb      	cmp	r3, r7
 801953a:	460d      	mov	r5, r1
 801953c:	d9f4      	bls.n	8019528 <_printf_i+0x110>
 801953e:	2b08      	cmp	r3, #8
 8019540:	d10b      	bne.n	801955a <_printf_i+0x142>
 8019542:	6823      	ldr	r3, [r4, #0]
 8019544:	07df      	lsls	r7, r3, #31
 8019546:	d508      	bpl.n	801955a <_printf_i+0x142>
 8019548:	6923      	ldr	r3, [r4, #16]
 801954a:	6861      	ldr	r1, [r4, #4]
 801954c:	4299      	cmp	r1, r3
 801954e:	bfde      	ittt	le
 8019550:	2330      	movle	r3, #48	@ 0x30
 8019552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019556:	f106 36ff 	addle.w	r6, r6, #4294967295
 801955a:	1b92      	subs	r2, r2, r6
 801955c:	6122      	str	r2, [r4, #16]
 801955e:	f8cd a000 	str.w	sl, [sp]
 8019562:	464b      	mov	r3, r9
 8019564:	aa03      	add	r2, sp, #12
 8019566:	4621      	mov	r1, r4
 8019568:	4640      	mov	r0, r8
 801956a:	f7ff fee7 	bl	801933c <_printf_common>
 801956e:	3001      	adds	r0, #1
 8019570:	d14a      	bne.n	8019608 <_printf_i+0x1f0>
 8019572:	f04f 30ff 	mov.w	r0, #4294967295
 8019576:	b004      	add	sp, #16
 8019578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801957c:	6823      	ldr	r3, [r4, #0]
 801957e:	f043 0320 	orr.w	r3, r3, #32
 8019582:	6023      	str	r3, [r4, #0]
 8019584:	4832      	ldr	r0, [pc, #200]	@ (8019650 <_printf_i+0x238>)
 8019586:	2778      	movs	r7, #120	@ 0x78
 8019588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801958c:	6823      	ldr	r3, [r4, #0]
 801958e:	6831      	ldr	r1, [r6, #0]
 8019590:	061f      	lsls	r7, r3, #24
 8019592:	f851 5b04 	ldr.w	r5, [r1], #4
 8019596:	d402      	bmi.n	801959e <_printf_i+0x186>
 8019598:	065f      	lsls	r7, r3, #25
 801959a:	bf48      	it	mi
 801959c:	b2ad      	uxthmi	r5, r5
 801959e:	6031      	str	r1, [r6, #0]
 80195a0:	07d9      	lsls	r1, r3, #31
 80195a2:	bf44      	itt	mi
 80195a4:	f043 0320 	orrmi.w	r3, r3, #32
 80195a8:	6023      	strmi	r3, [r4, #0]
 80195aa:	b11d      	cbz	r5, 80195b4 <_printf_i+0x19c>
 80195ac:	2310      	movs	r3, #16
 80195ae:	e7ad      	b.n	801950c <_printf_i+0xf4>
 80195b0:	4826      	ldr	r0, [pc, #152]	@ (801964c <_printf_i+0x234>)
 80195b2:	e7e9      	b.n	8019588 <_printf_i+0x170>
 80195b4:	6823      	ldr	r3, [r4, #0]
 80195b6:	f023 0320 	bic.w	r3, r3, #32
 80195ba:	6023      	str	r3, [r4, #0]
 80195bc:	e7f6      	b.n	80195ac <_printf_i+0x194>
 80195be:	4616      	mov	r6, r2
 80195c0:	e7bd      	b.n	801953e <_printf_i+0x126>
 80195c2:	6833      	ldr	r3, [r6, #0]
 80195c4:	6825      	ldr	r5, [r4, #0]
 80195c6:	6961      	ldr	r1, [r4, #20]
 80195c8:	1d18      	adds	r0, r3, #4
 80195ca:	6030      	str	r0, [r6, #0]
 80195cc:	062e      	lsls	r6, r5, #24
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	d501      	bpl.n	80195d6 <_printf_i+0x1be>
 80195d2:	6019      	str	r1, [r3, #0]
 80195d4:	e002      	b.n	80195dc <_printf_i+0x1c4>
 80195d6:	0668      	lsls	r0, r5, #25
 80195d8:	d5fb      	bpl.n	80195d2 <_printf_i+0x1ba>
 80195da:	8019      	strh	r1, [r3, #0]
 80195dc:	2300      	movs	r3, #0
 80195de:	6123      	str	r3, [r4, #16]
 80195e0:	4616      	mov	r6, r2
 80195e2:	e7bc      	b.n	801955e <_printf_i+0x146>
 80195e4:	6833      	ldr	r3, [r6, #0]
 80195e6:	1d1a      	adds	r2, r3, #4
 80195e8:	6032      	str	r2, [r6, #0]
 80195ea:	681e      	ldr	r6, [r3, #0]
 80195ec:	6862      	ldr	r2, [r4, #4]
 80195ee:	2100      	movs	r1, #0
 80195f0:	4630      	mov	r0, r6
 80195f2:	f7ee fe1d 	bl	8008230 <memchr>
 80195f6:	b108      	cbz	r0, 80195fc <_printf_i+0x1e4>
 80195f8:	1b80      	subs	r0, r0, r6
 80195fa:	6060      	str	r0, [r4, #4]
 80195fc:	6863      	ldr	r3, [r4, #4]
 80195fe:	6123      	str	r3, [r4, #16]
 8019600:	2300      	movs	r3, #0
 8019602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019606:	e7aa      	b.n	801955e <_printf_i+0x146>
 8019608:	6923      	ldr	r3, [r4, #16]
 801960a:	4632      	mov	r2, r6
 801960c:	4649      	mov	r1, r9
 801960e:	4640      	mov	r0, r8
 8019610:	47d0      	blx	sl
 8019612:	3001      	adds	r0, #1
 8019614:	d0ad      	beq.n	8019572 <_printf_i+0x15a>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	079b      	lsls	r3, r3, #30
 801961a:	d413      	bmi.n	8019644 <_printf_i+0x22c>
 801961c:	68e0      	ldr	r0, [r4, #12]
 801961e:	9b03      	ldr	r3, [sp, #12]
 8019620:	4298      	cmp	r0, r3
 8019622:	bfb8      	it	lt
 8019624:	4618      	movlt	r0, r3
 8019626:	e7a6      	b.n	8019576 <_printf_i+0x15e>
 8019628:	2301      	movs	r3, #1
 801962a:	4632      	mov	r2, r6
 801962c:	4649      	mov	r1, r9
 801962e:	4640      	mov	r0, r8
 8019630:	47d0      	blx	sl
 8019632:	3001      	adds	r0, #1
 8019634:	d09d      	beq.n	8019572 <_printf_i+0x15a>
 8019636:	3501      	adds	r5, #1
 8019638:	68e3      	ldr	r3, [r4, #12]
 801963a:	9903      	ldr	r1, [sp, #12]
 801963c:	1a5b      	subs	r3, r3, r1
 801963e:	42ab      	cmp	r3, r5
 8019640:	dcf2      	bgt.n	8019628 <_printf_i+0x210>
 8019642:	e7eb      	b.n	801961c <_printf_i+0x204>
 8019644:	2500      	movs	r5, #0
 8019646:	f104 0619 	add.w	r6, r4, #25
 801964a:	e7f5      	b.n	8019638 <_printf_i+0x220>
 801964c:	0801f262 	.word	0x0801f262
 8019650:	0801f273 	.word	0x0801f273

08019654 <std>:
 8019654:	2300      	movs	r3, #0
 8019656:	b510      	push	{r4, lr}
 8019658:	4604      	mov	r4, r0
 801965a:	e9c0 3300 	strd	r3, r3, [r0]
 801965e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019662:	6083      	str	r3, [r0, #8]
 8019664:	8181      	strh	r1, [r0, #12]
 8019666:	6643      	str	r3, [r0, #100]	@ 0x64
 8019668:	81c2      	strh	r2, [r0, #14]
 801966a:	6183      	str	r3, [r0, #24]
 801966c:	4619      	mov	r1, r3
 801966e:	2208      	movs	r2, #8
 8019670:	305c      	adds	r0, #92	@ 0x5c
 8019672:	f000 fa5d 	bl	8019b30 <memset>
 8019676:	4b0d      	ldr	r3, [pc, #52]	@ (80196ac <std+0x58>)
 8019678:	6263      	str	r3, [r4, #36]	@ 0x24
 801967a:	4b0d      	ldr	r3, [pc, #52]	@ (80196b0 <std+0x5c>)
 801967c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801967e:	4b0d      	ldr	r3, [pc, #52]	@ (80196b4 <std+0x60>)
 8019680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019682:	4b0d      	ldr	r3, [pc, #52]	@ (80196b8 <std+0x64>)
 8019684:	6323      	str	r3, [r4, #48]	@ 0x30
 8019686:	4b0d      	ldr	r3, [pc, #52]	@ (80196bc <std+0x68>)
 8019688:	6224      	str	r4, [r4, #32]
 801968a:	429c      	cmp	r4, r3
 801968c:	d006      	beq.n	801969c <std+0x48>
 801968e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019692:	4294      	cmp	r4, r2
 8019694:	d002      	beq.n	801969c <std+0x48>
 8019696:	33d0      	adds	r3, #208	@ 0xd0
 8019698:	429c      	cmp	r4, r3
 801969a:	d105      	bne.n	80196a8 <std+0x54>
 801969c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80196a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196a4:	f000 bb0c 	b.w	8019cc0 <__retarget_lock_init_recursive>
 80196a8:	bd10      	pop	{r4, pc}
 80196aa:	bf00      	nop
 80196ac:	08019905 	.word	0x08019905
 80196b0:	0801992b 	.word	0x0801992b
 80196b4:	08019963 	.word	0x08019963
 80196b8:	08019987 	.word	0x08019987
 80196bc:	20014304 	.word	0x20014304

080196c0 <stdio_exit_handler>:
 80196c0:	4a02      	ldr	r2, [pc, #8]	@ (80196cc <stdio_exit_handler+0xc>)
 80196c2:	4903      	ldr	r1, [pc, #12]	@ (80196d0 <stdio_exit_handler+0x10>)
 80196c4:	4803      	ldr	r0, [pc, #12]	@ (80196d4 <stdio_exit_handler+0x14>)
 80196c6:	f000 b869 	b.w	801979c <_fwalk_sglue>
 80196ca:	bf00      	nop
 80196cc:	2000009c 	.word	0x2000009c
 80196d0:	0801c6d9 	.word	0x0801c6d9
 80196d4:	20000218 	.word	0x20000218

080196d8 <cleanup_stdio>:
 80196d8:	6841      	ldr	r1, [r0, #4]
 80196da:	4b0c      	ldr	r3, [pc, #48]	@ (801970c <cleanup_stdio+0x34>)
 80196dc:	4299      	cmp	r1, r3
 80196de:	b510      	push	{r4, lr}
 80196e0:	4604      	mov	r4, r0
 80196e2:	d001      	beq.n	80196e8 <cleanup_stdio+0x10>
 80196e4:	f002 fff8 	bl	801c6d8 <_fflush_r>
 80196e8:	68a1      	ldr	r1, [r4, #8]
 80196ea:	4b09      	ldr	r3, [pc, #36]	@ (8019710 <cleanup_stdio+0x38>)
 80196ec:	4299      	cmp	r1, r3
 80196ee:	d002      	beq.n	80196f6 <cleanup_stdio+0x1e>
 80196f0:	4620      	mov	r0, r4
 80196f2:	f002 fff1 	bl	801c6d8 <_fflush_r>
 80196f6:	68e1      	ldr	r1, [r4, #12]
 80196f8:	4b06      	ldr	r3, [pc, #24]	@ (8019714 <cleanup_stdio+0x3c>)
 80196fa:	4299      	cmp	r1, r3
 80196fc:	d004      	beq.n	8019708 <cleanup_stdio+0x30>
 80196fe:	4620      	mov	r0, r4
 8019700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019704:	f002 bfe8 	b.w	801c6d8 <_fflush_r>
 8019708:	bd10      	pop	{r4, pc}
 801970a:	bf00      	nop
 801970c:	20014304 	.word	0x20014304
 8019710:	2001436c 	.word	0x2001436c
 8019714:	200143d4 	.word	0x200143d4

08019718 <global_stdio_init.part.0>:
 8019718:	b510      	push	{r4, lr}
 801971a:	4b0b      	ldr	r3, [pc, #44]	@ (8019748 <global_stdio_init.part.0+0x30>)
 801971c:	4c0b      	ldr	r4, [pc, #44]	@ (801974c <global_stdio_init.part.0+0x34>)
 801971e:	4a0c      	ldr	r2, [pc, #48]	@ (8019750 <global_stdio_init.part.0+0x38>)
 8019720:	601a      	str	r2, [r3, #0]
 8019722:	4620      	mov	r0, r4
 8019724:	2200      	movs	r2, #0
 8019726:	2104      	movs	r1, #4
 8019728:	f7ff ff94 	bl	8019654 <std>
 801972c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019730:	2201      	movs	r2, #1
 8019732:	2109      	movs	r1, #9
 8019734:	f7ff ff8e 	bl	8019654 <std>
 8019738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801973c:	2202      	movs	r2, #2
 801973e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019742:	2112      	movs	r1, #18
 8019744:	f7ff bf86 	b.w	8019654 <std>
 8019748:	2001443c 	.word	0x2001443c
 801974c:	20014304 	.word	0x20014304
 8019750:	080196c1 	.word	0x080196c1

08019754 <__sfp_lock_acquire>:
 8019754:	4801      	ldr	r0, [pc, #4]	@ (801975c <__sfp_lock_acquire+0x8>)
 8019756:	f000 bab4 	b.w	8019cc2 <__retarget_lock_acquire_recursive>
 801975a:	bf00      	nop
 801975c:	20014445 	.word	0x20014445

08019760 <__sfp_lock_release>:
 8019760:	4801      	ldr	r0, [pc, #4]	@ (8019768 <__sfp_lock_release+0x8>)
 8019762:	f000 baaf 	b.w	8019cc4 <__retarget_lock_release_recursive>
 8019766:	bf00      	nop
 8019768:	20014445 	.word	0x20014445

0801976c <__sinit>:
 801976c:	b510      	push	{r4, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	f7ff fff0 	bl	8019754 <__sfp_lock_acquire>
 8019774:	6a23      	ldr	r3, [r4, #32]
 8019776:	b11b      	cbz	r3, 8019780 <__sinit+0x14>
 8019778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801977c:	f7ff bff0 	b.w	8019760 <__sfp_lock_release>
 8019780:	4b04      	ldr	r3, [pc, #16]	@ (8019794 <__sinit+0x28>)
 8019782:	6223      	str	r3, [r4, #32]
 8019784:	4b04      	ldr	r3, [pc, #16]	@ (8019798 <__sinit+0x2c>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d1f5      	bne.n	8019778 <__sinit+0xc>
 801978c:	f7ff ffc4 	bl	8019718 <global_stdio_init.part.0>
 8019790:	e7f2      	b.n	8019778 <__sinit+0xc>
 8019792:	bf00      	nop
 8019794:	080196d9 	.word	0x080196d9
 8019798:	2001443c 	.word	0x2001443c

0801979c <_fwalk_sglue>:
 801979c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197a0:	4607      	mov	r7, r0
 80197a2:	4688      	mov	r8, r1
 80197a4:	4614      	mov	r4, r2
 80197a6:	2600      	movs	r6, #0
 80197a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80197ac:	f1b9 0901 	subs.w	r9, r9, #1
 80197b0:	d505      	bpl.n	80197be <_fwalk_sglue+0x22>
 80197b2:	6824      	ldr	r4, [r4, #0]
 80197b4:	2c00      	cmp	r4, #0
 80197b6:	d1f7      	bne.n	80197a8 <_fwalk_sglue+0xc>
 80197b8:	4630      	mov	r0, r6
 80197ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197be:	89ab      	ldrh	r3, [r5, #12]
 80197c0:	2b01      	cmp	r3, #1
 80197c2:	d907      	bls.n	80197d4 <_fwalk_sglue+0x38>
 80197c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80197c8:	3301      	adds	r3, #1
 80197ca:	d003      	beq.n	80197d4 <_fwalk_sglue+0x38>
 80197cc:	4629      	mov	r1, r5
 80197ce:	4638      	mov	r0, r7
 80197d0:	47c0      	blx	r8
 80197d2:	4306      	orrs	r6, r0
 80197d4:	3568      	adds	r5, #104	@ 0x68
 80197d6:	e7e9      	b.n	80197ac <_fwalk_sglue+0x10>

080197d8 <iprintf>:
 80197d8:	b40f      	push	{r0, r1, r2, r3}
 80197da:	b507      	push	{r0, r1, r2, lr}
 80197dc:	4906      	ldr	r1, [pc, #24]	@ (80197f8 <iprintf+0x20>)
 80197de:	ab04      	add	r3, sp, #16
 80197e0:	6808      	ldr	r0, [r1, #0]
 80197e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80197e6:	6881      	ldr	r1, [r0, #8]
 80197e8:	9301      	str	r3, [sp, #4]
 80197ea:	f002 fc8b 	bl	801c104 <_vfiprintf_r>
 80197ee:	b003      	add	sp, #12
 80197f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80197f4:	b004      	add	sp, #16
 80197f6:	4770      	bx	lr
 80197f8:	20000214 	.word	0x20000214

080197fc <sniprintf>:
 80197fc:	b40c      	push	{r2, r3}
 80197fe:	b530      	push	{r4, r5, lr}
 8019800:	4b18      	ldr	r3, [pc, #96]	@ (8019864 <sniprintf+0x68>)
 8019802:	1e0c      	subs	r4, r1, #0
 8019804:	681d      	ldr	r5, [r3, #0]
 8019806:	b09d      	sub	sp, #116	@ 0x74
 8019808:	da08      	bge.n	801981c <sniprintf+0x20>
 801980a:	238b      	movs	r3, #139	@ 0x8b
 801980c:	602b      	str	r3, [r5, #0]
 801980e:	f04f 30ff 	mov.w	r0, #4294967295
 8019812:	b01d      	add	sp, #116	@ 0x74
 8019814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019818:	b002      	add	sp, #8
 801981a:	4770      	bx	lr
 801981c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019820:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019824:	f04f 0300 	mov.w	r3, #0
 8019828:	931b      	str	r3, [sp, #108]	@ 0x6c
 801982a:	bf14      	ite	ne
 801982c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019830:	4623      	moveq	r3, r4
 8019832:	9304      	str	r3, [sp, #16]
 8019834:	9307      	str	r3, [sp, #28]
 8019836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801983a:	9002      	str	r0, [sp, #8]
 801983c:	9006      	str	r0, [sp, #24]
 801983e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019842:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019844:	ab21      	add	r3, sp, #132	@ 0x84
 8019846:	a902      	add	r1, sp, #8
 8019848:	4628      	mov	r0, r5
 801984a:	9301      	str	r3, [sp, #4]
 801984c:	f002 f964 	bl	801bb18 <_svfiprintf_r>
 8019850:	1c43      	adds	r3, r0, #1
 8019852:	bfbc      	itt	lt
 8019854:	238b      	movlt	r3, #139	@ 0x8b
 8019856:	602b      	strlt	r3, [r5, #0]
 8019858:	2c00      	cmp	r4, #0
 801985a:	d0da      	beq.n	8019812 <sniprintf+0x16>
 801985c:	9b02      	ldr	r3, [sp, #8]
 801985e:	2200      	movs	r2, #0
 8019860:	701a      	strb	r2, [r3, #0]
 8019862:	e7d6      	b.n	8019812 <sniprintf+0x16>
 8019864:	20000214 	.word	0x20000214

08019868 <siprintf>:
 8019868:	b40e      	push	{r1, r2, r3}
 801986a:	b510      	push	{r4, lr}
 801986c:	b09d      	sub	sp, #116	@ 0x74
 801986e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019870:	9002      	str	r0, [sp, #8]
 8019872:	9006      	str	r0, [sp, #24]
 8019874:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019878:	480a      	ldr	r0, [pc, #40]	@ (80198a4 <siprintf+0x3c>)
 801987a:	9107      	str	r1, [sp, #28]
 801987c:	9104      	str	r1, [sp, #16]
 801987e:	490a      	ldr	r1, [pc, #40]	@ (80198a8 <siprintf+0x40>)
 8019880:	f853 2b04 	ldr.w	r2, [r3], #4
 8019884:	9105      	str	r1, [sp, #20]
 8019886:	2400      	movs	r4, #0
 8019888:	a902      	add	r1, sp, #8
 801988a:	6800      	ldr	r0, [r0, #0]
 801988c:	9301      	str	r3, [sp, #4]
 801988e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019890:	f002 f942 	bl	801bb18 <_svfiprintf_r>
 8019894:	9b02      	ldr	r3, [sp, #8]
 8019896:	701c      	strb	r4, [r3, #0]
 8019898:	b01d      	add	sp, #116	@ 0x74
 801989a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801989e:	b003      	add	sp, #12
 80198a0:	4770      	bx	lr
 80198a2:	bf00      	nop
 80198a4:	20000214 	.word	0x20000214
 80198a8:	ffff0208 	.word	0xffff0208

080198ac <siscanf>:
 80198ac:	b40e      	push	{r1, r2, r3}
 80198ae:	b570      	push	{r4, r5, r6, lr}
 80198b0:	b09d      	sub	sp, #116	@ 0x74
 80198b2:	ac21      	add	r4, sp, #132	@ 0x84
 80198b4:	2500      	movs	r5, #0
 80198b6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80198ba:	f854 6b04 	ldr.w	r6, [r4], #4
 80198be:	f8ad 2014 	strh.w	r2, [sp, #20]
 80198c2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80198c4:	9002      	str	r0, [sp, #8]
 80198c6:	9006      	str	r0, [sp, #24]
 80198c8:	f7ee fd02 	bl	80082d0 <strlen>
 80198cc:	4b0b      	ldr	r3, [pc, #44]	@ (80198fc <siscanf+0x50>)
 80198ce:	9003      	str	r0, [sp, #12]
 80198d0:	9007      	str	r0, [sp, #28]
 80198d2:	480b      	ldr	r0, [pc, #44]	@ (8019900 <siscanf+0x54>)
 80198d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80198d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80198da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80198de:	4632      	mov	r2, r6
 80198e0:	4623      	mov	r3, r4
 80198e2:	a902      	add	r1, sp, #8
 80198e4:	6800      	ldr	r0, [r0, #0]
 80198e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80198e8:	9514      	str	r5, [sp, #80]	@ 0x50
 80198ea:	9401      	str	r4, [sp, #4]
 80198ec:	f002 fa6a 	bl	801bdc4 <__ssvfiscanf_r>
 80198f0:	b01d      	add	sp, #116	@ 0x74
 80198f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198f6:	b003      	add	sp, #12
 80198f8:	4770      	bx	lr
 80198fa:	bf00      	nop
 80198fc:	08019927 	.word	0x08019927
 8019900:	20000214 	.word	0x20000214

08019904 <__sread>:
 8019904:	b510      	push	{r4, lr}
 8019906:	460c      	mov	r4, r1
 8019908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801990c:	f000 f97a 	bl	8019c04 <_read_r>
 8019910:	2800      	cmp	r0, #0
 8019912:	bfab      	itete	ge
 8019914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019916:	89a3      	ldrhlt	r3, [r4, #12]
 8019918:	181b      	addge	r3, r3, r0
 801991a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801991e:	bfac      	ite	ge
 8019920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019922:	81a3      	strhlt	r3, [r4, #12]
 8019924:	bd10      	pop	{r4, pc}

08019926 <__seofread>:
 8019926:	2000      	movs	r0, #0
 8019928:	4770      	bx	lr

0801992a <__swrite>:
 801992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801992e:	461f      	mov	r7, r3
 8019930:	898b      	ldrh	r3, [r1, #12]
 8019932:	05db      	lsls	r3, r3, #23
 8019934:	4605      	mov	r5, r0
 8019936:	460c      	mov	r4, r1
 8019938:	4616      	mov	r6, r2
 801993a:	d505      	bpl.n	8019948 <__swrite+0x1e>
 801993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019940:	2302      	movs	r3, #2
 8019942:	2200      	movs	r2, #0
 8019944:	f000 f94c 	bl	8019be0 <_lseek_r>
 8019948:	89a3      	ldrh	r3, [r4, #12]
 801994a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801994e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019952:	81a3      	strh	r3, [r4, #12]
 8019954:	4632      	mov	r2, r6
 8019956:	463b      	mov	r3, r7
 8019958:	4628      	mov	r0, r5
 801995a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801995e:	f000 b973 	b.w	8019c48 <_write_r>

08019962 <__sseek>:
 8019962:	b510      	push	{r4, lr}
 8019964:	460c      	mov	r4, r1
 8019966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801996a:	f000 f939 	bl	8019be0 <_lseek_r>
 801996e:	1c43      	adds	r3, r0, #1
 8019970:	89a3      	ldrh	r3, [r4, #12]
 8019972:	bf15      	itete	ne
 8019974:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801997a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801997e:	81a3      	strheq	r3, [r4, #12]
 8019980:	bf18      	it	ne
 8019982:	81a3      	strhne	r3, [r4, #12]
 8019984:	bd10      	pop	{r4, pc}

08019986 <__sclose>:
 8019986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801998a:	f000 b919 	b.w	8019bc0 <_close_r>

0801998e <_vsniprintf_r>:
 801998e:	b530      	push	{r4, r5, lr}
 8019990:	4614      	mov	r4, r2
 8019992:	2c00      	cmp	r4, #0
 8019994:	b09b      	sub	sp, #108	@ 0x6c
 8019996:	4605      	mov	r5, r0
 8019998:	461a      	mov	r2, r3
 801999a:	da05      	bge.n	80199a8 <_vsniprintf_r+0x1a>
 801999c:	238b      	movs	r3, #139	@ 0x8b
 801999e:	6003      	str	r3, [r0, #0]
 80199a0:	f04f 30ff 	mov.w	r0, #4294967295
 80199a4:	b01b      	add	sp, #108	@ 0x6c
 80199a6:	bd30      	pop	{r4, r5, pc}
 80199a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80199ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80199b0:	f04f 0300 	mov.w	r3, #0
 80199b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80199b6:	bf14      	ite	ne
 80199b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80199bc:	4623      	moveq	r3, r4
 80199be:	9302      	str	r3, [sp, #8]
 80199c0:	9305      	str	r3, [sp, #20]
 80199c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199c6:	9100      	str	r1, [sp, #0]
 80199c8:	9104      	str	r1, [sp, #16]
 80199ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80199ce:	4669      	mov	r1, sp
 80199d0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80199d2:	f002 f8a1 	bl	801bb18 <_svfiprintf_r>
 80199d6:	1c43      	adds	r3, r0, #1
 80199d8:	bfbc      	itt	lt
 80199da:	238b      	movlt	r3, #139	@ 0x8b
 80199dc:	602b      	strlt	r3, [r5, #0]
 80199de:	2c00      	cmp	r4, #0
 80199e0:	d0e0      	beq.n	80199a4 <_vsniprintf_r+0x16>
 80199e2:	9b00      	ldr	r3, [sp, #0]
 80199e4:	2200      	movs	r2, #0
 80199e6:	701a      	strb	r2, [r3, #0]
 80199e8:	e7dc      	b.n	80199a4 <_vsniprintf_r+0x16>
	...

080199ec <vsniprintf>:
 80199ec:	b507      	push	{r0, r1, r2, lr}
 80199ee:	9300      	str	r3, [sp, #0]
 80199f0:	4613      	mov	r3, r2
 80199f2:	460a      	mov	r2, r1
 80199f4:	4601      	mov	r1, r0
 80199f6:	4803      	ldr	r0, [pc, #12]	@ (8019a04 <vsniprintf+0x18>)
 80199f8:	6800      	ldr	r0, [r0, #0]
 80199fa:	f7ff ffc8 	bl	801998e <_vsniprintf_r>
 80199fe:	b003      	add	sp, #12
 8019a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a04:	20000214 	.word	0x20000214

08019a08 <__swbuf_r>:
 8019a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a0a:	460e      	mov	r6, r1
 8019a0c:	4614      	mov	r4, r2
 8019a0e:	4605      	mov	r5, r0
 8019a10:	b118      	cbz	r0, 8019a1a <__swbuf_r+0x12>
 8019a12:	6a03      	ldr	r3, [r0, #32]
 8019a14:	b90b      	cbnz	r3, 8019a1a <__swbuf_r+0x12>
 8019a16:	f7ff fea9 	bl	801976c <__sinit>
 8019a1a:	69a3      	ldr	r3, [r4, #24]
 8019a1c:	60a3      	str	r3, [r4, #8]
 8019a1e:	89a3      	ldrh	r3, [r4, #12]
 8019a20:	071a      	lsls	r2, r3, #28
 8019a22:	d501      	bpl.n	8019a28 <__swbuf_r+0x20>
 8019a24:	6923      	ldr	r3, [r4, #16]
 8019a26:	b943      	cbnz	r3, 8019a3a <__swbuf_r+0x32>
 8019a28:	4621      	mov	r1, r4
 8019a2a:	4628      	mov	r0, r5
 8019a2c:	f000 f82a 	bl	8019a84 <__swsetup_r>
 8019a30:	b118      	cbz	r0, 8019a3a <__swbuf_r+0x32>
 8019a32:	f04f 37ff 	mov.w	r7, #4294967295
 8019a36:	4638      	mov	r0, r7
 8019a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a3a:	6823      	ldr	r3, [r4, #0]
 8019a3c:	6922      	ldr	r2, [r4, #16]
 8019a3e:	1a98      	subs	r0, r3, r2
 8019a40:	6963      	ldr	r3, [r4, #20]
 8019a42:	b2f6      	uxtb	r6, r6
 8019a44:	4283      	cmp	r3, r0
 8019a46:	4637      	mov	r7, r6
 8019a48:	dc05      	bgt.n	8019a56 <__swbuf_r+0x4e>
 8019a4a:	4621      	mov	r1, r4
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	f002 fe43 	bl	801c6d8 <_fflush_r>
 8019a52:	2800      	cmp	r0, #0
 8019a54:	d1ed      	bne.n	8019a32 <__swbuf_r+0x2a>
 8019a56:	68a3      	ldr	r3, [r4, #8]
 8019a58:	3b01      	subs	r3, #1
 8019a5a:	60a3      	str	r3, [r4, #8]
 8019a5c:	6823      	ldr	r3, [r4, #0]
 8019a5e:	1c5a      	adds	r2, r3, #1
 8019a60:	6022      	str	r2, [r4, #0]
 8019a62:	701e      	strb	r6, [r3, #0]
 8019a64:	6962      	ldr	r2, [r4, #20]
 8019a66:	1c43      	adds	r3, r0, #1
 8019a68:	429a      	cmp	r2, r3
 8019a6a:	d004      	beq.n	8019a76 <__swbuf_r+0x6e>
 8019a6c:	89a3      	ldrh	r3, [r4, #12]
 8019a6e:	07db      	lsls	r3, r3, #31
 8019a70:	d5e1      	bpl.n	8019a36 <__swbuf_r+0x2e>
 8019a72:	2e0a      	cmp	r6, #10
 8019a74:	d1df      	bne.n	8019a36 <__swbuf_r+0x2e>
 8019a76:	4621      	mov	r1, r4
 8019a78:	4628      	mov	r0, r5
 8019a7a:	f002 fe2d 	bl	801c6d8 <_fflush_r>
 8019a7e:	2800      	cmp	r0, #0
 8019a80:	d0d9      	beq.n	8019a36 <__swbuf_r+0x2e>
 8019a82:	e7d6      	b.n	8019a32 <__swbuf_r+0x2a>

08019a84 <__swsetup_r>:
 8019a84:	b538      	push	{r3, r4, r5, lr}
 8019a86:	4b29      	ldr	r3, [pc, #164]	@ (8019b2c <__swsetup_r+0xa8>)
 8019a88:	4605      	mov	r5, r0
 8019a8a:	6818      	ldr	r0, [r3, #0]
 8019a8c:	460c      	mov	r4, r1
 8019a8e:	b118      	cbz	r0, 8019a98 <__swsetup_r+0x14>
 8019a90:	6a03      	ldr	r3, [r0, #32]
 8019a92:	b90b      	cbnz	r3, 8019a98 <__swsetup_r+0x14>
 8019a94:	f7ff fe6a 	bl	801976c <__sinit>
 8019a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a9c:	0719      	lsls	r1, r3, #28
 8019a9e:	d422      	bmi.n	8019ae6 <__swsetup_r+0x62>
 8019aa0:	06da      	lsls	r2, r3, #27
 8019aa2:	d407      	bmi.n	8019ab4 <__swsetup_r+0x30>
 8019aa4:	2209      	movs	r2, #9
 8019aa6:	602a      	str	r2, [r5, #0]
 8019aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019aac:	81a3      	strh	r3, [r4, #12]
 8019aae:	f04f 30ff 	mov.w	r0, #4294967295
 8019ab2:	e033      	b.n	8019b1c <__swsetup_r+0x98>
 8019ab4:	0758      	lsls	r0, r3, #29
 8019ab6:	d512      	bpl.n	8019ade <__swsetup_r+0x5a>
 8019ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019aba:	b141      	cbz	r1, 8019ace <__swsetup_r+0x4a>
 8019abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019ac0:	4299      	cmp	r1, r3
 8019ac2:	d002      	beq.n	8019aca <__swsetup_r+0x46>
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	f000 ff77 	bl	801a9b8 <_free_r>
 8019aca:	2300      	movs	r3, #0
 8019acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8019ace:	89a3      	ldrh	r3, [r4, #12]
 8019ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019ad4:	81a3      	strh	r3, [r4, #12]
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	6063      	str	r3, [r4, #4]
 8019ada:	6923      	ldr	r3, [r4, #16]
 8019adc:	6023      	str	r3, [r4, #0]
 8019ade:	89a3      	ldrh	r3, [r4, #12]
 8019ae0:	f043 0308 	orr.w	r3, r3, #8
 8019ae4:	81a3      	strh	r3, [r4, #12]
 8019ae6:	6923      	ldr	r3, [r4, #16]
 8019ae8:	b94b      	cbnz	r3, 8019afe <__swsetup_r+0x7a>
 8019aea:	89a3      	ldrh	r3, [r4, #12]
 8019aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019af4:	d003      	beq.n	8019afe <__swsetup_r+0x7a>
 8019af6:	4621      	mov	r1, r4
 8019af8:	4628      	mov	r0, r5
 8019afa:	f002 fe3b 	bl	801c774 <__smakebuf_r>
 8019afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b02:	f013 0201 	ands.w	r2, r3, #1
 8019b06:	d00a      	beq.n	8019b1e <__swsetup_r+0x9a>
 8019b08:	2200      	movs	r2, #0
 8019b0a:	60a2      	str	r2, [r4, #8]
 8019b0c:	6962      	ldr	r2, [r4, #20]
 8019b0e:	4252      	negs	r2, r2
 8019b10:	61a2      	str	r2, [r4, #24]
 8019b12:	6922      	ldr	r2, [r4, #16]
 8019b14:	b942      	cbnz	r2, 8019b28 <__swsetup_r+0xa4>
 8019b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019b1a:	d1c5      	bne.n	8019aa8 <__swsetup_r+0x24>
 8019b1c:	bd38      	pop	{r3, r4, r5, pc}
 8019b1e:	0799      	lsls	r1, r3, #30
 8019b20:	bf58      	it	pl
 8019b22:	6962      	ldrpl	r2, [r4, #20]
 8019b24:	60a2      	str	r2, [r4, #8]
 8019b26:	e7f4      	b.n	8019b12 <__swsetup_r+0x8e>
 8019b28:	2000      	movs	r0, #0
 8019b2a:	e7f7      	b.n	8019b1c <__swsetup_r+0x98>
 8019b2c:	20000214 	.word	0x20000214

08019b30 <memset>:
 8019b30:	4402      	add	r2, r0
 8019b32:	4603      	mov	r3, r0
 8019b34:	4293      	cmp	r3, r2
 8019b36:	d100      	bne.n	8019b3a <memset+0xa>
 8019b38:	4770      	bx	lr
 8019b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8019b3e:	e7f9      	b.n	8019b34 <memset+0x4>

08019b40 <strncmp>:
 8019b40:	b510      	push	{r4, lr}
 8019b42:	b16a      	cbz	r2, 8019b60 <strncmp+0x20>
 8019b44:	3901      	subs	r1, #1
 8019b46:	1884      	adds	r4, r0, r2
 8019b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019b50:	429a      	cmp	r2, r3
 8019b52:	d103      	bne.n	8019b5c <strncmp+0x1c>
 8019b54:	42a0      	cmp	r0, r4
 8019b56:	d001      	beq.n	8019b5c <strncmp+0x1c>
 8019b58:	2a00      	cmp	r2, #0
 8019b5a:	d1f5      	bne.n	8019b48 <strncmp+0x8>
 8019b5c:	1ad0      	subs	r0, r2, r3
 8019b5e:	bd10      	pop	{r4, pc}
 8019b60:	4610      	mov	r0, r2
 8019b62:	e7fc      	b.n	8019b5e <strncmp+0x1e>

08019b64 <strncpy>:
 8019b64:	b510      	push	{r4, lr}
 8019b66:	3901      	subs	r1, #1
 8019b68:	4603      	mov	r3, r0
 8019b6a:	b132      	cbz	r2, 8019b7a <strncpy+0x16>
 8019b6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019b70:	f803 4b01 	strb.w	r4, [r3], #1
 8019b74:	3a01      	subs	r2, #1
 8019b76:	2c00      	cmp	r4, #0
 8019b78:	d1f7      	bne.n	8019b6a <strncpy+0x6>
 8019b7a:	441a      	add	r2, r3
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	4293      	cmp	r3, r2
 8019b80:	d100      	bne.n	8019b84 <strncpy+0x20>
 8019b82:	bd10      	pop	{r4, pc}
 8019b84:	f803 1b01 	strb.w	r1, [r3], #1
 8019b88:	e7f9      	b.n	8019b7e <strncpy+0x1a>

08019b8a <strstr>:
 8019b8a:	780a      	ldrb	r2, [r1, #0]
 8019b8c:	b570      	push	{r4, r5, r6, lr}
 8019b8e:	b96a      	cbnz	r2, 8019bac <strstr+0x22>
 8019b90:	bd70      	pop	{r4, r5, r6, pc}
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d109      	bne.n	8019baa <strstr+0x20>
 8019b96:	460c      	mov	r4, r1
 8019b98:	4605      	mov	r5, r0
 8019b9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d0f6      	beq.n	8019b90 <strstr+0x6>
 8019ba2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019ba6:	429e      	cmp	r6, r3
 8019ba8:	d0f7      	beq.n	8019b9a <strstr+0x10>
 8019baa:	3001      	adds	r0, #1
 8019bac:	7803      	ldrb	r3, [r0, #0]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d1ef      	bne.n	8019b92 <strstr+0x8>
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	e7ec      	b.n	8019b90 <strstr+0x6>
	...

08019bb8 <_localeconv_r>:
 8019bb8:	4800      	ldr	r0, [pc, #0]	@ (8019bbc <_localeconv_r+0x4>)
 8019bba:	4770      	bx	lr
 8019bbc:	20000198 	.word	0x20000198

08019bc0 <_close_r>:
 8019bc0:	b538      	push	{r3, r4, r5, lr}
 8019bc2:	4d06      	ldr	r5, [pc, #24]	@ (8019bdc <_close_r+0x1c>)
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	4608      	mov	r0, r1
 8019bca:	602b      	str	r3, [r5, #0]
 8019bcc:	f7f7 f820 	bl	8010c10 <_close>
 8019bd0:	1c43      	adds	r3, r0, #1
 8019bd2:	d102      	bne.n	8019bda <_close_r+0x1a>
 8019bd4:	682b      	ldr	r3, [r5, #0]
 8019bd6:	b103      	cbz	r3, 8019bda <_close_r+0x1a>
 8019bd8:	6023      	str	r3, [r4, #0]
 8019bda:	bd38      	pop	{r3, r4, r5, pc}
 8019bdc:	20014440 	.word	0x20014440

08019be0 <_lseek_r>:
 8019be0:	b538      	push	{r3, r4, r5, lr}
 8019be2:	4d07      	ldr	r5, [pc, #28]	@ (8019c00 <_lseek_r+0x20>)
 8019be4:	4604      	mov	r4, r0
 8019be6:	4608      	mov	r0, r1
 8019be8:	4611      	mov	r1, r2
 8019bea:	2200      	movs	r2, #0
 8019bec:	602a      	str	r2, [r5, #0]
 8019bee:	461a      	mov	r2, r3
 8019bf0:	f7f7 f835 	bl	8010c5e <_lseek>
 8019bf4:	1c43      	adds	r3, r0, #1
 8019bf6:	d102      	bne.n	8019bfe <_lseek_r+0x1e>
 8019bf8:	682b      	ldr	r3, [r5, #0]
 8019bfa:	b103      	cbz	r3, 8019bfe <_lseek_r+0x1e>
 8019bfc:	6023      	str	r3, [r4, #0]
 8019bfe:	bd38      	pop	{r3, r4, r5, pc}
 8019c00:	20014440 	.word	0x20014440

08019c04 <_read_r>:
 8019c04:	b538      	push	{r3, r4, r5, lr}
 8019c06:	4d07      	ldr	r5, [pc, #28]	@ (8019c24 <_read_r+0x20>)
 8019c08:	4604      	mov	r4, r0
 8019c0a:	4608      	mov	r0, r1
 8019c0c:	4611      	mov	r1, r2
 8019c0e:	2200      	movs	r2, #0
 8019c10:	602a      	str	r2, [r5, #0]
 8019c12:	461a      	mov	r2, r3
 8019c14:	f7f6 ffc3 	bl	8010b9e <_read>
 8019c18:	1c43      	adds	r3, r0, #1
 8019c1a:	d102      	bne.n	8019c22 <_read_r+0x1e>
 8019c1c:	682b      	ldr	r3, [r5, #0]
 8019c1e:	b103      	cbz	r3, 8019c22 <_read_r+0x1e>
 8019c20:	6023      	str	r3, [r4, #0]
 8019c22:	bd38      	pop	{r3, r4, r5, pc}
 8019c24:	20014440 	.word	0x20014440

08019c28 <_sbrk_r>:
 8019c28:	b538      	push	{r3, r4, r5, lr}
 8019c2a:	4d06      	ldr	r5, [pc, #24]	@ (8019c44 <_sbrk_r+0x1c>)
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	4604      	mov	r4, r0
 8019c30:	4608      	mov	r0, r1
 8019c32:	602b      	str	r3, [r5, #0]
 8019c34:	f003 f806 	bl	801cc44 <_sbrk>
 8019c38:	1c43      	adds	r3, r0, #1
 8019c3a:	d102      	bne.n	8019c42 <_sbrk_r+0x1a>
 8019c3c:	682b      	ldr	r3, [r5, #0]
 8019c3e:	b103      	cbz	r3, 8019c42 <_sbrk_r+0x1a>
 8019c40:	6023      	str	r3, [r4, #0]
 8019c42:	bd38      	pop	{r3, r4, r5, pc}
 8019c44:	20014440 	.word	0x20014440

08019c48 <_write_r>:
 8019c48:	b538      	push	{r3, r4, r5, lr}
 8019c4a:	4d07      	ldr	r5, [pc, #28]	@ (8019c68 <_write_r+0x20>)
 8019c4c:	4604      	mov	r4, r0
 8019c4e:	4608      	mov	r0, r1
 8019c50:	4611      	mov	r1, r2
 8019c52:	2200      	movs	r2, #0
 8019c54:	602a      	str	r2, [r5, #0]
 8019c56:	461a      	mov	r2, r3
 8019c58:	f7f6 ffbe 	bl	8010bd8 <_write>
 8019c5c:	1c43      	adds	r3, r0, #1
 8019c5e:	d102      	bne.n	8019c66 <_write_r+0x1e>
 8019c60:	682b      	ldr	r3, [r5, #0]
 8019c62:	b103      	cbz	r3, 8019c66 <_write_r+0x1e>
 8019c64:	6023      	str	r3, [r4, #0]
 8019c66:	bd38      	pop	{r3, r4, r5, pc}
 8019c68:	20014440 	.word	0x20014440

08019c6c <__errno>:
 8019c6c:	4b01      	ldr	r3, [pc, #4]	@ (8019c74 <__errno+0x8>)
 8019c6e:	6818      	ldr	r0, [r3, #0]
 8019c70:	4770      	bx	lr
 8019c72:	bf00      	nop
 8019c74:	20000214 	.word	0x20000214

08019c78 <__libc_init_array>:
 8019c78:	b570      	push	{r4, r5, r6, lr}
 8019c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8019cb0 <__libc_init_array+0x38>)
 8019c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8019cb4 <__libc_init_array+0x3c>)
 8019c7e:	1b64      	subs	r4, r4, r5
 8019c80:	10a4      	asrs	r4, r4, #2
 8019c82:	2600      	movs	r6, #0
 8019c84:	42a6      	cmp	r6, r4
 8019c86:	d109      	bne.n	8019c9c <__libc_init_array+0x24>
 8019c88:	4d0b      	ldr	r5, [pc, #44]	@ (8019cb8 <__libc_init_array+0x40>)
 8019c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8019cbc <__libc_init_array+0x44>)
 8019c8c:	f002 ffe8 	bl	801cc60 <_init>
 8019c90:	1b64      	subs	r4, r4, r5
 8019c92:	10a4      	asrs	r4, r4, #2
 8019c94:	2600      	movs	r6, #0
 8019c96:	42a6      	cmp	r6, r4
 8019c98:	d105      	bne.n	8019ca6 <__libc_init_array+0x2e>
 8019c9a:	bd70      	pop	{r4, r5, r6, pc}
 8019c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ca0:	4798      	blx	r3
 8019ca2:	3601      	adds	r6, #1
 8019ca4:	e7ee      	b.n	8019c84 <__libc_init_array+0xc>
 8019ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019caa:	4798      	blx	r3
 8019cac:	3601      	adds	r6, #1
 8019cae:	e7f2      	b.n	8019c96 <__libc_init_array+0x1e>
 8019cb0:	0801f698 	.word	0x0801f698
 8019cb4:	0801f698 	.word	0x0801f698
 8019cb8:	0801f698 	.word	0x0801f698
 8019cbc:	0801f69c 	.word	0x0801f69c

08019cc0 <__retarget_lock_init_recursive>:
 8019cc0:	4770      	bx	lr

08019cc2 <__retarget_lock_acquire_recursive>:
 8019cc2:	4770      	bx	lr

08019cc4 <__retarget_lock_release_recursive>:
 8019cc4:	4770      	bx	lr

08019cc6 <strcpy>:
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ccc:	f803 2b01 	strb.w	r2, [r3], #1
 8019cd0:	2a00      	cmp	r2, #0
 8019cd2:	d1f9      	bne.n	8019cc8 <strcpy+0x2>
 8019cd4:	4770      	bx	lr

08019cd6 <memcpy>:
 8019cd6:	440a      	add	r2, r1
 8019cd8:	4291      	cmp	r1, r2
 8019cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8019cde:	d100      	bne.n	8019ce2 <memcpy+0xc>
 8019ce0:	4770      	bx	lr
 8019ce2:	b510      	push	{r4, lr}
 8019ce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019cec:	4291      	cmp	r1, r2
 8019cee:	d1f9      	bne.n	8019ce4 <memcpy+0xe>
 8019cf0:	bd10      	pop	{r4, pc}
 8019cf2:	0000      	movs	r0, r0
 8019cf4:	0000      	movs	r0, r0
	...

08019cf8 <nan>:
 8019cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019d00 <nan+0x8>
 8019cfc:	4770      	bx	lr
 8019cfe:	bf00      	nop
 8019d00:	00000000 	.word	0x00000000
 8019d04:	7ff80000 	.word	0x7ff80000

08019d08 <quorem>:
 8019d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d0c:	6903      	ldr	r3, [r0, #16]
 8019d0e:	690c      	ldr	r4, [r1, #16]
 8019d10:	42a3      	cmp	r3, r4
 8019d12:	4607      	mov	r7, r0
 8019d14:	db7e      	blt.n	8019e14 <quorem+0x10c>
 8019d16:	3c01      	subs	r4, #1
 8019d18:	f101 0814 	add.w	r8, r1, #20
 8019d1c:	00a3      	lsls	r3, r4, #2
 8019d1e:	f100 0514 	add.w	r5, r0, #20
 8019d22:	9300      	str	r3, [sp, #0]
 8019d24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019d28:	9301      	str	r3, [sp, #4]
 8019d2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019d2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019d32:	3301      	adds	r3, #1
 8019d34:	429a      	cmp	r2, r3
 8019d36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019d3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8019d3e:	d32e      	bcc.n	8019d9e <quorem+0x96>
 8019d40:	f04f 0a00 	mov.w	sl, #0
 8019d44:	46c4      	mov	ip, r8
 8019d46:	46ae      	mov	lr, r5
 8019d48:	46d3      	mov	fp, sl
 8019d4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019d4e:	b298      	uxth	r0, r3
 8019d50:	fb06 a000 	mla	r0, r6, r0, sl
 8019d54:	0c02      	lsrs	r2, r0, #16
 8019d56:	0c1b      	lsrs	r3, r3, #16
 8019d58:	fb06 2303 	mla	r3, r6, r3, r2
 8019d5c:	f8de 2000 	ldr.w	r2, [lr]
 8019d60:	b280      	uxth	r0, r0
 8019d62:	b292      	uxth	r2, r2
 8019d64:	1a12      	subs	r2, r2, r0
 8019d66:	445a      	add	r2, fp
 8019d68:	f8de 0000 	ldr.w	r0, [lr]
 8019d6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019d70:	b29b      	uxth	r3, r3
 8019d72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019d76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019d7a:	b292      	uxth	r2, r2
 8019d7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019d80:	45e1      	cmp	r9, ip
 8019d82:	f84e 2b04 	str.w	r2, [lr], #4
 8019d86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019d8a:	d2de      	bcs.n	8019d4a <quorem+0x42>
 8019d8c:	9b00      	ldr	r3, [sp, #0]
 8019d8e:	58eb      	ldr	r3, [r5, r3]
 8019d90:	b92b      	cbnz	r3, 8019d9e <quorem+0x96>
 8019d92:	9b01      	ldr	r3, [sp, #4]
 8019d94:	3b04      	subs	r3, #4
 8019d96:	429d      	cmp	r5, r3
 8019d98:	461a      	mov	r2, r3
 8019d9a:	d32f      	bcc.n	8019dfc <quorem+0xf4>
 8019d9c:	613c      	str	r4, [r7, #16]
 8019d9e:	4638      	mov	r0, r7
 8019da0:	f001 fc5c 	bl	801b65c <__mcmp>
 8019da4:	2800      	cmp	r0, #0
 8019da6:	db25      	blt.n	8019df4 <quorem+0xec>
 8019da8:	4629      	mov	r1, r5
 8019daa:	2000      	movs	r0, #0
 8019dac:	f858 2b04 	ldr.w	r2, [r8], #4
 8019db0:	f8d1 c000 	ldr.w	ip, [r1]
 8019db4:	fa1f fe82 	uxth.w	lr, r2
 8019db8:	fa1f f38c 	uxth.w	r3, ip
 8019dbc:	eba3 030e 	sub.w	r3, r3, lr
 8019dc0:	4403      	add	r3, r0
 8019dc2:	0c12      	lsrs	r2, r2, #16
 8019dc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019dc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019dd2:	45c1      	cmp	r9, r8
 8019dd4:	f841 3b04 	str.w	r3, [r1], #4
 8019dd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019ddc:	d2e6      	bcs.n	8019dac <quorem+0xa4>
 8019dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019de6:	b922      	cbnz	r2, 8019df2 <quorem+0xea>
 8019de8:	3b04      	subs	r3, #4
 8019dea:	429d      	cmp	r5, r3
 8019dec:	461a      	mov	r2, r3
 8019dee:	d30b      	bcc.n	8019e08 <quorem+0x100>
 8019df0:	613c      	str	r4, [r7, #16]
 8019df2:	3601      	adds	r6, #1
 8019df4:	4630      	mov	r0, r6
 8019df6:	b003      	add	sp, #12
 8019df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dfc:	6812      	ldr	r2, [r2, #0]
 8019dfe:	3b04      	subs	r3, #4
 8019e00:	2a00      	cmp	r2, #0
 8019e02:	d1cb      	bne.n	8019d9c <quorem+0x94>
 8019e04:	3c01      	subs	r4, #1
 8019e06:	e7c6      	b.n	8019d96 <quorem+0x8e>
 8019e08:	6812      	ldr	r2, [r2, #0]
 8019e0a:	3b04      	subs	r3, #4
 8019e0c:	2a00      	cmp	r2, #0
 8019e0e:	d1ef      	bne.n	8019df0 <quorem+0xe8>
 8019e10:	3c01      	subs	r4, #1
 8019e12:	e7ea      	b.n	8019dea <quorem+0xe2>
 8019e14:	2000      	movs	r0, #0
 8019e16:	e7ee      	b.n	8019df6 <quorem+0xee>

08019e18 <_dtoa_r>:
 8019e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	69c7      	ldr	r7, [r0, #28]
 8019e1e:	b097      	sub	sp, #92	@ 0x5c
 8019e20:	ed8d 0b04 	vstr	d0, [sp, #16]
 8019e24:	ec55 4b10 	vmov	r4, r5, d0
 8019e28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019e2a:	9107      	str	r1, [sp, #28]
 8019e2c:	4681      	mov	r9, r0
 8019e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019e30:	9311      	str	r3, [sp, #68]	@ 0x44
 8019e32:	b97f      	cbnz	r7, 8019e54 <_dtoa_r+0x3c>
 8019e34:	2010      	movs	r0, #16
 8019e36:	f7fe f8b5 	bl	8017fa4 <malloc>
 8019e3a:	4602      	mov	r2, r0
 8019e3c:	f8c9 001c 	str.w	r0, [r9, #28]
 8019e40:	b920      	cbnz	r0, 8019e4c <_dtoa_r+0x34>
 8019e42:	4ba9      	ldr	r3, [pc, #676]	@ (801a0e8 <_dtoa_r+0x2d0>)
 8019e44:	21ef      	movs	r1, #239	@ 0xef
 8019e46:	48a9      	ldr	r0, [pc, #676]	@ (801a0ec <_dtoa_r+0x2d4>)
 8019e48:	f002 fd80 	bl	801c94c <__assert_func>
 8019e4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019e50:	6007      	str	r7, [r0, #0]
 8019e52:	60c7      	str	r7, [r0, #12]
 8019e54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019e58:	6819      	ldr	r1, [r3, #0]
 8019e5a:	b159      	cbz	r1, 8019e74 <_dtoa_r+0x5c>
 8019e5c:	685a      	ldr	r2, [r3, #4]
 8019e5e:	604a      	str	r2, [r1, #4]
 8019e60:	2301      	movs	r3, #1
 8019e62:	4093      	lsls	r3, r2
 8019e64:	608b      	str	r3, [r1, #8]
 8019e66:	4648      	mov	r0, r9
 8019e68:	f001 f97c 	bl	801b164 <_Bfree>
 8019e6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019e70:	2200      	movs	r2, #0
 8019e72:	601a      	str	r2, [r3, #0]
 8019e74:	1e2b      	subs	r3, r5, #0
 8019e76:	bfb9      	ittee	lt
 8019e78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019e7c:	9305      	strlt	r3, [sp, #20]
 8019e7e:	2300      	movge	r3, #0
 8019e80:	6033      	strge	r3, [r6, #0]
 8019e82:	9f05      	ldr	r7, [sp, #20]
 8019e84:	4b9a      	ldr	r3, [pc, #616]	@ (801a0f0 <_dtoa_r+0x2d8>)
 8019e86:	bfbc      	itt	lt
 8019e88:	2201      	movlt	r2, #1
 8019e8a:	6032      	strlt	r2, [r6, #0]
 8019e8c:	43bb      	bics	r3, r7
 8019e8e:	d112      	bne.n	8019eb6 <_dtoa_r+0x9e>
 8019e90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019e92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019e96:	6013      	str	r3, [r2, #0]
 8019e98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019e9c:	4323      	orrs	r3, r4
 8019e9e:	f000 855a 	beq.w	801a956 <_dtoa_r+0xb3e>
 8019ea2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019ea4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801a104 <_dtoa_r+0x2ec>
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	f000 855c 	beq.w	801a966 <_dtoa_r+0xb4e>
 8019eae:	f10a 0303 	add.w	r3, sl, #3
 8019eb2:	f000 bd56 	b.w	801a962 <_dtoa_r+0xb4a>
 8019eb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	ec51 0b17 	vmov	r0, r1, d7
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8019ec6:	f7ee fe2f 	bl	8008b28 <__aeabi_dcmpeq>
 8019eca:	4680      	mov	r8, r0
 8019ecc:	b158      	cbz	r0, 8019ee6 <_dtoa_r+0xce>
 8019ece:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	6013      	str	r3, [r2, #0]
 8019ed4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019ed6:	b113      	cbz	r3, 8019ede <_dtoa_r+0xc6>
 8019ed8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019eda:	4b86      	ldr	r3, [pc, #536]	@ (801a0f4 <_dtoa_r+0x2dc>)
 8019edc:	6013      	str	r3, [r2, #0]
 8019ede:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801a108 <_dtoa_r+0x2f0>
 8019ee2:	f000 bd40 	b.w	801a966 <_dtoa_r+0xb4e>
 8019ee6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8019eea:	aa14      	add	r2, sp, #80	@ 0x50
 8019eec:	a915      	add	r1, sp, #84	@ 0x54
 8019eee:	4648      	mov	r0, r9
 8019ef0:	f001 fcd4 	bl	801b89c <__d2b>
 8019ef4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8019ef8:	9002      	str	r0, [sp, #8]
 8019efa:	2e00      	cmp	r6, #0
 8019efc:	d078      	beq.n	8019ff0 <_dtoa_r+0x1d8>
 8019efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019f00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8019f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019f0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8019f10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8019f14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8019f18:	4619      	mov	r1, r3
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	4b76      	ldr	r3, [pc, #472]	@ (801a0f8 <_dtoa_r+0x2e0>)
 8019f1e:	f7ee f9e3 	bl	80082e8 <__aeabi_dsub>
 8019f22:	a36b      	add	r3, pc, #428	@ (adr r3, 801a0d0 <_dtoa_r+0x2b8>)
 8019f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f28:	f7ee fb96 	bl	8008658 <__aeabi_dmul>
 8019f2c:	a36a      	add	r3, pc, #424	@ (adr r3, 801a0d8 <_dtoa_r+0x2c0>)
 8019f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f32:	f7ee f9db 	bl	80082ec <__adddf3>
 8019f36:	4604      	mov	r4, r0
 8019f38:	4630      	mov	r0, r6
 8019f3a:	460d      	mov	r5, r1
 8019f3c:	f7ee fb22 	bl	8008584 <__aeabi_i2d>
 8019f40:	a367      	add	r3, pc, #412	@ (adr r3, 801a0e0 <_dtoa_r+0x2c8>)
 8019f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f46:	f7ee fb87 	bl	8008658 <__aeabi_dmul>
 8019f4a:	4602      	mov	r2, r0
 8019f4c:	460b      	mov	r3, r1
 8019f4e:	4620      	mov	r0, r4
 8019f50:	4629      	mov	r1, r5
 8019f52:	f7ee f9cb 	bl	80082ec <__adddf3>
 8019f56:	4604      	mov	r4, r0
 8019f58:	460d      	mov	r5, r1
 8019f5a:	f7ee fe2d 	bl	8008bb8 <__aeabi_d2iz>
 8019f5e:	2200      	movs	r2, #0
 8019f60:	4607      	mov	r7, r0
 8019f62:	2300      	movs	r3, #0
 8019f64:	4620      	mov	r0, r4
 8019f66:	4629      	mov	r1, r5
 8019f68:	f7ee fde8 	bl	8008b3c <__aeabi_dcmplt>
 8019f6c:	b140      	cbz	r0, 8019f80 <_dtoa_r+0x168>
 8019f6e:	4638      	mov	r0, r7
 8019f70:	f7ee fb08 	bl	8008584 <__aeabi_i2d>
 8019f74:	4622      	mov	r2, r4
 8019f76:	462b      	mov	r3, r5
 8019f78:	f7ee fdd6 	bl	8008b28 <__aeabi_dcmpeq>
 8019f7c:	b900      	cbnz	r0, 8019f80 <_dtoa_r+0x168>
 8019f7e:	3f01      	subs	r7, #1
 8019f80:	2f16      	cmp	r7, #22
 8019f82:	d852      	bhi.n	801a02a <_dtoa_r+0x212>
 8019f84:	4b5d      	ldr	r3, [pc, #372]	@ (801a0fc <_dtoa_r+0x2e4>)
 8019f86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019f92:	f7ee fdd3 	bl	8008b3c <__aeabi_dcmplt>
 8019f96:	2800      	cmp	r0, #0
 8019f98:	d049      	beq.n	801a02e <_dtoa_r+0x216>
 8019f9a:	3f01      	subs	r7, #1
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019fa0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019fa2:	1b9b      	subs	r3, r3, r6
 8019fa4:	1e5a      	subs	r2, r3, #1
 8019fa6:	bf45      	ittet	mi
 8019fa8:	f1c3 0301 	rsbmi	r3, r3, #1
 8019fac:	9300      	strmi	r3, [sp, #0]
 8019fae:	2300      	movpl	r3, #0
 8019fb0:	2300      	movmi	r3, #0
 8019fb2:	9206      	str	r2, [sp, #24]
 8019fb4:	bf54      	ite	pl
 8019fb6:	9300      	strpl	r3, [sp, #0]
 8019fb8:	9306      	strmi	r3, [sp, #24]
 8019fba:	2f00      	cmp	r7, #0
 8019fbc:	db39      	blt.n	801a032 <_dtoa_r+0x21a>
 8019fbe:	9b06      	ldr	r3, [sp, #24]
 8019fc0:	970d      	str	r7, [sp, #52]	@ 0x34
 8019fc2:	443b      	add	r3, r7
 8019fc4:	9306      	str	r3, [sp, #24]
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	9308      	str	r3, [sp, #32]
 8019fca:	9b07      	ldr	r3, [sp, #28]
 8019fcc:	2b09      	cmp	r3, #9
 8019fce:	d863      	bhi.n	801a098 <_dtoa_r+0x280>
 8019fd0:	2b05      	cmp	r3, #5
 8019fd2:	bfc4      	itt	gt
 8019fd4:	3b04      	subgt	r3, #4
 8019fd6:	9307      	strgt	r3, [sp, #28]
 8019fd8:	9b07      	ldr	r3, [sp, #28]
 8019fda:	f1a3 0302 	sub.w	r3, r3, #2
 8019fde:	bfcc      	ite	gt
 8019fe0:	2400      	movgt	r4, #0
 8019fe2:	2401      	movle	r4, #1
 8019fe4:	2b03      	cmp	r3, #3
 8019fe6:	d863      	bhi.n	801a0b0 <_dtoa_r+0x298>
 8019fe8:	e8df f003 	tbb	[pc, r3]
 8019fec:	2b375452 	.word	0x2b375452
 8019ff0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8019ff4:	441e      	add	r6, r3
 8019ff6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8019ffa:	2b20      	cmp	r3, #32
 8019ffc:	bfc1      	itttt	gt
 8019ffe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801a002:	409f      	lslgt	r7, r3
 801a004:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801a008:	fa24 f303 	lsrgt.w	r3, r4, r3
 801a00c:	bfd6      	itet	le
 801a00e:	f1c3 0320 	rsble	r3, r3, #32
 801a012:	ea47 0003 	orrgt.w	r0, r7, r3
 801a016:	fa04 f003 	lslle.w	r0, r4, r3
 801a01a:	f7ee faa3 	bl	8008564 <__aeabi_ui2d>
 801a01e:	2201      	movs	r2, #1
 801a020:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801a024:	3e01      	subs	r6, #1
 801a026:	9212      	str	r2, [sp, #72]	@ 0x48
 801a028:	e776      	b.n	8019f18 <_dtoa_r+0x100>
 801a02a:	2301      	movs	r3, #1
 801a02c:	e7b7      	b.n	8019f9e <_dtoa_r+0x186>
 801a02e:	9010      	str	r0, [sp, #64]	@ 0x40
 801a030:	e7b6      	b.n	8019fa0 <_dtoa_r+0x188>
 801a032:	9b00      	ldr	r3, [sp, #0]
 801a034:	1bdb      	subs	r3, r3, r7
 801a036:	9300      	str	r3, [sp, #0]
 801a038:	427b      	negs	r3, r7
 801a03a:	9308      	str	r3, [sp, #32]
 801a03c:	2300      	movs	r3, #0
 801a03e:	930d      	str	r3, [sp, #52]	@ 0x34
 801a040:	e7c3      	b.n	8019fca <_dtoa_r+0x1b2>
 801a042:	2301      	movs	r3, #1
 801a044:	9309      	str	r3, [sp, #36]	@ 0x24
 801a046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a048:	eb07 0b03 	add.w	fp, r7, r3
 801a04c:	f10b 0301 	add.w	r3, fp, #1
 801a050:	2b01      	cmp	r3, #1
 801a052:	9303      	str	r3, [sp, #12]
 801a054:	bfb8      	it	lt
 801a056:	2301      	movlt	r3, #1
 801a058:	e006      	b.n	801a068 <_dtoa_r+0x250>
 801a05a:	2301      	movs	r3, #1
 801a05c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a05e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a060:	2b00      	cmp	r3, #0
 801a062:	dd28      	ble.n	801a0b6 <_dtoa_r+0x29e>
 801a064:	469b      	mov	fp, r3
 801a066:	9303      	str	r3, [sp, #12]
 801a068:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801a06c:	2100      	movs	r1, #0
 801a06e:	2204      	movs	r2, #4
 801a070:	f102 0514 	add.w	r5, r2, #20
 801a074:	429d      	cmp	r5, r3
 801a076:	d926      	bls.n	801a0c6 <_dtoa_r+0x2ae>
 801a078:	6041      	str	r1, [r0, #4]
 801a07a:	4648      	mov	r0, r9
 801a07c:	f001 f832 	bl	801b0e4 <_Balloc>
 801a080:	4682      	mov	sl, r0
 801a082:	2800      	cmp	r0, #0
 801a084:	d142      	bne.n	801a10c <_dtoa_r+0x2f4>
 801a086:	4b1e      	ldr	r3, [pc, #120]	@ (801a100 <_dtoa_r+0x2e8>)
 801a088:	4602      	mov	r2, r0
 801a08a:	f240 11af 	movw	r1, #431	@ 0x1af
 801a08e:	e6da      	b.n	8019e46 <_dtoa_r+0x2e>
 801a090:	2300      	movs	r3, #0
 801a092:	e7e3      	b.n	801a05c <_dtoa_r+0x244>
 801a094:	2300      	movs	r3, #0
 801a096:	e7d5      	b.n	801a044 <_dtoa_r+0x22c>
 801a098:	2401      	movs	r4, #1
 801a09a:	2300      	movs	r3, #0
 801a09c:	9307      	str	r3, [sp, #28]
 801a09e:	9409      	str	r4, [sp, #36]	@ 0x24
 801a0a0:	f04f 3bff 	mov.w	fp, #4294967295
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	f8cd b00c 	str.w	fp, [sp, #12]
 801a0aa:	2312      	movs	r3, #18
 801a0ac:	920c      	str	r2, [sp, #48]	@ 0x30
 801a0ae:	e7db      	b.n	801a068 <_dtoa_r+0x250>
 801a0b0:	2301      	movs	r3, #1
 801a0b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0b4:	e7f4      	b.n	801a0a0 <_dtoa_r+0x288>
 801a0b6:	f04f 0b01 	mov.w	fp, #1
 801a0ba:	f8cd b00c 	str.w	fp, [sp, #12]
 801a0be:	465b      	mov	r3, fp
 801a0c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801a0c4:	e7d0      	b.n	801a068 <_dtoa_r+0x250>
 801a0c6:	3101      	adds	r1, #1
 801a0c8:	0052      	lsls	r2, r2, #1
 801a0ca:	e7d1      	b.n	801a070 <_dtoa_r+0x258>
 801a0cc:	f3af 8000 	nop.w
 801a0d0:	636f4361 	.word	0x636f4361
 801a0d4:	3fd287a7 	.word	0x3fd287a7
 801a0d8:	8b60c8b3 	.word	0x8b60c8b3
 801a0dc:	3fc68a28 	.word	0x3fc68a28
 801a0e0:	509f79fb 	.word	0x509f79fb
 801a0e4:	3fd34413 	.word	0x3fd34413
 801a0e8:	0801f299 	.word	0x0801f299
 801a0ec:	0801f2b0 	.word	0x0801f2b0
 801a0f0:	7ff00000 	.word	0x7ff00000
 801a0f4:	0801f3fa 	.word	0x0801f3fa
 801a0f8:	3ff80000 	.word	0x3ff80000
 801a0fc:	0801f5c8 	.word	0x0801f5c8
 801a100:	0801f308 	.word	0x0801f308
 801a104:	0801f295 	.word	0x0801f295
 801a108:	0801f3f9 	.word	0x0801f3f9
 801a10c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a110:	6018      	str	r0, [r3, #0]
 801a112:	9b03      	ldr	r3, [sp, #12]
 801a114:	2b0e      	cmp	r3, #14
 801a116:	f200 80a1 	bhi.w	801a25c <_dtoa_r+0x444>
 801a11a:	2c00      	cmp	r4, #0
 801a11c:	f000 809e 	beq.w	801a25c <_dtoa_r+0x444>
 801a120:	2f00      	cmp	r7, #0
 801a122:	dd33      	ble.n	801a18c <_dtoa_r+0x374>
 801a124:	4b9c      	ldr	r3, [pc, #624]	@ (801a398 <_dtoa_r+0x580>)
 801a126:	f007 020f 	and.w	r2, r7, #15
 801a12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a12e:	ed93 7b00 	vldr	d7, [r3]
 801a132:	05f8      	lsls	r0, r7, #23
 801a134:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801a138:	ea4f 1427 	mov.w	r4, r7, asr #4
 801a13c:	d516      	bpl.n	801a16c <_dtoa_r+0x354>
 801a13e:	4b97      	ldr	r3, [pc, #604]	@ (801a39c <_dtoa_r+0x584>)
 801a140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a148:	f7ee fbb0 	bl	80088ac <__aeabi_ddiv>
 801a14c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a150:	f004 040f 	and.w	r4, r4, #15
 801a154:	2603      	movs	r6, #3
 801a156:	4d91      	ldr	r5, [pc, #580]	@ (801a39c <_dtoa_r+0x584>)
 801a158:	b954      	cbnz	r4, 801a170 <_dtoa_r+0x358>
 801a15a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a15e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a162:	f7ee fba3 	bl	80088ac <__aeabi_ddiv>
 801a166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a16a:	e028      	b.n	801a1be <_dtoa_r+0x3a6>
 801a16c:	2602      	movs	r6, #2
 801a16e:	e7f2      	b.n	801a156 <_dtoa_r+0x33e>
 801a170:	07e1      	lsls	r1, r4, #31
 801a172:	d508      	bpl.n	801a186 <_dtoa_r+0x36e>
 801a174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a178:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a17c:	f7ee fa6c 	bl	8008658 <__aeabi_dmul>
 801a180:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a184:	3601      	adds	r6, #1
 801a186:	1064      	asrs	r4, r4, #1
 801a188:	3508      	adds	r5, #8
 801a18a:	e7e5      	b.n	801a158 <_dtoa_r+0x340>
 801a18c:	f000 80af 	beq.w	801a2ee <_dtoa_r+0x4d6>
 801a190:	427c      	negs	r4, r7
 801a192:	4b81      	ldr	r3, [pc, #516]	@ (801a398 <_dtoa_r+0x580>)
 801a194:	4d81      	ldr	r5, [pc, #516]	@ (801a39c <_dtoa_r+0x584>)
 801a196:	f004 020f 	and.w	r2, r4, #15
 801a19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a1a6:	f7ee fa57 	bl	8008658 <__aeabi_dmul>
 801a1aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a1ae:	1124      	asrs	r4, r4, #4
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	2602      	movs	r6, #2
 801a1b4:	2c00      	cmp	r4, #0
 801a1b6:	f040 808f 	bne.w	801a2d8 <_dtoa_r+0x4c0>
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d1d3      	bne.n	801a166 <_dtoa_r+0x34e>
 801a1be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a1c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	f000 8094 	beq.w	801a2f2 <_dtoa_r+0x4da>
 801a1ca:	4b75      	ldr	r3, [pc, #468]	@ (801a3a0 <_dtoa_r+0x588>)
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	4629      	mov	r1, r5
 801a1d2:	f7ee fcb3 	bl	8008b3c <__aeabi_dcmplt>
 801a1d6:	2800      	cmp	r0, #0
 801a1d8:	f000 808b 	beq.w	801a2f2 <_dtoa_r+0x4da>
 801a1dc:	9b03      	ldr	r3, [sp, #12]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	f000 8087 	beq.w	801a2f2 <_dtoa_r+0x4da>
 801a1e4:	f1bb 0f00 	cmp.w	fp, #0
 801a1e8:	dd34      	ble.n	801a254 <_dtoa_r+0x43c>
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	4b6d      	ldr	r3, [pc, #436]	@ (801a3a4 <_dtoa_r+0x58c>)
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	4629      	mov	r1, r5
 801a1f2:	f7ee fa31 	bl	8008658 <__aeabi_dmul>
 801a1f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a1fa:	f107 38ff 	add.w	r8, r7, #4294967295
 801a1fe:	3601      	adds	r6, #1
 801a200:	465c      	mov	r4, fp
 801a202:	4630      	mov	r0, r6
 801a204:	f7ee f9be 	bl	8008584 <__aeabi_i2d>
 801a208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a20c:	f7ee fa24 	bl	8008658 <__aeabi_dmul>
 801a210:	4b65      	ldr	r3, [pc, #404]	@ (801a3a8 <_dtoa_r+0x590>)
 801a212:	2200      	movs	r2, #0
 801a214:	f7ee f86a 	bl	80082ec <__adddf3>
 801a218:	4605      	mov	r5, r0
 801a21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801a21e:	2c00      	cmp	r4, #0
 801a220:	d16a      	bne.n	801a2f8 <_dtoa_r+0x4e0>
 801a222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a226:	4b61      	ldr	r3, [pc, #388]	@ (801a3ac <_dtoa_r+0x594>)
 801a228:	2200      	movs	r2, #0
 801a22a:	f7ee f85d 	bl	80082e8 <__aeabi_dsub>
 801a22e:	4602      	mov	r2, r0
 801a230:	460b      	mov	r3, r1
 801a232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a236:	462a      	mov	r2, r5
 801a238:	4633      	mov	r3, r6
 801a23a:	f7ee fc9d 	bl	8008b78 <__aeabi_dcmpgt>
 801a23e:	2800      	cmp	r0, #0
 801a240:	f040 8298 	bne.w	801a774 <_dtoa_r+0x95c>
 801a244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a248:	462a      	mov	r2, r5
 801a24a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a24e:	f7ee fc75 	bl	8008b3c <__aeabi_dcmplt>
 801a252:	bb38      	cbnz	r0, 801a2a4 <_dtoa_r+0x48c>
 801a254:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801a258:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801a25c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a25e:	2b00      	cmp	r3, #0
 801a260:	f2c0 8157 	blt.w	801a512 <_dtoa_r+0x6fa>
 801a264:	2f0e      	cmp	r7, #14
 801a266:	f300 8154 	bgt.w	801a512 <_dtoa_r+0x6fa>
 801a26a:	4b4b      	ldr	r3, [pc, #300]	@ (801a398 <_dtoa_r+0x580>)
 801a26c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a270:	ed93 7b00 	vldr	d7, [r3]
 801a274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a276:	2b00      	cmp	r3, #0
 801a278:	ed8d 7b00 	vstr	d7, [sp]
 801a27c:	f280 80e5 	bge.w	801a44a <_dtoa_r+0x632>
 801a280:	9b03      	ldr	r3, [sp, #12]
 801a282:	2b00      	cmp	r3, #0
 801a284:	f300 80e1 	bgt.w	801a44a <_dtoa_r+0x632>
 801a288:	d10c      	bne.n	801a2a4 <_dtoa_r+0x48c>
 801a28a:	4b48      	ldr	r3, [pc, #288]	@ (801a3ac <_dtoa_r+0x594>)
 801a28c:	2200      	movs	r2, #0
 801a28e:	ec51 0b17 	vmov	r0, r1, d7
 801a292:	f7ee f9e1 	bl	8008658 <__aeabi_dmul>
 801a296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a29a:	f7ee fc63 	bl	8008b64 <__aeabi_dcmpge>
 801a29e:	2800      	cmp	r0, #0
 801a2a0:	f000 8266 	beq.w	801a770 <_dtoa_r+0x958>
 801a2a4:	2400      	movs	r4, #0
 801a2a6:	4625      	mov	r5, r4
 801a2a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2aa:	4656      	mov	r6, sl
 801a2ac:	ea6f 0803 	mvn.w	r8, r3
 801a2b0:	2700      	movs	r7, #0
 801a2b2:	4621      	mov	r1, r4
 801a2b4:	4648      	mov	r0, r9
 801a2b6:	f000 ff55 	bl	801b164 <_Bfree>
 801a2ba:	2d00      	cmp	r5, #0
 801a2bc:	f000 80bd 	beq.w	801a43a <_dtoa_r+0x622>
 801a2c0:	b12f      	cbz	r7, 801a2ce <_dtoa_r+0x4b6>
 801a2c2:	42af      	cmp	r7, r5
 801a2c4:	d003      	beq.n	801a2ce <_dtoa_r+0x4b6>
 801a2c6:	4639      	mov	r1, r7
 801a2c8:	4648      	mov	r0, r9
 801a2ca:	f000 ff4b 	bl	801b164 <_Bfree>
 801a2ce:	4629      	mov	r1, r5
 801a2d0:	4648      	mov	r0, r9
 801a2d2:	f000 ff47 	bl	801b164 <_Bfree>
 801a2d6:	e0b0      	b.n	801a43a <_dtoa_r+0x622>
 801a2d8:	07e2      	lsls	r2, r4, #31
 801a2da:	d505      	bpl.n	801a2e8 <_dtoa_r+0x4d0>
 801a2dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a2e0:	f7ee f9ba 	bl	8008658 <__aeabi_dmul>
 801a2e4:	3601      	adds	r6, #1
 801a2e6:	2301      	movs	r3, #1
 801a2e8:	1064      	asrs	r4, r4, #1
 801a2ea:	3508      	adds	r5, #8
 801a2ec:	e762      	b.n	801a1b4 <_dtoa_r+0x39c>
 801a2ee:	2602      	movs	r6, #2
 801a2f0:	e765      	b.n	801a1be <_dtoa_r+0x3a6>
 801a2f2:	9c03      	ldr	r4, [sp, #12]
 801a2f4:	46b8      	mov	r8, r7
 801a2f6:	e784      	b.n	801a202 <_dtoa_r+0x3ea>
 801a2f8:	4b27      	ldr	r3, [pc, #156]	@ (801a398 <_dtoa_r+0x580>)
 801a2fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a2fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a304:	4454      	add	r4, sl
 801a306:	2900      	cmp	r1, #0
 801a308:	d054      	beq.n	801a3b4 <_dtoa_r+0x59c>
 801a30a:	4929      	ldr	r1, [pc, #164]	@ (801a3b0 <_dtoa_r+0x598>)
 801a30c:	2000      	movs	r0, #0
 801a30e:	f7ee facd 	bl	80088ac <__aeabi_ddiv>
 801a312:	4633      	mov	r3, r6
 801a314:	462a      	mov	r2, r5
 801a316:	f7ed ffe7 	bl	80082e8 <__aeabi_dsub>
 801a31a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a31e:	4656      	mov	r6, sl
 801a320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a324:	f7ee fc48 	bl	8008bb8 <__aeabi_d2iz>
 801a328:	4605      	mov	r5, r0
 801a32a:	f7ee f92b 	bl	8008584 <__aeabi_i2d>
 801a32e:	4602      	mov	r2, r0
 801a330:	460b      	mov	r3, r1
 801a332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a336:	f7ed ffd7 	bl	80082e8 <__aeabi_dsub>
 801a33a:	3530      	adds	r5, #48	@ 0x30
 801a33c:	4602      	mov	r2, r0
 801a33e:	460b      	mov	r3, r1
 801a340:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a344:	f806 5b01 	strb.w	r5, [r6], #1
 801a348:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a34c:	f7ee fbf6 	bl	8008b3c <__aeabi_dcmplt>
 801a350:	2800      	cmp	r0, #0
 801a352:	d172      	bne.n	801a43a <_dtoa_r+0x622>
 801a354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a358:	4911      	ldr	r1, [pc, #68]	@ (801a3a0 <_dtoa_r+0x588>)
 801a35a:	2000      	movs	r0, #0
 801a35c:	f7ed ffc4 	bl	80082e8 <__aeabi_dsub>
 801a360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a364:	f7ee fbea 	bl	8008b3c <__aeabi_dcmplt>
 801a368:	2800      	cmp	r0, #0
 801a36a:	f040 80b4 	bne.w	801a4d6 <_dtoa_r+0x6be>
 801a36e:	42a6      	cmp	r6, r4
 801a370:	f43f af70 	beq.w	801a254 <_dtoa_r+0x43c>
 801a374:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a378:	4b0a      	ldr	r3, [pc, #40]	@ (801a3a4 <_dtoa_r+0x58c>)
 801a37a:	2200      	movs	r2, #0
 801a37c:	f7ee f96c 	bl	8008658 <__aeabi_dmul>
 801a380:	4b08      	ldr	r3, [pc, #32]	@ (801a3a4 <_dtoa_r+0x58c>)
 801a382:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a386:	2200      	movs	r2, #0
 801a388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a38c:	f7ee f964 	bl	8008658 <__aeabi_dmul>
 801a390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a394:	e7c4      	b.n	801a320 <_dtoa_r+0x508>
 801a396:	bf00      	nop
 801a398:	0801f5c8 	.word	0x0801f5c8
 801a39c:	0801f5a0 	.word	0x0801f5a0
 801a3a0:	3ff00000 	.word	0x3ff00000
 801a3a4:	40240000 	.word	0x40240000
 801a3a8:	401c0000 	.word	0x401c0000
 801a3ac:	40140000 	.word	0x40140000
 801a3b0:	3fe00000 	.word	0x3fe00000
 801a3b4:	4631      	mov	r1, r6
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f7ee f94e 	bl	8008658 <__aeabi_dmul>
 801a3bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a3c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801a3c2:	4656      	mov	r6, sl
 801a3c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a3c8:	f7ee fbf6 	bl	8008bb8 <__aeabi_d2iz>
 801a3cc:	4605      	mov	r5, r0
 801a3ce:	f7ee f8d9 	bl	8008584 <__aeabi_i2d>
 801a3d2:	4602      	mov	r2, r0
 801a3d4:	460b      	mov	r3, r1
 801a3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a3da:	f7ed ff85 	bl	80082e8 <__aeabi_dsub>
 801a3de:	3530      	adds	r5, #48	@ 0x30
 801a3e0:	f806 5b01 	strb.w	r5, [r6], #1
 801a3e4:	4602      	mov	r2, r0
 801a3e6:	460b      	mov	r3, r1
 801a3e8:	42a6      	cmp	r6, r4
 801a3ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a3ee:	f04f 0200 	mov.w	r2, #0
 801a3f2:	d124      	bne.n	801a43e <_dtoa_r+0x626>
 801a3f4:	4baf      	ldr	r3, [pc, #700]	@ (801a6b4 <_dtoa_r+0x89c>)
 801a3f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a3fa:	f7ed ff77 	bl	80082ec <__adddf3>
 801a3fe:	4602      	mov	r2, r0
 801a400:	460b      	mov	r3, r1
 801a402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a406:	f7ee fbb7 	bl	8008b78 <__aeabi_dcmpgt>
 801a40a:	2800      	cmp	r0, #0
 801a40c:	d163      	bne.n	801a4d6 <_dtoa_r+0x6be>
 801a40e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a412:	49a8      	ldr	r1, [pc, #672]	@ (801a6b4 <_dtoa_r+0x89c>)
 801a414:	2000      	movs	r0, #0
 801a416:	f7ed ff67 	bl	80082e8 <__aeabi_dsub>
 801a41a:	4602      	mov	r2, r0
 801a41c:	460b      	mov	r3, r1
 801a41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a422:	f7ee fb8b 	bl	8008b3c <__aeabi_dcmplt>
 801a426:	2800      	cmp	r0, #0
 801a428:	f43f af14 	beq.w	801a254 <_dtoa_r+0x43c>
 801a42c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a42e:	1e73      	subs	r3, r6, #1
 801a430:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a432:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a436:	2b30      	cmp	r3, #48	@ 0x30
 801a438:	d0f8      	beq.n	801a42c <_dtoa_r+0x614>
 801a43a:	4647      	mov	r7, r8
 801a43c:	e03b      	b.n	801a4b6 <_dtoa_r+0x69e>
 801a43e:	4b9e      	ldr	r3, [pc, #632]	@ (801a6b8 <_dtoa_r+0x8a0>)
 801a440:	f7ee f90a 	bl	8008658 <__aeabi_dmul>
 801a444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a448:	e7bc      	b.n	801a3c4 <_dtoa_r+0x5ac>
 801a44a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801a44e:	4656      	mov	r6, sl
 801a450:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a454:	4620      	mov	r0, r4
 801a456:	4629      	mov	r1, r5
 801a458:	f7ee fa28 	bl	80088ac <__aeabi_ddiv>
 801a45c:	f7ee fbac 	bl	8008bb8 <__aeabi_d2iz>
 801a460:	4680      	mov	r8, r0
 801a462:	f7ee f88f 	bl	8008584 <__aeabi_i2d>
 801a466:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a46a:	f7ee f8f5 	bl	8008658 <__aeabi_dmul>
 801a46e:	4602      	mov	r2, r0
 801a470:	460b      	mov	r3, r1
 801a472:	4620      	mov	r0, r4
 801a474:	4629      	mov	r1, r5
 801a476:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801a47a:	f7ed ff35 	bl	80082e8 <__aeabi_dsub>
 801a47e:	f806 4b01 	strb.w	r4, [r6], #1
 801a482:	9d03      	ldr	r5, [sp, #12]
 801a484:	eba6 040a 	sub.w	r4, r6, sl
 801a488:	42a5      	cmp	r5, r4
 801a48a:	4602      	mov	r2, r0
 801a48c:	460b      	mov	r3, r1
 801a48e:	d133      	bne.n	801a4f8 <_dtoa_r+0x6e0>
 801a490:	f7ed ff2c 	bl	80082ec <__adddf3>
 801a494:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a498:	4604      	mov	r4, r0
 801a49a:	460d      	mov	r5, r1
 801a49c:	f7ee fb6c 	bl	8008b78 <__aeabi_dcmpgt>
 801a4a0:	b9c0      	cbnz	r0, 801a4d4 <_dtoa_r+0x6bc>
 801a4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	4629      	mov	r1, r5
 801a4aa:	f7ee fb3d 	bl	8008b28 <__aeabi_dcmpeq>
 801a4ae:	b110      	cbz	r0, 801a4b6 <_dtoa_r+0x69e>
 801a4b0:	f018 0f01 	tst.w	r8, #1
 801a4b4:	d10e      	bne.n	801a4d4 <_dtoa_r+0x6bc>
 801a4b6:	9902      	ldr	r1, [sp, #8]
 801a4b8:	4648      	mov	r0, r9
 801a4ba:	f000 fe53 	bl	801b164 <_Bfree>
 801a4be:	2300      	movs	r3, #0
 801a4c0:	7033      	strb	r3, [r6, #0]
 801a4c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4c4:	3701      	adds	r7, #1
 801a4c6:	601f      	str	r7, [r3, #0]
 801a4c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	f000 824b 	beq.w	801a966 <_dtoa_r+0xb4e>
 801a4d0:	601e      	str	r6, [r3, #0]
 801a4d2:	e248      	b.n	801a966 <_dtoa_r+0xb4e>
 801a4d4:	46b8      	mov	r8, r7
 801a4d6:	4633      	mov	r3, r6
 801a4d8:	461e      	mov	r6, r3
 801a4da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a4de:	2a39      	cmp	r2, #57	@ 0x39
 801a4e0:	d106      	bne.n	801a4f0 <_dtoa_r+0x6d8>
 801a4e2:	459a      	cmp	sl, r3
 801a4e4:	d1f8      	bne.n	801a4d8 <_dtoa_r+0x6c0>
 801a4e6:	2230      	movs	r2, #48	@ 0x30
 801a4e8:	f108 0801 	add.w	r8, r8, #1
 801a4ec:	f88a 2000 	strb.w	r2, [sl]
 801a4f0:	781a      	ldrb	r2, [r3, #0]
 801a4f2:	3201      	adds	r2, #1
 801a4f4:	701a      	strb	r2, [r3, #0]
 801a4f6:	e7a0      	b.n	801a43a <_dtoa_r+0x622>
 801a4f8:	4b6f      	ldr	r3, [pc, #444]	@ (801a6b8 <_dtoa_r+0x8a0>)
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	f7ee f8ac 	bl	8008658 <__aeabi_dmul>
 801a500:	2200      	movs	r2, #0
 801a502:	2300      	movs	r3, #0
 801a504:	4604      	mov	r4, r0
 801a506:	460d      	mov	r5, r1
 801a508:	f7ee fb0e 	bl	8008b28 <__aeabi_dcmpeq>
 801a50c:	2800      	cmp	r0, #0
 801a50e:	d09f      	beq.n	801a450 <_dtoa_r+0x638>
 801a510:	e7d1      	b.n	801a4b6 <_dtoa_r+0x69e>
 801a512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a514:	2a00      	cmp	r2, #0
 801a516:	f000 80ea 	beq.w	801a6ee <_dtoa_r+0x8d6>
 801a51a:	9a07      	ldr	r2, [sp, #28]
 801a51c:	2a01      	cmp	r2, #1
 801a51e:	f300 80cd 	bgt.w	801a6bc <_dtoa_r+0x8a4>
 801a522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a524:	2a00      	cmp	r2, #0
 801a526:	f000 80c1 	beq.w	801a6ac <_dtoa_r+0x894>
 801a52a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801a52e:	9c08      	ldr	r4, [sp, #32]
 801a530:	9e00      	ldr	r6, [sp, #0]
 801a532:	9a00      	ldr	r2, [sp, #0]
 801a534:	441a      	add	r2, r3
 801a536:	9200      	str	r2, [sp, #0]
 801a538:	9a06      	ldr	r2, [sp, #24]
 801a53a:	2101      	movs	r1, #1
 801a53c:	441a      	add	r2, r3
 801a53e:	4648      	mov	r0, r9
 801a540:	9206      	str	r2, [sp, #24]
 801a542:	f000 ff0d 	bl	801b360 <__i2b>
 801a546:	4605      	mov	r5, r0
 801a548:	b166      	cbz	r6, 801a564 <_dtoa_r+0x74c>
 801a54a:	9b06      	ldr	r3, [sp, #24]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	dd09      	ble.n	801a564 <_dtoa_r+0x74c>
 801a550:	42b3      	cmp	r3, r6
 801a552:	9a00      	ldr	r2, [sp, #0]
 801a554:	bfa8      	it	ge
 801a556:	4633      	movge	r3, r6
 801a558:	1ad2      	subs	r2, r2, r3
 801a55a:	9200      	str	r2, [sp, #0]
 801a55c:	9a06      	ldr	r2, [sp, #24]
 801a55e:	1af6      	subs	r6, r6, r3
 801a560:	1ad3      	subs	r3, r2, r3
 801a562:	9306      	str	r3, [sp, #24]
 801a564:	9b08      	ldr	r3, [sp, #32]
 801a566:	b30b      	cbz	r3, 801a5ac <_dtoa_r+0x794>
 801a568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	f000 80c6 	beq.w	801a6fc <_dtoa_r+0x8e4>
 801a570:	2c00      	cmp	r4, #0
 801a572:	f000 80c0 	beq.w	801a6f6 <_dtoa_r+0x8de>
 801a576:	4629      	mov	r1, r5
 801a578:	4622      	mov	r2, r4
 801a57a:	4648      	mov	r0, r9
 801a57c:	f000 ffa8 	bl	801b4d0 <__pow5mult>
 801a580:	9a02      	ldr	r2, [sp, #8]
 801a582:	4601      	mov	r1, r0
 801a584:	4605      	mov	r5, r0
 801a586:	4648      	mov	r0, r9
 801a588:	f000 ff00 	bl	801b38c <__multiply>
 801a58c:	9902      	ldr	r1, [sp, #8]
 801a58e:	4680      	mov	r8, r0
 801a590:	4648      	mov	r0, r9
 801a592:	f000 fde7 	bl	801b164 <_Bfree>
 801a596:	9b08      	ldr	r3, [sp, #32]
 801a598:	1b1b      	subs	r3, r3, r4
 801a59a:	9308      	str	r3, [sp, #32]
 801a59c:	f000 80b1 	beq.w	801a702 <_dtoa_r+0x8ea>
 801a5a0:	9a08      	ldr	r2, [sp, #32]
 801a5a2:	4641      	mov	r1, r8
 801a5a4:	4648      	mov	r0, r9
 801a5a6:	f000 ff93 	bl	801b4d0 <__pow5mult>
 801a5aa:	9002      	str	r0, [sp, #8]
 801a5ac:	2101      	movs	r1, #1
 801a5ae:	4648      	mov	r0, r9
 801a5b0:	f000 fed6 	bl	801b360 <__i2b>
 801a5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	f000 81d8 	beq.w	801a96e <_dtoa_r+0xb56>
 801a5be:	461a      	mov	r2, r3
 801a5c0:	4601      	mov	r1, r0
 801a5c2:	4648      	mov	r0, r9
 801a5c4:	f000 ff84 	bl	801b4d0 <__pow5mult>
 801a5c8:	9b07      	ldr	r3, [sp, #28]
 801a5ca:	2b01      	cmp	r3, #1
 801a5cc:	4604      	mov	r4, r0
 801a5ce:	f300 809f 	bgt.w	801a710 <_dtoa_r+0x8f8>
 801a5d2:	9b04      	ldr	r3, [sp, #16]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	f040 8097 	bne.w	801a708 <_dtoa_r+0x8f0>
 801a5da:	9b05      	ldr	r3, [sp, #20]
 801a5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	f040 8093 	bne.w	801a70c <_dtoa_r+0x8f4>
 801a5e6:	9b05      	ldr	r3, [sp, #20]
 801a5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a5ec:	0d1b      	lsrs	r3, r3, #20
 801a5ee:	051b      	lsls	r3, r3, #20
 801a5f0:	b133      	cbz	r3, 801a600 <_dtoa_r+0x7e8>
 801a5f2:	9b00      	ldr	r3, [sp, #0]
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	9300      	str	r3, [sp, #0]
 801a5f8:	9b06      	ldr	r3, [sp, #24]
 801a5fa:	3301      	adds	r3, #1
 801a5fc:	9306      	str	r3, [sp, #24]
 801a5fe:	2301      	movs	r3, #1
 801a600:	9308      	str	r3, [sp, #32]
 801a602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a604:	2b00      	cmp	r3, #0
 801a606:	f000 81b8 	beq.w	801a97a <_dtoa_r+0xb62>
 801a60a:	6923      	ldr	r3, [r4, #16]
 801a60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a610:	6918      	ldr	r0, [r3, #16]
 801a612:	f000 fe59 	bl	801b2c8 <__hi0bits>
 801a616:	f1c0 0020 	rsb	r0, r0, #32
 801a61a:	9b06      	ldr	r3, [sp, #24]
 801a61c:	4418      	add	r0, r3
 801a61e:	f010 001f 	ands.w	r0, r0, #31
 801a622:	f000 8082 	beq.w	801a72a <_dtoa_r+0x912>
 801a626:	f1c0 0320 	rsb	r3, r0, #32
 801a62a:	2b04      	cmp	r3, #4
 801a62c:	dd73      	ble.n	801a716 <_dtoa_r+0x8fe>
 801a62e:	9b00      	ldr	r3, [sp, #0]
 801a630:	f1c0 001c 	rsb	r0, r0, #28
 801a634:	4403      	add	r3, r0
 801a636:	9300      	str	r3, [sp, #0]
 801a638:	9b06      	ldr	r3, [sp, #24]
 801a63a:	4403      	add	r3, r0
 801a63c:	4406      	add	r6, r0
 801a63e:	9306      	str	r3, [sp, #24]
 801a640:	9b00      	ldr	r3, [sp, #0]
 801a642:	2b00      	cmp	r3, #0
 801a644:	dd05      	ble.n	801a652 <_dtoa_r+0x83a>
 801a646:	9902      	ldr	r1, [sp, #8]
 801a648:	461a      	mov	r2, r3
 801a64a:	4648      	mov	r0, r9
 801a64c:	f000 ff9a 	bl	801b584 <__lshift>
 801a650:	9002      	str	r0, [sp, #8]
 801a652:	9b06      	ldr	r3, [sp, #24]
 801a654:	2b00      	cmp	r3, #0
 801a656:	dd05      	ble.n	801a664 <_dtoa_r+0x84c>
 801a658:	4621      	mov	r1, r4
 801a65a:	461a      	mov	r2, r3
 801a65c:	4648      	mov	r0, r9
 801a65e:	f000 ff91 	bl	801b584 <__lshift>
 801a662:	4604      	mov	r4, r0
 801a664:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a666:	2b00      	cmp	r3, #0
 801a668:	d061      	beq.n	801a72e <_dtoa_r+0x916>
 801a66a:	9802      	ldr	r0, [sp, #8]
 801a66c:	4621      	mov	r1, r4
 801a66e:	f000 fff5 	bl	801b65c <__mcmp>
 801a672:	2800      	cmp	r0, #0
 801a674:	da5b      	bge.n	801a72e <_dtoa_r+0x916>
 801a676:	2300      	movs	r3, #0
 801a678:	9902      	ldr	r1, [sp, #8]
 801a67a:	220a      	movs	r2, #10
 801a67c:	4648      	mov	r0, r9
 801a67e:	f000 fd93 	bl	801b1a8 <__multadd>
 801a682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a684:	9002      	str	r0, [sp, #8]
 801a686:	f107 38ff 	add.w	r8, r7, #4294967295
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	f000 8177 	beq.w	801a97e <_dtoa_r+0xb66>
 801a690:	4629      	mov	r1, r5
 801a692:	2300      	movs	r3, #0
 801a694:	220a      	movs	r2, #10
 801a696:	4648      	mov	r0, r9
 801a698:	f000 fd86 	bl	801b1a8 <__multadd>
 801a69c:	f1bb 0f00 	cmp.w	fp, #0
 801a6a0:	4605      	mov	r5, r0
 801a6a2:	dc6f      	bgt.n	801a784 <_dtoa_r+0x96c>
 801a6a4:	9b07      	ldr	r3, [sp, #28]
 801a6a6:	2b02      	cmp	r3, #2
 801a6a8:	dc49      	bgt.n	801a73e <_dtoa_r+0x926>
 801a6aa:	e06b      	b.n	801a784 <_dtoa_r+0x96c>
 801a6ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a6ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801a6b2:	e73c      	b.n	801a52e <_dtoa_r+0x716>
 801a6b4:	3fe00000 	.word	0x3fe00000
 801a6b8:	40240000 	.word	0x40240000
 801a6bc:	9b03      	ldr	r3, [sp, #12]
 801a6be:	1e5c      	subs	r4, r3, #1
 801a6c0:	9b08      	ldr	r3, [sp, #32]
 801a6c2:	42a3      	cmp	r3, r4
 801a6c4:	db09      	blt.n	801a6da <_dtoa_r+0x8c2>
 801a6c6:	1b1c      	subs	r4, r3, r4
 801a6c8:	9b03      	ldr	r3, [sp, #12]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	f6bf af30 	bge.w	801a530 <_dtoa_r+0x718>
 801a6d0:	9b00      	ldr	r3, [sp, #0]
 801a6d2:	9a03      	ldr	r2, [sp, #12]
 801a6d4:	1a9e      	subs	r6, r3, r2
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	e72b      	b.n	801a532 <_dtoa_r+0x71a>
 801a6da:	9b08      	ldr	r3, [sp, #32]
 801a6dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6de:	9408      	str	r4, [sp, #32]
 801a6e0:	1ae3      	subs	r3, r4, r3
 801a6e2:	441a      	add	r2, r3
 801a6e4:	9e00      	ldr	r6, [sp, #0]
 801a6e6:	9b03      	ldr	r3, [sp, #12]
 801a6e8:	920d      	str	r2, [sp, #52]	@ 0x34
 801a6ea:	2400      	movs	r4, #0
 801a6ec:	e721      	b.n	801a532 <_dtoa_r+0x71a>
 801a6ee:	9c08      	ldr	r4, [sp, #32]
 801a6f0:	9e00      	ldr	r6, [sp, #0]
 801a6f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801a6f4:	e728      	b.n	801a548 <_dtoa_r+0x730>
 801a6f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a6fa:	e751      	b.n	801a5a0 <_dtoa_r+0x788>
 801a6fc:	9a08      	ldr	r2, [sp, #32]
 801a6fe:	9902      	ldr	r1, [sp, #8]
 801a700:	e750      	b.n	801a5a4 <_dtoa_r+0x78c>
 801a702:	f8cd 8008 	str.w	r8, [sp, #8]
 801a706:	e751      	b.n	801a5ac <_dtoa_r+0x794>
 801a708:	2300      	movs	r3, #0
 801a70a:	e779      	b.n	801a600 <_dtoa_r+0x7e8>
 801a70c:	9b04      	ldr	r3, [sp, #16]
 801a70e:	e777      	b.n	801a600 <_dtoa_r+0x7e8>
 801a710:	2300      	movs	r3, #0
 801a712:	9308      	str	r3, [sp, #32]
 801a714:	e779      	b.n	801a60a <_dtoa_r+0x7f2>
 801a716:	d093      	beq.n	801a640 <_dtoa_r+0x828>
 801a718:	9a00      	ldr	r2, [sp, #0]
 801a71a:	331c      	adds	r3, #28
 801a71c:	441a      	add	r2, r3
 801a71e:	9200      	str	r2, [sp, #0]
 801a720:	9a06      	ldr	r2, [sp, #24]
 801a722:	441a      	add	r2, r3
 801a724:	441e      	add	r6, r3
 801a726:	9206      	str	r2, [sp, #24]
 801a728:	e78a      	b.n	801a640 <_dtoa_r+0x828>
 801a72a:	4603      	mov	r3, r0
 801a72c:	e7f4      	b.n	801a718 <_dtoa_r+0x900>
 801a72e:	9b03      	ldr	r3, [sp, #12]
 801a730:	2b00      	cmp	r3, #0
 801a732:	46b8      	mov	r8, r7
 801a734:	dc20      	bgt.n	801a778 <_dtoa_r+0x960>
 801a736:	469b      	mov	fp, r3
 801a738:	9b07      	ldr	r3, [sp, #28]
 801a73a:	2b02      	cmp	r3, #2
 801a73c:	dd1e      	ble.n	801a77c <_dtoa_r+0x964>
 801a73e:	f1bb 0f00 	cmp.w	fp, #0
 801a742:	f47f adb1 	bne.w	801a2a8 <_dtoa_r+0x490>
 801a746:	4621      	mov	r1, r4
 801a748:	465b      	mov	r3, fp
 801a74a:	2205      	movs	r2, #5
 801a74c:	4648      	mov	r0, r9
 801a74e:	f000 fd2b 	bl	801b1a8 <__multadd>
 801a752:	4601      	mov	r1, r0
 801a754:	4604      	mov	r4, r0
 801a756:	9802      	ldr	r0, [sp, #8]
 801a758:	f000 ff80 	bl	801b65c <__mcmp>
 801a75c:	2800      	cmp	r0, #0
 801a75e:	f77f ada3 	ble.w	801a2a8 <_dtoa_r+0x490>
 801a762:	4656      	mov	r6, sl
 801a764:	2331      	movs	r3, #49	@ 0x31
 801a766:	f806 3b01 	strb.w	r3, [r6], #1
 801a76a:	f108 0801 	add.w	r8, r8, #1
 801a76e:	e59f      	b.n	801a2b0 <_dtoa_r+0x498>
 801a770:	9c03      	ldr	r4, [sp, #12]
 801a772:	46b8      	mov	r8, r7
 801a774:	4625      	mov	r5, r4
 801a776:	e7f4      	b.n	801a762 <_dtoa_r+0x94a>
 801a778:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801a77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a77e:	2b00      	cmp	r3, #0
 801a780:	f000 8101 	beq.w	801a986 <_dtoa_r+0xb6e>
 801a784:	2e00      	cmp	r6, #0
 801a786:	dd05      	ble.n	801a794 <_dtoa_r+0x97c>
 801a788:	4629      	mov	r1, r5
 801a78a:	4632      	mov	r2, r6
 801a78c:	4648      	mov	r0, r9
 801a78e:	f000 fef9 	bl	801b584 <__lshift>
 801a792:	4605      	mov	r5, r0
 801a794:	9b08      	ldr	r3, [sp, #32]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d05c      	beq.n	801a854 <_dtoa_r+0xa3c>
 801a79a:	6869      	ldr	r1, [r5, #4]
 801a79c:	4648      	mov	r0, r9
 801a79e:	f000 fca1 	bl	801b0e4 <_Balloc>
 801a7a2:	4606      	mov	r6, r0
 801a7a4:	b928      	cbnz	r0, 801a7b2 <_dtoa_r+0x99a>
 801a7a6:	4b82      	ldr	r3, [pc, #520]	@ (801a9b0 <_dtoa_r+0xb98>)
 801a7a8:	4602      	mov	r2, r0
 801a7aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a7ae:	f7ff bb4a 	b.w	8019e46 <_dtoa_r+0x2e>
 801a7b2:	692a      	ldr	r2, [r5, #16]
 801a7b4:	3202      	adds	r2, #2
 801a7b6:	0092      	lsls	r2, r2, #2
 801a7b8:	f105 010c 	add.w	r1, r5, #12
 801a7bc:	300c      	adds	r0, #12
 801a7be:	f7ff fa8a 	bl	8019cd6 <memcpy>
 801a7c2:	2201      	movs	r2, #1
 801a7c4:	4631      	mov	r1, r6
 801a7c6:	4648      	mov	r0, r9
 801a7c8:	f000 fedc 	bl	801b584 <__lshift>
 801a7cc:	f10a 0301 	add.w	r3, sl, #1
 801a7d0:	9300      	str	r3, [sp, #0]
 801a7d2:	eb0a 030b 	add.w	r3, sl, fp
 801a7d6:	9308      	str	r3, [sp, #32]
 801a7d8:	9b04      	ldr	r3, [sp, #16]
 801a7da:	f003 0301 	and.w	r3, r3, #1
 801a7de:	462f      	mov	r7, r5
 801a7e0:	9306      	str	r3, [sp, #24]
 801a7e2:	4605      	mov	r5, r0
 801a7e4:	9b00      	ldr	r3, [sp, #0]
 801a7e6:	9802      	ldr	r0, [sp, #8]
 801a7e8:	4621      	mov	r1, r4
 801a7ea:	f103 3bff 	add.w	fp, r3, #4294967295
 801a7ee:	f7ff fa8b 	bl	8019d08 <quorem>
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	3330      	adds	r3, #48	@ 0x30
 801a7f6:	9003      	str	r0, [sp, #12]
 801a7f8:	4639      	mov	r1, r7
 801a7fa:	9802      	ldr	r0, [sp, #8]
 801a7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7fe:	f000 ff2d 	bl	801b65c <__mcmp>
 801a802:	462a      	mov	r2, r5
 801a804:	9004      	str	r0, [sp, #16]
 801a806:	4621      	mov	r1, r4
 801a808:	4648      	mov	r0, r9
 801a80a:	f000 ff43 	bl	801b694 <__mdiff>
 801a80e:	68c2      	ldr	r2, [r0, #12]
 801a810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a812:	4606      	mov	r6, r0
 801a814:	bb02      	cbnz	r2, 801a858 <_dtoa_r+0xa40>
 801a816:	4601      	mov	r1, r0
 801a818:	9802      	ldr	r0, [sp, #8]
 801a81a:	f000 ff1f 	bl	801b65c <__mcmp>
 801a81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a820:	4602      	mov	r2, r0
 801a822:	4631      	mov	r1, r6
 801a824:	4648      	mov	r0, r9
 801a826:	920c      	str	r2, [sp, #48]	@ 0x30
 801a828:	9309      	str	r3, [sp, #36]	@ 0x24
 801a82a:	f000 fc9b 	bl	801b164 <_Bfree>
 801a82e:	9b07      	ldr	r3, [sp, #28]
 801a830:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a832:	9e00      	ldr	r6, [sp, #0]
 801a834:	ea42 0103 	orr.w	r1, r2, r3
 801a838:	9b06      	ldr	r3, [sp, #24]
 801a83a:	4319      	orrs	r1, r3
 801a83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a83e:	d10d      	bne.n	801a85c <_dtoa_r+0xa44>
 801a840:	2b39      	cmp	r3, #57	@ 0x39
 801a842:	d027      	beq.n	801a894 <_dtoa_r+0xa7c>
 801a844:	9a04      	ldr	r2, [sp, #16]
 801a846:	2a00      	cmp	r2, #0
 801a848:	dd01      	ble.n	801a84e <_dtoa_r+0xa36>
 801a84a:	9b03      	ldr	r3, [sp, #12]
 801a84c:	3331      	adds	r3, #49	@ 0x31
 801a84e:	f88b 3000 	strb.w	r3, [fp]
 801a852:	e52e      	b.n	801a2b2 <_dtoa_r+0x49a>
 801a854:	4628      	mov	r0, r5
 801a856:	e7b9      	b.n	801a7cc <_dtoa_r+0x9b4>
 801a858:	2201      	movs	r2, #1
 801a85a:	e7e2      	b.n	801a822 <_dtoa_r+0xa0a>
 801a85c:	9904      	ldr	r1, [sp, #16]
 801a85e:	2900      	cmp	r1, #0
 801a860:	db04      	blt.n	801a86c <_dtoa_r+0xa54>
 801a862:	9807      	ldr	r0, [sp, #28]
 801a864:	4301      	orrs	r1, r0
 801a866:	9806      	ldr	r0, [sp, #24]
 801a868:	4301      	orrs	r1, r0
 801a86a:	d120      	bne.n	801a8ae <_dtoa_r+0xa96>
 801a86c:	2a00      	cmp	r2, #0
 801a86e:	ddee      	ble.n	801a84e <_dtoa_r+0xa36>
 801a870:	9902      	ldr	r1, [sp, #8]
 801a872:	9300      	str	r3, [sp, #0]
 801a874:	2201      	movs	r2, #1
 801a876:	4648      	mov	r0, r9
 801a878:	f000 fe84 	bl	801b584 <__lshift>
 801a87c:	4621      	mov	r1, r4
 801a87e:	9002      	str	r0, [sp, #8]
 801a880:	f000 feec 	bl	801b65c <__mcmp>
 801a884:	2800      	cmp	r0, #0
 801a886:	9b00      	ldr	r3, [sp, #0]
 801a888:	dc02      	bgt.n	801a890 <_dtoa_r+0xa78>
 801a88a:	d1e0      	bne.n	801a84e <_dtoa_r+0xa36>
 801a88c:	07da      	lsls	r2, r3, #31
 801a88e:	d5de      	bpl.n	801a84e <_dtoa_r+0xa36>
 801a890:	2b39      	cmp	r3, #57	@ 0x39
 801a892:	d1da      	bne.n	801a84a <_dtoa_r+0xa32>
 801a894:	2339      	movs	r3, #57	@ 0x39
 801a896:	f88b 3000 	strb.w	r3, [fp]
 801a89a:	4633      	mov	r3, r6
 801a89c:	461e      	mov	r6, r3
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a8a4:	2a39      	cmp	r2, #57	@ 0x39
 801a8a6:	d04e      	beq.n	801a946 <_dtoa_r+0xb2e>
 801a8a8:	3201      	adds	r2, #1
 801a8aa:	701a      	strb	r2, [r3, #0]
 801a8ac:	e501      	b.n	801a2b2 <_dtoa_r+0x49a>
 801a8ae:	2a00      	cmp	r2, #0
 801a8b0:	dd03      	ble.n	801a8ba <_dtoa_r+0xaa2>
 801a8b2:	2b39      	cmp	r3, #57	@ 0x39
 801a8b4:	d0ee      	beq.n	801a894 <_dtoa_r+0xa7c>
 801a8b6:	3301      	adds	r3, #1
 801a8b8:	e7c9      	b.n	801a84e <_dtoa_r+0xa36>
 801a8ba:	9a00      	ldr	r2, [sp, #0]
 801a8bc:	9908      	ldr	r1, [sp, #32]
 801a8be:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a8c2:	428a      	cmp	r2, r1
 801a8c4:	d028      	beq.n	801a918 <_dtoa_r+0xb00>
 801a8c6:	9902      	ldr	r1, [sp, #8]
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	220a      	movs	r2, #10
 801a8cc:	4648      	mov	r0, r9
 801a8ce:	f000 fc6b 	bl	801b1a8 <__multadd>
 801a8d2:	42af      	cmp	r7, r5
 801a8d4:	9002      	str	r0, [sp, #8]
 801a8d6:	f04f 0300 	mov.w	r3, #0
 801a8da:	f04f 020a 	mov.w	r2, #10
 801a8de:	4639      	mov	r1, r7
 801a8e0:	4648      	mov	r0, r9
 801a8e2:	d107      	bne.n	801a8f4 <_dtoa_r+0xadc>
 801a8e4:	f000 fc60 	bl	801b1a8 <__multadd>
 801a8e8:	4607      	mov	r7, r0
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	9b00      	ldr	r3, [sp, #0]
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	9300      	str	r3, [sp, #0]
 801a8f2:	e777      	b.n	801a7e4 <_dtoa_r+0x9cc>
 801a8f4:	f000 fc58 	bl	801b1a8 <__multadd>
 801a8f8:	4629      	mov	r1, r5
 801a8fa:	4607      	mov	r7, r0
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	220a      	movs	r2, #10
 801a900:	4648      	mov	r0, r9
 801a902:	f000 fc51 	bl	801b1a8 <__multadd>
 801a906:	4605      	mov	r5, r0
 801a908:	e7f0      	b.n	801a8ec <_dtoa_r+0xad4>
 801a90a:	f1bb 0f00 	cmp.w	fp, #0
 801a90e:	bfcc      	ite	gt
 801a910:	465e      	movgt	r6, fp
 801a912:	2601      	movle	r6, #1
 801a914:	4456      	add	r6, sl
 801a916:	2700      	movs	r7, #0
 801a918:	9902      	ldr	r1, [sp, #8]
 801a91a:	9300      	str	r3, [sp, #0]
 801a91c:	2201      	movs	r2, #1
 801a91e:	4648      	mov	r0, r9
 801a920:	f000 fe30 	bl	801b584 <__lshift>
 801a924:	4621      	mov	r1, r4
 801a926:	9002      	str	r0, [sp, #8]
 801a928:	f000 fe98 	bl	801b65c <__mcmp>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	dcb4      	bgt.n	801a89a <_dtoa_r+0xa82>
 801a930:	d102      	bne.n	801a938 <_dtoa_r+0xb20>
 801a932:	9b00      	ldr	r3, [sp, #0]
 801a934:	07db      	lsls	r3, r3, #31
 801a936:	d4b0      	bmi.n	801a89a <_dtoa_r+0xa82>
 801a938:	4633      	mov	r3, r6
 801a93a:	461e      	mov	r6, r3
 801a93c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a940:	2a30      	cmp	r2, #48	@ 0x30
 801a942:	d0fa      	beq.n	801a93a <_dtoa_r+0xb22>
 801a944:	e4b5      	b.n	801a2b2 <_dtoa_r+0x49a>
 801a946:	459a      	cmp	sl, r3
 801a948:	d1a8      	bne.n	801a89c <_dtoa_r+0xa84>
 801a94a:	2331      	movs	r3, #49	@ 0x31
 801a94c:	f108 0801 	add.w	r8, r8, #1
 801a950:	f88a 3000 	strb.w	r3, [sl]
 801a954:	e4ad      	b.n	801a2b2 <_dtoa_r+0x49a>
 801a956:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a958:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801a9b4 <_dtoa_r+0xb9c>
 801a95c:	b11b      	cbz	r3, 801a966 <_dtoa_r+0xb4e>
 801a95e:	f10a 0308 	add.w	r3, sl, #8
 801a962:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a964:	6013      	str	r3, [r2, #0]
 801a966:	4650      	mov	r0, sl
 801a968:	b017      	add	sp, #92	@ 0x5c
 801a96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a96e:	9b07      	ldr	r3, [sp, #28]
 801a970:	2b01      	cmp	r3, #1
 801a972:	f77f ae2e 	ble.w	801a5d2 <_dtoa_r+0x7ba>
 801a976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a978:	9308      	str	r3, [sp, #32]
 801a97a:	2001      	movs	r0, #1
 801a97c:	e64d      	b.n	801a61a <_dtoa_r+0x802>
 801a97e:	f1bb 0f00 	cmp.w	fp, #0
 801a982:	f77f aed9 	ble.w	801a738 <_dtoa_r+0x920>
 801a986:	4656      	mov	r6, sl
 801a988:	9802      	ldr	r0, [sp, #8]
 801a98a:	4621      	mov	r1, r4
 801a98c:	f7ff f9bc 	bl	8019d08 <quorem>
 801a990:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801a994:	f806 3b01 	strb.w	r3, [r6], #1
 801a998:	eba6 020a 	sub.w	r2, r6, sl
 801a99c:	4593      	cmp	fp, r2
 801a99e:	ddb4      	ble.n	801a90a <_dtoa_r+0xaf2>
 801a9a0:	9902      	ldr	r1, [sp, #8]
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	220a      	movs	r2, #10
 801a9a6:	4648      	mov	r0, r9
 801a9a8:	f000 fbfe 	bl	801b1a8 <__multadd>
 801a9ac:	9002      	str	r0, [sp, #8]
 801a9ae:	e7eb      	b.n	801a988 <_dtoa_r+0xb70>
 801a9b0:	0801f308 	.word	0x0801f308
 801a9b4:	0801f28c 	.word	0x0801f28c

0801a9b8 <_free_r>:
 801a9b8:	b538      	push	{r3, r4, r5, lr}
 801a9ba:	4605      	mov	r5, r0
 801a9bc:	2900      	cmp	r1, #0
 801a9be:	d041      	beq.n	801aa44 <_free_r+0x8c>
 801a9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a9c4:	1f0c      	subs	r4, r1, #4
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	bfb8      	it	lt
 801a9ca:	18e4      	addlt	r4, r4, r3
 801a9cc:	f7fd fb9c 	bl	8018108 <__malloc_lock>
 801a9d0:	4a1d      	ldr	r2, [pc, #116]	@ (801aa48 <_free_r+0x90>)
 801a9d2:	6813      	ldr	r3, [r2, #0]
 801a9d4:	b933      	cbnz	r3, 801a9e4 <_free_r+0x2c>
 801a9d6:	6063      	str	r3, [r4, #4]
 801a9d8:	6014      	str	r4, [r2, #0]
 801a9da:	4628      	mov	r0, r5
 801a9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a9e0:	f7fd bb98 	b.w	8018114 <__malloc_unlock>
 801a9e4:	42a3      	cmp	r3, r4
 801a9e6:	d908      	bls.n	801a9fa <_free_r+0x42>
 801a9e8:	6820      	ldr	r0, [r4, #0]
 801a9ea:	1821      	adds	r1, r4, r0
 801a9ec:	428b      	cmp	r3, r1
 801a9ee:	bf01      	itttt	eq
 801a9f0:	6819      	ldreq	r1, [r3, #0]
 801a9f2:	685b      	ldreq	r3, [r3, #4]
 801a9f4:	1809      	addeq	r1, r1, r0
 801a9f6:	6021      	streq	r1, [r4, #0]
 801a9f8:	e7ed      	b.n	801a9d6 <_free_r+0x1e>
 801a9fa:	461a      	mov	r2, r3
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	b10b      	cbz	r3, 801aa04 <_free_r+0x4c>
 801aa00:	42a3      	cmp	r3, r4
 801aa02:	d9fa      	bls.n	801a9fa <_free_r+0x42>
 801aa04:	6811      	ldr	r1, [r2, #0]
 801aa06:	1850      	adds	r0, r2, r1
 801aa08:	42a0      	cmp	r0, r4
 801aa0a:	d10b      	bne.n	801aa24 <_free_r+0x6c>
 801aa0c:	6820      	ldr	r0, [r4, #0]
 801aa0e:	4401      	add	r1, r0
 801aa10:	1850      	adds	r0, r2, r1
 801aa12:	4283      	cmp	r3, r0
 801aa14:	6011      	str	r1, [r2, #0]
 801aa16:	d1e0      	bne.n	801a9da <_free_r+0x22>
 801aa18:	6818      	ldr	r0, [r3, #0]
 801aa1a:	685b      	ldr	r3, [r3, #4]
 801aa1c:	6053      	str	r3, [r2, #4]
 801aa1e:	4408      	add	r0, r1
 801aa20:	6010      	str	r0, [r2, #0]
 801aa22:	e7da      	b.n	801a9da <_free_r+0x22>
 801aa24:	d902      	bls.n	801aa2c <_free_r+0x74>
 801aa26:	230c      	movs	r3, #12
 801aa28:	602b      	str	r3, [r5, #0]
 801aa2a:	e7d6      	b.n	801a9da <_free_r+0x22>
 801aa2c:	6820      	ldr	r0, [r4, #0]
 801aa2e:	1821      	adds	r1, r4, r0
 801aa30:	428b      	cmp	r3, r1
 801aa32:	bf04      	itt	eq
 801aa34:	6819      	ldreq	r1, [r3, #0]
 801aa36:	685b      	ldreq	r3, [r3, #4]
 801aa38:	6063      	str	r3, [r4, #4]
 801aa3a:	bf04      	itt	eq
 801aa3c:	1809      	addeq	r1, r1, r0
 801aa3e:	6021      	streq	r1, [r4, #0]
 801aa40:	6054      	str	r4, [r2, #4]
 801aa42:	e7ca      	b.n	801a9da <_free_r+0x22>
 801aa44:	bd38      	pop	{r3, r4, r5, pc}
 801aa46:	bf00      	nop
 801aa48:	20014300 	.word	0x20014300

0801aa4c <rshift>:
 801aa4c:	6903      	ldr	r3, [r0, #16]
 801aa4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801aa52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa56:	ea4f 1261 	mov.w	r2, r1, asr #5
 801aa5a:	f100 0414 	add.w	r4, r0, #20
 801aa5e:	dd45      	ble.n	801aaec <rshift+0xa0>
 801aa60:	f011 011f 	ands.w	r1, r1, #31
 801aa64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801aa68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801aa6c:	d10c      	bne.n	801aa88 <rshift+0x3c>
 801aa6e:	f100 0710 	add.w	r7, r0, #16
 801aa72:	4629      	mov	r1, r5
 801aa74:	42b1      	cmp	r1, r6
 801aa76:	d334      	bcc.n	801aae2 <rshift+0x96>
 801aa78:	1a9b      	subs	r3, r3, r2
 801aa7a:	009b      	lsls	r3, r3, #2
 801aa7c:	1eea      	subs	r2, r5, #3
 801aa7e:	4296      	cmp	r6, r2
 801aa80:	bf38      	it	cc
 801aa82:	2300      	movcc	r3, #0
 801aa84:	4423      	add	r3, r4
 801aa86:	e015      	b.n	801aab4 <rshift+0x68>
 801aa88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801aa8c:	f1c1 0820 	rsb	r8, r1, #32
 801aa90:	40cf      	lsrs	r7, r1
 801aa92:	f105 0e04 	add.w	lr, r5, #4
 801aa96:	46a1      	mov	r9, r4
 801aa98:	4576      	cmp	r6, lr
 801aa9a:	46f4      	mov	ip, lr
 801aa9c:	d815      	bhi.n	801aaca <rshift+0x7e>
 801aa9e:	1a9a      	subs	r2, r3, r2
 801aaa0:	0092      	lsls	r2, r2, #2
 801aaa2:	3a04      	subs	r2, #4
 801aaa4:	3501      	adds	r5, #1
 801aaa6:	42ae      	cmp	r6, r5
 801aaa8:	bf38      	it	cc
 801aaaa:	2200      	movcc	r2, #0
 801aaac:	18a3      	adds	r3, r4, r2
 801aaae:	50a7      	str	r7, [r4, r2]
 801aab0:	b107      	cbz	r7, 801aab4 <rshift+0x68>
 801aab2:	3304      	adds	r3, #4
 801aab4:	1b1a      	subs	r2, r3, r4
 801aab6:	42a3      	cmp	r3, r4
 801aab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801aabc:	bf08      	it	eq
 801aabe:	2300      	moveq	r3, #0
 801aac0:	6102      	str	r2, [r0, #16]
 801aac2:	bf08      	it	eq
 801aac4:	6143      	streq	r3, [r0, #20]
 801aac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaca:	f8dc c000 	ldr.w	ip, [ip]
 801aace:	fa0c fc08 	lsl.w	ip, ip, r8
 801aad2:	ea4c 0707 	orr.w	r7, ip, r7
 801aad6:	f849 7b04 	str.w	r7, [r9], #4
 801aada:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aade:	40cf      	lsrs	r7, r1
 801aae0:	e7da      	b.n	801aa98 <rshift+0x4c>
 801aae2:	f851 cb04 	ldr.w	ip, [r1], #4
 801aae6:	f847 cf04 	str.w	ip, [r7, #4]!
 801aaea:	e7c3      	b.n	801aa74 <rshift+0x28>
 801aaec:	4623      	mov	r3, r4
 801aaee:	e7e1      	b.n	801aab4 <rshift+0x68>

0801aaf0 <__hexdig_fun>:
 801aaf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801aaf4:	2b09      	cmp	r3, #9
 801aaf6:	d802      	bhi.n	801aafe <__hexdig_fun+0xe>
 801aaf8:	3820      	subs	r0, #32
 801aafa:	b2c0      	uxtb	r0, r0
 801aafc:	4770      	bx	lr
 801aafe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ab02:	2b05      	cmp	r3, #5
 801ab04:	d801      	bhi.n	801ab0a <__hexdig_fun+0x1a>
 801ab06:	3847      	subs	r0, #71	@ 0x47
 801ab08:	e7f7      	b.n	801aafa <__hexdig_fun+0xa>
 801ab0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ab0e:	2b05      	cmp	r3, #5
 801ab10:	d801      	bhi.n	801ab16 <__hexdig_fun+0x26>
 801ab12:	3827      	subs	r0, #39	@ 0x27
 801ab14:	e7f1      	b.n	801aafa <__hexdig_fun+0xa>
 801ab16:	2000      	movs	r0, #0
 801ab18:	4770      	bx	lr
	...

0801ab1c <__gethex>:
 801ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab20:	b085      	sub	sp, #20
 801ab22:	468a      	mov	sl, r1
 801ab24:	9302      	str	r3, [sp, #8]
 801ab26:	680b      	ldr	r3, [r1, #0]
 801ab28:	9001      	str	r0, [sp, #4]
 801ab2a:	4690      	mov	r8, r2
 801ab2c:	1c9c      	adds	r4, r3, #2
 801ab2e:	46a1      	mov	r9, r4
 801ab30:	f814 0b01 	ldrb.w	r0, [r4], #1
 801ab34:	2830      	cmp	r0, #48	@ 0x30
 801ab36:	d0fa      	beq.n	801ab2e <__gethex+0x12>
 801ab38:	eba9 0303 	sub.w	r3, r9, r3
 801ab3c:	f1a3 0b02 	sub.w	fp, r3, #2
 801ab40:	f7ff ffd6 	bl	801aaf0 <__hexdig_fun>
 801ab44:	4605      	mov	r5, r0
 801ab46:	2800      	cmp	r0, #0
 801ab48:	d168      	bne.n	801ac1c <__gethex+0x100>
 801ab4a:	49a0      	ldr	r1, [pc, #640]	@ (801adcc <__gethex+0x2b0>)
 801ab4c:	2201      	movs	r2, #1
 801ab4e:	4648      	mov	r0, r9
 801ab50:	f7fe fff6 	bl	8019b40 <strncmp>
 801ab54:	4607      	mov	r7, r0
 801ab56:	2800      	cmp	r0, #0
 801ab58:	d167      	bne.n	801ac2a <__gethex+0x10e>
 801ab5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801ab5e:	4626      	mov	r6, r4
 801ab60:	f7ff ffc6 	bl	801aaf0 <__hexdig_fun>
 801ab64:	2800      	cmp	r0, #0
 801ab66:	d062      	beq.n	801ac2e <__gethex+0x112>
 801ab68:	4623      	mov	r3, r4
 801ab6a:	7818      	ldrb	r0, [r3, #0]
 801ab6c:	2830      	cmp	r0, #48	@ 0x30
 801ab6e:	4699      	mov	r9, r3
 801ab70:	f103 0301 	add.w	r3, r3, #1
 801ab74:	d0f9      	beq.n	801ab6a <__gethex+0x4e>
 801ab76:	f7ff ffbb 	bl	801aaf0 <__hexdig_fun>
 801ab7a:	fab0 f580 	clz	r5, r0
 801ab7e:	096d      	lsrs	r5, r5, #5
 801ab80:	f04f 0b01 	mov.w	fp, #1
 801ab84:	464a      	mov	r2, r9
 801ab86:	4616      	mov	r6, r2
 801ab88:	3201      	adds	r2, #1
 801ab8a:	7830      	ldrb	r0, [r6, #0]
 801ab8c:	f7ff ffb0 	bl	801aaf0 <__hexdig_fun>
 801ab90:	2800      	cmp	r0, #0
 801ab92:	d1f8      	bne.n	801ab86 <__gethex+0x6a>
 801ab94:	498d      	ldr	r1, [pc, #564]	@ (801adcc <__gethex+0x2b0>)
 801ab96:	2201      	movs	r2, #1
 801ab98:	4630      	mov	r0, r6
 801ab9a:	f7fe ffd1 	bl	8019b40 <strncmp>
 801ab9e:	2800      	cmp	r0, #0
 801aba0:	d13f      	bne.n	801ac22 <__gethex+0x106>
 801aba2:	b944      	cbnz	r4, 801abb6 <__gethex+0x9a>
 801aba4:	1c74      	adds	r4, r6, #1
 801aba6:	4622      	mov	r2, r4
 801aba8:	4616      	mov	r6, r2
 801abaa:	3201      	adds	r2, #1
 801abac:	7830      	ldrb	r0, [r6, #0]
 801abae:	f7ff ff9f 	bl	801aaf0 <__hexdig_fun>
 801abb2:	2800      	cmp	r0, #0
 801abb4:	d1f8      	bne.n	801aba8 <__gethex+0x8c>
 801abb6:	1ba4      	subs	r4, r4, r6
 801abb8:	00a7      	lsls	r7, r4, #2
 801abba:	7833      	ldrb	r3, [r6, #0]
 801abbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801abc0:	2b50      	cmp	r3, #80	@ 0x50
 801abc2:	d13e      	bne.n	801ac42 <__gethex+0x126>
 801abc4:	7873      	ldrb	r3, [r6, #1]
 801abc6:	2b2b      	cmp	r3, #43	@ 0x2b
 801abc8:	d033      	beq.n	801ac32 <__gethex+0x116>
 801abca:	2b2d      	cmp	r3, #45	@ 0x2d
 801abcc:	d034      	beq.n	801ac38 <__gethex+0x11c>
 801abce:	1c71      	adds	r1, r6, #1
 801abd0:	2400      	movs	r4, #0
 801abd2:	7808      	ldrb	r0, [r1, #0]
 801abd4:	f7ff ff8c 	bl	801aaf0 <__hexdig_fun>
 801abd8:	1e43      	subs	r3, r0, #1
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	2b18      	cmp	r3, #24
 801abde:	d830      	bhi.n	801ac42 <__gethex+0x126>
 801abe0:	f1a0 0210 	sub.w	r2, r0, #16
 801abe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801abe8:	f7ff ff82 	bl	801aaf0 <__hexdig_fun>
 801abec:	f100 3cff 	add.w	ip, r0, #4294967295
 801abf0:	fa5f fc8c 	uxtb.w	ip, ip
 801abf4:	f1bc 0f18 	cmp.w	ip, #24
 801abf8:	f04f 030a 	mov.w	r3, #10
 801abfc:	d91e      	bls.n	801ac3c <__gethex+0x120>
 801abfe:	b104      	cbz	r4, 801ac02 <__gethex+0xe6>
 801ac00:	4252      	negs	r2, r2
 801ac02:	4417      	add	r7, r2
 801ac04:	f8ca 1000 	str.w	r1, [sl]
 801ac08:	b1ed      	cbz	r5, 801ac46 <__gethex+0x12a>
 801ac0a:	f1bb 0f00 	cmp.w	fp, #0
 801ac0e:	bf0c      	ite	eq
 801ac10:	2506      	moveq	r5, #6
 801ac12:	2500      	movne	r5, #0
 801ac14:	4628      	mov	r0, r5
 801ac16:	b005      	add	sp, #20
 801ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac1c:	2500      	movs	r5, #0
 801ac1e:	462c      	mov	r4, r5
 801ac20:	e7b0      	b.n	801ab84 <__gethex+0x68>
 801ac22:	2c00      	cmp	r4, #0
 801ac24:	d1c7      	bne.n	801abb6 <__gethex+0x9a>
 801ac26:	4627      	mov	r7, r4
 801ac28:	e7c7      	b.n	801abba <__gethex+0x9e>
 801ac2a:	464e      	mov	r6, r9
 801ac2c:	462f      	mov	r7, r5
 801ac2e:	2501      	movs	r5, #1
 801ac30:	e7c3      	b.n	801abba <__gethex+0x9e>
 801ac32:	2400      	movs	r4, #0
 801ac34:	1cb1      	adds	r1, r6, #2
 801ac36:	e7cc      	b.n	801abd2 <__gethex+0xb6>
 801ac38:	2401      	movs	r4, #1
 801ac3a:	e7fb      	b.n	801ac34 <__gethex+0x118>
 801ac3c:	fb03 0002 	mla	r0, r3, r2, r0
 801ac40:	e7ce      	b.n	801abe0 <__gethex+0xc4>
 801ac42:	4631      	mov	r1, r6
 801ac44:	e7de      	b.n	801ac04 <__gethex+0xe8>
 801ac46:	eba6 0309 	sub.w	r3, r6, r9
 801ac4a:	3b01      	subs	r3, #1
 801ac4c:	4629      	mov	r1, r5
 801ac4e:	2b07      	cmp	r3, #7
 801ac50:	dc0a      	bgt.n	801ac68 <__gethex+0x14c>
 801ac52:	9801      	ldr	r0, [sp, #4]
 801ac54:	f000 fa46 	bl	801b0e4 <_Balloc>
 801ac58:	4604      	mov	r4, r0
 801ac5a:	b940      	cbnz	r0, 801ac6e <__gethex+0x152>
 801ac5c:	4b5c      	ldr	r3, [pc, #368]	@ (801add0 <__gethex+0x2b4>)
 801ac5e:	4602      	mov	r2, r0
 801ac60:	21e4      	movs	r1, #228	@ 0xe4
 801ac62:	485c      	ldr	r0, [pc, #368]	@ (801add4 <__gethex+0x2b8>)
 801ac64:	f001 fe72 	bl	801c94c <__assert_func>
 801ac68:	3101      	adds	r1, #1
 801ac6a:	105b      	asrs	r3, r3, #1
 801ac6c:	e7ef      	b.n	801ac4e <__gethex+0x132>
 801ac6e:	f100 0a14 	add.w	sl, r0, #20
 801ac72:	2300      	movs	r3, #0
 801ac74:	4655      	mov	r5, sl
 801ac76:	469b      	mov	fp, r3
 801ac78:	45b1      	cmp	r9, r6
 801ac7a:	d337      	bcc.n	801acec <__gethex+0x1d0>
 801ac7c:	f845 bb04 	str.w	fp, [r5], #4
 801ac80:	eba5 050a 	sub.w	r5, r5, sl
 801ac84:	10ad      	asrs	r5, r5, #2
 801ac86:	6125      	str	r5, [r4, #16]
 801ac88:	4658      	mov	r0, fp
 801ac8a:	f000 fb1d 	bl	801b2c8 <__hi0bits>
 801ac8e:	016d      	lsls	r5, r5, #5
 801ac90:	f8d8 6000 	ldr.w	r6, [r8]
 801ac94:	1a2d      	subs	r5, r5, r0
 801ac96:	42b5      	cmp	r5, r6
 801ac98:	dd54      	ble.n	801ad44 <__gethex+0x228>
 801ac9a:	1bad      	subs	r5, r5, r6
 801ac9c:	4629      	mov	r1, r5
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f000 fea9 	bl	801b9f6 <__any_on>
 801aca4:	4681      	mov	r9, r0
 801aca6:	b178      	cbz	r0, 801acc8 <__gethex+0x1ac>
 801aca8:	1e6b      	subs	r3, r5, #1
 801acaa:	1159      	asrs	r1, r3, #5
 801acac:	f003 021f 	and.w	r2, r3, #31
 801acb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801acb4:	f04f 0901 	mov.w	r9, #1
 801acb8:	fa09 f202 	lsl.w	r2, r9, r2
 801acbc:	420a      	tst	r2, r1
 801acbe:	d003      	beq.n	801acc8 <__gethex+0x1ac>
 801acc0:	454b      	cmp	r3, r9
 801acc2:	dc36      	bgt.n	801ad32 <__gethex+0x216>
 801acc4:	f04f 0902 	mov.w	r9, #2
 801acc8:	4629      	mov	r1, r5
 801acca:	4620      	mov	r0, r4
 801accc:	f7ff febe 	bl	801aa4c <rshift>
 801acd0:	442f      	add	r7, r5
 801acd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801acd6:	42bb      	cmp	r3, r7
 801acd8:	da42      	bge.n	801ad60 <__gethex+0x244>
 801acda:	9801      	ldr	r0, [sp, #4]
 801acdc:	4621      	mov	r1, r4
 801acde:	f000 fa41 	bl	801b164 <_Bfree>
 801ace2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ace4:	2300      	movs	r3, #0
 801ace6:	6013      	str	r3, [r2, #0]
 801ace8:	25a3      	movs	r5, #163	@ 0xa3
 801acea:	e793      	b.n	801ac14 <__gethex+0xf8>
 801acec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801acf0:	2a2e      	cmp	r2, #46	@ 0x2e
 801acf2:	d012      	beq.n	801ad1a <__gethex+0x1fe>
 801acf4:	2b20      	cmp	r3, #32
 801acf6:	d104      	bne.n	801ad02 <__gethex+0x1e6>
 801acf8:	f845 bb04 	str.w	fp, [r5], #4
 801acfc:	f04f 0b00 	mov.w	fp, #0
 801ad00:	465b      	mov	r3, fp
 801ad02:	7830      	ldrb	r0, [r6, #0]
 801ad04:	9303      	str	r3, [sp, #12]
 801ad06:	f7ff fef3 	bl	801aaf0 <__hexdig_fun>
 801ad0a:	9b03      	ldr	r3, [sp, #12]
 801ad0c:	f000 000f 	and.w	r0, r0, #15
 801ad10:	4098      	lsls	r0, r3
 801ad12:	ea4b 0b00 	orr.w	fp, fp, r0
 801ad16:	3304      	adds	r3, #4
 801ad18:	e7ae      	b.n	801ac78 <__gethex+0x15c>
 801ad1a:	45b1      	cmp	r9, r6
 801ad1c:	d8ea      	bhi.n	801acf4 <__gethex+0x1d8>
 801ad1e:	492b      	ldr	r1, [pc, #172]	@ (801adcc <__gethex+0x2b0>)
 801ad20:	9303      	str	r3, [sp, #12]
 801ad22:	2201      	movs	r2, #1
 801ad24:	4630      	mov	r0, r6
 801ad26:	f7fe ff0b 	bl	8019b40 <strncmp>
 801ad2a:	9b03      	ldr	r3, [sp, #12]
 801ad2c:	2800      	cmp	r0, #0
 801ad2e:	d1e1      	bne.n	801acf4 <__gethex+0x1d8>
 801ad30:	e7a2      	b.n	801ac78 <__gethex+0x15c>
 801ad32:	1ea9      	subs	r1, r5, #2
 801ad34:	4620      	mov	r0, r4
 801ad36:	f000 fe5e 	bl	801b9f6 <__any_on>
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d0c2      	beq.n	801acc4 <__gethex+0x1a8>
 801ad3e:	f04f 0903 	mov.w	r9, #3
 801ad42:	e7c1      	b.n	801acc8 <__gethex+0x1ac>
 801ad44:	da09      	bge.n	801ad5a <__gethex+0x23e>
 801ad46:	1b75      	subs	r5, r6, r5
 801ad48:	4621      	mov	r1, r4
 801ad4a:	9801      	ldr	r0, [sp, #4]
 801ad4c:	462a      	mov	r2, r5
 801ad4e:	f000 fc19 	bl	801b584 <__lshift>
 801ad52:	1b7f      	subs	r7, r7, r5
 801ad54:	4604      	mov	r4, r0
 801ad56:	f100 0a14 	add.w	sl, r0, #20
 801ad5a:	f04f 0900 	mov.w	r9, #0
 801ad5e:	e7b8      	b.n	801acd2 <__gethex+0x1b6>
 801ad60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ad64:	42bd      	cmp	r5, r7
 801ad66:	dd6f      	ble.n	801ae48 <__gethex+0x32c>
 801ad68:	1bed      	subs	r5, r5, r7
 801ad6a:	42ae      	cmp	r6, r5
 801ad6c:	dc34      	bgt.n	801add8 <__gethex+0x2bc>
 801ad6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ad72:	2b02      	cmp	r3, #2
 801ad74:	d022      	beq.n	801adbc <__gethex+0x2a0>
 801ad76:	2b03      	cmp	r3, #3
 801ad78:	d024      	beq.n	801adc4 <__gethex+0x2a8>
 801ad7a:	2b01      	cmp	r3, #1
 801ad7c:	d115      	bne.n	801adaa <__gethex+0x28e>
 801ad7e:	42ae      	cmp	r6, r5
 801ad80:	d113      	bne.n	801adaa <__gethex+0x28e>
 801ad82:	2e01      	cmp	r6, #1
 801ad84:	d10b      	bne.n	801ad9e <__gethex+0x282>
 801ad86:	9a02      	ldr	r2, [sp, #8]
 801ad88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ad8c:	6013      	str	r3, [r2, #0]
 801ad8e:	2301      	movs	r3, #1
 801ad90:	6123      	str	r3, [r4, #16]
 801ad92:	f8ca 3000 	str.w	r3, [sl]
 801ad96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad98:	2562      	movs	r5, #98	@ 0x62
 801ad9a:	601c      	str	r4, [r3, #0]
 801ad9c:	e73a      	b.n	801ac14 <__gethex+0xf8>
 801ad9e:	1e71      	subs	r1, r6, #1
 801ada0:	4620      	mov	r0, r4
 801ada2:	f000 fe28 	bl	801b9f6 <__any_on>
 801ada6:	2800      	cmp	r0, #0
 801ada8:	d1ed      	bne.n	801ad86 <__gethex+0x26a>
 801adaa:	9801      	ldr	r0, [sp, #4]
 801adac:	4621      	mov	r1, r4
 801adae:	f000 f9d9 	bl	801b164 <_Bfree>
 801adb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801adb4:	2300      	movs	r3, #0
 801adb6:	6013      	str	r3, [r2, #0]
 801adb8:	2550      	movs	r5, #80	@ 0x50
 801adba:	e72b      	b.n	801ac14 <__gethex+0xf8>
 801adbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d1f3      	bne.n	801adaa <__gethex+0x28e>
 801adc2:	e7e0      	b.n	801ad86 <__gethex+0x26a>
 801adc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d1dd      	bne.n	801ad86 <__gethex+0x26a>
 801adca:	e7ee      	b.n	801adaa <__gethex+0x28e>
 801adcc:	0801f250 	.word	0x0801f250
 801add0:	0801f308 	.word	0x0801f308
 801add4:	0801f319 	.word	0x0801f319
 801add8:	1e6f      	subs	r7, r5, #1
 801adda:	f1b9 0f00 	cmp.w	r9, #0
 801adde:	d130      	bne.n	801ae42 <__gethex+0x326>
 801ade0:	b127      	cbz	r7, 801adec <__gethex+0x2d0>
 801ade2:	4639      	mov	r1, r7
 801ade4:	4620      	mov	r0, r4
 801ade6:	f000 fe06 	bl	801b9f6 <__any_on>
 801adea:	4681      	mov	r9, r0
 801adec:	117a      	asrs	r2, r7, #5
 801adee:	2301      	movs	r3, #1
 801adf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801adf4:	f007 071f 	and.w	r7, r7, #31
 801adf8:	40bb      	lsls	r3, r7
 801adfa:	4213      	tst	r3, r2
 801adfc:	4629      	mov	r1, r5
 801adfe:	4620      	mov	r0, r4
 801ae00:	bf18      	it	ne
 801ae02:	f049 0902 	orrne.w	r9, r9, #2
 801ae06:	f7ff fe21 	bl	801aa4c <rshift>
 801ae0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801ae0e:	1b76      	subs	r6, r6, r5
 801ae10:	2502      	movs	r5, #2
 801ae12:	f1b9 0f00 	cmp.w	r9, #0
 801ae16:	d047      	beq.n	801aea8 <__gethex+0x38c>
 801ae18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ae1c:	2b02      	cmp	r3, #2
 801ae1e:	d015      	beq.n	801ae4c <__gethex+0x330>
 801ae20:	2b03      	cmp	r3, #3
 801ae22:	d017      	beq.n	801ae54 <__gethex+0x338>
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	d109      	bne.n	801ae3c <__gethex+0x320>
 801ae28:	f019 0f02 	tst.w	r9, #2
 801ae2c:	d006      	beq.n	801ae3c <__gethex+0x320>
 801ae2e:	f8da 3000 	ldr.w	r3, [sl]
 801ae32:	ea49 0903 	orr.w	r9, r9, r3
 801ae36:	f019 0f01 	tst.w	r9, #1
 801ae3a:	d10e      	bne.n	801ae5a <__gethex+0x33e>
 801ae3c:	f045 0510 	orr.w	r5, r5, #16
 801ae40:	e032      	b.n	801aea8 <__gethex+0x38c>
 801ae42:	f04f 0901 	mov.w	r9, #1
 801ae46:	e7d1      	b.n	801adec <__gethex+0x2d0>
 801ae48:	2501      	movs	r5, #1
 801ae4a:	e7e2      	b.n	801ae12 <__gethex+0x2f6>
 801ae4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae4e:	f1c3 0301 	rsb	r3, r3, #1
 801ae52:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ae54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d0f0      	beq.n	801ae3c <__gethex+0x320>
 801ae5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ae5e:	f104 0314 	add.w	r3, r4, #20
 801ae62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ae66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ae6a:	f04f 0c00 	mov.w	ip, #0
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae74:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ae78:	d01b      	beq.n	801aeb2 <__gethex+0x396>
 801ae7a:	3201      	adds	r2, #1
 801ae7c:	6002      	str	r2, [r0, #0]
 801ae7e:	2d02      	cmp	r5, #2
 801ae80:	f104 0314 	add.w	r3, r4, #20
 801ae84:	d13c      	bne.n	801af00 <__gethex+0x3e4>
 801ae86:	f8d8 2000 	ldr.w	r2, [r8]
 801ae8a:	3a01      	subs	r2, #1
 801ae8c:	42b2      	cmp	r2, r6
 801ae8e:	d109      	bne.n	801aea4 <__gethex+0x388>
 801ae90:	1171      	asrs	r1, r6, #5
 801ae92:	2201      	movs	r2, #1
 801ae94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ae98:	f006 061f 	and.w	r6, r6, #31
 801ae9c:	fa02 f606 	lsl.w	r6, r2, r6
 801aea0:	421e      	tst	r6, r3
 801aea2:	d13a      	bne.n	801af1a <__gethex+0x3fe>
 801aea4:	f045 0520 	orr.w	r5, r5, #32
 801aea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aeaa:	601c      	str	r4, [r3, #0]
 801aeac:	9b02      	ldr	r3, [sp, #8]
 801aeae:	601f      	str	r7, [r3, #0]
 801aeb0:	e6b0      	b.n	801ac14 <__gethex+0xf8>
 801aeb2:	4299      	cmp	r1, r3
 801aeb4:	f843 cc04 	str.w	ip, [r3, #-4]
 801aeb8:	d8d9      	bhi.n	801ae6e <__gethex+0x352>
 801aeba:	68a3      	ldr	r3, [r4, #8]
 801aebc:	459b      	cmp	fp, r3
 801aebe:	db17      	blt.n	801aef0 <__gethex+0x3d4>
 801aec0:	6861      	ldr	r1, [r4, #4]
 801aec2:	9801      	ldr	r0, [sp, #4]
 801aec4:	3101      	adds	r1, #1
 801aec6:	f000 f90d 	bl	801b0e4 <_Balloc>
 801aeca:	4681      	mov	r9, r0
 801aecc:	b918      	cbnz	r0, 801aed6 <__gethex+0x3ba>
 801aece:	4b1a      	ldr	r3, [pc, #104]	@ (801af38 <__gethex+0x41c>)
 801aed0:	4602      	mov	r2, r0
 801aed2:	2184      	movs	r1, #132	@ 0x84
 801aed4:	e6c5      	b.n	801ac62 <__gethex+0x146>
 801aed6:	6922      	ldr	r2, [r4, #16]
 801aed8:	3202      	adds	r2, #2
 801aeda:	f104 010c 	add.w	r1, r4, #12
 801aede:	0092      	lsls	r2, r2, #2
 801aee0:	300c      	adds	r0, #12
 801aee2:	f7fe fef8 	bl	8019cd6 <memcpy>
 801aee6:	4621      	mov	r1, r4
 801aee8:	9801      	ldr	r0, [sp, #4]
 801aeea:	f000 f93b 	bl	801b164 <_Bfree>
 801aeee:	464c      	mov	r4, r9
 801aef0:	6923      	ldr	r3, [r4, #16]
 801aef2:	1c5a      	adds	r2, r3, #1
 801aef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801aef8:	6122      	str	r2, [r4, #16]
 801aefa:	2201      	movs	r2, #1
 801aefc:	615a      	str	r2, [r3, #20]
 801aefe:	e7be      	b.n	801ae7e <__gethex+0x362>
 801af00:	6922      	ldr	r2, [r4, #16]
 801af02:	455a      	cmp	r2, fp
 801af04:	dd0b      	ble.n	801af1e <__gethex+0x402>
 801af06:	2101      	movs	r1, #1
 801af08:	4620      	mov	r0, r4
 801af0a:	f7ff fd9f 	bl	801aa4c <rshift>
 801af0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801af12:	3701      	adds	r7, #1
 801af14:	42bb      	cmp	r3, r7
 801af16:	f6ff aee0 	blt.w	801acda <__gethex+0x1be>
 801af1a:	2501      	movs	r5, #1
 801af1c:	e7c2      	b.n	801aea4 <__gethex+0x388>
 801af1e:	f016 061f 	ands.w	r6, r6, #31
 801af22:	d0fa      	beq.n	801af1a <__gethex+0x3fe>
 801af24:	4453      	add	r3, sl
 801af26:	f1c6 0620 	rsb	r6, r6, #32
 801af2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801af2e:	f000 f9cb 	bl	801b2c8 <__hi0bits>
 801af32:	42b0      	cmp	r0, r6
 801af34:	dbe7      	blt.n	801af06 <__gethex+0x3ea>
 801af36:	e7f0      	b.n	801af1a <__gethex+0x3fe>
 801af38:	0801f308 	.word	0x0801f308

0801af3c <L_shift>:
 801af3c:	f1c2 0208 	rsb	r2, r2, #8
 801af40:	0092      	lsls	r2, r2, #2
 801af42:	b570      	push	{r4, r5, r6, lr}
 801af44:	f1c2 0620 	rsb	r6, r2, #32
 801af48:	6843      	ldr	r3, [r0, #4]
 801af4a:	6804      	ldr	r4, [r0, #0]
 801af4c:	fa03 f506 	lsl.w	r5, r3, r6
 801af50:	432c      	orrs	r4, r5
 801af52:	40d3      	lsrs	r3, r2
 801af54:	6004      	str	r4, [r0, #0]
 801af56:	f840 3f04 	str.w	r3, [r0, #4]!
 801af5a:	4288      	cmp	r0, r1
 801af5c:	d3f4      	bcc.n	801af48 <L_shift+0xc>
 801af5e:	bd70      	pop	{r4, r5, r6, pc}

0801af60 <__match>:
 801af60:	b530      	push	{r4, r5, lr}
 801af62:	6803      	ldr	r3, [r0, #0]
 801af64:	3301      	adds	r3, #1
 801af66:	f811 4b01 	ldrb.w	r4, [r1], #1
 801af6a:	b914      	cbnz	r4, 801af72 <__match+0x12>
 801af6c:	6003      	str	r3, [r0, #0]
 801af6e:	2001      	movs	r0, #1
 801af70:	bd30      	pop	{r4, r5, pc}
 801af72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801af7a:	2d19      	cmp	r5, #25
 801af7c:	bf98      	it	ls
 801af7e:	3220      	addls	r2, #32
 801af80:	42a2      	cmp	r2, r4
 801af82:	d0f0      	beq.n	801af66 <__match+0x6>
 801af84:	2000      	movs	r0, #0
 801af86:	e7f3      	b.n	801af70 <__match+0x10>

0801af88 <__hexnan>:
 801af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af8c:	680b      	ldr	r3, [r1, #0]
 801af8e:	6801      	ldr	r1, [r0, #0]
 801af90:	115e      	asrs	r6, r3, #5
 801af92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801af96:	f013 031f 	ands.w	r3, r3, #31
 801af9a:	b087      	sub	sp, #28
 801af9c:	bf18      	it	ne
 801af9e:	3604      	addne	r6, #4
 801afa0:	2500      	movs	r5, #0
 801afa2:	1f37      	subs	r7, r6, #4
 801afa4:	4682      	mov	sl, r0
 801afa6:	4690      	mov	r8, r2
 801afa8:	9301      	str	r3, [sp, #4]
 801afaa:	f846 5c04 	str.w	r5, [r6, #-4]
 801afae:	46b9      	mov	r9, r7
 801afb0:	463c      	mov	r4, r7
 801afb2:	9502      	str	r5, [sp, #8]
 801afb4:	46ab      	mov	fp, r5
 801afb6:	784a      	ldrb	r2, [r1, #1]
 801afb8:	1c4b      	adds	r3, r1, #1
 801afba:	9303      	str	r3, [sp, #12]
 801afbc:	b342      	cbz	r2, 801b010 <__hexnan+0x88>
 801afbe:	4610      	mov	r0, r2
 801afc0:	9105      	str	r1, [sp, #20]
 801afc2:	9204      	str	r2, [sp, #16]
 801afc4:	f7ff fd94 	bl	801aaf0 <__hexdig_fun>
 801afc8:	2800      	cmp	r0, #0
 801afca:	d151      	bne.n	801b070 <__hexnan+0xe8>
 801afcc:	9a04      	ldr	r2, [sp, #16]
 801afce:	9905      	ldr	r1, [sp, #20]
 801afd0:	2a20      	cmp	r2, #32
 801afd2:	d818      	bhi.n	801b006 <__hexnan+0x7e>
 801afd4:	9b02      	ldr	r3, [sp, #8]
 801afd6:	459b      	cmp	fp, r3
 801afd8:	dd13      	ble.n	801b002 <__hexnan+0x7a>
 801afda:	454c      	cmp	r4, r9
 801afdc:	d206      	bcs.n	801afec <__hexnan+0x64>
 801afde:	2d07      	cmp	r5, #7
 801afe0:	dc04      	bgt.n	801afec <__hexnan+0x64>
 801afe2:	462a      	mov	r2, r5
 801afe4:	4649      	mov	r1, r9
 801afe6:	4620      	mov	r0, r4
 801afe8:	f7ff ffa8 	bl	801af3c <L_shift>
 801afec:	4544      	cmp	r4, r8
 801afee:	d952      	bls.n	801b096 <__hexnan+0x10e>
 801aff0:	2300      	movs	r3, #0
 801aff2:	f1a4 0904 	sub.w	r9, r4, #4
 801aff6:	f844 3c04 	str.w	r3, [r4, #-4]
 801affa:	f8cd b008 	str.w	fp, [sp, #8]
 801affe:	464c      	mov	r4, r9
 801b000:	461d      	mov	r5, r3
 801b002:	9903      	ldr	r1, [sp, #12]
 801b004:	e7d7      	b.n	801afb6 <__hexnan+0x2e>
 801b006:	2a29      	cmp	r2, #41	@ 0x29
 801b008:	d157      	bne.n	801b0ba <__hexnan+0x132>
 801b00a:	3102      	adds	r1, #2
 801b00c:	f8ca 1000 	str.w	r1, [sl]
 801b010:	f1bb 0f00 	cmp.w	fp, #0
 801b014:	d051      	beq.n	801b0ba <__hexnan+0x132>
 801b016:	454c      	cmp	r4, r9
 801b018:	d206      	bcs.n	801b028 <__hexnan+0xa0>
 801b01a:	2d07      	cmp	r5, #7
 801b01c:	dc04      	bgt.n	801b028 <__hexnan+0xa0>
 801b01e:	462a      	mov	r2, r5
 801b020:	4649      	mov	r1, r9
 801b022:	4620      	mov	r0, r4
 801b024:	f7ff ff8a 	bl	801af3c <L_shift>
 801b028:	4544      	cmp	r4, r8
 801b02a:	d936      	bls.n	801b09a <__hexnan+0x112>
 801b02c:	f1a8 0204 	sub.w	r2, r8, #4
 801b030:	4623      	mov	r3, r4
 801b032:	f853 1b04 	ldr.w	r1, [r3], #4
 801b036:	f842 1f04 	str.w	r1, [r2, #4]!
 801b03a:	429f      	cmp	r7, r3
 801b03c:	d2f9      	bcs.n	801b032 <__hexnan+0xaa>
 801b03e:	1b3b      	subs	r3, r7, r4
 801b040:	f023 0303 	bic.w	r3, r3, #3
 801b044:	3304      	adds	r3, #4
 801b046:	3401      	adds	r4, #1
 801b048:	3e03      	subs	r6, #3
 801b04a:	42b4      	cmp	r4, r6
 801b04c:	bf88      	it	hi
 801b04e:	2304      	movhi	r3, #4
 801b050:	4443      	add	r3, r8
 801b052:	2200      	movs	r2, #0
 801b054:	f843 2b04 	str.w	r2, [r3], #4
 801b058:	429f      	cmp	r7, r3
 801b05a:	d2fb      	bcs.n	801b054 <__hexnan+0xcc>
 801b05c:	683b      	ldr	r3, [r7, #0]
 801b05e:	b91b      	cbnz	r3, 801b068 <__hexnan+0xe0>
 801b060:	4547      	cmp	r7, r8
 801b062:	d128      	bne.n	801b0b6 <__hexnan+0x12e>
 801b064:	2301      	movs	r3, #1
 801b066:	603b      	str	r3, [r7, #0]
 801b068:	2005      	movs	r0, #5
 801b06a:	b007      	add	sp, #28
 801b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b070:	3501      	adds	r5, #1
 801b072:	2d08      	cmp	r5, #8
 801b074:	f10b 0b01 	add.w	fp, fp, #1
 801b078:	dd06      	ble.n	801b088 <__hexnan+0x100>
 801b07a:	4544      	cmp	r4, r8
 801b07c:	d9c1      	bls.n	801b002 <__hexnan+0x7a>
 801b07e:	2300      	movs	r3, #0
 801b080:	f844 3c04 	str.w	r3, [r4, #-4]
 801b084:	2501      	movs	r5, #1
 801b086:	3c04      	subs	r4, #4
 801b088:	6822      	ldr	r2, [r4, #0]
 801b08a:	f000 000f 	and.w	r0, r0, #15
 801b08e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b092:	6020      	str	r0, [r4, #0]
 801b094:	e7b5      	b.n	801b002 <__hexnan+0x7a>
 801b096:	2508      	movs	r5, #8
 801b098:	e7b3      	b.n	801b002 <__hexnan+0x7a>
 801b09a:	9b01      	ldr	r3, [sp, #4]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d0dd      	beq.n	801b05c <__hexnan+0xd4>
 801b0a0:	f1c3 0320 	rsb	r3, r3, #32
 801b0a4:	f04f 32ff 	mov.w	r2, #4294967295
 801b0a8:	40da      	lsrs	r2, r3
 801b0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b0ae:	4013      	ands	r3, r2
 801b0b0:	f846 3c04 	str.w	r3, [r6, #-4]
 801b0b4:	e7d2      	b.n	801b05c <__hexnan+0xd4>
 801b0b6:	3f04      	subs	r7, #4
 801b0b8:	e7d0      	b.n	801b05c <__hexnan+0xd4>
 801b0ba:	2004      	movs	r0, #4
 801b0bc:	e7d5      	b.n	801b06a <__hexnan+0xe2>

0801b0be <__ascii_mbtowc>:
 801b0be:	b082      	sub	sp, #8
 801b0c0:	b901      	cbnz	r1, 801b0c4 <__ascii_mbtowc+0x6>
 801b0c2:	a901      	add	r1, sp, #4
 801b0c4:	b142      	cbz	r2, 801b0d8 <__ascii_mbtowc+0x1a>
 801b0c6:	b14b      	cbz	r3, 801b0dc <__ascii_mbtowc+0x1e>
 801b0c8:	7813      	ldrb	r3, [r2, #0]
 801b0ca:	600b      	str	r3, [r1, #0]
 801b0cc:	7812      	ldrb	r2, [r2, #0]
 801b0ce:	1e10      	subs	r0, r2, #0
 801b0d0:	bf18      	it	ne
 801b0d2:	2001      	movne	r0, #1
 801b0d4:	b002      	add	sp, #8
 801b0d6:	4770      	bx	lr
 801b0d8:	4610      	mov	r0, r2
 801b0da:	e7fb      	b.n	801b0d4 <__ascii_mbtowc+0x16>
 801b0dc:	f06f 0001 	mvn.w	r0, #1
 801b0e0:	e7f8      	b.n	801b0d4 <__ascii_mbtowc+0x16>
	...

0801b0e4 <_Balloc>:
 801b0e4:	b570      	push	{r4, r5, r6, lr}
 801b0e6:	69c6      	ldr	r6, [r0, #28]
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	460d      	mov	r5, r1
 801b0ec:	b976      	cbnz	r6, 801b10c <_Balloc+0x28>
 801b0ee:	2010      	movs	r0, #16
 801b0f0:	f7fc ff58 	bl	8017fa4 <malloc>
 801b0f4:	4602      	mov	r2, r0
 801b0f6:	61e0      	str	r0, [r4, #28]
 801b0f8:	b920      	cbnz	r0, 801b104 <_Balloc+0x20>
 801b0fa:	4b18      	ldr	r3, [pc, #96]	@ (801b15c <_Balloc+0x78>)
 801b0fc:	4818      	ldr	r0, [pc, #96]	@ (801b160 <_Balloc+0x7c>)
 801b0fe:	216b      	movs	r1, #107	@ 0x6b
 801b100:	f001 fc24 	bl	801c94c <__assert_func>
 801b104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b108:	6006      	str	r6, [r0, #0]
 801b10a:	60c6      	str	r6, [r0, #12]
 801b10c:	69e6      	ldr	r6, [r4, #28]
 801b10e:	68f3      	ldr	r3, [r6, #12]
 801b110:	b183      	cbz	r3, 801b134 <_Balloc+0x50>
 801b112:	69e3      	ldr	r3, [r4, #28]
 801b114:	68db      	ldr	r3, [r3, #12]
 801b116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b11a:	b9b8      	cbnz	r0, 801b14c <_Balloc+0x68>
 801b11c:	2101      	movs	r1, #1
 801b11e:	fa01 f605 	lsl.w	r6, r1, r5
 801b122:	1d72      	adds	r2, r6, #5
 801b124:	0092      	lsls	r2, r2, #2
 801b126:	4620      	mov	r0, r4
 801b128:	f001 fc2e 	bl	801c988 <_calloc_r>
 801b12c:	b160      	cbz	r0, 801b148 <_Balloc+0x64>
 801b12e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b132:	e00e      	b.n	801b152 <_Balloc+0x6e>
 801b134:	2221      	movs	r2, #33	@ 0x21
 801b136:	2104      	movs	r1, #4
 801b138:	4620      	mov	r0, r4
 801b13a:	f001 fc25 	bl	801c988 <_calloc_r>
 801b13e:	69e3      	ldr	r3, [r4, #28]
 801b140:	60f0      	str	r0, [r6, #12]
 801b142:	68db      	ldr	r3, [r3, #12]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d1e4      	bne.n	801b112 <_Balloc+0x2e>
 801b148:	2000      	movs	r0, #0
 801b14a:	bd70      	pop	{r4, r5, r6, pc}
 801b14c:	6802      	ldr	r2, [r0, #0]
 801b14e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b152:	2300      	movs	r3, #0
 801b154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b158:	e7f7      	b.n	801b14a <_Balloc+0x66>
 801b15a:	bf00      	nop
 801b15c:	0801f299 	.word	0x0801f299
 801b160:	0801f379 	.word	0x0801f379

0801b164 <_Bfree>:
 801b164:	b570      	push	{r4, r5, r6, lr}
 801b166:	69c6      	ldr	r6, [r0, #28]
 801b168:	4605      	mov	r5, r0
 801b16a:	460c      	mov	r4, r1
 801b16c:	b976      	cbnz	r6, 801b18c <_Bfree+0x28>
 801b16e:	2010      	movs	r0, #16
 801b170:	f7fc ff18 	bl	8017fa4 <malloc>
 801b174:	4602      	mov	r2, r0
 801b176:	61e8      	str	r0, [r5, #28]
 801b178:	b920      	cbnz	r0, 801b184 <_Bfree+0x20>
 801b17a:	4b09      	ldr	r3, [pc, #36]	@ (801b1a0 <_Bfree+0x3c>)
 801b17c:	4809      	ldr	r0, [pc, #36]	@ (801b1a4 <_Bfree+0x40>)
 801b17e:	218f      	movs	r1, #143	@ 0x8f
 801b180:	f001 fbe4 	bl	801c94c <__assert_func>
 801b184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b188:	6006      	str	r6, [r0, #0]
 801b18a:	60c6      	str	r6, [r0, #12]
 801b18c:	b13c      	cbz	r4, 801b19e <_Bfree+0x3a>
 801b18e:	69eb      	ldr	r3, [r5, #28]
 801b190:	6862      	ldr	r2, [r4, #4]
 801b192:	68db      	ldr	r3, [r3, #12]
 801b194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b198:	6021      	str	r1, [r4, #0]
 801b19a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b19e:	bd70      	pop	{r4, r5, r6, pc}
 801b1a0:	0801f299 	.word	0x0801f299
 801b1a4:	0801f379 	.word	0x0801f379

0801b1a8 <__multadd>:
 801b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1ac:	690d      	ldr	r5, [r1, #16]
 801b1ae:	4607      	mov	r7, r0
 801b1b0:	460c      	mov	r4, r1
 801b1b2:	461e      	mov	r6, r3
 801b1b4:	f101 0c14 	add.w	ip, r1, #20
 801b1b8:	2000      	movs	r0, #0
 801b1ba:	f8dc 3000 	ldr.w	r3, [ip]
 801b1be:	b299      	uxth	r1, r3
 801b1c0:	fb02 6101 	mla	r1, r2, r1, r6
 801b1c4:	0c1e      	lsrs	r6, r3, #16
 801b1c6:	0c0b      	lsrs	r3, r1, #16
 801b1c8:	fb02 3306 	mla	r3, r2, r6, r3
 801b1cc:	b289      	uxth	r1, r1
 801b1ce:	3001      	adds	r0, #1
 801b1d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b1d4:	4285      	cmp	r5, r0
 801b1d6:	f84c 1b04 	str.w	r1, [ip], #4
 801b1da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b1de:	dcec      	bgt.n	801b1ba <__multadd+0x12>
 801b1e0:	b30e      	cbz	r6, 801b226 <__multadd+0x7e>
 801b1e2:	68a3      	ldr	r3, [r4, #8]
 801b1e4:	42ab      	cmp	r3, r5
 801b1e6:	dc19      	bgt.n	801b21c <__multadd+0x74>
 801b1e8:	6861      	ldr	r1, [r4, #4]
 801b1ea:	4638      	mov	r0, r7
 801b1ec:	3101      	adds	r1, #1
 801b1ee:	f7ff ff79 	bl	801b0e4 <_Balloc>
 801b1f2:	4680      	mov	r8, r0
 801b1f4:	b928      	cbnz	r0, 801b202 <__multadd+0x5a>
 801b1f6:	4602      	mov	r2, r0
 801b1f8:	4b0c      	ldr	r3, [pc, #48]	@ (801b22c <__multadd+0x84>)
 801b1fa:	480d      	ldr	r0, [pc, #52]	@ (801b230 <__multadd+0x88>)
 801b1fc:	21ba      	movs	r1, #186	@ 0xba
 801b1fe:	f001 fba5 	bl	801c94c <__assert_func>
 801b202:	6922      	ldr	r2, [r4, #16]
 801b204:	3202      	adds	r2, #2
 801b206:	f104 010c 	add.w	r1, r4, #12
 801b20a:	0092      	lsls	r2, r2, #2
 801b20c:	300c      	adds	r0, #12
 801b20e:	f7fe fd62 	bl	8019cd6 <memcpy>
 801b212:	4621      	mov	r1, r4
 801b214:	4638      	mov	r0, r7
 801b216:	f7ff ffa5 	bl	801b164 <_Bfree>
 801b21a:	4644      	mov	r4, r8
 801b21c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b220:	3501      	adds	r5, #1
 801b222:	615e      	str	r6, [r3, #20]
 801b224:	6125      	str	r5, [r4, #16]
 801b226:	4620      	mov	r0, r4
 801b228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b22c:	0801f308 	.word	0x0801f308
 801b230:	0801f379 	.word	0x0801f379

0801b234 <__s2b>:
 801b234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b238:	460c      	mov	r4, r1
 801b23a:	4615      	mov	r5, r2
 801b23c:	461f      	mov	r7, r3
 801b23e:	2209      	movs	r2, #9
 801b240:	3308      	adds	r3, #8
 801b242:	4606      	mov	r6, r0
 801b244:	fb93 f3f2 	sdiv	r3, r3, r2
 801b248:	2100      	movs	r1, #0
 801b24a:	2201      	movs	r2, #1
 801b24c:	429a      	cmp	r2, r3
 801b24e:	db09      	blt.n	801b264 <__s2b+0x30>
 801b250:	4630      	mov	r0, r6
 801b252:	f7ff ff47 	bl	801b0e4 <_Balloc>
 801b256:	b940      	cbnz	r0, 801b26a <__s2b+0x36>
 801b258:	4602      	mov	r2, r0
 801b25a:	4b19      	ldr	r3, [pc, #100]	@ (801b2c0 <__s2b+0x8c>)
 801b25c:	4819      	ldr	r0, [pc, #100]	@ (801b2c4 <__s2b+0x90>)
 801b25e:	21d3      	movs	r1, #211	@ 0xd3
 801b260:	f001 fb74 	bl	801c94c <__assert_func>
 801b264:	0052      	lsls	r2, r2, #1
 801b266:	3101      	adds	r1, #1
 801b268:	e7f0      	b.n	801b24c <__s2b+0x18>
 801b26a:	9b08      	ldr	r3, [sp, #32]
 801b26c:	6143      	str	r3, [r0, #20]
 801b26e:	2d09      	cmp	r5, #9
 801b270:	f04f 0301 	mov.w	r3, #1
 801b274:	6103      	str	r3, [r0, #16]
 801b276:	dd16      	ble.n	801b2a6 <__s2b+0x72>
 801b278:	f104 0909 	add.w	r9, r4, #9
 801b27c:	46c8      	mov	r8, r9
 801b27e:	442c      	add	r4, r5
 801b280:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b284:	4601      	mov	r1, r0
 801b286:	3b30      	subs	r3, #48	@ 0x30
 801b288:	220a      	movs	r2, #10
 801b28a:	4630      	mov	r0, r6
 801b28c:	f7ff ff8c 	bl	801b1a8 <__multadd>
 801b290:	45a0      	cmp	r8, r4
 801b292:	d1f5      	bne.n	801b280 <__s2b+0x4c>
 801b294:	f1a5 0408 	sub.w	r4, r5, #8
 801b298:	444c      	add	r4, r9
 801b29a:	1b2d      	subs	r5, r5, r4
 801b29c:	1963      	adds	r3, r4, r5
 801b29e:	42bb      	cmp	r3, r7
 801b2a0:	db04      	blt.n	801b2ac <__s2b+0x78>
 801b2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2a6:	340a      	adds	r4, #10
 801b2a8:	2509      	movs	r5, #9
 801b2aa:	e7f6      	b.n	801b29a <__s2b+0x66>
 801b2ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b2b0:	4601      	mov	r1, r0
 801b2b2:	3b30      	subs	r3, #48	@ 0x30
 801b2b4:	220a      	movs	r2, #10
 801b2b6:	4630      	mov	r0, r6
 801b2b8:	f7ff ff76 	bl	801b1a8 <__multadd>
 801b2bc:	e7ee      	b.n	801b29c <__s2b+0x68>
 801b2be:	bf00      	nop
 801b2c0:	0801f308 	.word	0x0801f308
 801b2c4:	0801f379 	.word	0x0801f379

0801b2c8 <__hi0bits>:
 801b2c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	bf36      	itet	cc
 801b2d0:	0403      	lslcc	r3, r0, #16
 801b2d2:	2000      	movcs	r0, #0
 801b2d4:	2010      	movcc	r0, #16
 801b2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b2da:	bf3c      	itt	cc
 801b2dc:	021b      	lslcc	r3, r3, #8
 801b2de:	3008      	addcc	r0, #8
 801b2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b2e4:	bf3c      	itt	cc
 801b2e6:	011b      	lslcc	r3, r3, #4
 801b2e8:	3004      	addcc	r0, #4
 801b2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b2ee:	bf3c      	itt	cc
 801b2f0:	009b      	lslcc	r3, r3, #2
 801b2f2:	3002      	addcc	r0, #2
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	db05      	blt.n	801b304 <__hi0bits+0x3c>
 801b2f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b2fc:	f100 0001 	add.w	r0, r0, #1
 801b300:	bf08      	it	eq
 801b302:	2020      	moveq	r0, #32
 801b304:	4770      	bx	lr

0801b306 <__lo0bits>:
 801b306:	6803      	ldr	r3, [r0, #0]
 801b308:	4602      	mov	r2, r0
 801b30a:	f013 0007 	ands.w	r0, r3, #7
 801b30e:	d00b      	beq.n	801b328 <__lo0bits+0x22>
 801b310:	07d9      	lsls	r1, r3, #31
 801b312:	d421      	bmi.n	801b358 <__lo0bits+0x52>
 801b314:	0798      	lsls	r0, r3, #30
 801b316:	bf49      	itett	mi
 801b318:	085b      	lsrmi	r3, r3, #1
 801b31a:	089b      	lsrpl	r3, r3, #2
 801b31c:	2001      	movmi	r0, #1
 801b31e:	6013      	strmi	r3, [r2, #0]
 801b320:	bf5c      	itt	pl
 801b322:	6013      	strpl	r3, [r2, #0]
 801b324:	2002      	movpl	r0, #2
 801b326:	4770      	bx	lr
 801b328:	b299      	uxth	r1, r3
 801b32a:	b909      	cbnz	r1, 801b330 <__lo0bits+0x2a>
 801b32c:	0c1b      	lsrs	r3, r3, #16
 801b32e:	2010      	movs	r0, #16
 801b330:	b2d9      	uxtb	r1, r3
 801b332:	b909      	cbnz	r1, 801b338 <__lo0bits+0x32>
 801b334:	3008      	adds	r0, #8
 801b336:	0a1b      	lsrs	r3, r3, #8
 801b338:	0719      	lsls	r1, r3, #28
 801b33a:	bf04      	itt	eq
 801b33c:	091b      	lsreq	r3, r3, #4
 801b33e:	3004      	addeq	r0, #4
 801b340:	0799      	lsls	r1, r3, #30
 801b342:	bf04      	itt	eq
 801b344:	089b      	lsreq	r3, r3, #2
 801b346:	3002      	addeq	r0, #2
 801b348:	07d9      	lsls	r1, r3, #31
 801b34a:	d403      	bmi.n	801b354 <__lo0bits+0x4e>
 801b34c:	085b      	lsrs	r3, r3, #1
 801b34e:	f100 0001 	add.w	r0, r0, #1
 801b352:	d003      	beq.n	801b35c <__lo0bits+0x56>
 801b354:	6013      	str	r3, [r2, #0]
 801b356:	4770      	bx	lr
 801b358:	2000      	movs	r0, #0
 801b35a:	4770      	bx	lr
 801b35c:	2020      	movs	r0, #32
 801b35e:	4770      	bx	lr

0801b360 <__i2b>:
 801b360:	b510      	push	{r4, lr}
 801b362:	460c      	mov	r4, r1
 801b364:	2101      	movs	r1, #1
 801b366:	f7ff febd 	bl	801b0e4 <_Balloc>
 801b36a:	4602      	mov	r2, r0
 801b36c:	b928      	cbnz	r0, 801b37a <__i2b+0x1a>
 801b36e:	4b05      	ldr	r3, [pc, #20]	@ (801b384 <__i2b+0x24>)
 801b370:	4805      	ldr	r0, [pc, #20]	@ (801b388 <__i2b+0x28>)
 801b372:	f240 1145 	movw	r1, #325	@ 0x145
 801b376:	f001 fae9 	bl	801c94c <__assert_func>
 801b37a:	2301      	movs	r3, #1
 801b37c:	6144      	str	r4, [r0, #20]
 801b37e:	6103      	str	r3, [r0, #16]
 801b380:	bd10      	pop	{r4, pc}
 801b382:	bf00      	nop
 801b384:	0801f308 	.word	0x0801f308
 801b388:	0801f379 	.word	0x0801f379

0801b38c <__multiply>:
 801b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b390:	4617      	mov	r7, r2
 801b392:	690a      	ldr	r2, [r1, #16]
 801b394:	693b      	ldr	r3, [r7, #16]
 801b396:	429a      	cmp	r2, r3
 801b398:	bfa8      	it	ge
 801b39a:	463b      	movge	r3, r7
 801b39c:	4689      	mov	r9, r1
 801b39e:	bfa4      	itt	ge
 801b3a0:	460f      	movge	r7, r1
 801b3a2:	4699      	movge	r9, r3
 801b3a4:	693d      	ldr	r5, [r7, #16]
 801b3a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b3aa:	68bb      	ldr	r3, [r7, #8]
 801b3ac:	6879      	ldr	r1, [r7, #4]
 801b3ae:	eb05 060a 	add.w	r6, r5, sl
 801b3b2:	42b3      	cmp	r3, r6
 801b3b4:	b085      	sub	sp, #20
 801b3b6:	bfb8      	it	lt
 801b3b8:	3101      	addlt	r1, #1
 801b3ba:	f7ff fe93 	bl	801b0e4 <_Balloc>
 801b3be:	b930      	cbnz	r0, 801b3ce <__multiply+0x42>
 801b3c0:	4602      	mov	r2, r0
 801b3c2:	4b41      	ldr	r3, [pc, #260]	@ (801b4c8 <__multiply+0x13c>)
 801b3c4:	4841      	ldr	r0, [pc, #260]	@ (801b4cc <__multiply+0x140>)
 801b3c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b3ca:	f001 fabf 	bl	801c94c <__assert_func>
 801b3ce:	f100 0414 	add.w	r4, r0, #20
 801b3d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801b3d6:	4623      	mov	r3, r4
 801b3d8:	2200      	movs	r2, #0
 801b3da:	4573      	cmp	r3, lr
 801b3dc:	d320      	bcc.n	801b420 <__multiply+0x94>
 801b3de:	f107 0814 	add.w	r8, r7, #20
 801b3e2:	f109 0114 	add.w	r1, r9, #20
 801b3e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b3ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801b3ee:	9302      	str	r3, [sp, #8]
 801b3f0:	1beb      	subs	r3, r5, r7
 801b3f2:	3b15      	subs	r3, #21
 801b3f4:	f023 0303 	bic.w	r3, r3, #3
 801b3f8:	3304      	adds	r3, #4
 801b3fa:	3715      	adds	r7, #21
 801b3fc:	42bd      	cmp	r5, r7
 801b3fe:	bf38      	it	cc
 801b400:	2304      	movcc	r3, #4
 801b402:	9301      	str	r3, [sp, #4]
 801b404:	9b02      	ldr	r3, [sp, #8]
 801b406:	9103      	str	r1, [sp, #12]
 801b408:	428b      	cmp	r3, r1
 801b40a:	d80c      	bhi.n	801b426 <__multiply+0x9a>
 801b40c:	2e00      	cmp	r6, #0
 801b40e:	dd03      	ble.n	801b418 <__multiply+0x8c>
 801b410:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b414:	2b00      	cmp	r3, #0
 801b416:	d055      	beq.n	801b4c4 <__multiply+0x138>
 801b418:	6106      	str	r6, [r0, #16]
 801b41a:	b005      	add	sp, #20
 801b41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b420:	f843 2b04 	str.w	r2, [r3], #4
 801b424:	e7d9      	b.n	801b3da <__multiply+0x4e>
 801b426:	f8b1 a000 	ldrh.w	sl, [r1]
 801b42a:	f1ba 0f00 	cmp.w	sl, #0
 801b42e:	d01f      	beq.n	801b470 <__multiply+0xe4>
 801b430:	46c4      	mov	ip, r8
 801b432:	46a1      	mov	r9, r4
 801b434:	2700      	movs	r7, #0
 801b436:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b43a:	f8d9 3000 	ldr.w	r3, [r9]
 801b43e:	fa1f fb82 	uxth.w	fp, r2
 801b442:	b29b      	uxth	r3, r3
 801b444:	fb0a 330b 	mla	r3, sl, fp, r3
 801b448:	443b      	add	r3, r7
 801b44a:	f8d9 7000 	ldr.w	r7, [r9]
 801b44e:	0c12      	lsrs	r2, r2, #16
 801b450:	0c3f      	lsrs	r7, r7, #16
 801b452:	fb0a 7202 	mla	r2, sl, r2, r7
 801b456:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801b45a:	b29b      	uxth	r3, r3
 801b45c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b460:	4565      	cmp	r5, ip
 801b462:	f849 3b04 	str.w	r3, [r9], #4
 801b466:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801b46a:	d8e4      	bhi.n	801b436 <__multiply+0xaa>
 801b46c:	9b01      	ldr	r3, [sp, #4]
 801b46e:	50e7      	str	r7, [r4, r3]
 801b470:	9b03      	ldr	r3, [sp, #12]
 801b472:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b476:	3104      	adds	r1, #4
 801b478:	f1b9 0f00 	cmp.w	r9, #0
 801b47c:	d020      	beq.n	801b4c0 <__multiply+0x134>
 801b47e:	6823      	ldr	r3, [r4, #0]
 801b480:	4647      	mov	r7, r8
 801b482:	46a4      	mov	ip, r4
 801b484:	f04f 0a00 	mov.w	sl, #0
 801b488:	f8b7 b000 	ldrh.w	fp, [r7]
 801b48c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801b490:	fb09 220b 	mla	r2, r9, fp, r2
 801b494:	4452      	add	r2, sl
 801b496:	b29b      	uxth	r3, r3
 801b498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b49c:	f84c 3b04 	str.w	r3, [ip], #4
 801b4a0:	f857 3b04 	ldr.w	r3, [r7], #4
 801b4a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b4a8:	f8bc 3000 	ldrh.w	r3, [ip]
 801b4ac:	fb09 330a 	mla	r3, r9, sl, r3
 801b4b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801b4b4:	42bd      	cmp	r5, r7
 801b4b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b4ba:	d8e5      	bhi.n	801b488 <__multiply+0xfc>
 801b4bc:	9a01      	ldr	r2, [sp, #4]
 801b4be:	50a3      	str	r3, [r4, r2]
 801b4c0:	3404      	adds	r4, #4
 801b4c2:	e79f      	b.n	801b404 <__multiply+0x78>
 801b4c4:	3e01      	subs	r6, #1
 801b4c6:	e7a1      	b.n	801b40c <__multiply+0x80>
 801b4c8:	0801f308 	.word	0x0801f308
 801b4cc:	0801f379 	.word	0x0801f379

0801b4d0 <__pow5mult>:
 801b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4d4:	4615      	mov	r5, r2
 801b4d6:	f012 0203 	ands.w	r2, r2, #3
 801b4da:	4607      	mov	r7, r0
 801b4dc:	460e      	mov	r6, r1
 801b4de:	d007      	beq.n	801b4f0 <__pow5mult+0x20>
 801b4e0:	4c25      	ldr	r4, [pc, #148]	@ (801b578 <__pow5mult+0xa8>)
 801b4e2:	3a01      	subs	r2, #1
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b4ea:	f7ff fe5d 	bl	801b1a8 <__multadd>
 801b4ee:	4606      	mov	r6, r0
 801b4f0:	10ad      	asrs	r5, r5, #2
 801b4f2:	d03d      	beq.n	801b570 <__pow5mult+0xa0>
 801b4f4:	69fc      	ldr	r4, [r7, #28]
 801b4f6:	b97c      	cbnz	r4, 801b518 <__pow5mult+0x48>
 801b4f8:	2010      	movs	r0, #16
 801b4fa:	f7fc fd53 	bl	8017fa4 <malloc>
 801b4fe:	4602      	mov	r2, r0
 801b500:	61f8      	str	r0, [r7, #28]
 801b502:	b928      	cbnz	r0, 801b510 <__pow5mult+0x40>
 801b504:	4b1d      	ldr	r3, [pc, #116]	@ (801b57c <__pow5mult+0xac>)
 801b506:	481e      	ldr	r0, [pc, #120]	@ (801b580 <__pow5mult+0xb0>)
 801b508:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b50c:	f001 fa1e 	bl	801c94c <__assert_func>
 801b510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b514:	6004      	str	r4, [r0, #0]
 801b516:	60c4      	str	r4, [r0, #12]
 801b518:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b51c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b520:	b94c      	cbnz	r4, 801b536 <__pow5mult+0x66>
 801b522:	f240 2171 	movw	r1, #625	@ 0x271
 801b526:	4638      	mov	r0, r7
 801b528:	f7ff ff1a 	bl	801b360 <__i2b>
 801b52c:	2300      	movs	r3, #0
 801b52e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b532:	4604      	mov	r4, r0
 801b534:	6003      	str	r3, [r0, #0]
 801b536:	f04f 0900 	mov.w	r9, #0
 801b53a:	07eb      	lsls	r3, r5, #31
 801b53c:	d50a      	bpl.n	801b554 <__pow5mult+0x84>
 801b53e:	4631      	mov	r1, r6
 801b540:	4622      	mov	r2, r4
 801b542:	4638      	mov	r0, r7
 801b544:	f7ff ff22 	bl	801b38c <__multiply>
 801b548:	4631      	mov	r1, r6
 801b54a:	4680      	mov	r8, r0
 801b54c:	4638      	mov	r0, r7
 801b54e:	f7ff fe09 	bl	801b164 <_Bfree>
 801b552:	4646      	mov	r6, r8
 801b554:	106d      	asrs	r5, r5, #1
 801b556:	d00b      	beq.n	801b570 <__pow5mult+0xa0>
 801b558:	6820      	ldr	r0, [r4, #0]
 801b55a:	b938      	cbnz	r0, 801b56c <__pow5mult+0x9c>
 801b55c:	4622      	mov	r2, r4
 801b55e:	4621      	mov	r1, r4
 801b560:	4638      	mov	r0, r7
 801b562:	f7ff ff13 	bl	801b38c <__multiply>
 801b566:	6020      	str	r0, [r4, #0]
 801b568:	f8c0 9000 	str.w	r9, [r0]
 801b56c:	4604      	mov	r4, r0
 801b56e:	e7e4      	b.n	801b53a <__pow5mult+0x6a>
 801b570:	4630      	mov	r0, r6
 801b572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b576:	bf00      	nop
 801b578:	0801f594 	.word	0x0801f594
 801b57c:	0801f299 	.word	0x0801f299
 801b580:	0801f379 	.word	0x0801f379

0801b584 <__lshift>:
 801b584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b588:	460c      	mov	r4, r1
 801b58a:	6849      	ldr	r1, [r1, #4]
 801b58c:	6923      	ldr	r3, [r4, #16]
 801b58e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b592:	68a3      	ldr	r3, [r4, #8]
 801b594:	4607      	mov	r7, r0
 801b596:	4691      	mov	r9, r2
 801b598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b59c:	f108 0601 	add.w	r6, r8, #1
 801b5a0:	42b3      	cmp	r3, r6
 801b5a2:	db0b      	blt.n	801b5bc <__lshift+0x38>
 801b5a4:	4638      	mov	r0, r7
 801b5a6:	f7ff fd9d 	bl	801b0e4 <_Balloc>
 801b5aa:	4605      	mov	r5, r0
 801b5ac:	b948      	cbnz	r0, 801b5c2 <__lshift+0x3e>
 801b5ae:	4602      	mov	r2, r0
 801b5b0:	4b28      	ldr	r3, [pc, #160]	@ (801b654 <__lshift+0xd0>)
 801b5b2:	4829      	ldr	r0, [pc, #164]	@ (801b658 <__lshift+0xd4>)
 801b5b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b5b8:	f001 f9c8 	bl	801c94c <__assert_func>
 801b5bc:	3101      	adds	r1, #1
 801b5be:	005b      	lsls	r3, r3, #1
 801b5c0:	e7ee      	b.n	801b5a0 <__lshift+0x1c>
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	f100 0114 	add.w	r1, r0, #20
 801b5c8:	f100 0210 	add.w	r2, r0, #16
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	4553      	cmp	r3, sl
 801b5d0:	db33      	blt.n	801b63a <__lshift+0xb6>
 801b5d2:	6920      	ldr	r0, [r4, #16]
 801b5d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b5d8:	f104 0314 	add.w	r3, r4, #20
 801b5dc:	f019 091f 	ands.w	r9, r9, #31
 801b5e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b5e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b5e8:	d02b      	beq.n	801b642 <__lshift+0xbe>
 801b5ea:	f1c9 0e20 	rsb	lr, r9, #32
 801b5ee:	468a      	mov	sl, r1
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	6818      	ldr	r0, [r3, #0]
 801b5f4:	fa00 f009 	lsl.w	r0, r0, r9
 801b5f8:	4310      	orrs	r0, r2
 801b5fa:	f84a 0b04 	str.w	r0, [sl], #4
 801b5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801b602:	459c      	cmp	ip, r3
 801b604:	fa22 f20e 	lsr.w	r2, r2, lr
 801b608:	d8f3      	bhi.n	801b5f2 <__lshift+0x6e>
 801b60a:	ebac 0304 	sub.w	r3, ip, r4
 801b60e:	3b15      	subs	r3, #21
 801b610:	f023 0303 	bic.w	r3, r3, #3
 801b614:	3304      	adds	r3, #4
 801b616:	f104 0015 	add.w	r0, r4, #21
 801b61a:	4560      	cmp	r0, ip
 801b61c:	bf88      	it	hi
 801b61e:	2304      	movhi	r3, #4
 801b620:	50ca      	str	r2, [r1, r3]
 801b622:	b10a      	cbz	r2, 801b628 <__lshift+0xa4>
 801b624:	f108 0602 	add.w	r6, r8, #2
 801b628:	3e01      	subs	r6, #1
 801b62a:	4638      	mov	r0, r7
 801b62c:	612e      	str	r6, [r5, #16]
 801b62e:	4621      	mov	r1, r4
 801b630:	f7ff fd98 	bl	801b164 <_Bfree>
 801b634:	4628      	mov	r0, r5
 801b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b63a:	f842 0f04 	str.w	r0, [r2, #4]!
 801b63e:	3301      	adds	r3, #1
 801b640:	e7c5      	b.n	801b5ce <__lshift+0x4a>
 801b642:	3904      	subs	r1, #4
 801b644:	f853 2b04 	ldr.w	r2, [r3], #4
 801b648:	f841 2f04 	str.w	r2, [r1, #4]!
 801b64c:	459c      	cmp	ip, r3
 801b64e:	d8f9      	bhi.n	801b644 <__lshift+0xc0>
 801b650:	e7ea      	b.n	801b628 <__lshift+0xa4>
 801b652:	bf00      	nop
 801b654:	0801f308 	.word	0x0801f308
 801b658:	0801f379 	.word	0x0801f379

0801b65c <__mcmp>:
 801b65c:	690a      	ldr	r2, [r1, #16]
 801b65e:	4603      	mov	r3, r0
 801b660:	6900      	ldr	r0, [r0, #16]
 801b662:	1a80      	subs	r0, r0, r2
 801b664:	b530      	push	{r4, r5, lr}
 801b666:	d10e      	bne.n	801b686 <__mcmp+0x2a>
 801b668:	3314      	adds	r3, #20
 801b66a:	3114      	adds	r1, #20
 801b66c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b67c:	4295      	cmp	r5, r2
 801b67e:	d003      	beq.n	801b688 <__mcmp+0x2c>
 801b680:	d205      	bcs.n	801b68e <__mcmp+0x32>
 801b682:	f04f 30ff 	mov.w	r0, #4294967295
 801b686:	bd30      	pop	{r4, r5, pc}
 801b688:	42a3      	cmp	r3, r4
 801b68a:	d3f3      	bcc.n	801b674 <__mcmp+0x18>
 801b68c:	e7fb      	b.n	801b686 <__mcmp+0x2a>
 801b68e:	2001      	movs	r0, #1
 801b690:	e7f9      	b.n	801b686 <__mcmp+0x2a>
	...

0801b694 <__mdiff>:
 801b694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b698:	4689      	mov	r9, r1
 801b69a:	4606      	mov	r6, r0
 801b69c:	4611      	mov	r1, r2
 801b69e:	4648      	mov	r0, r9
 801b6a0:	4614      	mov	r4, r2
 801b6a2:	f7ff ffdb 	bl	801b65c <__mcmp>
 801b6a6:	1e05      	subs	r5, r0, #0
 801b6a8:	d112      	bne.n	801b6d0 <__mdiff+0x3c>
 801b6aa:	4629      	mov	r1, r5
 801b6ac:	4630      	mov	r0, r6
 801b6ae:	f7ff fd19 	bl	801b0e4 <_Balloc>
 801b6b2:	4602      	mov	r2, r0
 801b6b4:	b928      	cbnz	r0, 801b6c2 <__mdiff+0x2e>
 801b6b6:	4b3f      	ldr	r3, [pc, #252]	@ (801b7b4 <__mdiff+0x120>)
 801b6b8:	f240 2137 	movw	r1, #567	@ 0x237
 801b6bc:	483e      	ldr	r0, [pc, #248]	@ (801b7b8 <__mdiff+0x124>)
 801b6be:	f001 f945 	bl	801c94c <__assert_func>
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b6c8:	4610      	mov	r0, r2
 801b6ca:	b003      	add	sp, #12
 801b6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6d0:	bfbc      	itt	lt
 801b6d2:	464b      	movlt	r3, r9
 801b6d4:	46a1      	movlt	r9, r4
 801b6d6:	4630      	mov	r0, r6
 801b6d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b6dc:	bfba      	itte	lt
 801b6de:	461c      	movlt	r4, r3
 801b6e0:	2501      	movlt	r5, #1
 801b6e2:	2500      	movge	r5, #0
 801b6e4:	f7ff fcfe 	bl	801b0e4 <_Balloc>
 801b6e8:	4602      	mov	r2, r0
 801b6ea:	b918      	cbnz	r0, 801b6f4 <__mdiff+0x60>
 801b6ec:	4b31      	ldr	r3, [pc, #196]	@ (801b7b4 <__mdiff+0x120>)
 801b6ee:	f240 2145 	movw	r1, #581	@ 0x245
 801b6f2:	e7e3      	b.n	801b6bc <__mdiff+0x28>
 801b6f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b6f8:	6926      	ldr	r6, [r4, #16]
 801b6fa:	60c5      	str	r5, [r0, #12]
 801b6fc:	f109 0310 	add.w	r3, r9, #16
 801b700:	f109 0514 	add.w	r5, r9, #20
 801b704:	f104 0e14 	add.w	lr, r4, #20
 801b708:	f100 0b14 	add.w	fp, r0, #20
 801b70c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b710:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b714:	9301      	str	r3, [sp, #4]
 801b716:	46d9      	mov	r9, fp
 801b718:	f04f 0c00 	mov.w	ip, #0
 801b71c:	9b01      	ldr	r3, [sp, #4]
 801b71e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b722:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b726:	9301      	str	r3, [sp, #4]
 801b728:	fa1f f38a 	uxth.w	r3, sl
 801b72c:	4619      	mov	r1, r3
 801b72e:	b283      	uxth	r3, r0
 801b730:	1acb      	subs	r3, r1, r3
 801b732:	0c00      	lsrs	r0, r0, #16
 801b734:	4463      	add	r3, ip
 801b736:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b73a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b73e:	b29b      	uxth	r3, r3
 801b740:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b744:	4576      	cmp	r6, lr
 801b746:	f849 3b04 	str.w	r3, [r9], #4
 801b74a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b74e:	d8e5      	bhi.n	801b71c <__mdiff+0x88>
 801b750:	1b33      	subs	r3, r6, r4
 801b752:	3b15      	subs	r3, #21
 801b754:	f023 0303 	bic.w	r3, r3, #3
 801b758:	3415      	adds	r4, #21
 801b75a:	3304      	adds	r3, #4
 801b75c:	42a6      	cmp	r6, r4
 801b75e:	bf38      	it	cc
 801b760:	2304      	movcc	r3, #4
 801b762:	441d      	add	r5, r3
 801b764:	445b      	add	r3, fp
 801b766:	461e      	mov	r6, r3
 801b768:	462c      	mov	r4, r5
 801b76a:	4544      	cmp	r4, r8
 801b76c:	d30e      	bcc.n	801b78c <__mdiff+0xf8>
 801b76e:	f108 0103 	add.w	r1, r8, #3
 801b772:	1b49      	subs	r1, r1, r5
 801b774:	f021 0103 	bic.w	r1, r1, #3
 801b778:	3d03      	subs	r5, #3
 801b77a:	45a8      	cmp	r8, r5
 801b77c:	bf38      	it	cc
 801b77e:	2100      	movcc	r1, #0
 801b780:	440b      	add	r3, r1
 801b782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b786:	b191      	cbz	r1, 801b7ae <__mdiff+0x11a>
 801b788:	6117      	str	r7, [r2, #16]
 801b78a:	e79d      	b.n	801b6c8 <__mdiff+0x34>
 801b78c:	f854 1b04 	ldr.w	r1, [r4], #4
 801b790:	46e6      	mov	lr, ip
 801b792:	0c08      	lsrs	r0, r1, #16
 801b794:	fa1c fc81 	uxtah	ip, ip, r1
 801b798:	4471      	add	r1, lr
 801b79a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b79e:	b289      	uxth	r1, r1
 801b7a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b7a4:	f846 1b04 	str.w	r1, [r6], #4
 801b7a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b7ac:	e7dd      	b.n	801b76a <__mdiff+0xd6>
 801b7ae:	3f01      	subs	r7, #1
 801b7b0:	e7e7      	b.n	801b782 <__mdiff+0xee>
 801b7b2:	bf00      	nop
 801b7b4:	0801f308 	.word	0x0801f308
 801b7b8:	0801f379 	.word	0x0801f379

0801b7bc <__ulp>:
 801b7bc:	b082      	sub	sp, #8
 801b7be:	ed8d 0b00 	vstr	d0, [sp]
 801b7c2:	9a01      	ldr	r2, [sp, #4]
 801b7c4:	4b0f      	ldr	r3, [pc, #60]	@ (801b804 <__ulp+0x48>)
 801b7c6:	4013      	ands	r3, r2
 801b7c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	dc08      	bgt.n	801b7e2 <__ulp+0x26>
 801b7d0:	425b      	negs	r3, r3
 801b7d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801b7d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b7da:	da04      	bge.n	801b7e6 <__ulp+0x2a>
 801b7dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b7e0:	4113      	asrs	r3, r2
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	e008      	b.n	801b7f8 <__ulp+0x3c>
 801b7e6:	f1a2 0314 	sub.w	r3, r2, #20
 801b7ea:	2b1e      	cmp	r3, #30
 801b7ec:	bfda      	itte	le
 801b7ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801b7f2:	40da      	lsrle	r2, r3
 801b7f4:	2201      	movgt	r2, #1
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	4619      	mov	r1, r3
 801b7fa:	4610      	mov	r0, r2
 801b7fc:	ec41 0b10 	vmov	d0, r0, r1
 801b800:	b002      	add	sp, #8
 801b802:	4770      	bx	lr
 801b804:	7ff00000 	.word	0x7ff00000

0801b808 <__b2d>:
 801b808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b80c:	6906      	ldr	r6, [r0, #16]
 801b80e:	f100 0814 	add.w	r8, r0, #20
 801b812:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b816:	1f37      	subs	r7, r6, #4
 801b818:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b81c:	4610      	mov	r0, r2
 801b81e:	f7ff fd53 	bl	801b2c8 <__hi0bits>
 801b822:	f1c0 0320 	rsb	r3, r0, #32
 801b826:	280a      	cmp	r0, #10
 801b828:	600b      	str	r3, [r1, #0]
 801b82a:	491b      	ldr	r1, [pc, #108]	@ (801b898 <__b2d+0x90>)
 801b82c:	dc15      	bgt.n	801b85a <__b2d+0x52>
 801b82e:	f1c0 0c0b 	rsb	ip, r0, #11
 801b832:	fa22 f30c 	lsr.w	r3, r2, ip
 801b836:	45b8      	cmp	r8, r7
 801b838:	ea43 0501 	orr.w	r5, r3, r1
 801b83c:	bf34      	ite	cc
 801b83e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b842:	2300      	movcs	r3, #0
 801b844:	3015      	adds	r0, #21
 801b846:	fa02 f000 	lsl.w	r0, r2, r0
 801b84a:	fa23 f30c 	lsr.w	r3, r3, ip
 801b84e:	4303      	orrs	r3, r0
 801b850:	461c      	mov	r4, r3
 801b852:	ec45 4b10 	vmov	d0, r4, r5
 801b856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b85a:	45b8      	cmp	r8, r7
 801b85c:	bf3a      	itte	cc
 801b85e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b862:	f1a6 0708 	subcc.w	r7, r6, #8
 801b866:	2300      	movcs	r3, #0
 801b868:	380b      	subs	r0, #11
 801b86a:	d012      	beq.n	801b892 <__b2d+0x8a>
 801b86c:	f1c0 0120 	rsb	r1, r0, #32
 801b870:	fa23 f401 	lsr.w	r4, r3, r1
 801b874:	4082      	lsls	r2, r0
 801b876:	4322      	orrs	r2, r4
 801b878:	4547      	cmp	r7, r8
 801b87a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b87e:	bf8c      	ite	hi
 801b880:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b884:	2200      	movls	r2, #0
 801b886:	4083      	lsls	r3, r0
 801b888:	40ca      	lsrs	r2, r1
 801b88a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b88e:	4313      	orrs	r3, r2
 801b890:	e7de      	b.n	801b850 <__b2d+0x48>
 801b892:	ea42 0501 	orr.w	r5, r2, r1
 801b896:	e7db      	b.n	801b850 <__b2d+0x48>
 801b898:	3ff00000 	.word	0x3ff00000

0801b89c <__d2b>:
 801b89c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b8a0:	460f      	mov	r7, r1
 801b8a2:	2101      	movs	r1, #1
 801b8a4:	ec59 8b10 	vmov	r8, r9, d0
 801b8a8:	4616      	mov	r6, r2
 801b8aa:	f7ff fc1b 	bl	801b0e4 <_Balloc>
 801b8ae:	4604      	mov	r4, r0
 801b8b0:	b930      	cbnz	r0, 801b8c0 <__d2b+0x24>
 801b8b2:	4602      	mov	r2, r0
 801b8b4:	4b23      	ldr	r3, [pc, #140]	@ (801b944 <__d2b+0xa8>)
 801b8b6:	4824      	ldr	r0, [pc, #144]	@ (801b948 <__d2b+0xac>)
 801b8b8:	f240 310f 	movw	r1, #783	@ 0x30f
 801b8bc:	f001 f846 	bl	801c94c <__assert_func>
 801b8c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b8c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b8c8:	b10d      	cbz	r5, 801b8ce <__d2b+0x32>
 801b8ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b8ce:	9301      	str	r3, [sp, #4]
 801b8d0:	f1b8 0300 	subs.w	r3, r8, #0
 801b8d4:	d023      	beq.n	801b91e <__d2b+0x82>
 801b8d6:	4668      	mov	r0, sp
 801b8d8:	9300      	str	r3, [sp, #0]
 801b8da:	f7ff fd14 	bl	801b306 <__lo0bits>
 801b8de:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b8e2:	b1d0      	cbz	r0, 801b91a <__d2b+0x7e>
 801b8e4:	f1c0 0320 	rsb	r3, r0, #32
 801b8e8:	fa02 f303 	lsl.w	r3, r2, r3
 801b8ec:	430b      	orrs	r3, r1
 801b8ee:	40c2      	lsrs	r2, r0
 801b8f0:	6163      	str	r3, [r4, #20]
 801b8f2:	9201      	str	r2, [sp, #4]
 801b8f4:	9b01      	ldr	r3, [sp, #4]
 801b8f6:	61a3      	str	r3, [r4, #24]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	bf0c      	ite	eq
 801b8fc:	2201      	moveq	r2, #1
 801b8fe:	2202      	movne	r2, #2
 801b900:	6122      	str	r2, [r4, #16]
 801b902:	b1a5      	cbz	r5, 801b92e <__d2b+0x92>
 801b904:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b908:	4405      	add	r5, r0
 801b90a:	603d      	str	r5, [r7, #0]
 801b90c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b910:	6030      	str	r0, [r6, #0]
 801b912:	4620      	mov	r0, r4
 801b914:	b003      	add	sp, #12
 801b916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b91a:	6161      	str	r1, [r4, #20]
 801b91c:	e7ea      	b.n	801b8f4 <__d2b+0x58>
 801b91e:	a801      	add	r0, sp, #4
 801b920:	f7ff fcf1 	bl	801b306 <__lo0bits>
 801b924:	9b01      	ldr	r3, [sp, #4]
 801b926:	6163      	str	r3, [r4, #20]
 801b928:	3020      	adds	r0, #32
 801b92a:	2201      	movs	r2, #1
 801b92c:	e7e8      	b.n	801b900 <__d2b+0x64>
 801b92e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b932:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b936:	6038      	str	r0, [r7, #0]
 801b938:	6918      	ldr	r0, [r3, #16]
 801b93a:	f7ff fcc5 	bl	801b2c8 <__hi0bits>
 801b93e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b942:	e7e5      	b.n	801b910 <__d2b+0x74>
 801b944:	0801f308 	.word	0x0801f308
 801b948:	0801f379 	.word	0x0801f379

0801b94c <__ratio>:
 801b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b950:	b085      	sub	sp, #20
 801b952:	e9cd 1000 	strd	r1, r0, [sp]
 801b956:	a902      	add	r1, sp, #8
 801b958:	f7ff ff56 	bl	801b808 <__b2d>
 801b95c:	9800      	ldr	r0, [sp, #0]
 801b95e:	a903      	add	r1, sp, #12
 801b960:	ec55 4b10 	vmov	r4, r5, d0
 801b964:	f7ff ff50 	bl	801b808 <__b2d>
 801b968:	9b01      	ldr	r3, [sp, #4]
 801b96a:	6919      	ldr	r1, [r3, #16]
 801b96c:	9b00      	ldr	r3, [sp, #0]
 801b96e:	691b      	ldr	r3, [r3, #16]
 801b970:	1ac9      	subs	r1, r1, r3
 801b972:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801b976:	1a9b      	subs	r3, r3, r2
 801b978:	ec5b ab10 	vmov	sl, fp, d0
 801b97c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801b980:	2b00      	cmp	r3, #0
 801b982:	bfce      	itee	gt
 801b984:	462a      	movgt	r2, r5
 801b986:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b98a:	465a      	movle	r2, fp
 801b98c:	462f      	mov	r7, r5
 801b98e:	46d9      	mov	r9, fp
 801b990:	bfcc      	ite	gt
 801b992:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b996:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801b99a:	464b      	mov	r3, r9
 801b99c:	4652      	mov	r2, sl
 801b99e:	4620      	mov	r0, r4
 801b9a0:	4639      	mov	r1, r7
 801b9a2:	f7ec ff83 	bl	80088ac <__aeabi_ddiv>
 801b9a6:	ec41 0b10 	vmov	d0, r0, r1
 801b9aa:	b005      	add	sp, #20
 801b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9b0 <__copybits>:
 801b9b0:	3901      	subs	r1, #1
 801b9b2:	b570      	push	{r4, r5, r6, lr}
 801b9b4:	1149      	asrs	r1, r1, #5
 801b9b6:	6914      	ldr	r4, [r2, #16]
 801b9b8:	3101      	adds	r1, #1
 801b9ba:	f102 0314 	add.w	r3, r2, #20
 801b9be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b9c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b9c6:	1f05      	subs	r5, r0, #4
 801b9c8:	42a3      	cmp	r3, r4
 801b9ca:	d30c      	bcc.n	801b9e6 <__copybits+0x36>
 801b9cc:	1aa3      	subs	r3, r4, r2
 801b9ce:	3b11      	subs	r3, #17
 801b9d0:	f023 0303 	bic.w	r3, r3, #3
 801b9d4:	3211      	adds	r2, #17
 801b9d6:	42a2      	cmp	r2, r4
 801b9d8:	bf88      	it	hi
 801b9da:	2300      	movhi	r3, #0
 801b9dc:	4418      	add	r0, r3
 801b9de:	2300      	movs	r3, #0
 801b9e0:	4288      	cmp	r0, r1
 801b9e2:	d305      	bcc.n	801b9f0 <__copybits+0x40>
 801b9e4:	bd70      	pop	{r4, r5, r6, pc}
 801b9e6:	f853 6b04 	ldr.w	r6, [r3], #4
 801b9ea:	f845 6f04 	str.w	r6, [r5, #4]!
 801b9ee:	e7eb      	b.n	801b9c8 <__copybits+0x18>
 801b9f0:	f840 3b04 	str.w	r3, [r0], #4
 801b9f4:	e7f4      	b.n	801b9e0 <__copybits+0x30>

0801b9f6 <__any_on>:
 801b9f6:	f100 0214 	add.w	r2, r0, #20
 801b9fa:	6900      	ldr	r0, [r0, #16]
 801b9fc:	114b      	asrs	r3, r1, #5
 801b9fe:	4298      	cmp	r0, r3
 801ba00:	b510      	push	{r4, lr}
 801ba02:	db11      	blt.n	801ba28 <__any_on+0x32>
 801ba04:	dd0a      	ble.n	801ba1c <__any_on+0x26>
 801ba06:	f011 011f 	ands.w	r1, r1, #31
 801ba0a:	d007      	beq.n	801ba1c <__any_on+0x26>
 801ba0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ba10:	fa24 f001 	lsr.w	r0, r4, r1
 801ba14:	fa00 f101 	lsl.w	r1, r0, r1
 801ba18:	428c      	cmp	r4, r1
 801ba1a:	d10b      	bne.n	801ba34 <__any_on+0x3e>
 801ba1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ba20:	4293      	cmp	r3, r2
 801ba22:	d803      	bhi.n	801ba2c <__any_on+0x36>
 801ba24:	2000      	movs	r0, #0
 801ba26:	bd10      	pop	{r4, pc}
 801ba28:	4603      	mov	r3, r0
 801ba2a:	e7f7      	b.n	801ba1c <__any_on+0x26>
 801ba2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ba30:	2900      	cmp	r1, #0
 801ba32:	d0f5      	beq.n	801ba20 <__any_on+0x2a>
 801ba34:	2001      	movs	r0, #1
 801ba36:	e7f6      	b.n	801ba26 <__any_on+0x30>

0801ba38 <_malloc_usable_size_r>:
 801ba38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba3c:	1f18      	subs	r0, r3, #4
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	bfbc      	itt	lt
 801ba42:	580b      	ldrlt	r3, [r1, r0]
 801ba44:	18c0      	addlt	r0, r0, r3
 801ba46:	4770      	bx	lr

0801ba48 <__ascii_wctomb>:
 801ba48:	4603      	mov	r3, r0
 801ba4a:	4608      	mov	r0, r1
 801ba4c:	b141      	cbz	r1, 801ba60 <__ascii_wctomb+0x18>
 801ba4e:	2aff      	cmp	r2, #255	@ 0xff
 801ba50:	d904      	bls.n	801ba5c <__ascii_wctomb+0x14>
 801ba52:	228a      	movs	r2, #138	@ 0x8a
 801ba54:	601a      	str	r2, [r3, #0]
 801ba56:	f04f 30ff 	mov.w	r0, #4294967295
 801ba5a:	4770      	bx	lr
 801ba5c:	700a      	strb	r2, [r1, #0]
 801ba5e:	2001      	movs	r0, #1
 801ba60:	4770      	bx	lr

0801ba62 <__ssputs_r>:
 801ba62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba66:	688e      	ldr	r6, [r1, #8]
 801ba68:	461f      	mov	r7, r3
 801ba6a:	42be      	cmp	r6, r7
 801ba6c:	680b      	ldr	r3, [r1, #0]
 801ba6e:	4682      	mov	sl, r0
 801ba70:	460c      	mov	r4, r1
 801ba72:	4690      	mov	r8, r2
 801ba74:	d82d      	bhi.n	801bad2 <__ssputs_r+0x70>
 801ba76:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ba7a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ba7e:	d026      	beq.n	801bace <__ssputs_r+0x6c>
 801ba80:	6965      	ldr	r5, [r4, #20]
 801ba82:	6909      	ldr	r1, [r1, #16]
 801ba84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba88:	eba3 0901 	sub.w	r9, r3, r1
 801ba8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ba90:	1c7b      	adds	r3, r7, #1
 801ba92:	444b      	add	r3, r9
 801ba94:	106d      	asrs	r5, r5, #1
 801ba96:	429d      	cmp	r5, r3
 801ba98:	bf38      	it	cc
 801ba9a:	461d      	movcc	r5, r3
 801ba9c:	0553      	lsls	r3, r2, #21
 801ba9e:	d527      	bpl.n	801baf0 <__ssputs_r+0x8e>
 801baa0:	4629      	mov	r1, r5
 801baa2:	f7fc fab1 	bl	8018008 <_malloc_r>
 801baa6:	4606      	mov	r6, r0
 801baa8:	b360      	cbz	r0, 801bb04 <__ssputs_r+0xa2>
 801baaa:	6921      	ldr	r1, [r4, #16]
 801baac:	464a      	mov	r2, r9
 801baae:	f7fe f912 	bl	8019cd6 <memcpy>
 801bab2:	89a3      	ldrh	r3, [r4, #12]
 801bab4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801babc:	81a3      	strh	r3, [r4, #12]
 801babe:	6126      	str	r6, [r4, #16]
 801bac0:	6165      	str	r5, [r4, #20]
 801bac2:	444e      	add	r6, r9
 801bac4:	eba5 0509 	sub.w	r5, r5, r9
 801bac8:	6026      	str	r6, [r4, #0]
 801baca:	60a5      	str	r5, [r4, #8]
 801bacc:	463e      	mov	r6, r7
 801bace:	42be      	cmp	r6, r7
 801bad0:	d900      	bls.n	801bad4 <__ssputs_r+0x72>
 801bad2:	463e      	mov	r6, r7
 801bad4:	6820      	ldr	r0, [r4, #0]
 801bad6:	4632      	mov	r2, r6
 801bad8:	4641      	mov	r1, r8
 801bada:	f000 fefa 	bl	801c8d2 <memmove>
 801bade:	68a3      	ldr	r3, [r4, #8]
 801bae0:	1b9b      	subs	r3, r3, r6
 801bae2:	60a3      	str	r3, [r4, #8]
 801bae4:	6823      	ldr	r3, [r4, #0]
 801bae6:	4433      	add	r3, r6
 801bae8:	6023      	str	r3, [r4, #0]
 801baea:	2000      	movs	r0, #0
 801baec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801baf0:	462a      	mov	r2, r5
 801baf2:	f7fc fb1d 	bl	8018130 <_realloc_r>
 801baf6:	4606      	mov	r6, r0
 801baf8:	2800      	cmp	r0, #0
 801bafa:	d1e0      	bne.n	801babe <__ssputs_r+0x5c>
 801bafc:	6921      	ldr	r1, [r4, #16]
 801bafe:	4650      	mov	r0, sl
 801bb00:	f7fe ff5a 	bl	801a9b8 <_free_r>
 801bb04:	230c      	movs	r3, #12
 801bb06:	f8ca 3000 	str.w	r3, [sl]
 801bb0a:	89a3      	ldrh	r3, [r4, #12]
 801bb0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb10:	81a3      	strh	r3, [r4, #12]
 801bb12:	f04f 30ff 	mov.w	r0, #4294967295
 801bb16:	e7e9      	b.n	801baec <__ssputs_r+0x8a>

0801bb18 <_svfiprintf_r>:
 801bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb1c:	4698      	mov	r8, r3
 801bb1e:	898b      	ldrh	r3, [r1, #12]
 801bb20:	061b      	lsls	r3, r3, #24
 801bb22:	b09d      	sub	sp, #116	@ 0x74
 801bb24:	4607      	mov	r7, r0
 801bb26:	460d      	mov	r5, r1
 801bb28:	4614      	mov	r4, r2
 801bb2a:	d510      	bpl.n	801bb4e <_svfiprintf_r+0x36>
 801bb2c:	690b      	ldr	r3, [r1, #16]
 801bb2e:	b973      	cbnz	r3, 801bb4e <_svfiprintf_r+0x36>
 801bb30:	2140      	movs	r1, #64	@ 0x40
 801bb32:	f7fc fa69 	bl	8018008 <_malloc_r>
 801bb36:	6028      	str	r0, [r5, #0]
 801bb38:	6128      	str	r0, [r5, #16]
 801bb3a:	b930      	cbnz	r0, 801bb4a <_svfiprintf_r+0x32>
 801bb3c:	230c      	movs	r3, #12
 801bb3e:	603b      	str	r3, [r7, #0]
 801bb40:	f04f 30ff 	mov.w	r0, #4294967295
 801bb44:	b01d      	add	sp, #116	@ 0x74
 801bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb4a:	2340      	movs	r3, #64	@ 0x40
 801bb4c:	616b      	str	r3, [r5, #20]
 801bb4e:	2300      	movs	r3, #0
 801bb50:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb52:	2320      	movs	r3, #32
 801bb54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bb58:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb5c:	2330      	movs	r3, #48	@ 0x30
 801bb5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bcfc <_svfiprintf_r+0x1e4>
 801bb62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bb66:	f04f 0901 	mov.w	r9, #1
 801bb6a:	4623      	mov	r3, r4
 801bb6c:	469a      	mov	sl, r3
 801bb6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb72:	b10a      	cbz	r2, 801bb78 <_svfiprintf_r+0x60>
 801bb74:	2a25      	cmp	r2, #37	@ 0x25
 801bb76:	d1f9      	bne.n	801bb6c <_svfiprintf_r+0x54>
 801bb78:	ebba 0b04 	subs.w	fp, sl, r4
 801bb7c:	d00b      	beq.n	801bb96 <_svfiprintf_r+0x7e>
 801bb7e:	465b      	mov	r3, fp
 801bb80:	4622      	mov	r2, r4
 801bb82:	4629      	mov	r1, r5
 801bb84:	4638      	mov	r0, r7
 801bb86:	f7ff ff6c 	bl	801ba62 <__ssputs_r>
 801bb8a:	3001      	adds	r0, #1
 801bb8c:	f000 80a7 	beq.w	801bcde <_svfiprintf_r+0x1c6>
 801bb90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb92:	445a      	add	r2, fp
 801bb94:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb96:	f89a 3000 	ldrb.w	r3, [sl]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	f000 809f 	beq.w	801bcde <_svfiprintf_r+0x1c6>
 801bba0:	2300      	movs	r3, #0
 801bba2:	f04f 32ff 	mov.w	r2, #4294967295
 801bba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbaa:	f10a 0a01 	add.w	sl, sl, #1
 801bbae:	9304      	str	r3, [sp, #16]
 801bbb0:	9307      	str	r3, [sp, #28]
 801bbb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bbb6:	931a      	str	r3, [sp, #104]	@ 0x68
 801bbb8:	4654      	mov	r4, sl
 801bbba:	2205      	movs	r2, #5
 801bbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbc0:	484e      	ldr	r0, [pc, #312]	@ (801bcfc <_svfiprintf_r+0x1e4>)
 801bbc2:	f7ec fb35 	bl	8008230 <memchr>
 801bbc6:	9a04      	ldr	r2, [sp, #16]
 801bbc8:	b9d8      	cbnz	r0, 801bc02 <_svfiprintf_r+0xea>
 801bbca:	06d0      	lsls	r0, r2, #27
 801bbcc:	bf44      	itt	mi
 801bbce:	2320      	movmi	r3, #32
 801bbd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bbd4:	0711      	lsls	r1, r2, #28
 801bbd6:	bf44      	itt	mi
 801bbd8:	232b      	movmi	r3, #43	@ 0x2b
 801bbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bbde:	f89a 3000 	ldrb.w	r3, [sl]
 801bbe2:	2b2a      	cmp	r3, #42	@ 0x2a
 801bbe4:	d015      	beq.n	801bc12 <_svfiprintf_r+0xfa>
 801bbe6:	9a07      	ldr	r2, [sp, #28]
 801bbe8:	4654      	mov	r4, sl
 801bbea:	2000      	movs	r0, #0
 801bbec:	f04f 0c0a 	mov.w	ip, #10
 801bbf0:	4621      	mov	r1, r4
 801bbf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bbf6:	3b30      	subs	r3, #48	@ 0x30
 801bbf8:	2b09      	cmp	r3, #9
 801bbfa:	d94b      	bls.n	801bc94 <_svfiprintf_r+0x17c>
 801bbfc:	b1b0      	cbz	r0, 801bc2c <_svfiprintf_r+0x114>
 801bbfe:	9207      	str	r2, [sp, #28]
 801bc00:	e014      	b.n	801bc2c <_svfiprintf_r+0x114>
 801bc02:	eba0 0308 	sub.w	r3, r0, r8
 801bc06:	fa09 f303 	lsl.w	r3, r9, r3
 801bc0a:	4313      	orrs	r3, r2
 801bc0c:	9304      	str	r3, [sp, #16]
 801bc0e:	46a2      	mov	sl, r4
 801bc10:	e7d2      	b.n	801bbb8 <_svfiprintf_r+0xa0>
 801bc12:	9b03      	ldr	r3, [sp, #12]
 801bc14:	1d19      	adds	r1, r3, #4
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	9103      	str	r1, [sp, #12]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	bfbb      	ittet	lt
 801bc1e:	425b      	neglt	r3, r3
 801bc20:	f042 0202 	orrlt.w	r2, r2, #2
 801bc24:	9307      	strge	r3, [sp, #28]
 801bc26:	9307      	strlt	r3, [sp, #28]
 801bc28:	bfb8      	it	lt
 801bc2a:	9204      	strlt	r2, [sp, #16]
 801bc2c:	7823      	ldrb	r3, [r4, #0]
 801bc2e:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc30:	d10a      	bne.n	801bc48 <_svfiprintf_r+0x130>
 801bc32:	7863      	ldrb	r3, [r4, #1]
 801bc34:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc36:	d132      	bne.n	801bc9e <_svfiprintf_r+0x186>
 801bc38:	9b03      	ldr	r3, [sp, #12]
 801bc3a:	1d1a      	adds	r2, r3, #4
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	9203      	str	r2, [sp, #12]
 801bc40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bc44:	3402      	adds	r4, #2
 801bc46:	9305      	str	r3, [sp, #20]
 801bc48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bd0c <_svfiprintf_r+0x1f4>
 801bc4c:	7821      	ldrb	r1, [r4, #0]
 801bc4e:	2203      	movs	r2, #3
 801bc50:	4650      	mov	r0, sl
 801bc52:	f7ec faed 	bl	8008230 <memchr>
 801bc56:	b138      	cbz	r0, 801bc68 <_svfiprintf_r+0x150>
 801bc58:	9b04      	ldr	r3, [sp, #16]
 801bc5a:	eba0 000a 	sub.w	r0, r0, sl
 801bc5e:	2240      	movs	r2, #64	@ 0x40
 801bc60:	4082      	lsls	r2, r0
 801bc62:	4313      	orrs	r3, r2
 801bc64:	3401      	adds	r4, #1
 801bc66:	9304      	str	r3, [sp, #16]
 801bc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc6c:	4824      	ldr	r0, [pc, #144]	@ (801bd00 <_svfiprintf_r+0x1e8>)
 801bc6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bc72:	2206      	movs	r2, #6
 801bc74:	f7ec fadc 	bl	8008230 <memchr>
 801bc78:	2800      	cmp	r0, #0
 801bc7a:	d036      	beq.n	801bcea <_svfiprintf_r+0x1d2>
 801bc7c:	4b21      	ldr	r3, [pc, #132]	@ (801bd04 <_svfiprintf_r+0x1ec>)
 801bc7e:	bb1b      	cbnz	r3, 801bcc8 <_svfiprintf_r+0x1b0>
 801bc80:	9b03      	ldr	r3, [sp, #12]
 801bc82:	3307      	adds	r3, #7
 801bc84:	f023 0307 	bic.w	r3, r3, #7
 801bc88:	3308      	adds	r3, #8
 801bc8a:	9303      	str	r3, [sp, #12]
 801bc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc8e:	4433      	add	r3, r6
 801bc90:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc92:	e76a      	b.n	801bb6a <_svfiprintf_r+0x52>
 801bc94:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc98:	460c      	mov	r4, r1
 801bc9a:	2001      	movs	r0, #1
 801bc9c:	e7a8      	b.n	801bbf0 <_svfiprintf_r+0xd8>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	3401      	adds	r4, #1
 801bca2:	9305      	str	r3, [sp, #20]
 801bca4:	4619      	mov	r1, r3
 801bca6:	f04f 0c0a 	mov.w	ip, #10
 801bcaa:	4620      	mov	r0, r4
 801bcac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bcb0:	3a30      	subs	r2, #48	@ 0x30
 801bcb2:	2a09      	cmp	r2, #9
 801bcb4:	d903      	bls.n	801bcbe <_svfiprintf_r+0x1a6>
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d0c6      	beq.n	801bc48 <_svfiprintf_r+0x130>
 801bcba:	9105      	str	r1, [sp, #20]
 801bcbc:	e7c4      	b.n	801bc48 <_svfiprintf_r+0x130>
 801bcbe:	fb0c 2101 	mla	r1, ip, r1, r2
 801bcc2:	4604      	mov	r4, r0
 801bcc4:	2301      	movs	r3, #1
 801bcc6:	e7f0      	b.n	801bcaa <_svfiprintf_r+0x192>
 801bcc8:	ab03      	add	r3, sp, #12
 801bcca:	9300      	str	r3, [sp, #0]
 801bccc:	462a      	mov	r2, r5
 801bcce:	4b0e      	ldr	r3, [pc, #56]	@ (801bd08 <_svfiprintf_r+0x1f0>)
 801bcd0:	a904      	add	r1, sp, #16
 801bcd2:	4638      	mov	r0, r7
 801bcd4:	f7fd f908 	bl	8018ee8 <_printf_float>
 801bcd8:	1c42      	adds	r2, r0, #1
 801bcda:	4606      	mov	r6, r0
 801bcdc:	d1d6      	bne.n	801bc8c <_svfiprintf_r+0x174>
 801bcde:	89ab      	ldrh	r3, [r5, #12]
 801bce0:	065b      	lsls	r3, r3, #25
 801bce2:	f53f af2d 	bmi.w	801bb40 <_svfiprintf_r+0x28>
 801bce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bce8:	e72c      	b.n	801bb44 <_svfiprintf_r+0x2c>
 801bcea:	ab03      	add	r3, sp, #12
 801bcec:	9300      	str	r3, [sp, #0]
 801bcee:	462a      	mov	r2, r5
 801bcf0:	4b05      	ldr	r3, [pc, #20]	@ (801bd08 <_svfiprintf_r+0x1f0>)
 801bcf2:	a904      	add	r1, sp, #16
 801bcf4:	4638      	mov	r0, r7
 801bcf6:	f7fd fb8f 	bl	8019418 <_printf_i>
 801bcfa:	e7ed      	b.n	801bcd8 <_svfiprintf_r+0x1c0>
 801bcfc:	0801f3d2 	.word	0x0801f3d2
 801bd00:	0801f3dc 	.word	0x0801f3dc
 801bd04:	08018ee9 	.word	0x08018ee9
 801bd08:	0801ba63 	.word	0x0801ba63
 801bd0c:	0801f3d8 	.word	0x0801f3d8

0801bd10 <_sungetc_r>:
 801bd10:	b538      	push	{r3, r4, r5, lr}
 801bd12:	1c4b      	adds	r3, r1, #1
 801bd14:	4614      	mov	r4, r2
 801bd16:	d103      	bne.n	801bd20 <_sungetc_r+0x10>
 801bd18:	f04f 35ff 	mov.w	r5, #4294967295
 801bd1c:	4628      	mov	r0, r5
 801bd1e:	bd38      	pop	{r3, r4, r5, pc}
 801bd20:	8993      	ldrh	r3, [r2, #12]
 801bd22:	f023 0320 	bic.w	r3, r3, #32
 801bd26:	8193      	strh	r3, [r2, #12]
 801bd28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd2a:	6852      	ldr	r2, [r2, #4]
 801bd2c:	b2cd      	uxtb	r5, r1
 801bd2e:	b18b      	cbz	r3, 801bd54 <_sungetc_r+0x44>
 801bd30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd32:	4293      	cmp	r3, r2
 801bd34:	dd08      	ble.n	801bd48 <_sungetc_r+0x38>
 801bd36:	6823      	ldr	r3, [r4, #0]
 801bd38:	1e5a      	subs	r2, r3, #1
 801bd3a:	6022      	str	r2, [r4, #0]
 801bd3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801bd40:	6863      	ldr	r3, [r4, #4]
 801bd42:	3301      	adds	r3, #1
 801bd44:	6063      	str	r3, [r4, #4]
 801bd46:	e7e9      	b.n	801bd1c <_sungetc_r+0xc>
 801bd48:	4621      	mov	r1, r4
 801bd4a:	f000 fd88 	bl	801c85e <__submore>
 801bd4e:	2800      	cmp	r0, #0
 801bd50:	d0f1      	beq.n	801bd36 <_sungetc_r+0x26>
 801bd52:	e7e1      	b.n	801bd18 <_sungetc_r+0x8>
 801bd54:	6921      	ldr	r1, [r4, #16]
 801bd56:	6823      	ldr	r3, [r4, #0]
 801bd58:	b151      	cbz	r1, 801bd70 <_sungetc_r+0x60>
 801bd5a:	4299      	cmp	r1, r3
 801bd5c:	d208      	bcs.n	801bd70 <_sungetc_r+0x60>
 801bd5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801bd62:	42a9      	cmp	r1, r5
 801bd64:	d104      	bne.n	801bd70 <_sungetc_r+0x60>
 801bd66:	3b01      	subs	r3, #1
 801bd68:	3201      	adds	r2, #1
 801bd6a:	6023      	str	r3, [r4, #0]
 801bd6c:	6062      	str	r2, [r4, #4]
 801bd6e:	e7d5      	b.n	801bd1c <_sungetc_r+0xc>
 801bd70:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801bd74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bd78:	6363      	str	r3, [r4, #52]	@ 0x34
 801bd7a:	2303      	movs	r3, #3
 801bd7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801bd7e:	4623      	mov	r3, r4
 801bd80:	f803 5f46 	strb.w	r5, [r3, #70]!
 801bd84:	6023      	str	r3, [r4, #0]
 801bd86:	2301      	movs	r3, #1
 801bd88:	e7dc      	b.n	801bd44 <_sungetc_r+0x34>

0801bd8a <__ssrefill_r>:
 801bd8a:	b510      	push	{r4, lr}
 801bd8c:	460c      	mov	r4, r1
 801bd8e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801bd90:	b169      	cbz	r1, 801bdae <__ssrefill_r+0x24>
 801bd92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bd96:	4299      	cmp	r1, r3
 801bd98:	d001      	beq.n	801bd9e <__ssrefill_r+0x14>
 801bd9a:	f7fe fe0d 	bl	801a9b8 <_free_r>
 801bd9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bda0:	6063      	str	r3, [r4, #4]
 801bda2:	2000      	movs	r0, #0
 801bda4:	6360      	str	r0, [r4, #52]	@ 0x34
 801bda6:	b113      	cbz	r3, 801bdae <__ssrefill_r+0x24>
 801bda8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801bdaa:	6023      	str	r3, [r4, #0]
 801bdac:	bd10      	pop	{r4, pc}
 801bdae:	6923      	ldr	r3, [r4, #16]
 801bdb0:	6023      	str	r3, [r4, #0]
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	6063      	str	r3, [r4, #4]
 801bdb6:	89a3      	ldrh	r3, [r4, #12]
 801bdb8:	f043 0320 	orr.w	r3, r3, #32
 801bdbc:	81a3      	strh	r3, [r4, #12]
 801bdbe:	f04f 30ff 	mov.w	r0, #4294967295
 801bdc2:	e7f3      	b.n	801bdac <__ssrefill_r+0x22>

0801bdc4 <__ssvfiscanf_r>:
 801bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdc8:	460c      	mov	r4, r1
 801bdca:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801bdce:	2100      	movs	r1, #0
 801bdd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801bdd4:	49a6      	ldr	r1, [pc, #664]	@ (801c070 <__ssvfiscanf_r+0x2ac>)
 801bdd6:	91a0      	str	r1, [sp, #640]	@ 0x280
 801bdd8:	f10d 0804 	add.w	r8, sp, #4
 801bddc:	49a5      	ldr	r1, [pc, #660]	@ (801c074 <__ssvfiscanf_r+0x2b0>)
 801bdde:	4fa6      	ldr	r7, [pc, #664]	@ (801c078 <__ssvfiscanf_r+0x2b4>)
 801bde0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801bde4:	4606      	mov	r6, r0
 801bde6:	91a1      	str	r1, [sp, #644]	@ 0x284
 801bde8:	9300      	str	r3, [sp, #0]
 801bdea:	f892 9000 	ldrb.w	r9, [r2]
 801bdee:	f1b9 0f00 	cmp.w	r9, #0
 801bdf2:	f000 8158 	beq.w	801c0a6 <__ssvfiscanf_r+0x2e2>
 801bdf6:	f817 3009 	ldrb.w	r3, [r7, r9]
 801bdfa:	f013 0308 	ands.w	r3, r3, #8
 801bdfe:	f102 0501 	add.w	r5, r2, #1
 801be02:	d019      	beq.n	801be38 <__ssvfiscanf_r+0x74>
 801be04:	6863      	ldr	r3, [r4, #4]
 801be06:	2b00      	cmp	r3, #0
 801be08:	dd0f      	ble.n	801be2a <__ssvfiscanf_r+0x66>
 801be0a:	6823      	ldr	r3, [r4, #0]
 801be0c:	781a      	ldrb	r2, [r3, #0]
 801be0e:	5cba      	ldrb	r2, [r7, r2]
 801be10:	0712      	lsls	r2, r2, #28
 801be12:	d401      	bmi.n	801be18 <__ssvfiscanf_r+0x54>
 801be14:	462a      	mov	r2, r5
 801be16:	e7e8      	b.n	801bdea <__ssvfiscanf_r+0x26>
 801be18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801be1a:	3201      	adds	r2, #1
 801be1c:	9245      	str	r2, [sp, #276]	@ 0x114
 801be1e:	6862      	ldr	r2, [r4, #4]
 801be20:	3301      	adds	r3, #1
 801be22:	3a01      	subs	r2, #1
 801be24:	6062      	str	r2, [r4, #4]
 801be26:	6023      	str	r3, [r4, #0]
 801be28:	e7ec      	b.n	801be04 <__ssvfiscanf_r+0x40>
 801be2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801be2c:	4621      	mov	r1, r4
 801be2e:	4630      	mov	r0, r6
 801be30:	4798      	blx	r3
 801be32:	2800      	cmp	r0, #0
 801be34:	d0e9      	beq.n	801be0a <__ssvfiscanf_r+0x46>
 801be36:	e7ed      	b.n	801be14 <__ssvfiscanf_r+0x50>
 801be38:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801be3c:	f040 8085 	bne.w	801bf4a <__ssvfiscanf_r+0x186>
 801be40:	9341      	str	r3, [sp, #260]	@ 0x104
 801be42:	9343      	str	r3, [sp, #268]	@ 0x10c
 801be44:	7853      	ldrb	r3, [r2, #1]
 801be46:	2b2a      	cmp	r3, #42	@ 0x2a
 801be48:	bf02      	ittt	eq
 801be4a:	2310      	moveq	r3, #16
 801be4c:	1c95      	addeq	r5, r2, #2
 801be4e:	9341      	streq	r3, [sp, #260]	@ 0x104
 801be50:	220a      	movs	r2, #10
 801be52:	46aa      	mov	sl, r5
 801be54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801be58:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801be5c:	2b09      	cmp	r3, #9
 801be5e:	d91e      	bls.n	801be9e <__ssvfiscanf_r+0xda>
 801be60:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801c07c <__ssvfiscanf_r+0x2b8>
 801be64:	2203      	movs	r2, #3
 801be66:	4658      	mov	r0, fp
 801be68:	f7ec f9e2 	bl	8008230 <memchr>
 801be6c:	b138      	cbz	r0, 801be7e <__ssvfiscanf_r+0xba>
 801be6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801be70:	eba0 000b 	sub.w	r0, r0, fp
 801be74:	2301      	movs	r3, #1
 801be76:	4083      	lsls	r3, r0
 801be78:	4313      	orrs	r3, r2
 801be7a:	9341      	str	r3, [sp, #260]	@ 0x104
 801be7c:	4655      	mov	r5, sl
 801be7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801be82:	2b78      	cmp	r3, #120	@ 0x78
 801be84:	d806      	bhi.n	801be94 <__ssvfiscanf_r+0xd0>
 801be86:	2b57      	cmp	r3, #87	@ 0x57
 801be88:	d810      	bhi.n	801beac <__ssvfiscanf_r+0xe8>
 801be8a:	2b25      	cmp	r3, #37	@ 0x25
 801be8c:	d05d      	beq.n	801bf4a <__ssvfiscanf_r+0x186>
 801be8e:	d857      	bhi.n	801bf40 <__ssvfiscanf_r+0x17c>
 801be90:	2b00      	cmp	r3, #0
 801be92:	d075      	beq.n	801bf80 <__ssvfiscanf_r+0x1bc>
 801be94:	2303      	movs	r3, #3
 801be96:	9347      	str	r3, [sp, #284]	@ 0x11c
 801be98:	230a      	movs	r3, #10
 801be9a:	9342      	str	r3, [sp, #264]	@ 0x108
 801be9c:	e088      	b.n	801bfb0 <__ssvfiscanf_r+0x1ec>
 801be9e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801bea0:	fb02 1103 	mla	r1, r2, r3, r1
 801bea4:	3930      	subs	r1, #48	@ 0x30
 801bea6:	9143      	str	r1, [sp, #268]	@ 0x10c
 801bea8:	4655      	mov	r5, sl
 801beaa:	e7d2      	b.n	801be52 <__ssvfiscanf_r+0x8e>
 801beac:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801beb0:	2a20      	cmp	r2, #32
 801beb2:	d8ef      	bhi.n	801be94 <__ssvfiscanf_r+0xd0>
 801beb4:	a101      	add	r1, pc, #4	@ (adr r1, 801bebc <__ssvfiscanf_r+0xf8>)
 801beb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801beba:	bf00      	nop
 801bebc:	0801bf8f 	.word	0x0801bf8f
 801bec0:	0801be95 	.word	0x0801be95
 801bec4:	0801be95 	.word	0x0801be95
 801bec8:	0801bfe9 	.word	0x0801bfe9
 801becc:	0801be95 	.word	0x0801be95
 801bed0:	0801be95 	.word	0x0801be95
 801bed4:	0801be95 	.word	0x0801be95
 801bed8:	0801be95 	.word	0x0801be95
 801bedc:	0801be95 	.word	0x0801be95
 801bee0:	0801be95 	.word	0x0801be95
 801bee4:	0801be95 	.word	0x0801be95
 801bee8:	0801bfff 	.word	0x0801bfff
 801beec:	0801bfe5 	.word	0x0801bfe5
 801bef0:	0801bf47 	.word	0x0801bf47
 801bef4:	0801bf47 	.word	0x0801bf47
 801bef8:	0801bf47 	.word	0x0801bf47
 801befc:	0801be95 	.word	0x0801be95
 801bf00:	0801bfa1 	.word	0x0801bfa1
 801bf04:	0801be95 	.word	0x0801be95
 801bf08:	0801be95 	.word	0x0801be95
 801bf0c:	0801be95 	.word	0x0801be95
 801bf10:	0801be95 	.word	0x0801be95
 801bf14:	0801c00f 	.word	0x0801c00f
 801bf18:	0801bfa9 	.word	0x0801bfa9
 801bf1c:	0801bf87 	.word	0x0801bf87
 801bf20:	0801be95 	.word	0x0801be95
 801bf24:	0801be95 	.word	0x0801be95
 801bf28:	0801c00b 	.word	0x0801c00b
 801bf2c:	0801be95 	.word	0x0801be95
 801bf30:	0801bfe5 	.word	0x0801bfe5
 801bf34:	0801be95 	.word	0x0801be95
 801bf38:	0801be95 	.word	0x0801be95
 801bf3c:	0801bf8f 	.word	0x0801bf8f
 801bf40:	3b45      	subs	r3, #69	@ 0x45
 801bf42:	2b02      	cmp	r3, #2
 801bf44:	d8a6      	bhi.n	801be94 <__ssvfiscanf_r+0xd0>
 801bf46:	2305      	movs	r3, #5
 801bf48:	e031      	b.n	801bfae <__ssvfiscanf_r+0x1ea>
 801bf4a:	6863      	ldr	r3, [r4, #4]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	dd0d      	ble.n	801bf6c <__ssvfiscanf_r+0x1a8>
 801bf50:	6823      	ldr	r3, [r4, #0]
 801bf52:	781a      	ldrb	r2, [r3, #0]
 801bf54:	454a      	cmp	r2, r9
 801bf56:	f040 80a6 	bne.w	801c0a6 <__ssvfiscanf_r+0x2e2>
 801bf5a:	3301      	adds	r3, #1
 801bf5c:	6862      	ldr	r2, [r4, #4]
 801bf5e:	6023      	str	r3, [r4, #0]
 801bf60:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801bf62:	3a01      	subs	r2, #1
 801bf64:	3301      	adds	r3, #1
 801bf66:	6062      	str	r2, [r4, #4]
 801bf68:	9345      	str	r3, [sp, #276]	@ 0x114
 801bf6a:	e753      	b.n	801be14 <__ssvfiscanf_r+0x50>
 801bf6c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801bf6e:	4621      	mov	r1, r4
 801bf70:	4630      	mov	r0, r6
 801bf72:	4798      	blx	r3
 801bf74:	2800      	cmp	r0, #0
 801bf76:	d0eb      	beq.n	801bf50 <__ssvfiscanf_r+0x18c>
 801bf78:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801bf7a:	2800      	cmp	r0, #0
 801bf7c:	f040 808b 	bne.w	801c096 <__ssvfiscanf_r+0x2d2>
 801bf80:	f04f 30ff 	mov.w	r0, #4294967295
 801bf84:	e08b      	b.n	801c09e <__ssvfiscanf_r+0x2da>
 801bf86:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801bf88:	f042 0220 	orr.w	r2, r2, #32
 801bf8c:	9241      	str	r2, [sp, #260]	@ 0x104
 801bf8e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801bf90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801bf94:	9241      	str	r2, [sp, #260]	@ 0x104
 801bf96:	2210      	movs	r2, #16
 801bf98:	2b6e      	cmp	r3, #110	@ 0x6e
 801bf9a:	9242      	str	r2, [sp, #264]	@ 0x108
 801bf9c:	d902      	bls.n	801bfa4 <__ssvfiscanf_r+0x1e0>
 801bf9e:	e005      	b.n	801bfac <__ssvfiscanf_r+0x1e8>
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	9342      	str	r3, [sp, #264]	@ 0x108
 801bfa4:	2303      	movs	r3, #3
 801bfa6:	e002      	b.n	801bfae <__ssvfiscanf_r+0x1ea>
 801bfa8:	2308      	movs	r3, #8
 801bfaa:	9342      	str	r3, [sp, #264]	@ 0x108
 801bfac:	2304      	movs	r3, #4
 801bfae:	9347      	str	r3, [sp, #284]	@ 0x11c
 801bfb0:	6863      	ldr	r3, [r4, #4]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	dd39      	ble.n	801c02a <__ssvfiscanf_r+0x266>
 801bfb6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801bfb8:	0659      	lsls	r1, r3, #25
 801bfba:	d404      	bmi.n	801bfc6 <__ssvfiscanf_r+0x202>
 801bfbc:	6823      	ldr	r3, [r4, #0]
 801bfbe:	781a      	ldrb	r2, [r3, #0]
 801bfc0:	5cba      	ldrb	r2, [r7, r2]
 801bfc2:	0712      	lsls	r2, r2, #28
 801bfc4:	d438      	bmi.n	801c038 <__ssvfiscanf_r+0x274>
 801bfc6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801bfc8:	2b02      	cmp	r3, #2
 801bfca:	dc47      	bgt.n	801c05c <__ssvfiscanf_r+0x298>
 801bfcc:	466b      	mov	r3, sp
 801bfce:	4622      	mov	r2, r4
 801bfd0:	a941      	add	r1, sp, #260	@ 0x104
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	f000 f9ae 	bl	801c334 <_scanf_chars>
 801bfd8:	2801      	cmp	r0, #1
 801bfda:	d064      	beq.n	801c0a6 <__ssvfiscanf_r+0x2e2>
 801bfdc:	2802      	cmp	r0, #2
 801bfde:	f47f af19 	bne.w	801be14 <__ssvfiscanf_r+0x50>
 801bfe2:	e7c9      	b.n	801bf78 <__ssvfiscanf_r+0x1b4>
 801bfe4:	220a      	movs	r2, #10
 801bfe6:	e7d7      	b.n	801bf98 <__ssvfiscanf_r+0x1d4>
 801bfe8:	4629      	mov	r1, r5
 801bfea:	4640      	mov	r0, r8
 801bfec:	f000 fbfe 	bl	801c7ec <__sccl>
 801bff0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801bff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bff6:	9341      	str	r3, [sp, #260]	@ 0x104
 801bff8:	4605      	mov	r5, r0
 801bffa:	2301      	movs	r3, #1
 801bffc:	e7d7      	b.n	801bfae <__ssvfiscanf_r+0x1ea>
 801bffe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801c000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c004:	9341      	str	r3, [sp, #260]	@ 0x104
 801c006:	2300      	movs	r3, #0
 801c008:	e7d1      	b.n	801bfae <__ssvfiscanf_r+0x1ea>
 801c00a:	2302      	movs	r3, #2
 801c00c:	e7cf      	b.n	801bfae <__ssvfiscanf_r+0x1ea>
 801c00e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801c010:	06c3      	lsls	r3, r0, #27
 801c012:	f53f aeff 	bmi.w	801be14 <__ssvfiscanf_r+0x50>
 801c016:	9b00      	ldr	r3, [sp, #0]
 801c018:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801c01a:	1d19      	adds	r1, r3, #4
 801c01c:	9100      	str	r1, [sp, #0]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	07c0      	lsls	r0, r0, #31
 801c022:	bf4c      	ite	mi
 801c024:	801a      	strhmi	r2, [r3, #0]
 801c026:	601a      	strpl	r2, [r3, #0]
 801c028:	e6f4      	b.n	801be14 <__ssvfiscanf_r+0x50>
 801c02a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c02c:	4621      	mov	r1, r4
 801c02e:	4630      	mov	r0, r6
 801c030:	4798      	blx	r3
 801c032:	2800      	cmp	r0, #0
 801c034:	d0bf      	beq.n	801bfb6 <__ssvfiscanf_r+0x1f2>
 801c036:	e79f      	b.n	801bf78 <__ssvfiscanf_r+0x1b4>
 801c038:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801c03a:	3201      	adds	r2, #1
 801c03c:	9245      	str	r2, [sp, #276]	@ 0x114
 801c03e:	6862      	ldr	r2, [r4, #4]
 801c040:	3a01      	subs	r2, #1
 801c042:	2a00      	cmp	r2, #0
 801c044:	6062      	str	r2, [r4, #4]
 801c046:	dd02      	ble.n	801c04e <__ssvfiscanf_r+0x28a>
 801c048:	3301      	adds	r3, #1
 801c04a:	6023      	str	r3, [r4, #0]
 801c04c:	e7b6      	b.n	801bfbc <__ssvfiscanf_r+0x1f8>
 801c04e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c050:	4621      	mov	r1, r4
 801c052:	4630      	mov	r0, r6
 801c054:	4798      	blx	r3
 801c056:	2800      	cmp	r0, #0
 801c058:	d0b0      	beq.n	801bfbc <__ssvfiscanf_r+0x1f8>
 801c05a:	e78d      	b.n	801bf78 <__ssvfiscanf_r+0x1b4>
 801c05c:	2b04      	cmp	r3, #4
 801c05e:	dc0f      	bgt.n	801c080 <__ssvfiscanf_r+0x2bc>
 801c060:	466b      	mov	r3, sp
 801c062:	4622      	mov	r2, r4
 801c064:	a941      	add	r1, sp, #260	@ 0x104
 801c066:	4630      	mov	r0, r6
 801c068:	f000 f9be 	bl	801c3e8 <_scanf_i>
 801c06c:	e7b4      	b.n	801bfd8 <__ssvfiscanf_r+0x214>
 801c06e:	bf00      	nop
 801c070:	0801bd11 	.word	0x0801bd11
 801c074:	0801bd8b 	.word	0x0801bd8b
 801c078:	0801f491 	.word	0x0801f491
 801c07c:	0801f3d8 	.word	0x0801f3d8
 801c080:	4b0a      	ldr	r3, [pc, #40]	@ (801c0ac <__ssvfiscanf_r+0x2e8>)
 801c082:	2b00      	cmp	r3, #0
 801c084:	f43f aec6 	beq.w	801be14 <__ssvfiscanf_r+0x50>
 801c088:	466b      	mov	r3, sp
 801c08a:	4622      	mov	r2, r4
 801c08c:	a941      	add	r1, sp, #260	@ 0x104
 801c08e:	4630      	mov	r0, r6
 801c090:	f3af 8000 	nop.w
 801c094:	e7a0      	b.n	801bfd8 <__ssvfiscanf_r+0x214>
 801c096:	89a3      	ldrh	r3, [r4, #12]
 801c098:	065b      	lsls	r3, r3, #25
 801c09a:	f53f af71 	bmi.w	801bf80 <__ssvfiscanf_r+0x1bc>
 801c09e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801c0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0a6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801c0a8:	e7f9      	b.n	801c09e <__ssvfiscanf_r+0x2da>
 801c0aa:	bf00      	nop
 801c0ac:	00000000 	.word	0x00000000

0801c0b0 <__sfputc_r>:
 801c0b0:	6893      	ldr	r3, [r2, #8]
 801c0b2:	3b01      	subs	r3, #1
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	b410      	push	{r4}
 801c0b8:	6093      	str	r3, [r2, #8]
 801c0ba:	da08      	bge.n	801c0ce <__sfputc_r+0x1e>
 801c0bc:	6994      	ldr	r4, [r2, #24]
 801c0be:	42a3      	cmp	r3, r4
 801c0c0:	db01      	blt.n	801c0c6 <__sfputc_r+0x16>
 801c0c2:	290a      	cmp	r1, #10
 801c0c4:	d103      	bne.n	801c0ce <__sfputc_r+0x1e>
 801c0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0ca:	f7fd bc9d 	b.w	8019a08 <__swbuf_r>
 801c0ce:	6813      	ldr	r3, [r2, #0]
 801c0d0:	1c58      	adds	r0, r3, #1
 801c0d2:	6010      	str	r0, [r2, #0]
 801c0d4:	7019      	strb	r1, [r3, #0]
 801c0d6:	4608      	mov	r0, r1
 801c0d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0dc:	4770      	bx	lr

0801c0de <__sfputs_r>:
 801c0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0e0:	4606      	mov	r6, r0
 801c0e2:	460f      	mov	r7, r1
 801c0e4:	4614      	mov	r4, r2
 801c0e6:	18d5      	adds	r5, r2, r3
 801c0e8:	42ac      	cmp	r4, r5
 801c0ea:	d101      	bne.n	801c0f0 <__sfputs_r+0x12>
 801c0ec:	2000      	movs	r0, #0
 801c0ee:	e007      	b.n	801c100 <__sfputs_r+0x22>
 801c0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0f4:	463a      	mov	r2, r7
 801c0f6:	4630      	mov	r0, r6
 801c0f8:	f7ff ffda 	bl	801c0b0 <__sfputc_r>
 801c0fc:	1c43      	adds	r3, r0, #1
 801c0fe:	d1f3      	bne.n	801c0e8 <__sfputs_r+0xa>
 801c100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c104 <_vfiprintf_r>:
 801c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c108:	460d      	mov	r5, r1
 801c10a:	b09d      	sub	sp, #116	@ 0x74
 801c10c:	4614      	mov	r4, r2
 801c10e:	4698      	mov	r8, r3
 801c110:	4606      	mov	r6, r0
 801c112:	b118      	cbz	r0, 801c11c <_vfiprintf_r+0x18>
 801c114:	6a03      	ldr	r3, [r0, #32]
 801c116:	b90b      	cbnz	r3, 801c11c <_vfiprintf_r+0x18>
 801c118:	f7fd fb28 	bl	801976c <__sinit>
 801c11c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c11e:	07d9      	lsls	r1, r3, #31
 801c120:	d405      	bmi.n	801c12e <_vfiprintf_r+0x2a>
 801c122:	89ab      	ldrh	r3, [r5, #12]
 801c124:	059a      	lsls	r2, r3, #22
 801c126:	d402      	bmi.n	801c12e <_vfiprintf_r+0x2a>
 801c128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c12a:	f7fd fdca 	bl	8019cc2 <__retarget_lock_acquire_recursive>
 801c12e:	89ab      	ldrh	r3, [r5, #12]
 801c130:	071b      	lsls	r3, r3, #28
 801c132:	d501      	bpl.n	801c138 <_vfiprintf_r+0x34>
 801c134:	692b      	ldr	r3, [r5, #16]
 801c136:	b99b      	cbnz	r3, 801c160 <_vfiprintf_r+0x5c>
 801c138:	4629      	mov	r1, r5
 801c13a:	4630      	mov	r0, r6
 801c13c:	f7fd fca2 	bl	8019a84 <__swsetup_r>
 801c140:	b170      	cbz	r0, 801c160 <_vfiprintf_r+0x5c>
 801c142:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c144:	07dc      	lsls	r4, r3, #31
 801c146:	d504      	bpl.n	801c152 <_vfiprintf_r+0x4e>
 801c148:	f04f 30ff 	mov.w	r0, #4294967295
 801c14c:	b01d      	add	sp, #116	@ 0x74
 801c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c152:	89ab      	ldrh	r3, [r5, #12]
 801c154:	0598      	lsls	r0, r3, #22
 801c156:	d4f7      	bmi.n	801c148 <_vfiprintf_r+0x44>
 801c158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c15a:	f7fd fdb3 	bl	8019cc4 <__retarget_lock_release_recursive>
 801c15e:	e7f3      	b.n	801c148 <_vfiprintf_r+0x44>
 801c160:	2300      	movs	r3, #0
 801c162:	9309      	str	r3, [sp, #36]	@ 0x24
 801c164:	2320      	movs	r3, #32
 801c166:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c16a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c16e:	2330      	movs	r3, #48	@ 0x30
 801c170:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c320 <_vfiprintf_r+0x21c>
 801c174:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c178:	f04f 0901 	mov.w	r9, #1
 801c17c:	4623      	mov	r3, r4
 801c17e:	469a      	mov	sl, r3
 801c180:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c184:	b10a      	cbz	r2, 801c18a <_vfiprintf_r+0x86>
 801c186:	2a25      	cmp	r2, #37	@ 0x25
 801c188:	d1f9      	bne.n	801c17e <_vfiprintf_r+0x7a>
 801c18a:	ebba 0b04 	subs.w	fp, sl, r4
 801c18e:	d00b      	beq.n	801c1a8 <_vfiprintf_r+0xa4>
 801c190:	465b      	mov	r3, fp
 801c192:	4622      	mov	r2, r4
 801c194:	4629      	mov	r1, r5
 801c196:	4630      	mov	r0, r6
 801c198:	f7ff ffa1 	bl	801c0de <__sfputs_r>
 801c19c:	3001      	adds	r0, #1
 801c19e:	f000 80a7 	beq.w	801c2f0 <_vfiprintf_r+0x1ec>
 801c1a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c1a4:	445a      	add	r2, fp
 801c1a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801c1a8:	f89a 3000 	ldrb.w	r3, [sl]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	f000 809f 	beq.w	801c2f0 <_vfiprintf_r+0x1ec>
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	f04f 32ff 	mov.w	r2, #4294967295
 801c1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1bc:	f10a 0a01 	add.w	sl, sl, #1
 801c1c0:	9304      	str	r3, [sp, #16]
 801c1c2:	9307      	str	r3, [sp, #28]
 801c1c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c1c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801c1ca:	4654      	mov	r4, sl
 801c1cc:	2205      	movs	r2, #5
 801c1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1d2:	4853      	ldr	r0, [pc, #332]	@ (801c320 <_vfiprintf_r+0x21c>)
 801c1d4:	f7ec f82c 	bl	8008230 <memchr>
 801c1d8:	9a04      	ldr	r2, [sp, #16]
 801c1da:	b9d8      	cbnz	r0, 801c214 <_vfiprintf_r+0x110>
 801c1dc:	06d1      	lsls	r1, r2, #27
 801c1de:	bf44      	itt	mi
 801c1e0:	2320      	movmi	r3, #32
 801c1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c1e6:	0713      	lsls	r3, r2, #28
 801c1e8:	bf44      	itt	mi
 801c1ea:	232b      	movmi	r3, #43	@ 0x2b
 801c1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c1f0:	f89a 3000 	ldrb.w	r3, [sl]
 801c1f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1f6:	d015      	beq.n	801c224 <_vfiprintf_r+0x120>
 801c1f8:	9a07      	ldr	r2, [sp, #28]
 801c1fa:	4654      	mov	r4, sl
 801c1fc:	2000      	movs	r0, #0
 801c1fe:	f04f 0c0a 	mov.w	ip, #10
 801c202:	4621      	mov	r1, r4
 801c204:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c208:	3b30      	subs	r3, #48	@ 0x30
 801c20a:	2b09      	cmp	r3, #9
 801c20c:	d94b      	bls.n	801c2a6 <_vfiprintf_r+0x1a2>
 801c20e:	b1b0      	cbz	r0, 801c23e <_vfiprintf_r+0x13a>
 801c210:	9207      	str	r2, [sp, #28]
 801c212:	e014      	b.n	801c23e <_vfiprintf_r+0x13a>
 801c214:	eba0 0308 	sub.w	r3, r0, r8
 801c218:	fa09 f303 	lsl.w	r3, r9, r3
 801c21c:	4313      	orrs	r3, r2
 801c21e:	9304      	str	r3, [sp, #16]
 801c220:	46a2      	mov	sl, r4
 801c222:	e7d2      	b.n	801c1ca <_vfiprintf_r+0xc6>
 801c224:	9b03      	ldr	r3, [sp, #12]
 801c226:	1d19      	adds	r1, r3, #4
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	9103      	str	r1, [sp, #12]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	bfbb      	ittet	lt
 801c230:	425b      	neglt	r3, r3
 801c232:	f042 0202 	orrlt.w	r2, r2, #2
 801c236:	9307      	strge	r3, [sp, #28]
 801c238:	9307      	strlt	r3, [sp, #28]
 801c23a:	bfb8      	it	lt
 801c23c:	9204      	strlt	r2, [sp, #16]
 801c23e:	7823      	ldrb	r3, [r4, #0]
 801c240:	2b2e      	cmp	r3, #46	@ 0x2e
 801c242:	d10a      	bne.n	801c25a <_vfiprintf_r+0x156>
 801c244:	7863      	ldrb	r3, [r4, #1]
 801c246:	2b2a      	cmp	r3, #42	@ 0x2a
 801c248:	d132      	bne.n	801c2b0 <_vfiprintf_r+0x1ac>
 801c24a:	9b03      	ldr	r3, [sp, #12]
 801c24c:	1d1a      	adds	r2, r3, #4
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	9203      	str	r2, [sp, #12]
 801c252:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c256:	3402      	adds	r4, #2
 801c258:	9305      	str	r3, [sp, #20]
 801c25a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c330 <_vfiprintf_r+0x22c>
 801c25e:	7821      	ldrb	r1, [r4, #0]
 801c260:	2203      	movs	r2, #3
 801c262:	4650      	mov	r0, sl
 801c264:	f7eb ffe4 	bl	8008230 <memchr>
 801c268:	b138      	cbz	r0, 801c27a <_vfiprintf_r+0x176>
 801c26a:	9b04      	ldr	r3, [sp, #16]
 801c26c:	eba0 000a 	sub.w	r0, r0, sl
 801c270:	2240      	movs	r2, #64	@ 0x40
 801c272:	4082      	lsls	r2, r0
 801c274:	4313      	orrs	r3, r2
 801c276:	3401      	adds	r4, #1
 801c278:	9304      	str	r3, [sp, #16]
 801c27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c27e:	4829      	ldr	r0, [pc, #164]	@ (801c324 <_vfiprintf_r+0x220>)
 801c280:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c284:	2206      	movs	r2, #6
 801c286:	f7eb ffd3 	bl	8008230 <memchr>
 801c28a:	2800      	cmp	r0, #0
 801c28c:	d03f      	beq.n	801c30e <_vfiprintf_r+0x20a>
 801c28e:	4b26      	ldr	r3, [pc, #152]	@ (801c328 <_vfiprintf_r+0x224>)
 801c290:	bb1b      	cbnz	r3, 801c2da <_vfiprintf_r+0x1d6>
 801c292:	9b03      	ldr	r3, [sp, #12]
 801c294:	3307      	adds	r3, #7
 801c296:	f023 0307 	bic.w	r3, r3, #7
 801c29a:	3308      	adds	r3, #8
 801c29c:	9303      	str	r3, [sp, #12]
 801c29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2a0:	443b      	add	r3, r7
 801c2a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c2a4:	e76a      	b.n	801c17c <_vfiprintf_r+0x78>
 801c2a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2aa:	460c      	mov	r4, r1
 801c2ac:	2001      	movs	r0, #1
 801c2ae:	e7a8      	b.n	801c202 <_vfiprintf_r+0xfe>
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	3401      	adds	r4, #1
 801c2b4:	9305      	str	r3, [sp, #20]
 801c2b6:	4619      	mov	r1, r3
 801c2b8:	f04f 0c0a 	mov.w	ip, #10
 801c2bc:	4620      	mov	r0, r4
 801c2be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2c2:	3a30      	subs	r2, #48	@ 0x30
 801c2c4:	2a09      	cmp	r2, #9
 801c2c6:	d903      	bls.n	801c2d0 <_vfiprintf_r+0x1cc>
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d0c6      	beq.n	801c25a <_vfiprintf_r+0x156>
 801c2cc:	9105      	str	r1, [sp, #20]
 801c2ce:	e7c4      	b.n	801c25a <_vfiprintf_r+0x156>
 801c2d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	2301      	movs	r3, #1
 801c2d8:	e7f0      	b.n	801c2bc <_vfiprintf_r+0x1b8>
 801c2da:	ab03      	add	r3, sp, #12
 801c2dc:	9300      	str	r3, [sp, #0]
 801c2de:	462a      	mov	r2, r5
 801c2e0:	4b12      	ldr	r3, [pc, #72]	@ (801c32c <_vfiprintf_r+0x228>)
 801c2e2:	a904      	add	r1, sp, #16
 801c2e4:	4630      	mov	r0, r6
 801c2e6:	f7fc fdff 	bl	8018ee8 <_printf_float>
 801c2ea:	4607      	mov	r7, r0
 801c2ec:	1c78      	adds	r0, r7, #1
 801c2ee:	d1d6      	bne.n	801c29e <_vfiprintf_r+0x19a>
 801c2f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c2f2:	07d9      	lsls	r1, r3, #31
 801c2f4:	d405      	bmi.n	801c302 <_vfiprintf_r+0x1fe>
 801c2f6:	89ab      	ldrh	r3, [r5, #12]
 801c2f8:	059a      	lsls	r2, r3, #22
 801c2fa:	d402      	bmi.n	801c302 <_vfiprintf_r+0x1fe>
 801c2fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c2fe:	f7fd fce1 	bl	8019cc4 <__retarget_lock_release_recursive>
 801c302:	89ab      	ldrh	r3, [r5, #12]
 801c304:	065b      	lsls	r3, r3, #25
 801c306:	f53f af1f 	bmi.w	801c148 <_vfiprintf_r+0x44>
 801c30a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c30c:	e71e      	b.n	801c14c <_vfiprintf_r+0x48>
 801c30e:	ab03      	add	r3, sp, #12
 801c310:	9300      	str	r3, [sp, #0]
 801c312:	462a      	mov	r2, r5
 801c314:	4b05      	ldr	r3, [pc, #20]	@ (801c32c <_vfiprintf_r+0x228>)
 801c316:	a904      	add	r1, sp, #16
 801c318:	4630      	mov	r0, r6
 801c31a:	f7fd f87d 	bl	8019418 <_printf_i>
 801c31e:	e7e4      	b.n	801c2ea <_vfiprintf_r+0x1e6>
 801c320:	0801f3d2 	.word	0x0801f3d2
 801c324:	0801f3dc 	.word	0x0801f3dc
 801c328:	08018ee9 	.word	0x08018ee9
 801c32c:	0801c0df 	.word	0x0801c0df
 801c330:	0801f3d8 	.word	0x0801f3d8

0801c334 <_scanf_chars>:
 801c334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c338:	4615      	mov	r5, r2
 801c33a:	688a      	ldr	r2, [r1, #8]
 801c33c:	4680      	mov	r8, r0
 801c33e:	460c      	mov	r4, r1
 801c340:	b932      	cbnz	r2, 801c350 <_scanf_chars+0x1c>
 801c342:	698a      	ldr	r2, [r1, #24]
 801c344:	2a00      	cmp	r2, #0
 801c346:	bf14      	ite	ne
 801c348:	f04f 32ff 	movne.w	r2, #4294967295
 801c34c:	2201      	moveq	r2, #1
 801c34e:	608a      	str	r2, [r1, #8]
 801c350:	6822      	ldr	r2, [r4, #0]
 801c352:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801c3e4 <_scanf_chars+0xb0>
 801c356:	06d1      	lsls	r1, r2, #27
 801c358:	bf5f      	itttt	pl
 801c35a:	681a      	ldrpl	r2, [r3, #0]
 801c35c:	1d11      	addpl	r1, r2, #4
 801c35e:	6019      	strpl	r1, [r3, #0]
 801c360:	6816      	ldrpl	r6, [r2, #0]
 801c362:	2700      	movs	r7, #0
 801c364:	69a0      	ldr	r0, [r4, #24]
 801c366:	b188      	cbz	r0, 801c38c <_scanf_chars+0x58>
 801c368:	2801      	cmp	r0, #1
 801c36a:	d107      	bne.n	801c37c <_scanf_chars+0x48>
 801c36c:	682b      	ldr	r3, [r5, #0]
 801c36e:	781a      	ldrb	r2, [r3, #0]
 801c370:	6963      	ldr	r3, [r4, #20]
 801c372:	5c9b      	ldrb	r3, [r3, r2]
 801c374:	b953      	cbnz	r3, 801c38c <_scanf_chars+0x58>
 801c376:	2f00      	cmp	r7, #0
 801c378:	d031      	beq.n	801c3de <_scanf_chars+0xaa>
 801c37a:	e022      	b.n	801c3c2 <_scanf_chars+0x8e>
 801c37c:	2802      	cmp	r0, #2
 801c37e:	d120      	bne.n	801c3c2 <_scanf_chars+0x8e>
 801c380:	682b      	ldr	r3, [r5, #0]
 801c382:	781b      	ldrb	r3, [r3, #0]
 801c384:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c388:	071b      	lsls	r3, r3, #28
 801c38a:	d41a      	bmi.n	801c3c2 <_scanf_chars+0x8e>
 801c38c:	6823      	ldr	r3, [r4, #0]
 801c38e:	06da      	lsls	r2, r3, #27
 801c390:	bf5e      	ittt	pl
 801c392:	682b      	ldrpl	r3, [r5, #0]
 801c394:	781b      	ldrbpl	r3, [r3, #0]
 801c396:	f806 3b01 	strbpl.w	r3, [r6], #1
 801c39a:	682a      	ldr	r2, [r5, #0]
 801c39c:	686b      	ldr	r3, [r5, #4]
 801c39e:	3201      	adds	r2, #1
 801c3a0:	602a      	str	r2, [r5, #0]
 801c3a2:	68a2      	ldr	r2, [r4, #8]
 801c3a4:	3b01      	subs	r3, #1
 801c3a6:	3a01      	subs	r2, #1
 801c3a8:	606b      	str	r3, [r5, #4]
 801c3aa:	3701      	adds	r7, #1
 801c3ac:	60a2      	str	r2, [r4, #8]
 801c3ae:	b142      	cbz	r2, 801c3c2 <_scanf_chars+0x8e>
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	dcd7      	bgt.n	801c364 <_scanf_chars+0x30>
 801c3b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c3b8:	4629      	mov	r1, r5
 801c3ba:	4640      	mov	r0, r8
 801c3bc:	4798      	blx	r3
 801c3be:	2800      	cmp	r0, #0
 801c3c0:	d0d0      	beq.n	801c364 <_scanf_chars+0x30>
 801c3c2:	6823      	ldr	r3, [r4, #0]
 801c3c4:	f013 0310 	ands.w	r3, r3, #16
 801c3c8:	d105      	bne.n	801c3d6 <_scanf_chars+0xa2>
 801c3ca:	68e2      	ldr	r2, [r4, #12]
 801c3cc:	3201      	adds	r2, #1
 801c3ce:	60e2      	str	r2, [r4, #12]
 801c3d0:	69a2      	ldr	r2, [r4, #24]
 801c3d2:	b102      	cbz	r2, 801c3d6 <_scanf_chars+0xa2>
 801c3d4:	7033      	strb	r3, [r6, #0]
 801c3d6:	6923      	ldr	r3, [r4, #16]
 801c3d8:	443b      	add	r3, r7
 801c3da:	6123      	str	r3, [r4, #16]
 801c3dc:	2000      	movs	r0, #0
 801c3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3e2:	bf00      	nop
 801c3e4:	0801f491 	.word	0x0801f491

0801c3e8 <_scanf_i>:
 801c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3ec:	4698      	mov	r8, r3
 801c3ee:	4b74      	ldr	r3, [pc, #464]	@ (801c5c0 <_scanf_i+0x1d8>)
 801c3f0:	460c      	mov	r4, r1
 801c3f2:	4682      	mov	sl, r0
 801c3f4:	4616      	mov	r6, r2
 801c3f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c3fa:	b087      	sub	sp, #28
 801c3fc:	ab03      	add	r3, sp, #12
 801c3fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c402:	4b70      	ldr	r3, [pc, #448]	@ (801c5c4 <_scanf_i+0x1dc>)
 801c404:	69a1      	ldr	r1, [r4, #24]
 801c406:	4a70      	ldr	r2, [pc, #448]	@ (801c5c8 <_scanf_i+0x1e0>)
 801c408:	2903      	cmp	r1, #3
 801c40a:	bf08      	it	eq
 801c40c:	461a      	moveq	r2, r3
 801c40e:	68a3      	ldr	r3, [r4, #8]
 801c410:	9201      	str	r2, [sp, #4]
 801c412:	1e5a      	subs	r2, r3, #1
 801c414:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801c418:	bf88      	it	hi
 801c41a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801c41e:	4627      	mov	r7, r4
 801c420:	bf82      	ittt	hi
 801c422:	eb03 0905 	addhi.w	r9, r3, r5
 801c426:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801c42a:	60a3      	strhi	r3, [r4, #8]
 801c42c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801c430:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801c434:	bf98      	it	ls
 801c436:	f04f 0900 	movls.w	r9, #0
 801c43a:	6023      	str	r3, [r4, #0]
 801c43c:	463d      	mov	r5, r7
 801c43e:	f04f 0b00 	mov.w	fp, #0
 801c442:	6831      	ldr	r1, [r6, #0]
 801c444:	ab03      	add	r3, sp, #12
 801c446:	7809      	ldrb	r1, [r1, #0]
 801c448:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801c44c:	2202      	movs	r2, #2
 801c44e:	f7eb feef 	bl	8008230 <memchr>
 801c452:	b328      	cbz	r0, 801c4a0 <_scanf_i+0xb8>
 801c454:	f1bb 0f01 	cmp.w	fp, #1
 801c458:	d159      	bne.n	801c50e <_scanf_i+0x126>
 801c45a:	6862      	ldr	r2, [r4, #4]
 801c45c:	b92a      	cbnz	r2, 801c46a <_scanf_i+0x82>
 801c45e:	6822      	ldr	r2, [r4, #0]
 801c460:	2108      	movs	r1, #8
 801c462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801c466:	6061      	str	r1, [r4, #4]
 801c468:	6022      	str	r2, [r4, #0]
 801c46a:	6822      	ldr	r2, [r4, #0]
 801c46c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801c470:	6022      	str	r2, [r4, #0]
 801c472:	68a2      	ldr	r2, [r4, #8]
 801c474:	1e51      	subs	r1, r2, #1
 801c476:	60a1      	str	r1, [r4, #8]
 801c478:	b192      	cbz	r2, 801c4a0 <_scanf_i+0xb8>
 801c47a:	6832      	ldr	r2, [r6, #0]
 801c47c:	1c51      	adds	r1, r2, #1
 801c47e:	6031      	str	r1, [r6, #0]
 801c480:	7812      	ldrb	r2, [r2, #0]
 801c482:	f805 2b01 	strb.w	r2, [r5], #1
 801c486:	6872      	ldr	r2, [r6, #4]
 801c488:	3a01      	subs	r2, #1
 801c48a:	2a00      	cmp	r2, #0
 801c48c:	6072      	str	r2, [r6, #4]
 801c48e:	dc07      	bgt.n	801c4a0 <_scanf_i+0xb8>
 801c490:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801c494:	4631      	mov	r1, r6
 801c496:	4650      	mov	r0, sl
 801c498:	4790      	blx	r2
 801c49a:	2800      	cmp	r0, #0
 801c49c:	f040 8085 	bne.w	801c5aa <_scanf_i+0x1c2>
 801c4a0:	f10b 0b01 	add.w	fp, fp, #1
 801c4a4:	f1bb 0f03 	cmp.w	fp, #3
 801c4a8:	d1cb      	bne.n	801c442 <_scanf_i+0x5a>
 801c4aa:	6863      	ldr	r3, [r4, #4]
 801c4ac:	b90b      	cbnz	r3, 801c4b2 <_scanf_i+0xca>
 801c4ae:	230a      	movs	r3, #10
 801c4b0:	6063      	str	r3, [r4, #4]
 801c4b2:	6863      	ldr	r3, [r4, #4]
 801c4b4:	4945      	ldr	r1, [pc, #276]	@ (801c5cc <_scanf_i+0x1e4>)
 801c4b6:	6960      	ldr	r0, [r4, #20]
 801c4b8:	1ac9      	subs	r1, r1, r3
 801c4ba:	f000 f997 	bl	801c7ec <__sccl>
 801c4be:	f04f 0b00 	mov.w	fp, #0
 801c4c2:	68a3      	ldr	r3, [r4, #8]
 801c4c4:	6822      	ldr	r2, [r4, #0]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d03d      	beq.n	801c546 <_scanf_i+0x15e>
 801c4ca:	6831      	ldr	r1, [r6, #0]
 801c4cc:	6960      	ldr	r0, [r4, #20]
 801c4ce:	f891 c000 	ldrb.w	ip, [r1]
 801c4d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	d035      	beq.n	801c546 <_scanf_i+0x15e>
 801c4da:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801c4de:	d124      	bne.n	801c52a <_scanf_i+0x142>
 801c4e0:	0510      	lsls	r0, r2, #20
 801c4e2:	d522      	bpl.n	801c52a <_scanf_i+0x142>
 801c4e4:	f10b 0b01 	add.w	fp, fp, #1
 801c4e8:	f1b9 0f00 	cmp.w	r9, #0
 801c4ec:	d003      	beq.n	801c4f6 <_scanf_i+0x10e>
 801c4ee:	3301      	adds	r3, #1
 801c4f0:	f109 39ff 	add.w	r9, r9, #4294967295
 801c4f4:	60a3      	str	r3, [r4, #8]
 801c4f6:	6873      	ldr	r3, [r6, #4]
 801c4f8:	3b01      	subs	r3, #1
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	6073      	str	r3, [r6, #4]
 801c4fe:	dd1b      	ble.n	801c538 <_scanf_i+0x150>
 801c500:	6833      	ldr	r3, [r6, #0]
 801c502:	3301      	adds	r3, #1
 801c504:	6033      	str	r3, [r6, #0]
 801c506:	68a3      	ldr	r3, [r4, #8]
 801c508:	3b01      	subs	r3, #1
 801c50a:	60a3      	str	r3, [r4, #8]
 801c50c:	e7d9      	b.n	801c4c2 <_scanf_i+0xda>
 801c50e:	f1bb 0f02 	cmp.w	fp, #2
 801c512:	d1ae      	bne.n	801c472 <_scanf_i+0x8a>
 801c514:	6822      	ldr	r2, [r4, #0]
 801c516:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801c51a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801c51e:	d1c4      	bne.n	801c4aa <_scanf_i+0xc2>
 801c520:	2110      	movs	r1, #16
 801c522:	6061      	str	r1, [r4, #4]
 801c524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801c528:	e7a2      	b.n	801c470 <_scanf_i+0x88>
 801c52a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801c52e:	6022      	str	r2, [r4, #0]
 801c530:	780b      	ldrb	r3, [r1, #0]
 801c532:	f805 3b01 	strb.w	r3, [r5], #1
 801c536:	e7de      	b.n	801c4f6 <_scanf_i+0x10e>
 801c538:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c53c:	4631      	mov	r1, r6
 801c53e:	4650      	mov	r0, sl
 801c540:	4798      	blx	r3
 801c542:	2800      	cmp	r0, #0
 801c544:	d0df      	beq.n	801c506 <_scanf_i+0x11e>
 801c546:	6823      	ldr	r3, [r4, #0]
 801c548:	05d9      	lsls	r1, r3, #23
 801c54a:	d50d      	bpl.n	801c568 <_scanf_i+0x180>
 801c54c:	42bd      	cmp	r5, r7
 801c54e:	d909      	bls.n	801c564 <_scanf_i+0x17c>
 801c550:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801c554:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c558:	4632      	mov	r2, r6
 801c55a:	4650      	mov	r0, sl
 801c55c:	4798      	blx	r3
 801c55e:	f105 39ff 	add.w	r9, r5, #4294967295
 801c562:	464d      	mov	r5, r9
 801c564:	42bd      	cmp	r5, r7
 801c566:	d028      	beq.n	801c5ba <_scanf_i+0x1d2>
 801c568:	6822      	ldr	r2, [r4, #0]
 801c56a:	f012 0210 	ands.w	r2, r2, #16
 801c56e:	d113      	bne.n	801c598 <_scanf_i+0x1b0>
 801c570:	702a      	strb	r2, [r5, #0]
 801c572:	6863      	ldr	r3, [r4, #4]
 801c574:	9e01      	ldr	r6, [sp, #4]
 801c576:	4639      	mov	r1, r7
 801c578:	4650      	mov	r0, sl
 801c57a:	47b0      	blx	r6
 801c57c:	f8d8 3000 	ldr.w	r3, [r8]
 801c580:	6821      	ldr	r1, [r4, #0]
 801c582:	1d1a      	adds	r2, r3, #4
 801c584:	f8c8 2000 	str.w	r2, [r8]
 801c588:	f011 0f20 	tst.w	r1, #32
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	d00f      	beq.n	801c5b0 <_scanf_i+0x1c8>
 801c590:	6018      	str	r0, [r3, #0]
 801c592:	68e3      	ldr	r3, [r4, #12]
 801c594:	3301      	adds	r3, #1
 801c596:	60e3      	str	r3, [r4, #12]
 801c598:	6923      	ldr	r3, [r4, #16]
 801c59a:	1bed      	subs	r5, r5, r7
 801c59c:	445d      	add	r5, fp
 801c59e:	442b      	add	r3, r5
 801c5a0:	6123      	str	r3, [r4, #16]
 801c5a2:	2000      	movs	r0, #0
 801c5a4:	b007      	add	sp, #28
 801c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5aa:	f04f 0b00 	mov.w	fp, #0
 801c5ae:	e7ca      	b.n	801c546 <_scanf_i+0x15e>
 801c5b0:	07ca      	lsls	r2, r1, #31
 801c5b2:	bf4c      	ite	mi
 801c5b4:	8018      	strhmi	r0, [r3, #0]
 801c5b6:	6018      	strpl	r0, [r3, #0]
 801c5b8:	e7eb      	b.n	801c592 <_scanf_i+0x1aa>
 801c5ba:	2001      	movs	r0, #1
 801c5bc:	e7f2      	b.n	801c5a4 <_scanf_i+0x1bc>
 801c5be:	bf00      	nop
 801c5c0:	0801d620 	.word	0x0801d620
 801c5c4:	0801caa5 	.word	0x0801caa5
 801c5c8:	0801cb85 	.word	0x0801cb85
 801c5cc:	0801f3f3 	.word	0x0801f3f3

0801c5d0 <__sflush_r>:
 801c5d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5d8:	0716      	lsls	r6, r2, #28
 801c5da:	4605      	mov	r5, r0
 801c5dc:	460c      	mov	r4, r1
 801c5de:	d454      	bmi.n	801c68a <__sflush_r+0xba>
 801c5e0:	684b      	ldr	r3, [r1, #4]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	dc02      	bgt.n	801c5ec <__sflush_r+0x1c>
 801c5e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	dd48      	ble.n	801c67e <__sflush_r+0xae>
 801c5ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c5ee:	2e00      	cmp	r6, #0
 801c5f0:	d045      	beq.n	801c67e <__sflush_r+0xae>
 801c5f2:	2300      	movs	r3, #0
 801c5f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c5f8:	682f      	ldr	r7, [r5, #0]
 801c5fa:	6a21      	ldr	r1, [r4, #32]
 801c5fc:	602b      	str	r3, [r5, #0]
 801c5fe:	d030      	beq.n	801c662 <__sflush_r+0x92>
 801c600:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c602:	89a3      	ldrh	r3, [r4, #12]
 801c604:	0759      	lsls	r1, r3, #29
 801c606:	d505      	bpl.n	801c614 <__sflush_r+0x44>
 801c608:	6863      	ldr	r3, [r4, #4]
 801c60a:	1ad2      	subs	r2, r2, r3
 801c60c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c60e:	b10b      	cbz	r3, 801c614 <__sflush_r+0x44>
 801c610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c612:	1ad2      	subs	r2, r2, r3
 801c614:	2300      	movs	r3, #0
 801c616:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c618:	6a21      	ldr	r1, [r4, #32]
 801c61a:	4628      	mov	r0, r5
 801c61c:	47b0      	blx	r6
 801c61e:	1c43      	adds	r3, r0, #1
 801c620:	89a3      	ldrh	r3, [r4, #12]
 801c622:	d106      	bne.n	801c632 <__sflush_r+0x62>
 801c624:	6829      	ldr	r1, [r5, #0]
 801c626:	291d      	cmp	r1, #29
 801c628:	d82b      	bhi.n	801c682 <__sflush_r+0xb2>
 801c62a:	4a2a      	ldr	r2, [pc, #168]	@ (801c6d4 <__sflush_r+0x104>)
 801c62c:	40ca      	lsrs	r2, r1
 801c62e:	07d6      	lsls	r6, r2, #31
 801c630:	d527      	bpl.n	801c682 <__sflush_r+0xb2>
 801c632:	2200      	movs	r2, #0
 801c634:	6062      	str	r2, [r4, #4]
 801c636:	04d9      	lsls	r1, r3, #19
 801c638:	6922      	ldr	r2, [r4, #16]
 801c63a:	6022      	str	r2, [r4, #0]
 801c63c:	d504      	bpl.n	801c648 <__sflush_r+0x78>
 801c63e:	1c42      	adds	r2, r0, #1
 801c640:	d101      	bne.n	801c646 <__sflush_r+0x76>
 801c642:	682b      	ldr	r3, [r5, #0]
 801c644:	b903      	cbnz	r3, 801c648 <__sflush_r+0x78>
 801c646:	6560      	str	r0, [r4, #84]	@ 0x54
 801c648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c64a:	602f      	str	r7, [r5, #0]
 801c64c:	b1b9      	cbz	r1, 801c67e <__sflush_r+0xae>
 801c64e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c652:	4299      	cmp	r1, r3
 801c654:	d002      	beq.n	801c65c <__sflush_r+0x8c>
 801c656:	4628      	mov	r0, r5
 801c658:	f7fe f9ae 	bl	801a9b8 <_free_r>
 801c65c:	2300      	movs	r3, #0
 801c65e:	6363      	str	r3, [r4, #52]	@ 0x34
 801c660:	e00d      	b.n	801c67e <__sflush_r+0xae>
 801c662:	2301      	movs	r3, #1
 801c664:	4628      	mov	r0, r5
 801c666:	47b0      	blx	r6
 801c668:	4602      	mov	r2, r0
 801c66a:	1c50      	adds	r0, r2, #1
 801c66c:	d1c9      	bne.n	801c602 <__sflush_r+0x32>
 801c66e:	682b      	ldr	r3, [r5, #0]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d0c6      	beq.n	801c602 <__sflush_r+0x32>
 801c674:	2b1d      	cmp	r3, #29
 801c676:	d001      	beq.n	801c67c <__sflush_r+0xac>
 801c678:	2b16      	cmp	r3, #22
 801c67a:	d11e      	bne.n	801c6ba <__sflush_r+0xea>
 801c67c:	602f      	str	r7, [r5, #0]
 801c67e:	2000      	movs	r0, #0
 801c680:	e022      	b.n	801c6c8 <__sflush_r+0xf8>
 801c682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c686:	b21b      	sxth	r3, r3
 801c688:	e01b      	b.n	801c6c2 <__sflush_r+0xf2>
 801c68a:	690f      	ldr	r7, [r1, #16]
 801c68c:	2f00      	cmp	r7, #0
 801c68e:	d0f6      	beq.n	801c67e <__sflush_r+0xae>
 801c690:	0793      	lsls	r3, r2, #30
 801c692:	680e      	ldr	r6, [r1, #0]
 801c694:	bf08      	it	eq
 801c696:	694b      	ldreq	r3, [r1, #20]
 801c698:	600f      	str	r7, [r1, #0]
 801c69a:	bf18      	it	ne
 801c69c:	2300      	movne	r3, #0
 801c69e:	eba6 0807 	sub.w	r8, r6, r7
 801c6a2:	608b      	str	r3, [r1, #8]
 801c6a4:	f1b8 0f00 	cmp.w	r8, #0
 801c6a8:	dde9      	ble.n	801c67e <__sflush_r+0xae>
 801c6aa:	6a21      	ldr	r1, [r4, #32]
 801c6ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c6ae:	4643      	mov	r3, r8
 801c6b0:	463a      	mov	r2, r7
 801c6b2:	4628      	mov	r0, r5
 801c6b4:	47b0      	blx	r6
 801c6b6:	2800      	cmp	r0, #0
 801c6b8:	dc08      	bgt.n	801c6cc <__sflush_r+0xfc>
 801c6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6c2:	81a3      	strh	r3, [r4, #12]
 801c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 801c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6cc:	4407      	add	r7, r0
 801c6ce:	eba8 0800 	sub.w	r8, r8, r0
 801c6d2:	e7e7      	b.n	801c6a4 <__sflush_r+0xd4>
 801c6d4:	20400001 	.word	0x20400001

0801c6d8 <_fflush_r>:
 801c6d8:	b538      	push	{r3, r4, r5, lr}
 801c6da:	690b      	ldr	r3, [r1, #16]
 801c6dc:	4605      	mov	r5, r0
 801c6de:	460c      	mov	r4, r1
 801c6e0:	b913      	cbnz	r3, 801c6e8 <_fflush_r+0x10>
 801c6e2:	2500      	movs	r5, #0
 801c6e4:	4628      	mov	r0, r5
 801c6e6:	bd38      	pop	{r3, r4, r5, pc}
 801c6e8:	b118      	cbz	r0, 801c6f2 <_fflush_r+0x1a>
 801c6ea:	6a03      	ldr	r3, [r0, #32]
 801c6ec:	b90b      	cbnz	r3, 801c6f2 <_fflush_r+0x1a>
 801c6ee:	f7fd f83d 	bl	801976c <__sinit>
 801c6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d0f3      	beq.n	801c6e2 <_fflush_r+0xa>
 801c6fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c6fc:	07d0      	lsls	r0, r2, #31
 801c6fe:	d404      	bmi.n	801c70a <_fflush_r+0x32>
 801c700:	0599      	lsls	r1, r3, #22
 801c702:	d402      	bmi.n	801c70a <_fflush_r+0x32>
 801c704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c706:	f7fd fadc 	bl	8019cc2 <__retarget_lock_acquire_recursive>
 801c70a:	4628      	mov	r0, r5
 801c70c:	4621      	mov	r1, r4
 801c70e:	f7ff ff5f 	bl	801c5d0 <__sflush_r>
 801c712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c714:	07da      	lsls	r2, r3, #31
 801c716:	4605      	mov	r5, r0
 801c718:	d4e4      	bmi.n	801c6e4 <_fflush_r+0xc>
 801c71a:	89a3      	ldrh	r3, [r4, #12]
 801c71c:	059b      	lsls	r3, r3, #22
 801c71e:	d4e1      	bmi.n	801c6e4 <_fflush_r+0xc>
 801c720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c722:	f7fd facf 	bl	8019cc4 <__retarget_lock_release_recursive>
 801c726:	e7dd      	b.n	801c6e4 <_fflush_r+0xc>

0801c728 <__swhatbuf_r>:
 801c728:	b570      	push	{r4, r5, r6, lr}
 801c72a:	460c      	mov	r4, r1
 801c72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c730:	2900      	cmp	r1, #0
 801c732:	b096      	sub	sp, #88	@ 0x58
 801c734:	4615      	mov	r5, r2
 801c736:	461e      	mov	r6, r3
 801c738:	da0d      	bge.n	801c756 <__swhatbuf_r+0x2e>
 801c73a:	89a3      	ldrh	r3, [r4, #12]
 801c73c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c740:	f04f 0100 	mov.w	r1, #0
 801c744:	bf14      	ite	ne
 801c746:	2340      	movne	r3, #64	@ 0x40
 801c748:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c74c:	2000      	movs	r0, #0
 801c74e:	6031      	str	r1, [r6, #0]
 801c750:	602b      	str	r3, [r5, #0]
 801c752:	b016      	add	sp, #88	@ 0x58
 801c754:	bd70      	pop	{r4, r5, r6, pc}
 801c756:	466a      	mov	r2, sp
 801c758:	f000 f8d6 	bl	801c908 <_fstat_r>
 801c75c:	2800      	cmp	r0, #0
 801c75e:	dbec      	blt.n	801c73a <__swhatbuf_r+0x12>
 801c760:	9901      	ldr	r1, [sp, #4]
 801c762:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c766:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c76a:	4259      	negs	r1, r3
 801c76c:	4159      	adcs	r1, r3
 801c76e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c772:	e7eb      	b.n	801c74c <__swhatbuf_r+0x24>

0801c774 <__smakebuf_r>:
 801c774:	898b      	ldrh	r3, [r1, #12]
 801c776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c778:	079d      	lsls	r5, r3, #30
 801c77a:	4606      	mov	r6, r0
 801c77c:	460c      	mov	r4, r1
 801c77e:	d507      	bpl.n	801c790 <__smakebuf_r+0x1c>
 801c780:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c784:	6023      	str	r3, [r4, #0]
 801c786:	6123      	str	r3, [r4, #16]
 801c788:	2301      	movs	r3, #1
 801c78a:	6163      	str	r3, [r4, #20]
 801c78c:	b003      	add	sp, #12
 801c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c790:	ab01      	add	r3, sp, #4
 801c792:	466a      	mov	r2, sp
 801c794:	f7ff ffc8 	bl	801c728 <__swhatbuf_r>
 801c798:	9f00      	ldr	r7, [sp, #0]
 801c79a:	4605      	mov	r5, r0
 801c79c:	4639      	mov	r1, r7
 801c79e:	4630      	mov	r0, r6
 801c7a0:	f7fb fc32 	bl	8018008 <_malloc_r>
 801c7a4:	b948      	cbnz	r0, 801c7ba <__smakebuf_r+0x46>
 801c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7aa:	059a      	lsls	r2, r3, #22
 801c7ac:	d4ee      	bmi.n	801c78c <__smakebuf_r+0x18>
 801c7ae:	f023 0303 	bic.w	r3, r3, #3
 801c7b2:	f043 0302 	orr.w	r3, r3, #2
 801c7b6:	81a3      	strh	r3, [r4, #12]
 801c7b8:	e7e2      	b.n	801c780 <__smakebuf_r+0xc>
 801c7ba:	89a3      	ldrh	r3, [r4, #12]
 801c7bc:	6020      	str	r0, [r4, #0]
 801c7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c7c2:	81a3      	strh	r3, [r4, #12]
 801c7c4:	9b01      	ldr	r3, [sp, #4]
 801c7c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c7ca:	b15b      	cbz	r3, 801c7e4 <__smakebuf_r+0x70>
 801c7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c7d0:	4630      	mov	r0, r6
 801c7d2:	f000 f8ab 	bl	801c92c <_isatty_r>
 801c7d6:	b128      	cbz	r0, 801c7e4 <__smakebuf_r+0x70>
 801c7d8:	89a3      	ldrh	r3, [r4, #12]
 801c7da:	f023 0303 	bic.w	r3, r3, #3
 801c7de:	f043 0301 	orr.w	r3, r3, #1
 801c7e2:	81a3      	strh	r3, [r4, #12]
 801c7e4:	89a3      	ldrh	r3, [r4, #12]
 801c7e6:	431d      	orrs	r5, r3
 801c7e8:	81a5      	strh	r5, [r4, #12]
 801c7ea:	e7cf      	b.n	801c78c <__smakebuf_r+0x18>

0801c7ec <__sccl>:
 801c7ec:	b570      	push	{r4, r5, r6, lr}
 801c7ee:	780b      	ldrb	r3, [r1, #0]
 801c7f0:	4604      	mov	r4, r0
 801c7f2:	2b5e      	cmp	r3, #94	@ 0x5e
 801c7f4:	bf0b      	itete	eq
 801c7f6:	784b      	ldrbeq	r3, [r1, #1]
 801c7f8:	1c4a      	addne	r2, r1, #1
 801c7fa:	1c8a      	addeq	r2, r1, #2
 801c7fc:	2100      	movne	r1, #0
 801c7fe:	bf08      	it	eq
 801c800:	2101      	moveq	r1, #1
 801c802:	3801      	subs	r0, #1
 801c804:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801c808:	f800 1f01 	strb.w	r1, [r0, #1]!
 801c80c:	42a8      	cmp	r0, r5
 801c80e:	d1fb      	bne.n	801c808 <__sccl+0x1c>
 801c810:	b90b      	cbnz	r3, 801c816 <__sccl+0x2a>
 801c812:	1e50      	subs	r0, r2, #1
 801c814:	bd70      	pop	{r4, r5, r6, pc}
 801c816:	f081 0101 	eor.w	r1, r1, #1
 801c81a:	54e1      	strb	r1, [r4, r3]
 801c81c:	4610      	mov	r0, r2
 801c81e:	4602      	mov	r2, r0
 801c820:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c824:	2d2d      	cmp	r5, #45	@ 0x2d
 801c826:	d005      	beq.n	801c834 <__sccl+0x48>
 801c828:	2d5d      	cmp	r5, #93	@ 0x5d
 801c82a:	d016      	beq.n	801c85a <__sccl+0x6e>
 801c82c:	2d00      	cmp	r5, #0
 801c82e:	d0f1      	beq.n	801c814 <__sccl+0x28>
 801c830:	462b      	mov	r3, r5
 801c832:	e7f2      	b.n	801c81a <__sccl+0x2e>
 801c834:	7846      	ldrb	r6, [r0, #1]
 801c836:	2e5d      	cmp	r6, #93	@ 0x5d
 801c838:	d0fa      	beq.n	801c830 <__sccl+0x44>
 801c83a:	42b3      	cmp	r3, r6
 801c83c:	dcf8      	bgt.n	801c830 <__sccl+0x44>
 801c83e:	3002      	adds	r0, #2
 801c840:	461a      	mov	r2, r3
 801c842:	3201      	adds	r2, #1
 801c844:	4296      	cmp	r6, r2
 801c846:	54a1      	strb	r1, [r4, r2]
 801c848:	dcfb      	bgt.n	801c842 <__sccl+0x56>
 801c84a:	1af2      	subs	r2, r6, r3
 801c84c:	3a01      	subs	r2, #1
 801c84e:	1c5d      	adds	r5, r3, #1
 801c850:	42b3      	cmp	r3, r6
 801c852:	bfa8      	it	ge
 801c854:	2200      	movge	r2, #0
 801c856:	18ab      	adds	r3, r5, r2
 801c858:	e7e1      	b.n	801c81e <__sccl+0x32>
 801c85a:	4610      	mov	r0, r2
 801c85c:	e7da      	b.n	801c814 <__sccl+0x28>

0801c85e <__submore>:
 801c85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c862:	460c      	mov	r4, r1
 801c864:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801c866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c86a:	4299      	cmp	r1, r3
 801c86c:	d11d      	bne.n	801c8aa <__submore+0x4c>
 801c86e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801c872:	f7fb fbc9 	bl	8018008 <_malloc_r>
 801c876:	b918      	cbnz	r0, 801c880 <__submore+0x22>
 801c878:	f04f 30ff 	mov.w	r0, #4294967295
 801c87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c884:	63a3      	str	r3, [r4, #56]	@ 0x38
 801c886:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801c88a:	6360      	str	r0, [r4, #52]	@ 0x34
 801c88c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801c890:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801c894:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801c898:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801c89c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801c8a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801c8a4:	6020      	str	r0, [r4, #0]
 801c8a6:	2000      	movs	r0, #0
 801c8a8:	e7e8      	b.n	801c87c <__submore+0x1e>
 801c8aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801c8ac:	0077      	lsls	r7, r6, #1
 801c8ae:	463a      	mov	r2, r7
 801c8b0:	f7fb fc3e 	bl	8018130 <_realloc_r>
 801c8b4:	4605      	mov	r5, r0
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	d0de      	beq.n	801c878 <__submore+0x1a>
 801c8ba:	eb00 0806 	add.w	r8, r0, r6
 801c8be:	4601      	mov	r1, r0
 801c8c0:	4632      	mov	r2, r6
 801c8c2:	4640      	mov	r0, r8
 801c8c4:	f7fd fa07 	bl	8019cd6 <memcpy>
 801c8c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801c8cc:	f8c4 8000 	str.w	r8, [r4]
 801c8d0:	e7e9      	b.n	801c8a6 <__submore+0x48>

0801c8d2 <memmove>:
 801c8d2:	4288      	cmp	r0, r1
 801c8d4:	b510      	push	{r4, lr}
 801c8d6:	eb01 0402 	add.w	r4, r1, r2
 801c8da:	d902      	bls.n	801c8e2 <memmove+0x10>
 801c8dc:	4284      	cmp	r4, r0
 801c8de:	4623      	mov	r3, r4
 801c8e0:	d807      	bhi.n	801c8f2 <memmove+0x20>
 801c8e2:	1e43      	subs	r3, r0, #1
 801c8e4:	42a1      	cmp	r1, r4
 801c8e6:	d008      	beq.n	801c8fa <memmove+0x28>
 801c8e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c8ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c8f0:	e7f8      	b.n	801c8e4 <memmove+0x12>
 801c8f2:	4402      	add	r2, r0
 801c8f4:	4601      	mov	r1, r0
 801c8f6:	428a      	cmp	r2, r1
 801c8f8:	d100      	bne.n	801c8fc <memmove+0x2a>
 801c8fa:	bd10      	pop	{r4, pc}
 801c8fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c900:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c904:	e7f7      	b.n	801c8f6 <memmove+0x24>
	...

0801c908 <_fstat_r>:
 801c908:	b538      	push	{r3, r4, r5, lr}
 801c90a:	4d07      	ldr	r5, [pc, #28]	@ (801c928 <_fstat_r+0x20>)
 801c90c:	2300      	movs	r3, #0
 801c90e:	4604      	mov	r4, r0
 801c910:	4608      	mov	r0, r1
 801c912:	4611      	mov	r1, r2
 801c914:	602b      	str	r3, [r5, #0]
 801c916:	f7f4 f987 	bl	8010c28 <_fstat>
 801c91a:	1c43      	adds	r3, r0, #1
 801c91c:	d102      	bne.n	801c924 <_fstat_r+0x1c>
 801c91e:	682b      	ldr	r3, [r5, #0]
 801c920:	b103      	cbz	r3, 801c924 <_fstat_r+0x1c>
 801c922:	6023      	str	r3, [r4, #0]
 801c924:	bd38      	pop	{r3, r4, r5, pc}
 801c926:	bf00      	nop
 801c928:	20014440 	.word	0x20014440

0801c92c <_isatty_r>:
 801c92c:	b538      	push	{r3, r4, r5, lr}
 801c92e:	4d06      	ldr	r5, [pc, #24]	@ (801c948 <_isatty_r+0x1c>)
 801c930:	2300      	movs	r3, #0
 801c932:	4604      	mov	r4, r0
 801c934:	4608      	mov	r0, r1
 801c936:	602b      	str	r3, [r5, #0]
 801c938:	f7f4 f986 	bl	8010c48 <_isatty>
 801c93c:	1c43      	adds	r3, r0, #1
 801c93e:	d102      	bne.n	801c946 <_isatty_r+0x1a>
 801c940:	682b      	ldr	r3, [r5, #0]
 801c942:	b103      	cbz	r3, 801c946 <_isatty_r+0x1a>
 801c944:	6023      	str	r3, [r4, #0]
 801c946:	bd38      	pop	{r3, r4, r5, pc}
 801c948:	20014440 	.word	0x20014440

0801c94c <__assert_func>:
 801c94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c94e:	4614      	mov	r4, r2
 801c950:	461a      	mov	r2, r3
 801c952:	4b09      	ldr	r3, [pc, #36]	@ (801c978 <__assert_func+0x2c>)
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	4605      	mov	r5, r0
 801c958:	68d8      	ldr	r0, [r3, #12]
 801c95a:	b14c      	cbz	r4, 801c970 <__assert_func+0x24>
 801c95c:	4b07      	ldr	r3, [pc, #28]	@ (801c97c <__assert_func+0x30>)
 801c95e:	9100      	str	r1, [sp, #0]
 801c960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c964:	4906      	ldr	r1, [pc, #24]	@ (801c980 <__assert_func+0x34>)
 801c966:	462b      	mov	r3, r5
 801c968:	f000 f90e 	bl	801cb88 <fiprintf>
 801c96c:	f000 f91e 	bl	801cbac <abort>
 801c970:	4b04      	ldr	r3, [pc, #16]	@ (801c984 <__assert_func+0x38>)
 801c972:	461c      	mov	r4, r3
 801c974:	e7f3      	b.n	801c95e <__assert_func+0x12>
 801c976:	bf00      	nop
 801c978:	20000214 	.word	0x20000214
 801c97c:	0801f3fe 	.word	0x0801f3fe
 801c980:	0801f40b 	.word	0x0801f40b
 801c984:	0801f439 	.word	0x0801f439

0801c988 <_calloc_r>:
 801c988:	b570      	push	{r4, r5, r6, lr}
 801c98a:	fba1 5402 	umull	r5, r4, r1, r2
 801c98e:	b934      	cbnz	r4, 801c99e <_calloc_r+0x16>
 801c990:	4629      	mov	r1, r5
 801c992:	f7fb fb39 	bl	8018008 <_malloc_r>
 801c996:	4606      	mov	r6, r0
 801c998:	b928      	cbnz	r0, 801c9a6 <_calloc_r+0x1e>
 801c99a:	4630      	mov	r0, r6
 801c99c:	bd70      	pop	{r4, r5, r6, pc}
 801c99e:	220c      	movs	r2, #12
 801c9a0:	6002      	str	r2, [r0, #0]
 801c9a2:	2600      	movs	r6, #0
 801c9a4:	e7f9      	b.n	801c99a <_calloc_r+0x12>
 801c9a6:	462a      	mov	r2, r5
 801c9a8:	4621      	mov	r1, r4
 801c9aa:	f7fd f8c1 	bl	8019b30 <memset>
 801c9ae:	e7f4      	b.n	801c99a <_calloc_r+0x12>

0801c9b0 <_strtol_l.isra.0>:
 801c9b0:	2b24      	cmp	r3, #36	@ 0x24
 801c9b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9b6:	4686      	mov	lr, r0
 801c9b8:	4690      	mov	r8, r2
 801c9ba:	d801      	bhi.n	801c9c0 <_strtol_l.isra.0+0x10>
 801c9bc:	2b01      	cmp	r3, #1
 801c9be:	d106      	bne.n	801c9ce <_strtol_l.isra.0+0x1e>
 801c9c0:	f7fd f954 	bl	8019c6c <__errno>
 801c9c4:	2316      	movs	r3, #22
 801c9c6:	6003      	str	r3, [r0, #0]
 801c9c8:	2000      	movs	r0, #0
 801c9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9ce:	4834      	ldr	r0, [pc, #208]	@ (801caa0 <_strtol_l.isra.0+0xf0>)
 801c9d0:	460d      	mov	r5, r1
 801c9d2:	462a      	mov	r2, r5
 801c9d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c9d8:	5d06      	ldrb	r6, [r0, r4]
 801c9da:	f016 0608 	ands.w	r6, r6, #8
 801c9de:	d1f8      	bne.n	801c9d2 <_strtol_l.isra.0+0x22>
 801c9e0:	2c2d      	cmp	r4, #45	@ 0x2d
 801c9e2:	d110      	bne.n	801ca06 <_strtol_l.isra.0+0x56>
 801c9e4:	782c      	ldrb	r4, [r5, #0]
 801c9e6:	2601      	movs	r6, #1
 801c9e8:	1c95      	adds	r5, r2, #2
 801c9ea:	f033 0210 	bics.w	r2, r3, #16
 801c9ee:	d115      	bne.n	801ca1c <_strtol_l.isra.0+0x6c>
 801c9f0:	2c30      	cmp	r4, #48	@ 0x30
 801c9f2:	d10d      	bne.n	801ca10 <_strtol_l.isra.0+0x60>
 801c9f4:	782a      	ldrb	r2, [r5, #0]
 801c9f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c9fa:	2a58      	cmp	r2, #88	@ 0x58
 801c9fc:	d108      	bne.n	801ca10 <_strtol_l.isra.0+0x60>
 801c9fe:	786c      	ldrb	r4, [r5, #1]
 801ca00:	3502      	adds	r5, #2
 801ca02:	2310      	movs	r3, #16
 801ca04:	e00a      	b.n	801ca1c <_strtol_l.isra.0+0x6c>
 801ca06:	2c2b      	cmp	r4, #43	@ 0x2b
 801ca08:	bf04      	itt	eq
 801ca0a:	782c      	ldrbeq	r4, [r5, #0]
 801ca0c:	1c95      	addeq	r5, r2, #2
 801ca0e:	e7ec      	b.n	801c9ea <_strtol_l.isra.0+0x3a>
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d1f6      	bne.n	801ca02 <_strtol_l.isra.0+0x52>
 801ca14:	2c30      	cmp	r4, #48	@ 0x30
 801ca16:	bf14      	ite	ne
 801ca18:	230a      	movne	r3, #10
 801ca1a:	2308      	moveq	r3, #8
 801ca1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801ca20:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ca24:	2200      	movs	r2, #0
 801ca26:	fbbc f9f3 	udiv	r9, ip, r3
 801ca2a:	4610      	mov	r0, r2
 801ca2c:	fb03 ca19 	mls	sl, r3, r9, ip
 801ca30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ca34:	2f09      	cmp	r7, #9
 801ca36:	d80f      	bhi.n	801ca58 <_strtol_l.isra.0+0xa8>
 801ca38:	463c      	mov	r4, r7
 801ca3a:	42a3      	cmp	r3, r4
 801ca3c:	dd1b      	ble.n	801ca76 <_strtol_l.isra.0+0xc6>
 801ca3e:	1c57      	adds	r7, r2, #1
 801ca40:	d007      	beq.n	801ca52 <_strtol_l.isra.0+0xa2>
 801ca42:	4581      	cmp	r9, r0
 801ca44:	d314      	bcc.n	801ca70 <_strtol_l.isra.0+0xc0>
 801ca46:	d101      	bne.n	801ca4c <_strtol_l.isra.0+0x9c>
 801ca48:	45a2      	cmp	sl, r4
 801ca4a:	db11      	blt.n	801ca70 <_strtol_l.isra.0+0xc0>
 801ca4c:	fb00 4003 	mla	r0, r0, r3, r4
 801ca50:	2201      	movs	r2, #1
 801ca52:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ca56:	e7eb      	b.n	801ca30 <_strtol_l.isra.0+0x80>
 801ca58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ca5c:	2f19      	cmp	r7, #25
 801ca5e:	d801      	bhi.n	801ca64 <_strtol_l.isra.0+0xb4>
 801ca60:	3c37      	subs	r4, #55	@ 0x37
 801ca62:	e7ea      	b.n	801ca3a <_strtol_l.isra.0+0x8a>
 801ca64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ca68:	2f19      	cmp	r7, #25
 801ca6a:	d804      	bhi.n	801ca76 <_strtol_l.isra.0+0xc6>
 801ca6c:	3c57      	subs	r4, #87	@ 0x57
 801ca6e:	e7e4      	b.n	801ca3a <_strtol_l.isra.0+0x8a>
 801ca70:	f04f 32ff 	mov.w	r2, #4294967295
 801ca74:	e7ed      	b.n	801ca52 <_strtol_l.isra.0+0xa2>
 801ca76:	1c53      	adds	r3, r2, #1
 801ca78:	d108      	bne.n	801ca8c <_strtol_l.isra.0+0xdc>
 801ca7a:	2322      	movs	r3, #34	@ 0x22
 801ca7c:	f8ce 3000 	str.w	r3, [lr]
 801ca80:	4660      	mov	r0, ip
 801ca82:	f1b8 0f00 	cmp.w	r8, #0
 801ca86:	d0a0      	beq.n	801c9ca <_strtol_l.isra.0+0x1a>
 801ca88:	1e69      	subs	r1, r5, #1
 801ca8a:	e006      	b.n	801ca9a <_strtol_l.isra.0+0xea>
 801ca8c:	b106      	cbz	r6, 801ca90 <_strtol_l.isra.0+0xe0>
 801ca8e:	4240      	negs	r0, r0
 801ca90:	f1b8 0f00 	cmp.w	r8, #0
 801ca94:	d099      	beq.n	801c9ca <_strtol_l.isra.0+0x1a>
 801ca96:	2a00      	cmp	r2, #0
 801ca98:	d1f6      	bne.n	801ca88 <_strtol_l.isra.0+0xd8>
 801ca9a:	f8c8 1000 	str.w	r1, [r8]
 801ca9e:	e794      	b.n	801c9ca <_strtol_l.isra.0+0x1a>
 801caa0:	0801f491 	.word	0x0801f491

0801caa4 <_strtol_r>:
 801caa4:	f7ff bf84 	b.w	801c9b0 <_strtol_l.isra.0>

0801caa8 <_strtoul_l.isra.0>:
 801caa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801caac:	4e34      	ldr	r6, [pc, #208]	@ (801cb80 <_strtoul_l.isra.0+0xd8>)
 801caae:	4686      	mov	lr, r0
 801cab0:	460d      	mov	r5, r1
 801cab2:	4628      	mov	r0, r5
 801cab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cab8:	5d37      	ldrb	r7, [r6, r4]
 801caba:	f017 0708 	ands.w	r7, r7, #8
 801cabe:	d1f8      	bne.n	801cab2 <_strtoul_l.isra.0+0xa>
 801cac0:	2c2d      	cmp	r4, #45	@ 0x2d
 801cac2:	d110      	bne.n	801cae6 <_strtoul_l.isra.0+0x3e>
 801cac4:	782c      	ldrb	r4, [r5, #0]
 801cac6:	2701      	movs	r7, #1
 801cac8:	1c85      	adds	r5, r0, #2
 801caca:	f033 0010 	bics.w	r0, r3, #16
 801cace:	d115      	bne.n	801cafc <_strtoul_l.isra.0+0x54>
 801cad0:	2c30      	cmp	r4, #48	@ 0x30
 801cad2:	d10d      	bne.n	801caf0 <_strtoul_l.isra.0+0x48>
 801cad4:	7828      	ldrb	r0, [r5, #0]
 801cad6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801cada:	2858      	cmp	r0, #88	@ 0x58
 801cadc:	d108      	bne.n	801caf0 <_strtoul_l.isra.0+0x48>
 801cade:	786c      	ldrb	r4, [r5, #1]
 801cae0:	3502      	adds	r5, #2
 801cae2:	2310      	movs	r3, #16
 801cae4:	e00a      	b.n	801cafc <_strtoul_l.isra.0+0x54>
 801cae6:	2c2b      	cmp	r4, #43	@ 0x2b
 801cae8:	bf04      	itt	eq
 801caea:	782c      	ldrbeq	r4, [r5, #0]
 801caec:	1c85      	addeq	r5, r0, #2
 801caee:	e7ec      	b.n	801caca <_strtoul_l.isra.0+0x22>
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d1f6      	bne.n	801cae2 <_strtoul_l.isra.0+0x3a>
 801caf4:	2c30      	cmp	r4, #48	@ 0x30
 801caf6:	bf14      	ite	ne
 801caf8:	230a      	movne	r3, #10
 801cafa:	2308      	moveq	r3, #8
 801cafc:	f04f 38ff 	mov.w	r8, #4294967295
 801cb00:	2600      	movs	r6, #0
 801cb02:	fbb8 f8f3 	udiv	r8, r8, r3
 801cb06:	fb03 f908 	mul.w	r9, r3, r8
 801cb0a:	ea6f 0909 	mvn.w	r9, r9
 801cb0e:	4630      	mov	r0, r6
 801cb10:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cb14:	f1bc 0f09 	cmp.w	ip, #9
 801cb18:	d810      	bhi.n	801cb3c <_strtoul_l.isra.0+0x94>
 801cb1a:	4664      	mov	r4, ip
 801cb1c:	42a3      	cmp	r3, r4
 801cb1e:	dd1e      	ble.n	801cb5e <_strtoul_l.isra.0+0xb6>
 801cb20:	f1b6 3fff 	cmp.w	r6, #4294967295
 801cb24:	d007      	beq.n	801cb36 <_strtoul_l.isra.0+0x8e>
 801cb26:	4580      	cmp	r8, r0
 801cb28:	d316      	bcc.n	801cb58 <_strtoul_l.isra.0+0xb0>
 801cb2a:	d101      	bne.n	801cb30 <_strtoul_l.isra.0+0x88>
 801cb2c:	45a1      	cmp	r9, r4
 801cb2e:	db13      	blt.n	801cb58 <_strtoul_l.isra.0+0xb0>
 801cb30:	fb00 4003 	mla	r0, r0, r3, r4
 801cb34:	2601      	movs	r6, #1
 801cb36:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cb3a:	e7e9      	b.n	801cb10 <_strtoul_l.isra.0+0x68>
 801cb3c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801cb40:	f1bc 0f19 	cmp.w	ip, #25
 801cb44:	d801      	bhi.n	801cb4a <_strtoul_l.isra.0+0xa2>
 801cb46:	3c37      	subs	r4, #55	@ 0x37
 801cb48:	e7e8      	b.n	801cb1c <_strtoul_l.isra.0+0x74>
 801cb4a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cb4e:	f1bc 0f19 	cmp.w	ip, #25
 801cb52:	d804      	bhi.n	801cb5e <_strtoul_l.isra.0+0xb6>
 801cb54:	3c57      	subs	r4, #87	@ 0x57
 801cb56:	e7e1      	b.n	801cb1c <_strtoul_l.isra.0+0x74>
 801cb58:	f04f 36ff 	mov.w	r6, #4294967295
 801cb5c:	e7eb      	b.n	801cb36 <_strtoul_l.isra.0+0x8e>
 801cb5e:	1c73      	adds	r3, r6, #1
 801cb60:	d106      	bne.n	801cb70 <_strtoul_l.isra.0+0xc8>
 801cb62:	2322      	movs	r3, #34	@ 0x22
 801cb64:	f8ce 3000 	str.w	r3, [lr]
 801cb68:	4630      	mov	r0, r6
 801cb6a:	b932      	cbnz	r2, 801cb7a <_strtoul_l.isra.0+0xd2>
 801cb6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb70:	b107      	cbz	r7, 801cb74 <_strtoul_l.isra.0+0xcc>
 801cb72:	4240      	negs	r0, r0
 801cb74:	2a00      	cmp	r2, #0
 801cb76:	d0f9      	beq.n	801cb6c <_strtoul_l.isra.0+0xc4>
 801cb78:	b106      	cbz	r6, 801cb7c <_strtoul_l.isra.0+0xd4>
 801cb7a:	1e69      	subs	r1, r5, #1
 801cb7c:	6011      	str	r1, [r2, #0]
 801cb7e:	e7f5      	b.n	801cb6c <_strtoul_l.isra.0+0xc4>
 801cb80:	0801f491 	.word	0x0801f491

0801cb84 <_strtoul_r>:
 801cb84:	f7ff bf90 	b.w	801caa8 <_strtoul_l.isra.0>

0801cb88 <fiprintf>:
 801cb88:	b40e      	push	{r1, r2, r3}
 801cb8a:	b503      	push	{r0, r1, lr}
 801cb8c:	4601      	mov	r1, r0
 801cb8e:	ab03      	add	r3, sp, #12
 801cb90:	4805      	ldr	r0, [pc, #20]	@ (801cba8 <fiprintf+0x20>)
 801cb92:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb96:	6800      	ldr	r0, [r0, #0]
 801cb98:	9301      	str	r3, [sp, #4]
 801cb9a:	f7ff fab3 	bl	801c104 <_vfiprintf_r>
 801cb9e:	b002      	add	sp, #8
 801cba0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cba4:	b003      	add	sp, #12
 801cba6:	4770      	bx	lr
 801cba8:	20000214 	.word	0x20000214

0801cbac <abort>:
 801cbac:	b508      	push	{r3, lr}
 801cbae:	2006      	movs	r0, #6
 801cbb0:	f000 f82c 	bl	801cc0c <raise>
 801cbb4:	2001      	movs	r0, #1
 801cbb6:	f7f3 ffe7 	bl	8010b88 <_exit>

0801cbba <_raise_r>:
 801cbba:	291f      	cmp	r1, #31
 801cbbc:	b538      	push	{r3, r4, r5, lr}
 801cbbe:	4605      	mov	r5, r0
 801cbc0:	460c      	mov	r4, r1
 801cbc2:	d904      	bls.n	801cbce <_raise_r+0x14>
 801cbc4:	2316      	movs	r3, #22
 801cbc6:	6003      	str	r3, [r0, #0]
 801cbc8:	f04f 30ff 	mov.w	r0, #4294967295
 801cbcc:	bd38      	pop	{r3, r4, r5, pc}
 801cbce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cbd0:	b112      	cbz	r2, 801cbd8 <_raise_r+0x1e>
 801cbd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cbd6:	b94b      	cbnz	r3, 801cbec <_raise_r+0x32>
 801cbd8:	4628      	mov	r0, r5
 801cbda:	f000 f831 	bl	801cc40 <_getpid_r>
 801cbde:	4622      	mov	r2, r4
 801cbe0:	4601      	mov	r1, r0
 801cbe2:	4628      	mov	r0, r5
 801cbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cbe8:	f000 b818 	b.w	801cc1c <_kill_r>
 801cbec:	2b01      	cmp	r3, #1
 801cbee:	d00a      	beq.n	801cc06 <_raise_r+0x4c>
 801cbf0:	1c59      	adds	r1, r3, #1
 801cbf2:	d103      	bne.n	801cbfc <_raise_r+0x42>
 801cbf4:	2316      	movs	r3, #22
 801cbf6:	6003      	str	r3, [r0, #0]
 801cbf8:	2001      	movs	r0, #1
 801cbfa:	e7e7      	b.n	801cbcc <_raise_r+0x12>
 801cbfc:	2100      	movs	r1, #0
 801cbfe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cc02:	4620      	mov	r0, r4
 801cc04:	4798      	blx	r3
 801cc06:	2000      	movs	r0, #0
 801cc08:	e7e0      	b.n	801cbcc <_raise_r+0x12>
	...

0801cc0c <raise>:
 801cc0c:	4b02      	ldr	r3, [pc, #8]	@ (801cc18 <raise+0xc>)
 801cc0e:	4601      	mov	r1, r0
 801cc10:	6818      	ldr	r0, [r3, #0]
 801cc12:	f7ff bfd2 	b.w	801cbba <_raise_r>
 801cc16:	bf00      	nop
 801cc18:	20000214 	.word	0x20000214

0801cc1c <_kill_r>:
 801cc1c:	b538      	push	{r3, r4, r5, lr}
 801cc1e:	4d07      	ldr	r5, [pc, #28]	@ (801cc3c <_kill_r+0x20>)
 801cc20:	2300      	movs	r3, #0
 801cc22:	4604      	mov	r4, r0
 801cc24:	4608      	mov	r0, r1
 801cc26:	4611      	mov	r1, r2
 801cc28:	602b      	str	r3, [r5, #0]
 801cc2a:	f7f3 ff9d 	bl	8010b68 <_kill>
 801cc2e:	1c43      	adds	r3, r0, #1
 801cc30:	d102      	bne.n	801cc38 <_kill_r+0x1c>
 801cc32:	682b      	ldr	r3, [r5, #0]
 801cc34:	b103      	cbz	r3, 801cc38 <_kill_r+0x1c>
 801cc36:	6023      	str	r3, [r4, #0]
 801cc38:	bd38      	pop	{r3, r4, r5, pc}
 801cc3a:	bf00      	nop
 801cc3c:	20014440 	.word	0x20014440

0801cc40 <_getpid_r>:
 801cc40:	f7f3 bf8a 	b.w	8010b58 <_getpid>

0801cc44 <_sbrk>:
 801cc44:	4a04      	ldr	r2, [pc, #16]	@ (801cc58 <_sbrk+0x14>)
 801cc46:	6811      	ldr	r1, [r2, #0]
 801cc48:	4603      	mov	r3, r0
 801cc4a:	b909      	cbnz	r1, 801cc50 <_sbrk+0xc>
 801cc4c:	4903      	ldr	r1, [pc, #12]	@ (801cc5c <_sbrk+0x18>)
 801cc4e:	6011      	str	r1, [r2, #0]
 801cc50:	6810      	ldr	r0, [r2, #0]
 801cc52:	4403      	add	r3, r0
 801cc54:	6013      	str	r3, [r2, #0]
 801cc56:	4770      	bx	lr
 801cc58:	20014448 	.word	0x20014448
 801cc5c:	20014450 	.word	0x20014450

0801cc60 <_init>:
 801cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc62:	bf00      	nop
 801cc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc66:	bc08      	pop	{r3}
 801cc68:	469e      	mov	lr, r3
 801cc6a:	4770      	bx	lr

0801cc6c <_fini>:
 801cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc6e:	bf00      	nop
 801cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc72:	bc08      	pop	{r3}
 801cc74:	469e      	mov	lr, r3
 801cc76:	4770      	bx	lr
